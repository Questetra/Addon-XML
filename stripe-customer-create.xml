<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2024-04-18</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Stripe: Create Customer</label>
    <label locale="ja">Stripe: 顧客を作成</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-customer-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-customer-create/
    </help-page-url>

    <summary>This item creates a customer object on Stripe.</summary>
    <summary locale="ja">この工程は、Stripe 上に顧客オブジェクトを作成します。</summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_Name" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C2: Customer's Name</label>
            <label locale="ja">C2: 顧客の名前</label>
        </config>
        <config name="conf_Language" required="true" form-type="SELECT_ITEM">
            <label>C3: Language of invoice</label>
            <label locale="ja">C3: 請求書の言語</label>
            <item value="en-US">
                <label>English</label>
                <label locale="ja">英語</label>
            </item>
            <item value="ja-JP">
                <label>Japanese</label>
                <label locale="ja">日本語</label>
            </item>
        </config>
        <config name="conf_Email" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C4: Customer's Email Address</label>
            <label locale="ja">C4: 顧客のメールアドレス</label>
        </config>
        <config name="conf_Description" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C5: Description on customer</label>
            <label locale="ja">C5: 顧客に関するメモ</label>
        </config>
        <config name="conf_CustomerId" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C6: Data item to save ID of the customer</label>
            <label locale="ja">C6: 顧客の ID を保存するデータ項目</label>
        </config>
        <config name="conf_CustomerUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C7: Data item to save URL of the customer detail page</label>
            <label locale="ja">C7: 顧客詳細ページの URL を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

const STRIPE_API_VERSION = '2022-08-01';

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.getObject('conf_Auth');
    const name = retrieveConfig('conf_Name', 'Customer Name', true, 256);
    const language = configs.get('conf_Language');
    const email = retrieveConfig('conf_Email', 'Customer Email', true, 512);
    const description = retrieveConfig('conf_Description', 'Customer Description', false, 350);
    const customerIdDef = configs.getObject('conf_CustomerId');
    const customerUrlDef = configs.getObject('conf_CustomerUrl');

    //// == Calculating / 演算 ==
    const customerId = createCustomer(auth, name, language, email, description);

    //// == Data Updating / ワークフローデータへの代入 ==
    if (customerIdDef !== null) {
        engine.setData(customerIdDef, customerId);
    }
    if (customerUrlDef !== null) {
        engine.setData(customerUrlDef, `https://dashboard.stripe.com/customers/${customerId}`);
    }
}

/**
  * config から設定値を読み出す。以下の場合はエラー
  * - required が true で、空文字列の場合
  * - 長さが maxLength を超える場合
  * @param {String} confName config 名
  * @param {String} label エラー出力用ラベル
  * @param {boolean} required 必須項目かどうか
  * @param {Number} maxLength 最大文字数
  * @return {String} value 設定値
  */
function retrieveConfig(confName, label, required, maxLength) {
    const value = configs.get(confName);
    if (required && value === '') {
        throw `${label} is blank.`;
    }
    if (value.length > maxLength) {
        throw `${label} must be at most ${maxLength} characters.`;
    }
    return value;
}

/**
  * 顧客を作成する
  * @param {AuthSettingWrapper} auth  HTTP 認証設定 トークン直接指定
  * @param {String} name 名前
  * @param {String} language 言語
  * @param {String} email メールアドレス
  * @param {String} description 説明
  * @return {String} customerId 顧客 ID
  */
function createCustomer(auth, name, language, email, description) {
    const apiUri = 'https://api.stripe.com/v1/customers';
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .header('Stripe-Version', STRIPE_API_VERSION)
        .formParam('name', name)
        .formParam('preferred_locales[0]', language)
        .formParam('email', email)
        .formParam('description', description)
        .post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to create customer. status: ${status}`;
    }
    const customerObj = JSON.parse(responseStr);
    return customerObj.id;
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAvJJREFUWEfF
        l19I01EUxz/XKZqWNbVS6cH+UfSUGQlCD0EQRCkoFDkDUzENi6IgkB4sKEgjDStFnVlzalC9+BBR
        IEFBEeVbFP3R/lhRpLRpKHO78dtv021u+pszfnv87Zzv+dxzzj33XoHOP6E1fvleGe9KJF/CDiSZ
        CDIAo8d/BMkggn4BfVE27rX0ir9atOcEKC6WqdEOTkuoAOK0iALjAponY7jY0SF+zOYzK0CJSVYI
        uAQkaAwcaDYm4VS7VTSH8g8JUFokryOpnGdgfzdBk7lTHAmmFRSgxCS7BBxYkOAeEQnd7VZRGKg5
        A2BBVz4z2oxM+AF4at60kCsP1JJQ6dsTUwBKtxscvI+g4bRyjzljWOfdHVMAZSZZL+G4VpVI7AQ0
        tFnFCUXDDaAMGWciv8PY55HEV3zHDTaSlWHlBigzySIJlvmoxsbBxHj4ngIOtllFpxug1CTNQMls
        MjnbIS0d7t6etmpshe9DcKEmfACg3WwVpSpAoXyFIDNQZuMm2J2rfk1Ng6XL4NlTSE4Blwt6LOB0
        QtEhkBKGvsCdHli9FnLzoe8h9L8MASfpN3eJLd4MDPscLFMeTTcgOhocDjXNi5fAr5+wYqUa+NOA
        ClF9FiYnVdtHD2DnLpiYgNhYqKmGr5+DQoyYrSLJCyCDmdQ1gtEIdpv6r7LKbgscroKr9ZC/Dzpa
        VIBr9VBeBYYoiDKotkLA/V7/svnGMVuFYuLugaAAx05C+ipIWa4KShe8eA7ZOdB4GQr2TwMMfoSM
        NfDuLazfALY/YLdD9y148zp4GXwBgpag9goYk2BkGJ48hj15MDoK8QnQUAtZ26DrJrRaVMBRO9Sd
        h7wC2JylAp87A9+G5ipBiCbU0ttbs6HiqFqCkA0XTCigCefchqFgFsWrO2TggxZcP5vpbRjJIAo7
        rMfBbxDpPoo941i/w0gB0P04ViB0vZB4m0nXK5kXQtdL6X/JRLjXcp9M6Pcw8ULo+jTznXK6PU7n
        O2q1+v0D2nRCMMki7aoAAAAASUVORK5CYII=
    </icon>

    <test><![CDATA[

const STRIPE_VERSION = '2022-08-01';
const NAME_MAX_LENGTH = 256;
const EMAIL_MAX_LENGTH = 512;
const DESCRIPTION_MAX_LENGTH = 350;

/**
 * 指定の長さの文字列を作成
 * @param length
 * @return string
 */
const createString = (length) => {
    const sourceStr = 'あいうえおかきくけこ';
    const string = sourceStr.repeat(Math.floor(length / sourceStr.length))
        + sourceStr.slice(0, length % sourceStr.length);
    return string;
}

/**
 * 設定の準備
 * @param name
 * @param language
 * @param email
 * @param description
 * @return returnObj
 * @return returnObj.idDef
 * @return returnObj.urlDef
 */
const prepareConfigs = (name, language, email, description) => {
    const auth = httpClient.createAuthSettingToken('stripe API Key', 'stripe-api-key-12345');
    configs.putObject('conf_Auth', auth);
    configs.put('conf_Name', name);
    configs.put('conf_Language', language);
    configs.put('conf_Email', email);
    configs.put('conf_Description', description);

    // 顧客の ID を保存する文字型データ項目（単一行）を準備し、設定
    const idDef = engine.createDataDefinition('顧客 ID', 1, 'q_customerId', 'STRING_TEXTFIELD');
    engine.setData(idDef, '事前文字列');
    configs.putObject('conf_CustomerId', idDef);

    // 顧客詳細ページの URL を保存する文字型データ項目（単一行）を準備し、設定
    const urlDef = engine.createDataDefinition('顧客 URL', 2, 'q_customerUrl', 'STRING_TEXTFIELD');
    engine.setData(urlDef, '事前文字列');
    configs.putObject('conf_CustomerUrl', urlDef);

    return {idDef, urlDef};
}

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
    }
    if (!failed) {
        fail();
    }
};

/**
 * 顧客の名前が空
 */
test('Customer Name is blank', () => {
    prepareConfigs('', 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');
    assertError(main, 'Customer Name is blank.');
});

/**
 * 顧客の名前が長すぎる
 */
test('Customer Name is too long', () => {
    const name = createString(NAME_MAX_LENGTH + 1);
    prepareConfigs(name, 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');
    assertError(main, `Customer Name must be at most ${NAME_MAX_LENGTH} characters.`);
});

/**
 * 顧客のメールアドレスが空
 */
test('Customer Email is blank', () => {
    prepareConfigs('テスト顧客 1', 'ja-JP', '', 'これはテスト顧客 1 です。');
    assertError(main, 'Customer Email is blank.');
});

/**
 * メールアドレスが長すぎる
 */
test('Customer Email is too long', () => {
    const email = createString(EMAIL_MAX_LENGTH + 1);
    prepareConfigs('テスト顧客 1', 'ja-JP', email, 'これはテスト顧客 1 です。');
    assertError(main, `Customer Email must be at most ${EMAIL_MAX_LENGTH} characters.`);
});

/**
 * 説明が長すぎる
 */
test('Customer Description is too long', () => {
    const description = createString(DESCRIPTION_MAX_LENGTH + 1);
    prepareConfigs('テスト顧客 1', 'ja-JP', 'test1@example.com', description);
    assertError(main, `Customer Description must be at most ${DESCRIPTION_MAX_LENGTH} characters.`);
});

/**
 * 顧客を作成する API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.contentType
 * @param request.body
 * @param name
 * @param language
 * @param email
 * @param description
 */
const assertRequest = ({url, method, headers, contentType, body}, name, language, email, description) => {
    expect(url).toEqual('https://api.stripe.com/v1/customers');
    expect(method).toEqual('POST');
    expect(headers.get('Stripe-Version')).toEqual(STRIPE_VERSION);
    expect(contentType).startsWith('application/x-www-form-urlencoded');
    let expectedBody = `name=${encodeURIComponent(name)}`
        + `&${encodeURIComponent('preferred_locales[0]')}=${language}`
        + `&email=${encodeURIComponent(email)}`
        + `&description=${encodeURIComponent(description)}`;
    expectedBody = expectedBody.replace(/%20/g, '+'); // HttpRequestWrapper#formParam() はスペースを + に置き換える
    expect(body).toEqual(expectedBody);
};

/**
 * 顧客を作成する HTTP リクエストで失敗
 */
test('Fail to create customer', () => {
    prepareConfigs('テスト顧客 1', 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'テスト顧客 1', 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError(main, 'Failed to create customer. status: 400');
});

/**
 * 成功 - 説明あり
 */
test('Success - with description', () => {
    const {idDef, urlDef} = prepareConfigs('テスト顧客 1', 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'テスト顧客 1', 'ja-JP', 'test1@example.com', 'これはテスト顧客 1 です。');
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "cus_00001"}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('cus_00001');
    expect(engine.findData(urlDef)).toEqual('https://dashboard.stripe.com/customers/cus_00001');
});

/**
 * 成功 - 説明なし
 */
test('Success - without description', () => {
    const {idDef, urlDef} = prepareConfigs('テスト顧客 2', 'en-US', 'test2@example.com', '');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'テスト顧客 2', 'en-US', 'test2@example.com', '');
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "cus_00002"}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('cus_00002');
    expect(engine.findData(urlDef)).toEqual('https://dashboard.stripe.com/customers/cus_00002');
});

/**
 * 成功 - ID と URL を保存しない
 */
test('Success - ID and URL not saved', () => {
    const {idDef, urlDef} = prepareConfigs('テスト顧客 3', 'ja-JP', 'test3@example.com', 'これはテスト顧客 3 です。');
    configs.put('conf_CustomerId', '');
    configs.put('conf_CustomerUrl', '');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'テスト顧客 3', 'ja-JP', 'test3@example.com', 'これはテスト顧客 3 です。');
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "cus_00003"}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('事前文字列');
    expect(engine.findData(urlDef)).toEqual('事前文字列');
});

/**
 * 成功 - 名前、メールアドレス、説明を最大文字数で設定
 */
test('Success - maximum length', () => {
    const name = createString(NAME_MAX_LENGTH);
    const email = createString(EMAIL_MAX_LENGTH);
    const description = createString(DESCRIPTION_MAX_LENGTH);
    const {idDef, urlDef} = prepareConfigs(name, 'ja-JP', email, description);

    httpClient.setRequestHandler((request) => {
        assertRequest(request, name, 'ja-JP', email, description);
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "cus_00004"}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('cus_00004');
    expect(engine.findData(urlDef)).toEqual('https://dashboard.stripe.com/customers/cus_00004');
});

    ]]></test>

</service-task-definition>
