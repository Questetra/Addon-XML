<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-03-15</last-modified>
<license>(C) Questetra, In. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Get Row </label>
<label locale="ja">Google スプレッドシート: 行取得</label>
<summary>Get data in a specified row from a Google Sheet.</summary>
<summary locale="ja">Google スプレッドシートから指定した行のデータを取得します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-row-get/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-row-get/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SheetId" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: スプレッドシート ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: シートタイトル</label>
  </config>
  <config name="conf_RowNo" required="true" form-type="SELECT"  select-data-type="STRING_TEXTFIELD">
    <label>C4: Row to Get (e.g. "1", "11")</label>
    <label locale="ja">C4: 取得する行 (例 "1", "11")</label>
  </config>
  <config name="conf_Range" required="true" form-type="TEXTFIELD">
    <label>C5: Column Range to Get (e.g. "A:J")(Up to 10 columns)</label>
    <label locale="ja">C5: 取得する列範囲 (例 "A:J") (最大 10 列)</label>
  </config>
  <config name="conf_Column1" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_1: Data item that stores the value in the 1st column </label>
    <label locale="ja">C6_1: 列範囲のうち 1 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column2" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_2: Data item that stores the value in the 2nd column </label>
    <label locale="ja">C6_2: 列範囲のうち 2 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column3" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_3: Data item that stores the value in the 3rd column </label>
    <label locale="ja">C6_3: 列範囲のうち 3 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column4" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_4: Data item that stores the value in the 4th column </label>
    <label locale="ja">C6_4: 列範囲のうち 4 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column5" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_5: Data item that stores the value in the 5th column </label>
    <label locale="ja">C6_5: 列範囲のうち 5 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column6" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_6: Data item that stores the value in the 6th column </label>
    <label locale="ja">C6_6: 列範囲のうち 6 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column7" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_7: Data item that stores the value in the 7th column </label>
    <label locale="ja">C6_7: 列範囲のうち 7 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column8" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_8: Data item that stores the value in the 8th column </label>
    <label locale="ja">C6_8: 列範囲のうち 8 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column9" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_9: Data item that stores the value in the 9th column </label>
    <label locale="ja">C6_9: 列範囲のうち 9 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column10" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C6_10: Data item that stores the value in the 10th column </label>
    <label locale="ja">C6_10: 列範囲のうち 10 列目の値を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets.readonly
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const COLUMN_NUM = 10;

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth = configs.get( "conf_OAuth2" );
  const sheetId = configs.get( "conf_SheetId" );
  const sheetTitle = configs.get( "conf_SheetTitle" );
  const rowNo = retrieveRowNo();
  const range = configs.get( "conf_Range" );

  checkRowNoAndRange( rowNo, range );
  const columnDefList = [];
  retrieveValueConfigs( columnDefList );
  
  
  //// == 演算 / Calculating ==
  const dataStringList = getRowData( oauth, sheetId, sheetTitle, rowNo, range );

  //// == ワークフローデータへの代入 / Data Updating ==
  setDataByLists( columnDefList, dataStringList );
}


/**
  * config から行番号 を読み出す
  * @return {String} rowNo  行番号
  */
function retrieveRowNo() {
  const rowNoDef = configs.getObject( "conf_RowNo" );
  let rowNo = configs.get( "conf_RowNo" );
  if ( rowNoDef !== null ) {
    rowNo = engine.findData( rowNoDef );
  }
  return rowNo;
}


/**
  * 行番号が空、不正な文字列であればエラーとする
  * 列範囲が不適切な文字列であればエラーとする
  * @param {String} rowNo  行番号
  * @param {String} range  列範囲
  */
function checkRowNoAndRange( rowNo, range ) {
  if ( rowNo === "" || rowNo === null ) {
    throw "Row number is empty.";
  }
  if ( !isValidNo(rowNo) ) {
    throw "Invalid Row number.";
  }
  if ( !isValidRange(range) ) {
    throw "Invalid Range.";
  }
}


/**
  * 行番号 が有効か（自然数か）を判定する
  * @param {String} noString  行番号 の文字列
  * @return {Boolean}  有効な 行番号 かどうか
  */
function isValidNo( noString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( noString );
}

/**
  * 列範囲 が有効かを判定する
  * @param {String} rangeString  列範囲 の文字列
  * @return {Boolean}  有効な 列範囲 かどうか
  */
function isValidRange( rangeString ) {
  const idReg = new RegExp( '^[A-Z]+:[A-Z]+$' );
  return idReg.test( rangeString );
}


/**
  * config の列の値を格納するデータ項目の情報を読み出し、配列に格納する
  * 以下の場合はエラーとする
  * 1. 値を保存するデータ項目が重複して設定されている
  * 2. 列の値を格納するデータ項目が一つも設定されていない
  * @param {Array<ProcessDataDefinitionView>} valueDefList  列の値を格納するデータ項目の ProcessDataDefinitionView を格納する配列
  */
function retrieveValueConfigs( columnDefList ) {
  const dataItemNumList = []; // データ項目の重複確認用
  for (let i = 0; i < COLUMN_NUM; i++) {
    const columnConfigName = `conf_Column${i+1}`;
    const columnValueDef = configs.getObject( columnConfigName );
    columnDefList.push( columnValueDef );
    if ( columnValueDef !== null ) {
      const dataItemNum = configs.get( columnConfigName ); // データ項目の重複確認用
      if ( dataItemNumList.indexOf( dataItemNum ) !== -1 ) { // 既に指定されているデータ項目
        throw "The same data item is set multiple times.";
      }
      dataItemNumList.push( dataItemNum ); // データ項目の重複確認用
    }
  }
  if ( columnDefList.filter( v => v !== null ).length === 0 ) { // 列の値を格納するデータ項目が一つも設定されていない
    throw "No Data Item is set.";
  }
}



/**
 * Google スプレッドシートの行データを取得
 * @param {String} oauth OAuth2 認証設定
 * @param {String} sheetId スプレッドシートの ID
 * @param {String} sheetTitle シート名
 * @param {String} rowNo 取得する行
 * @param {String} range 取得する列範囲
 * @return {Array<String>} jsonObj.values[0] 取得した行データ を格納した配列
 */
function getRowData( oauth, sheetId, sheetTitle, rowNo, range ) {

  const rangeArr = range.split(':');
  const enSheetId = encodeURIComponent(sheetId);
  const enSheetTitle = encodeURIComponent(sheetTitle);

  // Method: spreadsheets.values.get
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${enSheetId}/values/${enSheetTitle}!${rangeArr[0]}${rowNo}:${rangeArr[1]}${rowNo}`;
  const response = httpClient.begin()
    .authSetting( oauth )
    .queryParam( "valueRenderOption", "UNFORMATTED_VALUE" )
    .queryParam( "dateTimeRenderOption", "FORMATTED_STRING" )
    .queryParam( "majorDimension", "ROWS" )
    .get( uri );
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}`;
    engine.log( accessLog );
    throw `Failed to get. status:${status}`;
  }
  const jsonObj = JSON.parse( responseStr );
  if (jsonObj.values === undefined ) {
    throw `No Data in range.`;
  }

  const dataStringList = jsonObj.values[0]
    .slice(0, COLUMN_NUM) // 最大10列
    .map( v => v.toString() ); // すべて String に変換

  return dataStringList;
}


/**
  * データ項目に出力する
  * @param {Array<ProcessDataDefinitionView>} valueDefList  保存先データ項目の ProcessDataDefinitionView が格納された配列
  * @param {Array<String>} dataStringList  出力するデータが格納された配列
  */
function setDataByLists( valueDefList, dataStringList ) {
  valueDefList.forEach( (valueDef, i) => {
    if ( valueDef !== null) {
      if ( i > dataStringList.length - 1 ) { // dataStringList の要素がない場合
        engine.setData( valueDef, null ); 
        return;
      }
      const dataString = dataStringList[i];

//    if ( valueDef.matchDataType("STRING") ) { // 保存先データ項目が文字型の場合
        // 保存先データ項目が改行に対応しておらず、保存する文字列に改行が含まれる場合のエラーは QBPMS のバリデーションに任せる
        engine.setData( valueDef, dataString );
//      } else if ( valueDef.matchDataType("DECIMAL") ) { // 保存先データ項目が数値型の場合
//        convertTypeAndSetData( valueDef, dataString, "DECIMAL", "Numeric" );
//      } else if ( valueDef.matchDataType("SELECT") ) { // 保存先データ項目が選択型の場合
//        convertTypeAndSetData( valueDef, dataString, "SELECT", "Select" );
//      } else if ( valueDef.matchDataType("DATE") ) { // 保存先データ項目が日付型の場合
//        convertTypeAndSetData( valueDef, dataString, "DATE", "Date" );
//      } else if ( valueDef.matchDataType("DATETIME") ) { // 保存先データ項目が日時型の場合
//        convertTypeAndSetData( valueDef, dataString, "DATETIME", "Datetime" );
//      }
      
    }
  });
}


/**
  * データ項目の型にしたがってデータを変換して出力する
  * 対応しないフィールド型の場合はエラーとする
  * 変換できない値の場合はエラーとする
  * @param {ProcessDataDefinitionView} dataDef  保存先データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力するデータ（変換前の文字列データ）
  * @param {String} dataType  保存先データ項目のデータ型
  * @param {String} dataTypeLabel  保存先データ項目のデータ型の表示名（エラー出力用）
  */
/*
  function convertTypeAndSetData( dataDef, dataString, dataType, dataTypeLabel ) {
  
    let convertedData;
    if ( dataString === "" || dataString === null ) { // 空値の場合は null を設定
      convertedData = null;
    } else {
      try { //  try-catch でエラーを捕捉
        switch (dataType) {
          case 'DECIMAL':
            convertedData = new java.math.BigDecimal( dataString );
            break;
          case 'SELECT': // 一致する選択肢 ID がない場合のエラーは QBPMS のバリデーションに任せる
            convertedData = new java.util.ArrayList();
            convertedData.add( dataString );
            break;
          case 'DATE':
            convertedData = java.sql.Date.valueOf( dataString );
            break;
          case 'DATETIME':
            const dateFormatter = new java.text.SimpleDateFormat( "yyyy-MM-dd HH:mm" );
            convertedData = new java.sql.Timestamp( dateFormatter.parse( dataString ).getTime() );
          break;
        }
      } catch (e) { // 変換できない値の場合はエラー
        throw `Returned value "${dataString}" cannot be saved to ${dataTypeLabel} type data item.`;
      }
    }
    engine.setData( dataDef, convertedData );
  }
 */

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>
<test><![CDATA[

/**
 * 設定の準備
 * @param configs
 * @param sheetId
 * @param sheetTitle
 * @param rowNo
 * @param range
 * @param types
 * @return {Object}
 */
const prepareConfigs = (configs, sheetId, sheetTitle, rowNo, range, ...types) => {
    configs.put('conf_OAuth2', 'Google');
    configs.put('conf_SheetId', sheetId);
    configs.put('conf_SheetTitle', sheetTitle);
    configs.put('conf_Range', range);

    // 行番号を設定したデータ項目を作成し、C4 に設定
    const rowNoDef = engine.createDataDefinition('行番号', 1, 'q_rowNo', 'STRING_TEXTFIELD');
    engine.setData(rowNoDef, rowNo);
    configs.putObject('conf_RowNo', rowNoDef);

    const columnDefList = [];
    types.forEach((type, i) => {
      // 指定したタイプのデータ項目を作成し、C6 以降に順に設定
      if (type !== null){
        const columnDef = engine.createDataDefinition(`データ${i+1}`, i+2, `q_data${i+1}`, type);
        engine.setData(columnDef, '事前文字列');
        configs.putObject(`conf_Column${i+1}`, columnDef);
        columnDefList.push(columnDef);
      }
    });

    return columnDefList;
};

test('Row Number is invalid', () => {
    //行番号が不適切な場合
    prepareConfigs(configs, 'id', 'title', 'invalidrow', 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTFIELD');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Row number.');
    }
});

test('Row Number is empty', () => {
    //行番号が入力されていない場合
    prepareConfigs(configs, 'id', 'title', null, 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTFIELD');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Row number is empty.');
    }
});

test('Column Range is invalid', () => {
    //列範囲が不適切である場合
    prepareConfigs(configs, 'id', 'title', '1', 'invalidrange', 'STRING_TEXTFIELD', 'STRING_TEXTFIELD');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Range.');
    }
});

test('Same Data Item is set twice', () => {
    //同じデータ項目がC6に2回セットされている場合
    const columnDefList = prepareConfigs(configs, 'id', 'title', '1', 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTFIELD');
    configs.putObject("conf_Column2", columnDefList[0]);
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('The same data item is set multiple times.');
    }
});

test('No Data Item is set', () => {
    //保存先データ項目がひとつも設定されていない場合
    const columnDefList = prepareConfigs(configs, 'id', 'title', '1', 'A:B');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('No Data Item is set.');
    }
});

/**
 * リクエストのテスト
 * @param url
 * @param method
 * @param contentType
 * @param body
 * @param sheetId
 * @param sheetTitle
 * @param range
 */
const assertRequest = ({url, method, contentType, body}, sheetId, sheetTitle, range) => {
    const enSheetId = encodeURIComponent(sheetId);
    const enSheetTitle = encodeURIComponent(sheetTitle);
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${enSheetId}/values/${enSheetTitle}!${range}?valueRenderOption=UNFORMATTED_VALUE&dateTimeRenderOption=FORMATTED_STRING&majorDimension=ROWS`);
    expect(method).toEqual('GET');
};

test('Succeed to get - TEXTFIELD and TEXTAREA', () => {
    //行取得に成功する場合
    const columnDefList = prepareConfigs(configs, 'id', 'シート 1', '1', 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTAREA');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 1', 'A1:B1');
        const ret = JSON.stringify({"values":[['A列','B列\n複数行']]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    expect(engine.findData(columnDefList[0])).toEqual('A列');
    expect(engine.findData(columnDefList[1])).toEqual('B列\n複数行');
});

test('Succeed to get - 10 columns', () => {
    //保存先データ項目がすべて設定されている場合
    const types = [...Array(10)].map(() => 'STRING_TEXTFIELD');
    const columnDefList = prepareConfigs(configs, 'id', 'シート 2!', '70', 'XA:XJ', ...types);

    const rowData = [...Array(10)].map((_, i) => `値${i+1}`);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 2!', 'XA70:XJ70');
        const ret = JSON.stringify({"values":[rowData]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    columnDefList.forEach((def, i) => {
        expect(engine.findData(def)).toEqual(`値${i+1}`);
    });
});

test('Succeed to get - Some data items are not set', () => {
    //保存先データ項目が設定されていない列がある場合
    const types = [...Array(10)].map(() => 'STRING_TEXTFIELD');
    const columnDefList = prepareConfigs(configs, 'id', 'シート 1', '1', 'A:J', ...types);
    configs.put('conf_Column5', '');
    configs.put('conf_Column8', '');

    const rowData = [...Array(10)].map((_, i) => `値${i+1}`);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 1', 'A1:J1');
        const ret = JSON.stringify({"values":[rowData]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    columnDefList.forEach((def, i) => {
        if (i === 4 || i === 7) { // 5, 8列目は保存先が未設定
            expect(engine.findData(def)).toEqual('事前文字列');
            return;
        }
        expect(engine.findData(def)).toEqual(`値${i+1}`);
    });
});

test('Succeed to get - Number of Returned values is bigger than 10', () => {
    //取得した行データの値の数が 10 を超える場合
    const types = [...Array(10)].map(() => 'STRING_TEXTFIELD');
    const columnDefList = prepareConfigs(configs, 'id', 'シート 1', '1', 'A:Z', ...types);

    const rowData = [...Array(11)].map((_, i) => `値${i+1}`);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 1', 'A1:Z1');
        const ret = JSON.stringify({"values":[rowData]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    columnDefList.forEach((def, i) => {
        expect(engine.findData(def)).toEqual(`値${i+1}`);
    });
});

test('Succeed to get - Number of Returned values is smaller than that of data items', () => {
    //取得した行データの値の数が設定した保存先データ項目数より少ない場合
    const types = [...Array(10)].map(() => 'STRING_TEXTFIELD');
    const columnDefList = prepareConfigs(configs, 'id', 'シート 1', '1', 'A:J', ...types);

    const rowData = [...Array(8)].map((_, i) => `値${i+1}`);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 1', 'A1:J1');
        const ret = JSON.stringify({"values":[rowData]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    columnDefList.forEach((def, i) => {
        if (i > 7) { // 9列目、10列目の保存される値は null
            expect(engine.findData(def)).toEqual(null);
            return;
        }
        expect(engine.findData(def)).toEqual(`値${i+1}`);
    });
});

test('Succeed to get Numeric data', () => {
    //数値データは文字列に変換され保存される
    const columnDefList = prepareConfigs(configs, 'id', 'シート 1', '1', 'A:A', 'STRING_TEXTFIELD');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'シート 1', 'A1:A1');
        const ret = JSON.stringify({"values":[[100]]});
        return httpClient.createHttpResponse(200, 'application/json', ret);
    });

    execute();
    expect(engine.findData(columnDefList[0])).toEqual('100');
});

test('404 Error', () => {
    //APIからエラーが返ってくる場合
    const columnDefList = prepareConfigs(configs, 'id', 'title', '1', 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTAREA');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'title', 'A1:B1', 1);
        return httpClient.createHttpResponse(404, 'application/json', JSON.stringify({}));
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to get. status:404');
    }
});

test('All cells are empty', () => {
    //範囲内のセルがすべて空の場合
    const columnDefList = prepareConfigs(configs, 'id', 'title', '1', 'A:B', 'STRING_TEXTFIELD', 'STRING_TEXTAREA');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'title', 'A1:B1', 1);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({}));
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('No Data in range.');
    }
});

test('Validation Error - Unable to save multi-line string to STRING_TEXTFIELD', () => {
    //単一行データ項目に複数行の文字列を保存しようとしてエラーになる場合
    const columnDefList = prepareConfigs(configs, 'id', 'title', '1', 'A:A', 'STRING_TEXTFIELD');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'id', 'title', 'A1:A1', 1);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({"values":[['複数行の\n文字列']]}));
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        //エラーになるのが正しい
    }
});

]]></test>
</service-task-definition>
