<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-04-18</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Drive: Create Shared Link</label>
<label locale="ja">Google ドライブ: 共有リンク作成</label>
<summary>Create a shared link for the specified file or folder on Google Drive. An error occurs when a specified file/folder is already shared with anyone or within the domain.</summary>
<summary locale="ja">Google ドライブ の指定ファイルやフォルダの共有リンクを作成します。すでにリンクを知っている全員、もしくはドメインで共有されているファイル/フォルダを指定した場合はエラーになります。</summary>
<configs>
  <config name="conf_UserID" required="true" form-type="QUSER">
    <label>C1: User connects to Google Drive (must be App Administrator)</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ (要アプリ管理権限)</label>
  </config>
  <config name="conf_FileIdsItem" form-type="SELECT" select-data-type="STRING_TEXTFIELD" required="true">
    <label>C2: File / Folder ID to share</label>
    <label locale="ja">C2: 共有するファイル/フォルダの ID</label>
  </config>
  <config name="conf_SharedRange" form-type="SELECT_ITEM" required="true">
    <label>C3: Shared range</label>
    <label locale="ja">C3: 共有範囲</label>
    <item value="anyone">
      <label>Anyone with the link</label>
      <label locale="ja">リンクを知っている全員</label>
    </item>
    <item value="domain">
      <label>Domain</label>
      <label locale="ja">ドメイン</label>
    </item>
  </config>
  <config name="conf_Role" form-type="SELECT_ITEM" required="true">
    <label>C4: Role (Editable or not)</label>
    <label locale="ja">C4: ロール (編集可能にするかどうか)</label>
    <item value="reader">
      <label>Viewer (Unable to edit)</label>
      <label locale="ja">閲覧者 (編集不可)</label>
    </item>
    <item value="writer">
      <label>Editor</label>
      <label locale="ja">編集者</label>
    </item>
  </config>
  <config name="conf_Domain" form-type="TEXTFIELD">
    <label>C5: Domain to share (required if the shared range is domain)</label>
    <label locale="ja">C5: 共有先のドメイン (共有範囲がドメインの場合は必須)</label>
  </config>
  <config name="conf_AllowFileDiscovery" form-type="TOGGLE">
    <label>C6: Enable discovery through search within the domain</label>
    <label locale="ja">C6: 共有先ドメインで検索可能にする</label>
  </config>
  <config name="conf_SharedUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C7: Data Item that will save URL of shared File / Folder</label>
    <label locale="ja">C7: 共有したファイル/フォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/googledrive-permissioncreate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-permissioncreate/</help-page-url>

<script><![CDATA[

main();

function main() {
  const quser = getQuser();
  const fileId = getFileId();
  const sharedRange = configs.get("conf_SharedRange");
  const role = configs.get("conf_Role");
  const domain = configs.get("conf_Domain");
  if (sharedRange === "domain" && domain === "") {
    throw "Domain to share isn't set.";
  }
  const allowFileDiscovery = configs.getObject("conf_AllowFileDiscovery");
  const urlDataDef = configs.getObject("conf_SharedUrlItem");

  checkIfAlreadyShared(quser, fileId);
  createPermission(quser, fileId, sharedRange, role, domain, allowFileDiscovery);

  if (urlDataDef !== null) {
    const sharedUrl = getWebViewLink(quser, fileId);
    engine.setData(urlDataDef, sharedUrl);
  }
}

/**
 * 実行ユーザを取得する
 * @return {QuserView} 実行ユーザ
 */
function getQuser() {
    const quser = configs.getObject("conf_UserID");
    if (quser === null) {
        throw "User not found";
    }
    engine.log(`User Name: ${quser.getName()}`);
    return quser;
}

/**
 * データ項目からファイル / フォルダの ID を取得する
 * @return {String}  ファイル / フォルダの ID
 */
function getFileId() {
    const fileId = engine.findData(configs.getObject("conf_FileIdsItem"));
    if (fileId === null || fileId === "") {
        throw "File / Folder ID isn't set.";
    }
    return fileId;
}

/**
  * Google Drive API で共有設定の一覧を取得し、
  * anyone / domain の共有設定がすでにある場合はエラー
  * @param {QuserView} quser  Google Drive に接続するユーザ
  * @param {String} fileId  ファイル / フォルダの ID
  */
function checkIfAlreadyShared(quser, fileId) {
  const url = `https://www.googleapis.com/drive/v3/files/${encodeURIComponent(fileId)}/permissions`;
    const response = httpClient.begin()
        .googleOAuth2(quser, "Drive")
        .queryParam("fields", "permissions/type")
        .queryParam("supportsAllDrives", "true")
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(responseStr)
        throw `Failed to get permission list. File:${fileId}, Status:${status}`;
    }
    const {permissions} = JSON.parse(responseStr);

    const alreadyShared = permissions
        .some(permission => permission.type === "anyone" || permission.type === "domain");
    if (alreadyShared) {
        throw `The item (ID: ${fileId}) is already shared.`;
    }
}

/**
  * Google Drive API で共有設定をする
  * create permission on Google Drive
  * @param {QuserView} quser  Google Drive に接続するユーザ
  * @param {String} fileId  ファイル / フォルダの ID
  * @param {String} type 共有範囲
  * @param {String} role ロール
  * @param {String} domain  共有先ドメイン
  * @param {String} allowFileDiscovery  検索可能にするかどうか
  * @return {String} 共有リンク
  */
function createPermission(quser, fileId, type, role, domain, allowFileDiscovery) {
  const json = {role, type};
  if (type === "domain") {
    json["domain"] = domain;
    json["allowFileDiscovery"] = allowFileDiscovery;
  }
  const url = `https://www.googleapis.com/drive/v3/files/${encodeURIComponent(fileId)}/permissions`;
  const responsePermission = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("supportsAllDrives", "true")
    .body(JSON.stringify(json), "application/json; charset=UTF-8")
    .post(url);
  const status = responsePermission.getStatusCode();
  if (status >= 300) {
    engine.log(responsePermission.getResponseAsString())
    throw `Failed to create permission. File:${fileId}, Status:${status}`;
  }
}

/**
  * Google Drive API でファイル / フォルダの表示 URL を取得する
  * @param {QuserView} quser  Google Drive に接続するユーザ
  * @param {String} fileId  ファイル / フォルダの ID
  * @return {String} 表示 URL
  */
function getWebViewLink(quser, fileId) {
  const url = `https://www.googleapis.com/drive/v3/files/${encodeURIComponent(fileId)}`;
  const responseGet = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("fields", "webViewLink")
    .queryParam("supportsAllDrives", "true")
    .get(url);
  const getStatus = responseGet.getStatusCode();
  if (getStatus >= 300) {
    engine.log(responseGet.getResponseAsString())
    throw `Failed to get item info. File:${fileId}, Status:${getStatus}`;
  }
  const resJson = JSON.parse(responseGet.getResponseAsString());
  return resJson.webViewLink;
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC</icon>


<test><![CDATA[

const DOMAIN = 'domain';
const ANYONE = 'anyone';
const VIEWER = 'reader';
const EDITOR = 'writer';

/**
 * 設定の準備
 * @param fileId
 * @param sharedRange
 * @param role
 * @param domain
 * @param allowFileDiscovery
 * @return sharedUrlItemDef
 */
const prepareConfigs = (fileId, sharedRange, role, domain, allowFileDiscovery) => {
  const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
  configs.putObject('conf_UserID', quser);
  
  // 共有するファイル/フォルダの ID を保存する文字型データ項目（単一行）を準備
  const fileIdDef = engine.createDataDefinition('共有するファイル/フォルダの ID', 1, 'q_fileId', 'STRING_TEXTFIELD');
  engine.setData(fileIdDef, fileId);
  configs.putObject('conf_FileIdsItem', fileIdDef);
  
  configs.put('conf_SharedRange', sharedRange);
  configs.put('conf_Role', role);
  configs.put('conf_Domain', domain);
  configs.putObject('conf_AllowFileDiscovery', allowFileDiscovery);
  
  // 共有したファイル/フォルダの表示 URL を保存する文字型データ項目（単一行）を準備
  const sharedUrlItemDef = engine.createDataDefinition('共有したファイル/フォルダの表示 URL', 2, 'q_fileUrl', 'STRING_TEXTFIELD');
  engine.setData(sharedUrlItemDef, '事前文字列');
  configs.putObject('conf_SharedUrlItem', sharedUrlItemDef);
  
  return sharedUrlItemDef;
};

/**
 * UserID に対応する QuserView がない場合
 */
test('User not found', () => {
  prepareConfigs('abc123', ANYONE, VIEWER, '', false);
  configs.put('conf_UserID', '');
  expect(execute).toThrow('User not found');
});

/**
 * 共有範囲がドメインなのにドメインが空でエラーになる場合
 */
test('domain is blank', () => {
  prepareConfigs('abc456', DOMAIN, VIEWER, '', false);
  expect(execute).toThrow("Domain to share isn't set.");
});

/**
 * 共有するファイル/フォルダの ID が空でエラーになる場合
 */
test('File / Folder ID is blank', () => {
  prepareConfigs(null, ANYONE, VIEWER, '', true);
  expect(execute).toThrow("File / Folder ID isn't set.");
});

/**
 * 1つ目の API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param fileId
 */
const assert1stRequest = ({url, method}, fileId) => {
  const fields = encodeURIComponent('permissions/type');
  expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${fileId}/permissions?fields=${fields}&supportsAllDrives=true`);
  expect(method).toEqual('GET');
};

/**
 * 1つ目の API リクエストでエラー
 */
test('1st API Request Failed', () => {
  prepareConfigs('def789', ANYONE, VIEWER, '', false);
  
  httpClient.setRequestHandler((request) => {
    assert1stRequest(request, 'def789');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  expect(execute).toThrow('Failed to get permission list. File:def789, Status:400');
});

/**
 * すでにドメイン内で共有されていてエラー
 */
test('The file is already shared - domain', () => {
  prepareConfigs('def789', ANYONE, VIEWER, '', false);

  const res = {
    permissions: [
      { "type": "user" },
      { "type": "domain" }
    ]
  };

  httpClient.setRequestHandler((request) => {
    assert1stRequest(request, 'def789');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(res));
  });

  expect(execute).toThrow('The item (ID: def789) is already shared.');
});

/**
 * すでにリンクを知っている全員に共有されていてエラー
 */
test('The file is already shared - anyone', () => {
  prepareConfigs('def789', ANYONE, VIEWER, '', false);

  const res = {
    permissions: [
      { "type": "anyone" },
      { "type": "group" }
    ]
  };

  httpClient.setRequestHandler((request) => {
    assert1stRequest(request, 'def789');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(res));
  });

  expect(execute).toThrow('The item (ID: def789) is already shared.');
});

/**
 * 2つ目の API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param type
 * @param role
 * @param domain
 * @param allowFileDiscovery
 */
const assert2ndRequest = ({url, method, contentType, body}, fileId, type, role, domain, allowFileDiscovery) => {
  expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${fileId}/permissions?supportsAllDrives=true`);
  expect(method).toEqual('POST');
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  
  expect(bodyObj.type).toEqual(type);
  expect(bodyObj.role).toEqual(role);
  
  if (type === "domain"){
    expect(bodyObj.domain).toEqual(domain);
    expect(bodyObj.allowFileDiscovery).toEqual(allowFileDiscovery);
  } else {
    expect(bodyObj.domain).toEqual(undefined);
    expect(bodyObj.allowFileDiscovery).toEqual(undefined);
  }
};

const SAMPLE_PERMISSION_LIST = {
  permissions: [
    { "type": "user" },
    { "type": "group" }
  ]
};

/**
 * 2つ目の API リクエストでエラー
 */
test('2nd API Request Failed', () => {
  prepareConfigs('abc789', DOMAIN, EDITOR, 'test1.example.com', true);
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'abc789');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    assert2ndRequest(request, 'abc789', DOMAIN, EDITOR, 'test1.example.com', true);
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to create permission. File:abc789, Status:400');
});

/**
 * 3つ目の API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param fileId
 */
const assert3rdRequest = ({url, method}, fileId) => {
  expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${fileId}?fields=webViewLink&supportsAllDrives=true`);
  expect(method).toEqual('GET');
};

/**
 * 3つ目の API リクエストでエラー
 */
test('3rd API Request Failed', () => {
  prepareConfigs('abc789', ANYONE, VIEWER, '', false);

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'abc789');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    if (reqCount === 1) {
      assert2ndRequest(request, 'abc789', ANYONE, VIEWER, '', false);
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assert3rdRequest(request, 'abc789');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  expect(execute).toThrow('Failed to get item info. File:abc789, Status:400');
});

const SAMPLE_FILE_1 = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk"
};

const SAMPLE_FILE_2 = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/abc789/edit?usp=drivesdk"
};

/**
 * 共有成功 - ドメイン
 */
test('Succeed - domain', () => {
  const sharedUrlItemDef = prepareConfigs('def123', DOMAIN, VIEWER, 'test1.example.com', true);

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'def123');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    if (reqCount === 1) {
      assert2ndRequest(request, 'def123', DOMAIN, VIEWER, 'test1.example.com', true);
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assert3rdRequest(request, 'def123');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_FILE_1));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(sharedUrlItemDef)).toEqual('https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk');
});

/**
 * 共有成功 - リンクを知っている全員
 * ドメインや検索可能にする設定があってもエラーにならず無視される
 */
test('Succeed - anyone, unnecessary configs ignored', () => {
  const sharedUrlItemDef = prepareConfigs('abc789', ANYONE, EDITOR, 'example.com', true);

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'abc789');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    if (reqCount === 1) {
      assert2ndRequest(request, 'abc789', ANYONE, EDITOR, '', false);
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assert3rdRequest(request, 'abc789');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_FILE_2));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(sharedUrlItemDef)).toEqual('https://docs.google.com/spreadsheets/d/abc789/edit?usp=drivesdk');
});

/**
 * 共有成功 - 保存先データ項目が複数行
 */
test('Succeed - URL saved to multi-line data item', () => {
  prepareConfigs('def123', DOMAIN, EDITOR, 'test2.example.com', false);

  // 共有したファイル/フォルダの表示 URL を保存する文字型データ項目（複数行）を準備
  const sharedUrlItemDef = engine.createDataDefinition('共有したファイル/フォルダの表示 URL (複数行)', 3, 'q_fileUrl_multiline', 'STRING_TEXTAREA');
  engine.setData(sharedUrlItemDef, '事前文字列');
  configs.putObject('conf_SharedUrlItem', sharedUrlItemDef);

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'def123');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    if (reqCount === 1) {
      assert2ndRequest(request, 'def123', DOMAIN, EDITOR, 'test2.example.com', false);
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assert3rdRequest(request, 'def123');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_FILE_1));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(sharedUrlItemDef)).toEqual('https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk');
});

/**
 * 共有成功 - 保存先データ項目の設定なし
 */
test('Succeed - URL not saved', () => {
  prepareConfigs('def123', ANYONE, EDITOR, '', false);
  configs.put('conf_SharedUrlItem', '');

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assert1stRequest(request, 'def123');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_PERMISSION_LIST));
    }
    assert2ndRequest(request, 'def123', ANYONE, EDITOR, '', false);
    return httpClient.createHttpResponse(200, 'application/json', '{}');
    // 3つ目のリクエストは発行されない
  });

  // <script> のスクリプトを実行
  execute();
});

]]></test>
</service-task-definition>