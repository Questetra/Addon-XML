<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-04-04</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Drive: Create Shared Link</label>
<label locale="ja">Google ドライブ: 共有リンク作成</label>
<summary>Create Permissions in the specified files and/or folders on Google Drive. An error occurs when a specified file/folder is already shared.</summary>
<summary locale="ja">Google ドライブ の指定ファイルやフォルダを共有します。すでに共有されているファイル/フォルダを指定した場合はエラーになります。</summary>
<configs>
  <config name="conf_UserID" required="true" form-type="QUSER">
    <label>C1: User connects to Google Drive (must be App Administrator)</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ (要アプリ管理権限)</label>
  </config>
  <config name="conf_FileIdsItem" form-type="SELECT" select-data-type="STRING" required="true">
    <label>C2: File / Folder IDs to share</label>
    <label locale="ja">C2: 共有するファイル/フォルダの ID</label>
  </config>
  <config name="conf_SharedRange" form-type="SELECT_ITEM" required="true">
    <label>C3: Shared range</label>
    <label locale="ja">C3: 共有範囲</label>
    <item value="anyone">
      <label>Anyone with the link</label>
      <label locale="ja">リンクを知っている全員</label>
    </item>
    <item value="domain">
      <label>Domain</label>
      <label locale="ja">ドメイン</label>
    </item>
  </config>
  <config name="conf_Role" form-type="SELECT_ITEM" required="true">
    <label>C4: Role (Editable or not)</label>
    <label locale="ja">C4: ロール (編集可能にするかどうか)</label>
    <item value="reader">
      <label>Viewer (Unable to edit)</label>
      <label locale="ja">閲覧者 (編集不可)</label>
    </item>
    <item value="writer">
      <label>Editor</label>
      <label locale="ja">編集者</label>
    </item>
  </config>
  <config name="conf_Domain" form-type="TEXTFIELD">
    <label>C5: Domain to share (required if the shared range is domain)</label>
    <label locale="ja">C5: 共有先のドメイン (共有範囲がドメインの場合は必須)</label>
  </config>
  <config name="conf_AllowFileDiscovery" form-type="TOGGLE">
    <label>C6: Enable discovery through search within the domain</label>
    <label locale="ja">C6: 共有先ドメインで検索可能にする</label>
  </config>
  <config name="conf_SharedUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C7: Data Item that will save URLs of shared Files / Folders</label>
    <label locale="ja">C7: 共有したファイル/フォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/googledrive-permissioncreate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-permissioncreate/</help-page-url>

<script><![CDATA[

main();

function main() {
  const filesIdArray = getFileIds();
  const quser = getQuser();
  const sharedRange = configs.get("conf_SharedRange");
  const role = configs.get("conf_Role");
  const domain = configs.get("conf_Domain");
  if (sharedRange === "domain" && domain === "") {
    throw "Domain to share isn't set.";
  }
  const allowFileDiscovery = configs.getObject("conf_AllowFileDiscovery");
  const urlDataDef = configs.getObject("conf_SharedUrlItem");
  const idsNum = filesIdArray.length;
  idNumCheck(urlDataDef,idsNum)

  const sharedUrls = [];
  for (let i = 0; i < idsNum; i++) {
    sharedUrls.push(createPermission(quser, filesIdArray[i], sharedRange, role, domain, allowFileDiscovery));
  }
  
  if (urlDataDef !== null) {
    engine.setData(urlDataDef, sharedUrls.join("\n"));
  }
}

/**
 * データ項目からファイル / フォルダ ID を取得し、配列に入れて返す
 * ID の数が通信制限を超えていればエラー
 * @return {Array<String>}  ファイル / フォルダ ID の配列
 */
function getFileIds() {
    const fileIds = engine.findData(configs.getObject("conf_FileIdsItem"));
    if (fileIds === null) {
        throw "File / Folder IDs aren't set.";
    }
    let fileIdsArray = fileIds.split("\n");
    fileIdsArray = fileIdsArray.filter(lines => lines !== ""); // 空文字列を削除
    if (fileIdsArray.length === 0) {
        throw "File / Folder IDs aren't set.";
    }
    if (fileIdsArray.length * 2 > httpClient.getRequestingLimit()) {
        //check number of files
        throw "Number of File IDs is over the limit.";
    }
    return fileIdsArray;
}

/**
  * 共有するファイル/フォルダの ID が複数で URL 出力先のデータ項目が単一行ならエラーにする
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Number} idNum  共有しようとしているファイル/フォルダの ID の個数
  */
function idNumCheck(dataDef,idNum){
  if(dataDef !==  null){
    //Multiple Judge
    if(dataDef.matchDataType("STRING_TEXTFIELD") && idNum > 1){
      throw "Multiple ids are set though the Data Item to save the output is Single-line String."
    }
  }
}

/**
 * 実行ユーザを取得する
 * @return {QuserView} 実行ユーザ
 */
function getQuser() {
    const quser = configs.getObject("conf_UserID");
    if (quser === null) {
        throw "User not found";
    }
    engine.log(`User Name: ${quser.getName()}`);
    return quser;
}
/**
  * Google Drive 上で共有設定をする
  * create permission on Google Drive
  * @param {QuserView} quser  Google Drive に接続するユーザ
  * @param {String} fileId  ファイルの ID
  * @param {String} type 共有範囲
  * @param {String} role ロール
  * @param {String} domain  共有先ドメイン
  * @param {String} allowFileDiscovery  検索可能にするかどうか
  * @return {String} 共有リンク
  */
function createPermission(quser, fileId, type, role, domain, allowFileDiscovery) {
  // ファイル情報を取得し、URL 取得と共有済みかどうかのチェックを行う
  const getUrl = `https://www.googleapis.com/drive/v3/files/${fileId}`;
  const responseGet = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("fields", "webViewLink,shared,hasAugmentedPermissions")
    .queryParam("supportsAllDrives", "true")
    .get(getUrl);
  const getStatus = responseGet.getStatusCode();
  if (getStatus >= 300) {
    engine.log(responseGet.getResponseAsString())
    throw `Failed to get item info:${fileId}\nStatus:${getStatus}`;
  }
  const resJson = JSON.parse(responseGet.getResponseAsString());
  const {webViewLink, shared, hasAugmentedPermissions} = resJson;

  // マイドライブ内のファイル/フォルダがすでに共有されている場合、shared が true
  // 共有ドライブ内のファイル/フォルダにすでに個別の共有設定がある場合、hasAugmentedPermissions が true
  // WebUI からは user/group の共有設定と domain/anyone の共有設定を共存させられるが、
  // このアイテムでは user/group/domain/anyone のいずれかの共有設定がすでにある場合、エラーにする
  if (shared || hasAugmentedPermissions) {
    throw `The item (ID: ${fileId}) is already shared.`;
  }

  const json = {role, type};
  if (type === "domain") {
    json["domain"] = domain;
    json["allowFileDiscovery"] = allowFileDiscovery;
  }
  const permissionUrl = `https://www.googleapis.com/drive/v3/files/${fileId}/permissions`;
  const responsePermission = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("supportsAllDrives", "true")
    .body(JSON.stringify(json), "application/json; charset=UTF-8")
    .post(permissionUrl);
  const status = responsePermission.getStatusCode();
  if (status >= 300) {
    engine.log(responsePermission.getResponseAsString())
    throw `Failed to create permission:${fileId}\nStatus:${status}`;
  }
  
  return webViewLink;
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC</icon>


<test><![CDATA[


const DOMAIN = 'domain';
const ANYONE = 'anyone';
const VIEWER = 'reader';
const EDITOR = 'writer';

/**
 * 設定の準備
 * @param fileIds
 * @param sharedRange
 * @param role
 * @param domain
 * @param allowFileDiscovery
 * @return sharedUrlItemDef
 */
const prepareConfigs = (fileIds, sharedRange, role, domain, allowFileDiscovery) => {
  const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
  configs.putObject('conf_UserID', quser);
  
  // 共有するファイル/フォルダの ID を保存する文字型データ項目（複数行）を準備
  const fileIdsDef = engine.createDataDefinition('共有するファイル/フォルダの ID', 1, 'q_fileIds', 'STRING_TEXTAREA');
  engine.setData(fileIdsDef, fileIds);
  configs.putObject('conf_FileIdsItem', fileIdsDef);
  
  configs.put('conf_SharedRange', sharedRange);
  configs.put('conf_Role', role);
  configs.put('conf_Domain', domain);
  configs.putObject('conf_AllowFileDiscovery', allowFileDiscovery);
  
  // 共有したファイル/フォルダの表示 URL を保存する文字型データ項目（複数行）を準備
  const sharedUrlItemDef = engine.createDataDefinition('作成したフォルダの表示 URL', 2, 'q_URLs_of_shared_Files', 'STRING_TEXTAREA');
  engine.setData(sharedUrlItemDef, '事前文字列');
  configs.putObject('conf_SharedUrlItem', sharedUrlItemDef);
  
  return sharedUrlItemDef;
};

/**
 * 設定の準備-共有したファイル/フォルダの表示 URL を保存する文字型データ項目が単一行
 * @param fileIds
 * @param sharedRange
 * @param role
 * @param domain
 * @param allowFileDiscovery
 * @return sharedUrlItemDef
 */
const prepareConfigs_single_line = (fileIds, sharedRange, role, domain, allowFileDiscovery) => {
  const quser = engine.createQuser(4, 'オアフ', 'Oahu@questetra.com');
  configs.putObject('conf_UserID', quser);
  
  // 共有するファイル/フォルダの ID を保存する文字型データ項目（複数行）を準備
  const fileIdsDef = engine.createDataDefinition('共有するファイル/フォルダの ID', 5, 'q_fileIds_', 'STRING_TEXTAREA');
  engine.setData(fileIdsDef, fileIds);
  configs.putObject('conf_FileIdsItem', fileIdsDef);
  
  configs.put('conf_SharedRange', sharedRange);
  configs.put('conf_Role', role);
  configs.put('conf_Domain', domain);
  configs.putObject('conf_AllowFileDiscovery', allowFileDiscovery);
  
  // 共有したファイル/フォルダの表示 URL を保存する文字型データ項目（単一行）を準備
  const sharedUrlItemDef = engine.createDataDefinition('作成したフォルダの表示 URL単一行', 6, 'q_URL_of_shared_File', 'STRING_TEXTFIELD');
  engine.setData(sharedUrlItemDef, '事前文字列');
  configs.putObject('conf_SharedUrlItem', sharedUrlItemDef);
  
  return sharedUrlItemDef;
};

/**
 * UserID に対応する QuserView がない場合
 */
test('User not found', () => {
  prepareConfigs('abc123', ANYONE, VIEWER, '', false);
  configs.put('conf_UserID', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('User not found');
  }
});

/**
 * 共有範囲がドメインなのにドメインが空でエラーになる場合
 */
test('domain is blank', () => {
  prepareConfigs('abc456', DOMAIN, VIEWER, '', false);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith("Domain to share isn't set.");
  }
});

/**
 * 共有するファイル/フォルダの ID が空でエラーになる場合
 */
test('File / Folder IDs is blank', () => {
  prepareConfigs(null, ANYONE, VIEWER, '', true);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('File / Folder IDs aren\'t set.');
  }
});

/**
 * 共有するファイル/フォルダの ID が空行でエラーになる場合
 */
test('File / Folder IDs is blank line', () => {
  prepareConfigs('\n\n\n', DOMAIN, VIEWER, 'test1.com', true);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('File / Folder IDs aren\'t set.');
  }
});

/**
 * 共有するファイル/フォルダの ID が通信制限数を超えてエラーになる場合
 */
test('Number of File / Folder IDs is over the limit', () => {
  let ids = '';
  for (let i = 0; i <= httpClient.getRequestingLimit() / 2; i++) {
    ids += `f${i}\n`;
  }
  prepareConfigs(ids, ANYONE, VIEWER, '', false);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Number of File IDs is over the limit.');
  }
});

/**
 * 共有するファイル/フォルダの ID が複数行で URL 出力先のデータ項目が単一行エラーになる場合
 */
test('SharedUrl is Single-line String data for Multiple ids', () => {
  prepareConfigs_single_line(`abc123\ndef456`, DOMAIN, VIEWER, 'test2.com', false);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Multiple ids are set though the Data Item to save the output is Single-line String.');
  }
});

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param fileIds
 */
const assertGetRequest = ({url, method}, fileIds) => {
  const fields = encodeURIComponent('webViewLink,shared,hasAugmentedPermissions');
  expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${fileIds}?fields=${fields}&supportsAllDrives=true`);
  expect(method).toEqual('GET');
};

/**
 * GET API リクエストでエラー
 */
test('GET Failed', () => {
  prepareConfigs('def789', ANYONE, VIEWER, '', false);
  
  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'def789');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to get item info:def789\nStatus:400');
  }
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileIds
 * @param type
 * @param role
 * @param domain
 * @param allowFileDiscovery
 */
const assertPostRequest = ({url, method, contentType, body}, fileIds, type, role, domain, allowFileDiscovery) => {
  expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${fileIds}/permissions?supportsAllDrives=true`);
  expect(method).toEqual('POST');
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  
  expect(bodyObj.type).toEqual(type);
  expect(bodyObj.role).toEqual(role);
  
  if (type === "domain"){
    expect(bodyObj.domain).toEqual(domain);
    expect(bodyObj.allowFileDiscovery).toEqual(allowFileDiscovery);
  } else {
    expect(bodyObj.domain).toEqual(undefined);
    expect(bodyObj.allowFileDiscovery).toEqual(undefined);
  }
  
};

const SAMPLE_GET_1 = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk",
  "shared": false
};

const SAMPLE_GET_1_SHARED = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk",
  "shared": true
};

const SAMPLE_GET_2 = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/abc789/edit?usp=drivesdk",
  "hasAugmentedPermissions": false
};

const SAMPLE_GET_2_SHARED = {
  "webViewLink": "https://docs.google.com/spreadsheets/d/abc789/edit?usp=drivesdk",
  "hasAugmentedPermissions": true
};

/**
 * POST API リクエストでエラー
 */
test('POST Failed', () => {
  prepareConfigs('abc789', DOMAIN, EDITOR, 'test3.com', true);
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'abc789');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
    }
    assertPostRequest(request, 'abc789', DOMAIN, EDITOR, 'test3.com', true);
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to create permission:abc789\nStatus:400');
  }
});

/**
 * すでに共有されている場合はエラー
 * マイドライブ内のファイル/フォルダの場合
 */
test('The item is already shared - My Drive', () => {
  const sharedUrlItemDef = prepareConfigs('def123', DOMAIN, VIEWER, 'example.com', true);

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'def123');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1_SHARED));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('The item (ID: def123) is already shared.');
  }
});

/**
 * すでに共有されている場合はエラー
 * 共有ドライブ内のファイル/フォルダの場合
 */
test('The item is already shared - Shared Drive', () => {
  const sharedUrlItemDef = prepareConfigs('abc789', ANYONE, EDITOR, '', false);

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'abc789');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2_SHARED));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('The item (ID: abc789) is already shared.');
  }
});

/**
 * 共有するファイル/フォルダの ID の数が１つの場合(URL 出力先のデータ項目が単一行)
 */
test('Succeed to share 1 File / Folder ID', () => {
  const sharedUrlItemDef = prepareConfigs_single_line('def123', DOMAIN, VIEWER, 'test4.com', true);

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'def123');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    assertPostRequest(request, 'def123', DOMAIN, VIEWER, 'test4.com', true);
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(sharedUrlItemDef)).toEqual('https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk');
});

/**
 * 共有するファイル/フォルダの ID の数が複数(最大リクエスト数)の場合
 */
test('Succeed to share multiple File / Folder IDs', () => {
  let ids = [];
  let urls = [];
  for (let i = 0; i < httpClient.getRequestingLimit() / 2; i++) {
    ids.push(`f${i}`);
    urls.push(`https://docs.google.com/spreadsheets/d/f${i}/edit?usp=drivesdk`);
  }
  const sharedUrlItemDef = prepareConfigs(ids.join('\n'), ANYONE, EDITOR, '', false);
  
  let reqCount = 0;
  let fileCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount % 2 === 0) {
      assertGetRequest(request, `f${fileCount}`);
      const getRes = {...SAMPLE_GET_1};
      getRes.webViewLink = urls[fileCount];
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getRes));
    } else {
      assertPostRequest(request, `f${fileCount}`, ANYONE, EDITOR, '', false);
      reqCount++;
      fileCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
  });
  
  // <script> のスクリプトを実行
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(sharedUrlItemDef)).toEqual(urls.join('\n'));
});

/**
 * 共有範囲が ANYONE で、ドメインや検索可能にする設定があってもエラーにならず無視される
 */
test('Succeed - Unnecessary configs are ignored', () => {
  const sharedUrlItemDef = prepareConfigs('def123\nabc789', ANYONE, EDITOR, 'example.com', true);

  let reqCount = 0;
  let fileId = 'def123';
  let getRes = SAMPLE_GET_1;
  httpClient.setRequestHandler((request) => {
    if (reqCount % 2 === 0) {
      assertGetRequest(request, fileId);
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getRes));
    } else {
      assertPostRequest(request, fileId, ANYONE, EDITOR, '', false);
      reqCount++;
      fileId = 'abc789';
      getRes = SAMPLE_GET_2;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  const urlStr = 'https://docs.google.com/spreadsheets/d/def123/edit?usp=drivesdk\n'
    + 'https://docs.google.com/spreadsheets/d/abc789/edit?usp=drivesdk';
  expect(engine.findData(sharedUrlItemDef)).toEqual(urlStr);
});


]]></test>
</service-task-definition>