<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>Microsoft 365 OneDrive for Business: Delete File / Folder</label>
<label locale="ja">Microsoft 365 OneDrive for Business: ファイル / フォルダ削除</label>
<last-modified>2022-05-17</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>This item deletes files and folders on OneDrive. It can delete multiple ones at once. It must contain one URL per line. </summary>
<summary locale="ja">この工程は、OneDrive 上のファイル / フォルダを削除します。一度に複数の削除が可能です。1行につき1つのURLが含まれている必要があります。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_urls" required="true" form-type="SELECT" select-data-type="STRING">
    <label>C2: Data Item with File / Folder URLs to delete</label>
    <label locale="ja">C2: 削除するファイル / フォルダの URL が保存されている文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/onedrive-file-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/onedrive-file-delete/</help-page-url>

<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const urlsDef = configs.getObject("conf_urls");

  //// == ワークフローデータの参照 / Data Retrieving ==
  const urlArray = retrieveUrlArray(urlsDef);

  //// == 演算 / Calculating ==
  checkHttpRequestingLimit(urlArray);
  deleteItems( urlArray, oauth2 );
}

/**
  * ワークフローデータから URL の配列を読み出す
  * @param {ProcessDataDefinitionView} urlsDef  データ項目の ProcessDataDefinitionView
  * @return {Array<String>} urlArray  URL の配列
  */
function retrieveUrlArray( urlsDef ) {
  const urls = engine.findData(urlsDef);
  if (urls === "" || urls === null) {
    throw "File / Folder URLs aren't set.";
  }
  let urlArray = urls.split("\n");
  urlArray = urlArray.filter(url => url !== ""); // 空文字列を削除
  if (urlArray.length === 0) {
    throw "File / Folder URLs aren't set.";
  }
  return urlArray;
}

/**
  * HTTPリクエストの上限を超えないか確認する
  * @param {Array<String>} urlArray  URL の配列
  */
function checkHttpRequestingLimit( urlArray ) {
  if ( urlArray.length * 2 > httpClient.getRequestingLimit() ){
    throw "Necessary HTTP requests exceeds the limit.";
  }
}

/**
  * ドライブアイテム（ファイル/フォルダ）を削除する。
  * @param {Array<String>} urlArray  ドライブアイテムの URL の配列
  * @param {String} oauth2  OAuth2 認証設定
  */
function deleteItems( urlArray, oauth2 ) {
  const itemNum = urlArray.length;
  for (let i = 0; i < itemNum; i++){
    const itemInfo = getItemInfoByUrl(urlArray[i],oauth2);
    deleteItem(itemInfo,oauth2,urlArray[i]);
  }
}

/**
  * ドライブアイテム（ファイル/フォルダ）の URL からアイテム情報（ドライブIDとアイテムID）を取得し、
  * オブジェクトで返す
  * @param {String} driveItemUrl  ドライブアイテムの URL
  * @param {String} oauth2  OAuth2 認証設定
  * @return {Object} itemInfo  ドライブアイテム情報 {driveId, id}
  */
function getItemInfoByUrl( driveItemUrl, oauth2 ) {
  // 分割代入
  const {
    id,
    parentReference: {
      driveId
    }
  } = getObjBySharingUrl( driveItemUrl, oauth2 ); // driveItemUrlが不正ならここでエラー
  const itemInfo = {driveId, id};
  return itemInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル/フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {String} oauth2  OAuth2 認証設定
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, oauth2 ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // API Request
  const response = httpClient.begin() // HttpRequestWrapper
    .authSetting( oauth2 ) // Request HEADER (OAuth2 Token)
    .get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (httpStatus >= 300) {
    const accessLog = `Deleting item: ${sharingUrl}\n---GET request--- ${httpStatus}\n${responseStr}\n`;
    engine.log(accessLog);
    throw `Failed to get drive item. status: ${httpStatus}`;
  }
  return JSON.parse( responseStr );
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  return `u!${encodedSharingUrl}`;
}

/**
  * ドライブアイテム（ファイル/フォルダ）を削除する。
  * @param {String,String} driveId,id  ドライブアイテムのドライブID、アイテムID
  * @param {String} oauth2  OAuth2 認証設定
  * @param {String} driveItemUrl  ドライブアイテムの URL
  */
function deleteItem( {
  driveId,
  id
}, oauth2, driveItemUrl){
  const apiUrl = `${GRAPH_URI}drives/${driveId}/items/${id}`;
  const response = httpClient.begin()
    .authSetting( oauth2 )
    .delete(apiUrl);

  const responseJson = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    //when error thrown
    const accessLog = `Deleting item: ${driveItemUrl}\n---DELETE request--- ${status}\n${responseJson}\n`;
    engine.log(accessLog);
    throw `Failed to delete. status: ${status}`;
  }
}
  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

<test><![CDATA[

/**
 * 設定の準備
 * @param parentFolderUrl
 * @param folderName
 * @return folderUrlDef
 */
const prepareConfigs = (urls) => {
  configs.put('conf_OAuth2', 'Microsoft');
  
  // 削除するファイル / フォルダの URL が保存されている文字型データ項目（複数行）を準備
  const urlsDef = engine.createDataDefinition('削除するファイル / フォルダの URL', 1, 'q_urls', 'STRING_TEXTAREA');
  engine.setData(urlsDef, urls);
  configs.putObject('conf_urls', urlsDef);
};

/**
 * 削除するファイル / フォルダの URL がnullでエラー
 */
test('urls is null.', () => {
  prepareConfigs(null);
  
  expect(execute).toThrow('File / Folder URLs aren\'t set.');
});

/**
 * 削除するファイル / フォルダの URL が空行でエラー
 */
test('urls is blank lines.', () => {
  prepareConfigs('\n\n\n');
  
  expect(execute).toThrow('File / Folder URLs aren\'t set.');
});

/**
 * 削除するファイル / フォルダがリクエストの制限数を超える
 */
test('Number of urls is over the limit', () => {
  let urls = '';
  for (let i = 0; i <= httpClient.getRequestingLimit() / 2; i++) {
    urls += `https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/f${i}\n`;
  }
  prepareConfigs(urls);
  
  expect(execute).toThrow('Necessary HTTP requests exceeds the limit.');
});

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param deleteUrl
 */
const assertGetRequest = ({url, method}, deleteUrl) => {
  const encodedUrl = encodeSharingUrl(deleteUrl);
  expect(url).toEqual(`${GRAPH_URI}shares/${encodedUrl}/driveItem`);
  expect(method).toEqual('GET');
};

/**
 * GET リクエストでエラー
 */
test('GET Failed', () => {
  prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/f1');
  
  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/f1');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get drive item. status: 400');
});

/**
 * DELETE リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param driveId
 * @param id
 */
const assertDeleteRequest = ({url, method}, driveId, id) => {
  expect(url).toEqual(`${GRAPH_URI}drives/${driveId}/items/${id}`);
  expect(method).toEqual('DELETE');
};

/**
 * DELETE リクエストでエラー
 */
test('DELETE Failed', () => {
  prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/f2');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/f2');
      reqCount++;
      const sampleGet1 = {
        "id":"Id001",
        "parentReference":{
          "driveId":"Drive001"
        }
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(sampleGet1));
    }
    assertDeleteRequest(request, 'Drive001', 'Id001');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to delete. status: 400');
});

/**
 * ファイル/フォルダ削除成功 - 1つのファイル/フォルダ
 */
test('201 Success - 1 file/folder', () => {
  prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/f3');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/f3');
      reqCount++;
      const sampleGet2 = {
        "id":"Id002",
        "parentReference":{
          "driveId":"Drive002"
        }
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(sampleGet2));
    }
    assertDeleteRequest(request, 'Drive002', 'Id002');
    return httpClient.createHttpResponse(204, 'application/json', '{}');
  });
  
  execute();
});

/**
 * ファイル/フォルダ削除成功 - 複数のファイル/フォルダ（最大リクエスト数）
 */
test('201 Success - multiple files/folders', () => {
  let urls = '';
  for (let i = 0; i < httpClient.getRequestingLimit() / 2; i++) {
      urls += `https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/f${i}\n`;
  }
  prepareConfigs(urls);
  
  let reqCount = 0;
  let fileCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount % 2 === 0) {
      assertGetRequest(request, `https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/f${fileCount}`);
      reqCount++;
      const sample_get = {
        "id":`Id${fileCount}`,
        "parentReference":{
          "driveId":`Drive${fileCount}`
        }
      }
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(sample_get));
    } else {
      assertDeleteRequest(request, `Drive${fileCount}`, `Id${fileCount}`);
      reqCount++;
      fileCount++;
      return httpClient.createHttpResponse(204, 'application/json', '{}');
    }
  });
  
  execute();
});

]]></test>

</service-task-definition>