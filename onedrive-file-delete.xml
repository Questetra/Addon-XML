<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>OneDrive for Business: Delete File / Folder</label>
<label locale="ja">OneDrive for Business: ファイル / フォルダ削除</label>
<last-modified>2020-06-11</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Delete files and folders on OneDrive. You can delete multiple ones at once. When you delete multiple ones, you should write one URL on each line.</summary>
<summary locale="ja">OneDrive 上のファイル / フォルダを削除します。一度に複数の削除が可能です。複数削除する場合、データ項目では1行につき1つずつ URL を書くようにしてください。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_urls" required="true" form-type="SELECT" select-data-type="STRING">
    <label>C2: Data Item with File / Folder URLs to delete</label>
    <label locale="ja">C2: 削除するファイル / フォルダの URL が保存されている文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/onedrive-file-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/onedrive-file-delete/</help-page-url>

<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const urlsDef = configs.getObject("conf_urls");


  //// == ワークフローデータの参照 / Data Retrieving ==
  const urls = engine.findData(urlsDef);
  if (urls === "" || urls === null) {
    throw "File / Folder URLs aren't set.";
  }
  const urlArray = urls.split("\n");
  const itemNum = urlArray.length;
  if (itemNum*2 > httpClient.getRequestingLimit()){
  	throw "Necessary HTTP requests exceeds the limit.";
  }
  //// == 演算 / Calculating ==
  const token = httpClient.getOAuth2Token(oauth2);
  let c = 0;
  for (let i = 0; i < itemNum; i++){
    if (urlArray[i] !== ""){ // 空でない場合のみ削除
      engine.log(`item ${c}: ${urlArray[i]}\n`);
      const itemInfo = getItemInfoByUrl(urlArray[i],token);
      deleteItem(itemInfo,token);
      c++;
    }
  }
  engine.log(`\nSuccessfully deleted ${c} items.`);
}

/**
  * ドライブアイテム（ファイル/フォルダ）の URL からアイテム情報（ドライブIDとアイテムID）を取得し、
  * オブジェクトで返す
  * @param {String} driveItemUrl  ドライブアイテムの URL
  * @param {String} token  OAuth2 トークン
  * @return {Object} itemInfo  ドライブアイテム情報 {driveId, id}
  */
function getItemInfoByUrl( driveItemUrl, token ) {
  // 分割代入
  const {
    id,
    parentReference: {
      driveId
    }
  } = getObjBySharingUrl( driveItemUrl, token ); // driveItemUrlが不正ならここでエラー
  const itemInfo = {driveId, id};
  return itemInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル/フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {String} token  OAuth2 トークン
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, token ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // preparing for API Request
  let apiRequest = httpClient.begin(); // HttpRequestWrapper
  // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
  // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
  apiRequest = apiRequest.bearer( token );
  // Access to the API (POST, GET, PUT, etc)
  let response = apiRequest.get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const accessLog = `---GET request--- ${httpStatus}\n${response.getResponseAsString()}\n`;
  engine.log(accessLog);
  if (httpStatus >= 300) {
    const error = `Failed to get drive item: ${sharingUrl}. status: ${httpStatus}`;
    throw error;
  }
  const responseObj = JSON.parse( response.getResponseAsString() );
  return responseObj;
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  encodedSharingUrl = "u!" + encodedSharingUrl;
  return encodedSharingUrl;
}

/**
  * ドライブアイテム（ファイル/フォルダ）を削除する。
  * @param {String,String} driveId,id  ドライブアイテムのドライブID、アイテムID
  * @param {String} token  OAuth2 トークン
  */
function deleteItem( {
  driveId,
  id
}, token ){
  const apiUrl = `${GRAPH_URI}drives/${driveId}/items/${id}`;
  let response = httpClient.begin()
    .bearer(token)
    .delete(apiUrl);

  const responseJson = response.getResponseAsString();
  const status = response.getStatusCode();
  const accessLog = `---DELETE request--- ${status}\n${responseJson}\n`;
  engine.log(accessLog);
  if (status >= 300) {
    //when error thrown
    throw `Failed to delete. status: ${status}`;
  }
  engine.log("Successfully deleted.");
}
  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
