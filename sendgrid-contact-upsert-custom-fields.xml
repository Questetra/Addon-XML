<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <last-modified>2023-06-19</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Twilio SendGrid: Add or Update Contact (Custom Fields)</label>
    <label locale="ja">Twilio SendGrid: 宛先追加/更新（カスタムフィールド）</label>
    <summary>This item adds or updates a contact on SendGrid with the specified custom field values. If a contact with the specified email address already exists, the contact will be updated.</summary>
    <summary locale="ja">この工程は、SendGrid の宛先を追加または更新し、指定したカスタムフィールドに値を設定します。指定したメールアドレスの宛先がすでにある場合、その宛先が更新されます。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/sendgrid-contact-upsert-custom-fields/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/sendgrid-contact-upsert-custom-fields/</help-page-url>
    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Key is set as token</label>
            <label locale="ja">C1: API キーをトークンとして設定した認証設定</label>
        </config>
        <config name="conf_Email" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Email Address</label>
            <label locale="ja">C2: メールアドレス</label>
        </config>
        <config name="conf_FieldName1" form-type="TEXTFIELD">
            <label>C3F: Custom Field Name 1</label>
            <label locale="ja">C3F: カスタムフィールド名_1</label>
        </config>
        <config name="conf_FieldValue1" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C3V: Value 1</label>
            <label locale="ja">C3V: 値_1</label>
        </config>
        <config name="conf_FieldName2" form-type="TEXTFIELD">
            <label>C4F: Custom Field Name 2</label>
            <label locale="ja">C4F: カスタムフィールド名_2</label>
        </config>
        <config name="conf_FieldValue2" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C4V: Value 2</label>
            <label locale="ja">C4V: 値_2</label>
        </config>
        <config name="conf_FieldName3" form-type="TEXTFIELD">
            <label>C5F: Custom Field Name 3</label>
            <label locale="ja">C5F: カスタムフィールド名_3</label>
        </config>
        <config name="conf_FieldValue3" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C5V: Value 3</label>
            <label locale="ja">C5V: 値_3</label>
        </config>
        <config name="conf_FieldName4" form-type="TEXTFIELD">
            <label>C6F: Custom Field Name 4</label>
            <label locale="ja">C6F: カスタムフィールド名_4</label>
        </config>
        <config name="conf_FieldValue4" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C6V: Value 4</label>
            <label locale="ja">C6V: 値_4</label>
        </config>
        <config name="conf_FieldName5" form-type="TEXTFIELD">
            <label>C7F: Custom Field Name 5</label>
            <label locale="ja">C7F: カスタムフィールド名_5</label>
        </config>
        <config name="conf_FieldValue5" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C7V: Value 5</label>
            <label locale="ja">C7V: 値_5</label>
        </config>
        <config name="conf_FieldName6" form-type="TEXTFIELD">
            <label>C8F: Custom Field Name 6</label>
            <label locale="ja">C8F: カスタムフィールド名_6</label>
        </config>
        <config name="conf_FieldValue6" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C8V: Value 6</label>
            <label locale="ja">C8V: 値_6</label>
        </config>
        <config name="conf_FieldName7" form-type="TEXTFIELD">
            <label>C9F: Custom Field Name 7</label>
            <label locale="ja">C9F: カスタムフィールド名_7</label>
        </config>
        <config name="conf_FieldValue7" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C9V: Value 7</label>
            <label locale="ja">C9V: 値_7</label>
        </config>
        <config name="conf_FieldName8" form-type="TEXTFIELD">
            <label>C10F: Custom Field Name 8</label>
            <label locale="ja">C10F: カスタムフィールド名_8</label>
        </config>
        <config name="conf_FieldValue8" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DECIMAL|DATE_YMD">
            <label>C10V: Value 8</label>
            <label locale="ja">C10V: 値_8</label>
        </config>
    </configs>

    <script><![CDATA[

const FIELD_NUM = 8; // 扱えるフィールドの数
const MAX_EMAIL_LENGTH = 254;
const MAX_FIELD_VALUE_LENGTH = 1000;

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const email = retrieveEmail();
    const customFieldMap = retrieveCustomFieldsAsMap();

    //// == Calculating / 演算 ==
    const contact = {email};
    if (customFieldMap.size > 0) {
        const allCustomFields = getAllCustomFields(auth);
        setCustomFields(contact, customFieldMap, allCustomFields);
    }
    const jobId = upsertContact(auth, contact);

    // 処理状況を確認し、未完了なら proceed() に進む
    if (checkStatus(auth, jobId) === false) {
        engine.saveTemporaryData(jobId);
        return false;
    }
}

function proceed() {
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');

    //// == Restoring Temporary Data / 一時データの読み出し ==
    const jobId = engine.restoreTemporaryData();
    if (jobId === null) {
        throw 'Temporary data has not been saved.';
    }

    //// == 演算 / Calculating ==
    if (checkStatus(auth, jobId) === false) {
        return false;
    }
}

/**
  * config に設定されたメールアドレスを読み出す
  * @return {String} email
  */
function retrieveEmail() {
    const emailDef = configs.getObject('conf_Email');
    const email = engine.findData(emailDef);
    if (email === null) {
        throw 'Email Address is blank.';
    }
    if (email.length > MAX_EMAIL_LENGTH) {
        throw `Email Address must be within ${MAX_EMAIL_LENGTH} characters.`;
    }
    return email;
}

/**
  * config に設定されたカスタムフィールドの情報を読み出す
  * Map のキーはフィールド名、値はデータ定義
  * @return {Map<String, DataDefinitionView>} customFieldMap
  */
function retrieveCustomFieldsAsMap() {
    const customFieldMap = new Map();
    for (let i = 0; i < FIELD_NUM; i++) {
        const fieldName = configs.get(`conf_FieldName${i + 1}`);
        const fieldValueDef = configs.getObject(`conf_FieldValue${i + 1}`);
        if (fieldName === '' || fieldName === null) {
            if (fieldValueDef !== null) { // フィールド名が空なのに、値のデータ項目が選択されている場合
                throw `Custom Field Name ${i + 1} is blank while its value is selected.`;
            }
            continue;
        }
        if (customFieldMap.has(fieldName)) { // フィールド名の指定が重複
            throw `Custom Field Name "${fieldName}" is set multiple times.`;
        }
        if (fieldValueDef === null) { // フィールド名は設定されているのに、値のデータ項目が選択されてない場合
            // 「SendGrid: 宛先追加/更新」と仕様を合わせるため、null をセットせずにエラーにする
            throw `Value ${i + 1} is not selected while its field name is set.`;
        }
        const dataObj = engine.findData(fieldValueDef);
        // 文字型データを想定した文字数チェック。数値型、日付型データ以外が文字数制限に引っかかることはありえない
        if (dataObj !== null && dataObj.toString().length > MAX_FIELD_VALUE_LENGTH) {
            throw `Custom Field Value of "${fieldName}" must be within ${MAX_FIELD_VALUE_LENGTH} characters.`;
        }
        customFieldMap.set(fieldName, fieldValueDef);
    }
    return customFieldMap;
}

/**
  * 全カスタムフィールドの一覧を取得する
  * @param {String} auth 認証設定名
  * @return {Array<Object>} allCustomFields
  */
function getAllCustomFields(auth) {
    const response = httpClient.begin()
        .authSetting(auth)
        .get('https://api.sendgrid.com/v3/marketing/field_definitions');

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get field definitions. status: ${status}`;
    }
    return JSON.parse(responseStr).custom_fields;
}

/**
  * 宛先オブジェクトにカスタムフィールドの情報を追加する
  * @param {Object} contact 宛先オブジェクト
  * @param {Map<String, DataDefinitionView>} customFieldMap カスタムフィールドの Map
  * @param {Array<Object>} allCustomFields 全カスタムフィールドの一覧
  */
function setCustomFields(contact, customFieldMap, allCustomFields) {
    const customFields = {};
    customFieldMap.forEach((dataDef, fieldName) => {
        const customField = allCustomFields.find(field => field.name === fieldName);
        if (customField === undefined) { // 指定したフィールド名のカスタムフィールドがない場合
            throw `Custom Field named "${fieldName}" does not exist.`;
        }
        switch (customField.field_type) {
            case 'Text':
                addTextField(customFields, customField.id, customField.name, dataDef);
                break;
            case 'Number':
                addNumberField(customFields, customField.id, customField.name, dataDef);
                break;
            case 'Date':
                addDateField(customFields, customField.id, customField.name, dataDef);
                break;
            default:
                // ありえないが、念のため
                throw `Custom Field type "${customField.field_type}" is not supported.`;
        }
    });
    Object.assign(contact, {custom_fields: customFields});
}

/**
  * 文字型カスタムフィールドの情報を追加する
  * @param {Object} customFields 設定するカスタムフィールド一覧
  * @param {String} customFieldId カスタムフィールドの ID
  * @param {String} customFieldName カスタムフィールドの名前（エラー出力用）
  * @param {DataDefinitionView} dataDef データ定義
  */
function addTextField(customFields, customFieldId, customFieldName, dataDef) {
    if (!dataDef.matchDataType('STRING_TEXTFIELD')) {
        throw `Custom Field "${customFieldName}" is Text type. Its value must be set by STRING_TEXTFIELD type data item.`;
    }
    const dataObj = engine.findData(dataDef); // String or null
    const fieldValue = dataObj ?? ''; // String
    Object.assign(customFields, {[customFieldId]: fieldValue});
}

/**
  * 数値型カスタムフィールドの情報を追加する
  * @param {Object} customFields 設定するカスタムフィールド一覧
  * @param {String} customFieldId カスタムフィールドの ID
  * @param {String} customFieldName カスタムフィールドの名前（エラー出力用）
  * @param {DataDefinitionView} dataDef データ定義
  */
function addNumberField(customFields, customFieldId, customFieldName, dataDef) {
    if (!dataDef.matchDataType('DECIMAL')) {
        throw `Custom Field "${customFieldName}" is Number type. Its value must be set by DECIMAL type data item.`;
    }
    const dataObj = engine.findData(dataDef); // BigDecimal or null
    let fieldValue = '';
    if (dataObj !== null) {
        fieldValue = dataObj.doubleValue();
    }
    Object.assign(customFields, {[customFieldId]: fieldValue});
}

/**
  * 日付型カスタムフィールドの情報を追加する
  * @param {Object} customFields 設定するカスタムフィールド一覧
  * @param {String} customFieldId カスタムフィールドの ID
  * @param {String} customFieldName カスタムフィールドの名前（エラー出力用）
  * @param {DataDefinitionView} dataDef データ定義
  */
function addDateField(customFields, customFieldId, customFieldName, dataDef) {
    if (!dataDef.matchDataType('DATE_YMD')) {
        throw `Custom Field "${customFieldName}" is Date-type. Its value must be set by DATE_YMD type data item.`;
    }
    const dataObj = engine.findData(dataDef); // AddableDate or null
    let fieldValue = '';
    if (dataObj !== null) {
        fieldValue = dateFormatter.format('MM/dd/yyyy', dataObj);
    }
    Object.assign(customFields, {[customFieldId]: fieldValue});
}

/**
  * 宛先を追加/更新する
  * @param {String} auth 認証設定名
  * @param {Object} contact 宛先情報
  * @return {String} jobId
  */
function upsertContact(auth, contact) {
    const requestBody = {
        "contacts": [contact]
    };
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(requestBody), 'application/json')
        .put('https://api.sendgrid.com/v3/marketing/contacts');

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 202) {
        engine.log(responseStr);
        throw `Failed to upsert contact. status: ${status}`;
    }
    return JSON.parse(responseStr).job_id;
}

/**
  * ジョブの処理状況を確認する
  * @param {String} auth 認証設定名
  * @param {String} jobId ジョブ ID
  * @return {boolean} true: 完了, false: 未完了
  */
function checkStatus(auth, jobId) {
    const response = httpClient.begin()
        .authSetting(auth)
        .get(`https://api.sendgrid.com/v3/marketing/contacts/imports/${jobId}`);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get upsert status. status: ${status}`;
    }
    const jobStatus = JSON.parse(responseStr).status;
    switch (jobStatus) {
        case 'pending': // 処理中
            return false;
        case 'completed': // 完了
            return true;
        default: // errored or failed
            engine.log(responseStr);
            throw 'Failed to complete upserting the contact.';
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
        ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
        22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
        AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
        XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
        IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
        ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
        cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
        zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
        7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
        BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
        MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
        AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
        hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
        chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=
    </icon>

    <test><![CDATA[

/**
  * 設定の準備
  * @param {String} email
  * @param {Map<Number, Object>} fieldConfigMap
  */
const prepareConfigs = (email, fieldConfigMap) => {
    configs.put('conf_Auth', 'SendGrid');
    setDataItem('Email', 10, 'STRING_TEXTFIELD', email);

    fieldConfigMap.forEach((fieldConfig, i) => {
        configs.put(`conf_FieldName${i}`, fieldConfig.name);
        setDataItem(`FieldValue${i}`, i, fieldConfig.type, fieldConfig.value);
    });
};

/**
  * データ項目を作成し、config にセットする
  * @param name config 名の conf_ 以降
  * @param index
  * @param type
  * @param value
  */
const setDataItem = (name, index, type, value) => {
    if (type === null) {
        return;
    }
    const dataDef = engine.createDataDefinition(name, index, `q_${name}`, type);
    configs.putObject(`conf_${name}`, dataDef);
    if (value === null) {
        return;
    }
    switch (type) {
        case 'STRING_TEXTFIELD':
            engine.setData(dataDef, value);
            break;
        case 'DECIMAL':
            engine.setData(dataDef, java.math.BigDecimal.valueOf(value));
            break;
        case 'DATE_YMD':
            engine.setData(dataDef, java.sql.Date.valueOf(value));
            break;
    }
};

/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
  * 指定の長さの文字列を作成
  * @param length
  * @return string
  */
const createString = (length) => {
    const sourceStr = 'abcdefghijklmnopqrstuvwxyz';
    const string = sourceStr.repeat(Math.floor(length / sourceStr.length))
        + sourceStr.slice(0, length % sourceStr.length);
    return string;
}

/**
 * メールアドレスが空
 */
test('Email Address is blank', () => {
    prepareConfigs(null, new Map());
    assertError(main, `Email Address is blank.`);
});

/**
 * メールアドレスが長すぎる
 */
test('Email Address is too long', () => {
    const email = createString(MAX_EMAIL_LENGTH + 1);
    prepareConfigs(email, new Map());
    assertError(main, `Email Address must be within ${MAX_EMAIL_LENGTH} characters.`);
});

/**
  * 宛先を追加/更新する API リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  * @param request.contentType
  * @param request.body
  * @param contact
  */
const assertUpsertRequest = ({url, method, contentType, body}, contact) => {
    expect(url).toEqual('https://api.sendgrid.com/v3/marketing/contacts');
    expect(method).toEqual('PUT');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.contacts[0]).toEqual(contact);
};

/**
  * 宛先を追加/更新する API リクエストでエラー
  */
test('Fail to upsert contact', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    prepareConfigs(email, new Map()); // カスタムフィールドの指定なし

    httpClient.setRequestHandler((request) => {
        assertUpsertRequest(request, {email});
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to upsert contact. status: 400');
});

/**
  * ジョブの処理状況を確認する API リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  * @param jobId
  */
const assertCheckStatusRequest = ({url, method}, jobId) => {
    expect(url).toEqual(`https://api.sendgrid.com/v3/marketing/contacts/imports/${jobId}`);
    expect(method).toEqual('GET');
};

/**
  * ジョブの処理状況を確認する API リクエストでエラー
  */
test('Fail to get upsert status', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    prepareConfigs(email, new Map()); // カスタムフィールドの指定なし

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertUpsertRequest(request, {email});
            reqCount++;
            return httpClient.createHttpResponse(202, 'application/json', '{"job_id": "job1"}');
        }
        assertCheckStatusRequest(request, 'job1');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to get upsert status. status: 400');
});

/**
  * 1 回目のステータス確認で、ジョブが異常終了
  */
test('Fail to complete upserting in main()', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    prepareConfigs(email, new Map()); // カスタムフィールドの指定なし

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertUpsertRequest(request, {email});
            reqCount++;
            return httpClient.createHttpResponse(202, 'application/json', '{"job_id": "job1"}');
        }
        assertCheckStatusRequest(request, 'job1');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "failed"}');
    });
    assertError(main, 'Failed to complete upserting the contact.');
});

/**
  * 成功
  * カスタムフィールドを指定しない場合
  */
test('Succeed - No Custom Fields', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    prepareConfigs(email, new Map()); // カスタムフィールドの指定なし

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertUpsertRequest(request, {email});
            reqCount++;
            return httpClient.createHttpResponse(202, 'application/json', '{"job_id": "job1"}');
        }
        assertCheckStatusRequest(request, 'job1');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "completed"}');
    });
    expect(main()).toEqual(undefined);
});

/**
 * フィールド名が空なのに、値のデータ項目が選択されている
 */
test('Field Name is blank while its value is selected', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    fieldConfigMap.set(3, {name: '', type: 'STRING_TEXTFIELD', value: 'フィールドの値'});
    prepareConfigs(email, fieldConfigMap);
    assertError(main, `Custom Field Name 3 is blank while its value is selected.`);
});

/**
 * フィールド名の指定が重複
 */
test('Same Field Name is set multiple times', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    fieldConfigMap.set(1, {name: 'field_1', type: 'STRING_TEXTFIELD', value: 'フィールドの値'});
    fieldConfigMap.set(3, {name: 'field_1', type: 'STRING_TEXTFIELD', value: 'フィールドの値'});
    prepareConfigs(email, fieldConfigMap);
    assertError(main, `Custom Field Name "field_1" is set multiple times.`);
});

/**
 * フィールド名は設定されているのに、値のデータ項目が選択されていない
 */
test('Field Value is not selected while its field name is set', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    fieldConfigMap.set(4, {name: 'field_4', type: null, value: null});
    prepareConfigs(email, fieldConfigMap);
    assertError(main, `Value 4 is not selected while its field name is set.`);
});

/**
 * フィールドの値が文字列で、長すぎる
 */
test('Field Value is too long', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    const fieldValue = createString(MAX_FIELD_VALUE_LENGTH + 1);
    fieldConfigMap.set(1, {name: 'field_1', type: 'STRING_TEXTFIELD', value: fieldValue});
    prepareConfigs(email, fieldConfigMap);
    assertError(main, `Custom Field Value of "field_1" must be within ${MAX_FIELD_VALUE_LENGTH} characters.`);
});

/**
  * 全カスタムフィールドの一覧を取得する API リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  */
const assertGetAllCustomFieldsRequest = ({url, method}) => {
    expect(url).toEqual('https://api.sendgrid.com/v3/marketing/field_definitions');
    expect(method).toEqual('GET');
};

/**
  * 全カスタムフィールドの一覧を取得する API リクエストでエラー
  */
test('Fail to get upsert status', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    fieldConfigMap.set(1, {name: 'field_1', type: 'STRING_TEXTFIELD', value: 'フィールドの値'});
    prepareConfigs(email, fieldConfigMap);

    httpClient.setRequestHandler((request) => {
        assertGetAllCustomFieldsRequest(request);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to get field definitions. status: 400');
});

const ALL_CUSTOM_FIELDS_RESPONSE = {
    custom_fields: [
        {
            id: '1T',
            name: 'field_1',
            field_type: 'Text'
        },
        {
            id: '2T',
            name: 'field_2',
            field_type: 'Text'
        },
        {
            id: '3T',
            name: 'field_3',
            field_type: 'Text'
        },
        {
            id: '4T',
            name: 'field_4',
            field_type: 'Text'
        },
        {
            id: '5T',
            name: 'field_5',
            field_type: 'Text'
        },
        {
            id: '6T',
            name: 'field_6',
            field_type: 'Text'
        },
        {
            id: '7T',
            name: 'field_7',
            field_type: 'Text'
        },
        {
            id: '8T',
            name: 'field_8',
            field_type: 'Text'
        },
        {
            id: '9N',
            name: 'field_9',
            field_type: 'Number'
        },
        {
            id: '10D',
            name: 'field_10',
            field_type: 'Date'
        }
    ]
};

/**
  * 成功
  * カスタムフィールドを最大個数、最長文字数の文字列で指定
  */
test('Succeed - Maximum number of Custom Fields', () => {
    const email = createString(MAX_EMAIL_LENGTH);
    const fieldConfigMap = new Map();
    const customFields = {}; // リクエストボディのアサート用オブジェクト
    const fieldValuePrefix = createString(MAX_FIELD_VALUE_LENGTH - 2);
    for (let i = 0; i < FIELD_NUM; i++) {
        const fieldName = `field_${i + 1}`;
        const fieldId = `${i + 1}T`;
        const fieldValue = `${fieldValuePrefix}_${i + 1}`;
        fieldConfigMap.set(i + 1, {name: fieldName, type: 'STRING_TEXTFIELD', value: fieldValue});
        Object.assign(customFields, {[fieldId]: fieldValue});
    }
    prepareConfigs(email, fieldConfigMap);

    const contact = {
        email,
        custom_fields: customFields
    };
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetAllCustomFieldsRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(ALL_CUSTOM_FIELDS_RESPONSE));
        }
        if (reqCount === 1) {
            assertUpsertRequest(request, contact);
            reqCount++;
            return httpClient.createHttpResponse(202, 'application/json', '{"job_id": "job2"}');
        }
        assertCheckStatusRequest(request, 'job2');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "completed"}');
    });
    expect(main()).toEqual(undefined);
});

    ]]></test>

</service-task-definition>
