<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-07-19</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Search Customers</label>
    <label locale="ja">Stripe: 顧客を検索</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-customer-search/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-customer-search/
    </help-page-url>

    <summary>This item searches for customer objects on Stripe using a query.</summary>
    <summary locale="ja">この工程は、検索クエリに合致する Stripe 上の顧客オブジェクトを検索します。</summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_Query" required="true" el-enabled="true" form-type="TEXTAREA">
            <label>C2: Search Query</label>
            <label locale="ja">C2: 検索クエリ</label>
        </config>
        <config name="conf_CustomerIds" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C3: Data item to save customer IDs</label>
            <label locale="ja">C3: 顧客 ID の一覧を保存するデータ項目</label>
        </config>
        <config name="conf_CustomerUrls" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C4: Data item to save URLs of the customer detail pages</label>
            <label locale="ja">C4: 顧客詳細ページの URL の一覧を保存するデータ項目</label>
        </config>
        <config name="conf_CustomerNames" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5: Data item to save customers' names</label>
            <label locale="ja">C5: 顧客の名前の一覧を保存するデータ項目</label>
        </config>
        <config name="conf_CustomerEmails" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C6: Data item to save customers' email addresses</label>
            <label locale="ja">C6: 顧客のメールアドレスの一覧を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

main();

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const query = configs.get('conf_Query');
    if (query === '') {
        throw 'Search query is blank.';
    }
    const customerIdsDef = configs.getObject('conf_CustomerIds');
    const customerUrlsDef = configs.getObject('conf_CustomerUrls');
    const customerNamesDef = configs.getObject('conf_CustomerNames');
    const customerEmailsDef = configs.getObject('conf_CustomerEmails');

    //// == Calculating / 演算 ==
    checkDataDefs(customerIdsDef, customerUrlsDef, customerNamesDef, customerEmailsDef);
    const {customerIds, customerNames, customerEmails} = searchCustomers(auth, query);

    //// == Data Updating / ワークフローデータへの代入 ==
    saveData(customerIdsDef, customerIds);
    saveData(customerUrlsDef, customerIds.map(id => `https://dashboard.stripe.com/customers/${id}`));
    saveData(customerNamesDef, customerNames);
    saveData(customerEmailsDef, customerEmails);
}

/**
  * 保存先データ項目をチェックし、以下の場合にエラー
  * - 保存先データ項目が一つも設定されていない
  * - 保存先データ項目が重複
  * @param {ProcessDataDefinitionView} customerIdsDef 顧客 ID を保存するデータ項目
  * @param {ProcessDataDefinitionView} customerUrlsDef 顧客詳細ページの URL を保存するデータ項目
  * @param {ProcessDataDefinitionView} customerNamesDef 顧客の名前を保存するデータ項目
  * @param {ProcessDataDefinitionView} customerEmailsDef 顧客のメールアドレスを保存するデータ項目
  */
function checkDataDefs(customerIdsDef, customerUrlsDef, customerNamesDef, customerEmailsDef) {
    const dataDefList = [customerIdsDef, customerUrlsDef, customerNamesDef, customerEmailsDef]
        .filter(dataDef => dataDef !== null);
    if (dataDefList.length === 0) { // 保存先データ項目が一つも設定されていない
        throw 'No data item to save the search result is set.';
    }
    const dataNumSet = new Set(dataDefList.map(dataDef => dataDef.getNumber())); // 重複確認用
    if (dataNumSet.size < dataDefList.length) { // 保存先データ項目が重複
        throw 'Same data item is set multiple times.';
    }
}

/**
  * 顧客を検索する
  * @param {String} oauth 認証設定
  * @param {String} query 検索クエリ
  * @return {Object} returnObj
  * @return {List<String>} returnObj.customerIds 顧客 ID の一覧
  * @return {List<String>} returnObj.customerNames 顧客の名前の一覧
  * @return {List<String>} returnObj.customerEmails 顧客のメールアドレスの一覧
  */
function searchCustomers(auth, query) {
    const customerIds = [];
    const customerNames = [];
    const customerEmails = [];
    let nextPage = search(auth, query, null, customerIds, customerNames, customerEmails);
    while (nextPage !== null) {
        nextPage = search(auth, query, nextPage, customerIds, customerNames, customerEmails);
    }
    return {customerIds, customerNames, customerEmails};
}

/**
  * 顧客を検索する API リクエストを送信する
  * @param {String} oauth 認証設定
  * @param {String} query 検索クエリ
  * @param {String} page 取得するページ。最初のリクエストの場合は null
  * @param {List<String>} customerIds 検索結果の顧客 ID を格納する配列
  * @param {List<String>} customerNames 検索結果の顧客の名前を格納する配列
  * @param {List<String>} customerEmails 検索結果の顧客のメールアドレスを格納する配列
  * @return {String} nextPage 次のページ
  */
function search(auth, query, page, customerIds, customerNames, customerEmails) {
    const apiUri = 'https://api.stripe.com/v1/customers/search';
    const request = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .queryParam('query', query) // required
        .queryParam('limit', '100'); // maximum limit
    if (page !== null) {
        request.queryParam('page', page);
    }
    const response = request.get(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to search customers. status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    const customers = responseObj.data;
    if (page === null && customers.length === 0) { // 1 回目の検索で、結果の件数が 0
        throw 'No customers found.';
    }
    // 結果を配列に追加
    Array.prototype.push.apply(customerIds, customers.map(customer => customer.id));
    Array.prototype.push.apply(customerNames, customers.map(customer => customer.name));
    Array.prototype.push.apply(customerEmails, customers.map(customer => customer.email));
    if (responseObj.has_more) { // 次のページがある場合
        return responseObj.next_page;
    }
    // 次のページがない場合
    return null;
}

/**
  * データ項目に出力する
  * @param {ProcessDataDefinitionView} dataDef 保存先データ項目
  * @param {List<String>} dataList 保存するデータの配列
  */
function saveData(dataDef, dataList) {
    if ( dataDef === null ) {
      return;
    }
    engine.setData(dataDef, dataList.join("\n"));
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAvJJREFUWEfF
        l19I01EUxz/XKZqWNbVS6cH+UfSUGQlCD0EQRCkoFDkDUzENi6IgkB4sKEgjDStFnVlzalC9+BBR
        IEFBEeVbFP3R/lhRpLRpKHO78dtv021u+pszfnv87Zzv+dxzzj33XoHOP6E1fvleGe9KJF/CDiSZ
        CDIAo8d/BMkggn4BfVE27rX0ir9atOcEKC6WqdEOTkuoAOK0iALjAponY7jY0SF+zOYzK0CJSVYI
        uAQkaAwcaDYm4VS7VTSH8g8JUFokryOpnGdgfzdBk7lTHAmmFRSgxCS7BBxYkOAeEQnd7VZRGKg5
        A2BBVz4z2oxM+AF4at60kCsP1JJQ6dsTUwBKtxscvI+g4bRyjzljWOfdHVMAZSZZL+G4VpVI7AQ0
        tFnFCUXDDaAMGWciv8PY55HEV3zHDTaSlWHlBigzySIJlvmoxsbBxHj4ngIOtllFpxug1CTNQMls
        MjnbIS0d7t6etmpshe9DcKEmfACg3WwVpSpAoXyFIDNQZuMm2J2rfk1Ng6XL4NlTSE4Blwt6LOB0
        QtEhkBKGvsCdHli9FnLzoe8h9L8MASfpN3eJLd4MDPscLFMeTTcgOhocDjXNi5fAr5+wYqUa+NOA
        ClF9FiYnVdtHD2DnLpiYgNhYqKmGr5+DQoyYrSLJCyCDmdQ1gtEIdpv6r7LKbgscroKr9ZC/Dzpa
        VIBr9VBeBYYoiDKotkLA/V7/svnGMVuFYuLugaAAx05C+ipIWa4KShe8eA7ZOdB4GQr2TwMMfoSM
        NfDuLazfALY/YLdD9y148zp4GXwBgpag9goYk2BkGJ48hj15MDoK8QnQUAtZ26DrJrRaVMBRO9Sd
        h7wC2JylAp87A9+G5ipBiCbU0ttbs6HiqFqCkA0XTCigCefchqFgFsWrO2TggxZcP5vpbRjJIAo7
        rMfBbxDpPoo941i/w0gB0P04ViB0vZB4m0nXK5kXQtdL6X/JRLjXcp9M6Pcw8ULo+jTznXK6PU7n
        O2q1+v0D2nRCMMki7aoAAAAASUVORK5CYII=
    </icon>

</service-task-definition>
