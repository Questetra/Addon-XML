<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-03-23</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Create File</label>
<label locale="ja">Google スプレッドシート: ファイル作成</label>
<summary>Create a new Spreadsheet in the specified folder on Google Drive</summary>
<summary locale="ja">Google ドライブ の指定フォルダ内に新しいスプレッドシートを作成します</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/google-sheets-file-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/google-sheets-file-create/</help-page-url>
<configs>
  <config name="Conf_User" required="true" form-type="QUSER">
    <label>C1: User connects to Google Drive (must be App Administrator)</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ（要アプリ管理権限）</label>
  </config>
  <config name="Conf_ParentFolderId" form-type="SELECT" editable="true" select-data-type="STRING_TEXTFIELD">
    <label>C2: Parent Folder ID (My Drive root if blank)</label>
    <label locale="ja">C2: 親フォルダの ID (指定がない場合、マイドライブのルートフォルダ)</label>
  </config>
  <config name="Conf_FileName" required="true" el-enabled="true">
    <label>C3: File Name</label>
    <label locale="ja">C3: ファイル名</label>
  </config>
  <config name="Conf_SheetTitle" required="true" el-enabled="true">
    <label>C4: First Sheet Title</label>
    <label locale="ja">C4: 最初のシートのタイトル</label>
  </config>
  <config name="Conf_FileIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: String type data item to save file ID of Spreadsheet</label>
    <label locale="ja">C5: スプレッドシートのファイル ID を保存する文字型データ項目</label>
  </config>
  <config name="Conf_WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C6: String type data item to save web view url of Spreadsheet</label>
    <label locale="ja">C6: スプレッドシートの表示 URL を保存する文字型データ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main() {
  const parentFolderIdDef = configs.getObject("Conf_ParentFolderId");
  let parentFolderId = configs.get("Conf_ParentFolderId");
  if (parentFolderIdDef !== null) {
    parentFolderId = engine.findData(parentFolderIdDef);
  }
  const fileName = configs.get("Conf_FileName");
  if (fileName === "" || fileName === null) {
    throw "File Name is blank";
  }
  const sheetTitle = configs.get("Conf_SheetTitle");
  if (sheetTitle === "" || sheetTitle === null) {
    throw "Sheet Title is blank";
  }
  if (sheetTitle.length > 100) {
    throw "Sheet Title should be 100 characters or less";
  }
  const quser = configs.getObject('Conf_User');
  if (quser === null) {
    throw "User not found";
  }
  engine.log(`User Name: ${quser.getName()}`);
  
  const {id, webViewLink} = createFile(quser, parentFolderId, fileName);
  
  updateSheetTitle(quser, id, sheetTitle);
  
  setData("Conf_FileIdItem", id);
  setData("Conf_WebViewUrlItem", webViewLink);
}

/**
  * データ項目に出力する
  * @param {ProcessDataDefinitionView} configName  データ項目の ProcessDataDefinitionView
  * @param {String} data  出力する文字列
  */
function setData(configName, data) {
  const def = configs.getObject(configName);
  if (def === null) {
    return;
  }
  engine.setData(def,  data);
}

/**
  * google スプレッドシートを親フォルダに作成する
  * @param {QuserView} quser  Google ドライブ に接続するユーザ
  * @param {String} parentFolderId  親フォルダ
  * @param {String} fileName  ファイル名
  * @return {Object} createFile  スプレッドシートのファイル IDと表示 URLを格納した JSON オブジェクト
  *   プロパティ： {String} id スプレッドシートのファイル ID
  *                {String} webViewLink スプレッドシートの表示 URL
  */
function createFile(quser, parentFolderId, fileName) {
  let jsonReq = {};
  jsonReq["mimeType"] = "application/vnd.google-apps.spreadsheet";
  if (parentFolderId !== "" && parentFolderId !== null){
    jsonReq["parents"] = [ String(parentFolderId) ];
  }
  jsonReq["name"] = String(fileName);
  
  const url = 'https://www.googleapis.com/drive/v3/files/';
  const response = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("fields", "id, webViewLink")
    .queryParam("supportsAllDrives", "true")
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  
  engine.log(`status of file create: ${status}`);
  if (status !== 200) {
    const error = `Failed to create \n status: ${status}`;
    engine.log(responseTxt);
    throw error;
  }
  
  const jsonRes = JSON.parse(responseTxt);
  const res = {
    id : jsonRes["id"], 
    webViewLink : jsonRes["webViewLink"]
    }
  return res;
}

/**
  * google スプレッドシートのシート名を更新する
  * @param {QuserView} quser  Google ドライブ に接続するユーザ
  * @param {String} fileId  ファイルID
  * @param {String} sheetTitle  シート名
  */
function updateSheetTitle(quser, fileId, sheetTitle) {
  
  let jsonReq = {
    requests: []
  };
  
  jsonReq.requests[0] = {
    updateSheetProperties: {
      fields: 'title',
      properties: {
        sheetId: 0,
        title: sheetTitle
      }
    }
  };
  
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${fileId}:batchUpdate`;
  const response = httpClient.begin()
    .googleOAuth2(quser, "Drive")
    .body(JSON.stringify(jsonReq), "application/json")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  engine.log(`status of sheet title update: ${status}`);
  if (status !== 200) {
    const error = `Failed to update sheet title \n status: ${status}`;
    engine.log(responseTxt);
    throw error;
  }
}

]]></script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>
    
    
<test><![CDATA[
/**
 * 設定の準備
 * 親フォルダID はデータ項目で指定
 * @param configs
 * @param folderId
 * @param fileName
 * @param sheetTitle
 * @return {
 *     folderIdDef: {Object},
 *     idDef: {Object},
 *     urlDef: {Object}
 * }
 */
const prepareConfigs = (configs, folderId, fileName, sheetTitle) => {

    // Google ドライブ に接続するユーザを config に指定
    const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
    configs.putObject('Conf_User', quser);

    // 文字型データ項目を準備して、config に指定
    const folderIdDef = engine.createDataDefinition('親フォルダID', 2, 'q_folderId', 'STRING_TEXTFIELD');
    configs.putObject('Conf_ParentFolderId', folderIdDef);
    // 文字型データ項目の値（親フォルダID）を指定
    engine.setData(folderIdDef, folderId);

    configs.put('Conf_FileName', fileName);
    configs.put('Conf_SheetTitle', sheetTitle);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ファイルID', 3, 'q_ids', 'STRING_TEXTAREA');
    configs.putObject('Conf_FileIdItem', idDef);
    // 文字型データ項目の値（スプレッドシートのファイル ID を保存する文字型データ項目）を指定
    engine.setData(idDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('表示URL', 4, 'q_urls', 'STRING_TEXTAREA');
    configs.putObject('Conf_WebViewUrlItem', urlDef);
    // 文字型データ項目の値（スプレッドシートの表示 URL を保存する文字型データ項目）を指定
    engine.setData(urlDef, '事前文字列');

    return {
        folderIdDef,
        idDef,
        urlDef
    };
};



/**
 * ファイル名が空でエラーになる場合
 */
test('File Name is blank', () => {
    prepareConfigs(configs, '12345678', '', 'シート1');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File Name is blank');
    }
});


/**
 * 最初のシートのタイトルが空でエラーになる場合
 */
test('Sheet Title is blank', () => {
    prepareConfigs(configs, '11111111', 'ファイル1', '');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Sheet Title is blank');
    }
});


/**
 * 最初のシートのタイトルが100文字を超えてエラーになる場合
 */
test('Sheet Title Length > 100', () => {
    let name = '';
    while (name.length <= 100) {
        name += 'a';
    }
    prepareConfigs(configs, '87654321', 'ファイル2', name);
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Sheet Title should be 100 characters or less');
    }
});


/**
 * Google ドライブに接続する UserID に対応する QuserView がなくエラーになる場合
 */
test('User not found', () => {
    prepareConfigs(configs, '22222222', 'ファイル2', 'シート2');
    // 設定されたユーザが削除された場合　未設定と同じ状態に上書きする
    configs.put('Conf_User', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('User not found');
    }
});


/**
 * リクエストのテスト（スプレッドシートを親フォルダに作成する）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param parentFolderId
 * @param fileName
 */
const assertPostCreateFileRequest = ({url, method, contentType, body}, parentFolderId, fileName) => {
    expect(url).toEqual('https://www.googleapis.com/drive/v3/files/?fields=id%2C+webViewLink&supportsAllDrives=true');	
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.mimeType).toEqual('application/vnd.google-apps.spreadsheet');
    if ( parentFolderId !== "" && parentFolderId !== null ){ 
        expect(bodyObj.parents).toEqual([parentFolderId]);
    }else{
        //parentFolderId が空の場合、bodyObj に parents の指定がないことを確認
        expect(bodyObj.parents === undefined).toEqual(true);
    }
    expect(bodyObj.name).toEqual(fileName);
};


/**
 * リクエストのテスト（シート名を更新する）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param sheetTitle
 */
const assertPostUpdateSheetTitle = ({url, method, contentType, body}, fileId, sheetTitle) => {
  expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${fileId}:batchUpdate`);
  expect(method).toEqual('POST');
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  expect(bodyObj.requests[0].updateSheetProperties.fields).toEqual('title');
  expect(bodyObj.requests[0].updateSheetProperties.properties.sheetId).toEqual(0);
  expect(bodyObj.requests[0].updateSheetProperties.properties.title).toEqual(sheetTitle);
};


/**
 * POST リクエスト（ファイル作成）のレスポンスを準備
 * @param id ファイルID作成用文字列
 * @param fileName
 * @return {Object} responseObj
 */
const preparePostCreateFileResponse = (id, fileName) => {

  return {
    "kind": "drive#file",
    "id": `${id}`,
    "name": fileName,
    "mimeType": "string",
    "description": "string",
    "starred": true,
    "trashed": true,
    "explicitlyTrashed": true,
    "parents": [
    "string123"
    ],
    "webContentLink": "string123",
    "webViewLink": `https://link${id}`
  }
};


/**
 * POST リクエスト（シート名更新）のレスポンスを準備
 * @param fileId
 * @param sheetTitle
 * @return {Object} responseObj
 */
const preparePostUpdateSheetTitleResponse = (fileId, sheetTitle) => {

  return {
    "spreadsheetId": `${fileId}`,
    "updatedSpreadsheet": {
      "spreadsheetId": `${fileId}`,
      "sheets": [
          {
          "properties":
              {
              "sheetId": 123456789012345,
              "title": sheetTitle,
              "index": 2
              }
          }
      ]      
    }
  };
};


/**
 * POST API リクエストでエラー
 *（スプレッドシートを親フォルダに作成する）
 */
test('POST Create File Failed', () => {
  prepareConfigs(configs, '12345678', 'ファイル1', 'シート1');
  httpClient.setRequestHandler((request) => {
    assertPostCreateFileRequest(request, '12345678', 'ファイル1');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to create \n status: 400');
  }
});


/**
 * POST API リクエストでエラー
 *（シート名を更新する）
 */
test('POST Update SheetTitle Failed', () => {
    prepareConfigs(configs, '23456789', 'ファイル2', 'シート2');
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostCreateFileRequest(request, '23456789', 'ファイル2');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostCreateFileResponse('spreadsheets23456789', 'ファイル2')));
        }
        assertPostUpdateSheetTitle(request, "spreadsheets23456789", 'シート2',);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
      execute();
      fail('not come here');
    } catch (e) {
      expect(e.message).endsWith('Failed to update sheet title \n status: 400');
    }
});


/**
 * POST API 成功
 *（スプレッドシートを親フォルダに作成する）
 *（シート名を更新する）
 */
test('Success', () => {
    const {
        folderIdDef,
        idDef,
        urlDef
    } = prepareConfigs(configs, '45678901', 'ファイル4', 'シート4');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostCreateFileRequest(request, '45678901', 'ファイル4');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostCreateFileResponse('spreadsheets45678901', 'ファイル4')));
        }
        assertPostUpdateSheetTitle(request, "spreadsheets45678901", 'シート4',);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostUpdateSheetTitleResponse('spreadsheets45678901', 'シート4')));
    });
      // <script> のスクリプトを実行
      execute();
      // 文字型データ項目の値をチェック
      expect(engine.findData(idDef)).toEqual('spreadsheets45678901');
      expect(engine.findData(urlDef)).toEqual('https://linkspreadsheets45678901');
});


/**
 * POST API 成功
 *（スプレッドシートをマイドライブのルートフォルダに作成する）
 *（シート名を更新する）
 * Conf_ParentFolderId にデータ項目を設定し、そのデータ項目の値が空の場合
 */
test('Success - No Source File ID - FileId specified by String Data', () => {
    const {
        folderIdDef,
        idDef,
        urlDef
    } = prepareConfigs(configs, null, 'ファイル5', 'シート5');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostCreateFileRequest(request, null, 'ファイル5');

            //（ファイル作成）のレスポンスのログ確認用
            jsonStr = JSON.stringify(preparePostCreateFileResponse('spreadsheetsnull', 'ファイル5'));
            engine.log(`jsonStr:${jsonStr}`);


            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostCreateFileResponse('spreadsheetsnull', 'ファイル5')));


        }
        assertPostUpdateSheetTitle(request, "spreadsheetsnull", 'シート5',);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostUpdateSheetTitleResponse('spreadsheetsnull', 'シート5')));
    });
      // <script> のスクリプトを実行
      execute();
      // 文字型データ項目の値をチェック
      expect(engine.findData(idDef)).toEqual('spreadsheetsnull');
      expect(engine.findData(urlDef)).toEqual('https://linkspreadsheetsnull');
});


/**
 * POST API 成功
 *（スプレッドシートをマイドライブのルートフォルダに作成する）
 *（シート名を更新する）
 * Conf_ParentFolderId に固定値を指定し、その固定値の値が空の場合
 * ファイル ID を保存する文字型データ項目と表示 URL を保存する文字型データ項目が未設定の場合
 */
test('Success - No Source File ID - FileId specified with fixed value ', () => {

    const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
    configs.putObject('Conf_User', quser);
    configs.put('Conf_ParentFolderId', '');
    configs.put('Conf_FileName', 'ファイル6');
    configs.put('Conf_SheetTitle', 'シート6');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostCreateFileRequest(request, '', 'ファイル6');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostCreateFileResponse('spreadsheetskara', 'ファイル6')));
        }
        assertPostUpdateSheetTitle(request, "spreadsheetskara", 'シート6',);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostUpdateSheetTitleResponse('spreadsheetskara', 'シート6')));
    });
      // <script> のスクリプトを実行
      execute();
});
]]></test>
    
</service-task-definition>
