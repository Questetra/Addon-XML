<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Trello: Create Card</label>
    <label locale="ja">Trello: カード作成</label>
    <last-modified>2023-06-20</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item creates a card on Trello.</summary>
    <summary locale="ja">この工程は、Trello のカードを作成します。</summary>
    <configs>
        <config name="conf_ApiKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Key is set</label>
            <label locale="ja">C1: API キーを設定した認証設定</label>
        </config>
        <config name="conf_ApiToken" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Token is set</label>
            <label locale="ja">C1: API トークンを設定した認証設定</label>
        </config>
        <config name="conf_ListId" required="true" form-type="TEXTFIELD" el-enabled="true">
            <label>C2: List ID to create the card in</label>
            <label locale="ja">C2: カードを作成するリストの ID</label>
        </config>
        <config name="conf_Name" required="true" form-type="TEXTFIELD" el-enabled="true">
            <label>C2: Card Title</label>
            <label locale="ja">C2: カードのタイトル</label>
        </config>
        <config name="conf_Desc" form-type="TEXTAREA" el-enabled="true">
            <label>C3: Card Description</label>
            <label locale="ja">C3: カードの説明</label>
        </config>
        <config name="conf_Start" form-type="SELECT" select-data-type="DATE_YMD">
            <label>C4: Start Date</label>
            <label locale="ja">C4: 開始日</label>
        </config>
        <config name="conf_Due" form-type="SELECT" select-data-type="DATETIME">
            <label>C5: Due Datetime</label>
            <label locale="ja">C5: 期限</label>
        </config>
        <config name="conf_DueReminder" form-type="SELECT_ITEM">
            <label>C5: Reminder Setting</label>
            <label locale="ja">C5: リマインダーの設定</label>
            <item value="0">
                <label>At time of Due Datetime</label>
                <label locale="ja">期限になったとき</label>
            </item>
            <item value="5">
                <label>5 Minutes before</label>
                <label locale="ja">5 分前</label>
            </item>
            <item value="10">
                <label>10 Minutes before</label>
                <label locale="ja">10 分前</label>
            </item>
            <item value="15">
                <label>15 Minutes before</label>
                <label locale="ja">15 分前</label>
            </item>
            <item value="60">
                <label>1 Hour before</label>
                <label locale="ja">1 時間前</label>
            </item>
            <item value="120">
                <label>2 Hours before</label>
                <label locale="ja">5 時間前</label>
            </item>
            <item value="1440">
                <label>1 Day before</label>
                <label locale="ja">1 日前</label>
            </item>
            <item value="2880">
                <label>2 Days before</label>
                <label locale="ja">2 日前</label>
            </item>
        </config>
        <config name="conf_CardId" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C8: Data item to save ID of the card</label>
            <label locale="ja">C8: カード ID を保存するデータ項目</label>
        </config>
        <config name="conf_CardUrl" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C9: Data item to save URL of the card detail page</label>
            <label locale="ja">C9: カード詳細ページの URL を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/trello-card-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/trello-card-create/</help-page-url>

    <script><![CDATA[

function main() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const auth = retrieveAuth(); // {apiKey, apiToken}
    const listId = configs.get('conf_ListId');
    const name = configs.get('conf_Name');
    const desc = configs.get('conf_Desc');
    const start = retrieveStart();
    const due = retrieveDue();
    const dueReminder = retrieveDueReminder();
    const cardIdDef = configs.getObject('conf_CardId');
    const cardUrlDef = configs.getObject('conf_CardUrl');

    //// == Calculating / 演算 ==
    checkDueReminder(due, dueReminder);
    const card = createCard(auth, listId, name, desc, start, due, dueReminder);

    //// == Data Updating / ワークフローデータへの代入 ==
    setData(cardIdDef, card.id);
    setData(cardUrlDef, card.url);
}

/**
  * config の認証設定から API キーと API トークンを読み出す
  * @return {Object} auth
  * @return {String} auth.apiKey
  * @return {String} auth.apiToken
  */
function retrieveAuth() {
    const apiKeySetting = configs.get('conf_ApiKey');
    const apiKey = httpClient.getOAuth2Token(apiKeySetting);
    const apiTokenSetting = configs.get('conf_ApiToken');
    const apiToken = httpClient.getOAuth2Token(apiTokenSetting);
    return {apiKey, apiToken};
}

/**
  * config から開始日を文字列として読み出す
  * @return {String} start
  */
function retrieveStart() {
    const startDef = configs.getObject('conf_Start');
    if (startDef === null) {
        return null;
    }
    const startObj = engine.findData(startDef); // AddableDate
    if (startObj === null) {
        return null;
    }
    return startObj.toString(); // yyyy-MM-dd
}

/**
  * config から期限を文字列として読み出す
  * @return {String} due
  */
function retrieveDue() {
    const dueDef = configs.getObject('conf_Due');
    if (dueDef === null) {
        return null;
    }
    const dueObj = engine.findData(dueDef); // AddableTimestamp
    if (dueObj === null) {
        return null;
    }
    return dateFormatter.format('UTC', "yyyy-MM-dd'T'HH:mm:ss'Z'", dueObj);
}

/**
  * config からリマインダーの設定を読み出す
  * @return {Number} dueReminder
  */
function retrieveDueReminder() {
    const dueReminder = configs.get('conf_DueReminder');
    if (dueReminder === '') {
        return null;
    }
    return Number(dueReminder);
}

/**
  * 期限が設定されていないのに、リマインダーが設定されている場合はエラー
  * @param {String} due
  * @param {Number} dueReminder
  */
function checkDueReminder(due, dueReminder) {
    if (due === null && dueRiminder !== null) {
        throw 'Reminder cannot be set when due datetime is not set.';
    }
}

/**
  * カードを作成する
  * @param {Object} auth
  * @param {String} auth.apiKey
  * @param {String} auth.apiToken
  * @param {String} listId
  * @param {String} name
  * @param {String} desc
  * @param {String} start
  * @param {String} due
  * @param {Number} dueReminder
  * @return {Object} card
  */
function createCard({apiKey, apiToken}, listId, name, desc, start, due, dueReminder) {
    const requestBody = {
        idList: listId,
        name,
        desc,
        start,
        due,
        dueReminder
    };
    const response = httpClient.begin()
        .body(JSON.stringify(requestBody), 'application/json')
        .post(`https://api.trello.com/1/cards?key=${apiKey}&token=${apiToken}`);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to create card. status: ${status}`;
    }
    return JSON.parse(responseStr);
}

/**
  * データ項目にデータを保存する
  * @param {DataDefinitionView} dataDef データ項目の DataDefinitionView
  * @param {Object} value 保存する値
  */
function setData(dataDef, value) {
    if (dataDef !== null) {
        engine.setData(dataDef, value);
    }
}

    ]]></script>

</service-task-definition>
