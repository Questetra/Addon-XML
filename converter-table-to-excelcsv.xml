<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Converter (Table type data to Excel-CSV File)</label>
    <label locale="ja">コンバータ (テーブル型データ to Excel-CSV ファイル)</label>
    <last-modified>2021-09-22</last-modified>
    <help-page-url>https://support.questetra.com/bpmn-icons/converter-tabletoexcelcsv/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/converter-tabletoexcelcsv/</help-page-url>

    <summary>Stores the values in a Table type data item into a File type data item as an Excel compatible CSV. It does
        not affect existing files. Just add.
    </summary>
    <summary locale="ja">テーブル型データ項目の値を、Excel 対応の CSV としてファイル型データ項目に格納します。ファイルは追加され、既存のファイルには影響を与えません。</summary>

    <license>(C) Questetra, Inc. (MIT License)</license>

    <configs>
        <config name="Table_DataId" select-data-type="LIST" form-type="SELECT" required="true">
            <label>A: Target Table type data item</label>
            <label locale="ja">A: 対象のテーブル型データ項目</label>
        </config>
        <config name="File_Name" form-type="TEXTFIELD" required="true" el-enabled="true">
            <label>B: Saving file name</label>
            <label locale="ja">B: 保存ファイル名</label>
        </config>
        <config name="File_DataId" select-data-type="FILE" form-type="SELECT" required="true">
            <label>C: File type data item to save CSV</label>
            <label locale="ja">C: CSV を保存するファイル型データ項目</label>
        </config>
    </configs>
    <engine-type>2</engine-type>
    <script><![CDATA[
main();
function main() {
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const tableId = configs.get("Table_DataId");
  const filename = configs.get("File_Name");
  const fileId = configs.get("File_DataId");

  if (filename === "" || filename === null) {
    throw new Error("File Name is blank");
  }

  //// == Data Retrieving / ワークフローデータの参照 ==
  const myTable = engine.findDataByNumber(tableId);
  // com.questetra.bpms.core.model.formdata.ListArray
  let myFiles = engine.findDataByNumber(fileId); // java.util.ArrayList
  if (myFiles === null) {
    myFiles = new java.util.ArrayList();
  }

  let myTsv = "";

  if (myTable !== null) {
    myTsv = tableToTsv(myTable);
  }

  myFiles.add(
    new com.questetra.bpms.core.event.scripttask.NewQfile(
      filename,
      "text/tab-separated-values; charset=x-UTF-16LE-BOM",
      myTsv
    )
  );

  //// == Data Updating / ワークフローデータへの代入 ==
  engine.setDataByNumber(fileId, myFiles);
}

/**
 * テーブル型データ を tsv に変換する
 * @param {com.questetra.bpms.core.model.formdata.ListArray} myTable テーブル型データ
 * @return {String} mytsv 変換後の tsv 形式の文字列
 */
function tableToTsv(myTable) {
  //// == Calculating / 演算 ==
  const numOfRows = myTable.size() - 0; // 行（Tableの高さ）
  const numOfCols = myTable.getRow(0).size(); // 列（Tableの幅）
  let mytsv = "";

  for (let i = 0; i < numOfRows; i++) {
    for (let j = 0; j < numOfCols; j++) {
      mytsv += myTable.get(i, j);
      if (j != numOfCols - 1) {
        mytsv += "\t";
      }
    }
    if (i != numOfRows - 1) {
      mytsv += "\n";
    }
  }

  return mytsv;
}

]]></script>

    <test><![CDATA[
test('File Name is blank', () => {
    const tableDef = engine.createDataDefinition('テーブル', 10, 'q_table');
    configs.putObject('Table_DataId', tableDef);
    engine.setData(tableDef, null);

    configs.put('File_Name', '');

    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file');
    configs.putObject('File_DataId', fileDef);

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File Name is blank');
    }
});
]]></test>
    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACx0lEQVRYR8WXz0sUYRjHP5O0CLX+
        uHTIQ7sHIby0BdIh0EU6hwmd20Vx9mb9AUvlQQSRVhBq0WW3gxcFKzx4000kBKO2QNgSssgS6uDu
        oQQJJt4ZZ3ecH+s4O+kLyy7s+z7fz/PM87zPMxKnvKRj6afpBbpRiCDRAkQOzhdQKCEhvvMkeOnW
        7tEAWVrYZwi4B6qom1UCUgSYII747bhqAzwhxhkeH0PYLCTE48i8cCJwBnhKCkn13I+VQua+nSF7
        gDQ54K4fyhUbCjkSxM02rQD+en5YT2GChJpLlXUYQHvmWV89txq7bcyJKoCW7Vt1JJxb7hIBwnp1
        VAHSPAQeuLVSa99U1xTzW/Msflt02vYIWdXDCCBKptkPgI07GzQFmhhcGXSCKCHTWgXQbrjnRvGe
        iz20nWvzxJO8lqS9uZ3t39u1INRc0CJgk/nCi47WDk8AxkOOEAcVoQGkyat3vGH5BbD3d4/RwijD
        b4fNzrxCJqoDfAEuGXdMd03TeaHTUwRC50NqDgjx8Q/jJN8k7ewUkLmqAyielBwOieiFg+Fa4tpJ
        GelIgODZIJnuDDt/dhh67a41rN5aZfnHspPnVWwDgOURiF1CPBvN0hvqJfcxx8DKgH+BUnhPgohj
        EhrFG6QG1n6usVne9ASw9H2J3CfR3w4tQxLalOHszVn6wn0I8XpXppixRs9UhpaLaPLGJP2X+2ls
        aKxXH1sAMFxE2l1guYqNEHOf51j4uuAJplgqsv5r3Xi2jKyNd0c2Ix1iZnPGzyS0aUZaOxbVYGlI
        Y9fH2N3fZeTdiKcImA6VCRCytmOx61QHEh3zf45kUAm9LndyQyk8QyZmfoYnNZZbPK8dAf1fbVAR
        V5jXSakMxLy9mOgQWnWIUVp83IIIYfFqlqrv1cz8wEREFKJIRFBoQeKKukU0FokSCgUk8rU8dp8D
        flS8Cxv/AFp57iGwqv7bAAAAAElFTkSuQmCC
    </icon>
</service-task-definition>
