<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2019-03-25</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Google Drive: Search Folder</label>
<label locale="ja">Google ドライブ: フォルダ検索</label>
<summary>Search for the folder in the specified folder on Google Drive</summary>
<summary locale="ja">Google ドライブ の指定フォルダ内に特定の名前のフォルダがあるかどうか調べます。</summary>
<help-page-url>https://support.questetra.com/addons/googledrive-foldercreate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googledrive-foldercreate/</help-page-url>
<configs>
  <config name="UserID" required="true" form-type="QUSER">
    <label>C1: User who connects to Google Drive</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ</label>
  </config>
  <config name="ParentFolderId" el-enabled="true">
    <label>I1: Parent Folder ID(When empty,search in My Drive root)</label>
    <label locale="ja">I1: 検索するフォルダの親フォルダの ID (空白の場合マイドライブのルートを検索します)</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>I2: Folder Name to search for</label>
    <label locale="ja">I2: 検索するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>O1: Data Item that will save Folder ID</label>
    <label locale="ja">O1: 検索したフォルダの ID を保存するデータ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>O2: Data Item that will save web view url of Folder</label>
    <label locale="ja">O2: 検索したフォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  let parentFolderId = configs.get("ParentFolderId");
  const folderName = configs.get("FolderName");
  if (folderName == "" ||folderName == null) {
    throw "Folder Name is blank";
  }
  
  const userId = configs.get("UserID");
  const quser = quserDao.findById(parseInt(userId));
  if (quser == null) {
    throw "User not found:" + userId;
  }
  engine.log("User Name:" + quser.getName());
  // get OAuth token
  let token;
  try{
    token = httpClient.getGoogleOAuth2Token(quser, "Drive");
  }catch(e){
    throw "This User has not connected with Google Drive.";
  }
  const q = "mimeType = 'application/vnd.google-apps.folder' and name = '" + folderName + "' and '" + parentFolderId + "' in parents";
  const json = searchFolder(token,q);
  let folderIdList = "";
  let folderUrlList = "";
  for(let i = 0; i < json.files.length; i++){
    folderIdList += json.files[i].id + "\n";
    folderUrlList += json.files[i].webViewLink + "\n";
  }
  const idData = configs.get("FolderIdItem");
  const urlData = configs.get("WebViewUrlItem");
  if (idData != null && idData != "") {
    engine.setDataByNumber(idData,folderIdList);
  }
  if (urlData != null && urlData != "") {
    engine.setDataByNumber(urlData,folderUrlList);
  }
  
}
  //create folder on google drive
function searchFolder(token, q) {
  const url = 'https://www.googleapis.com/drive/v3/files';
  const response = httpClient.begin()
    .bearer(token)
    .queryParam("q",q)
    .queryParam("pageSize",1000)
    .queryParam("fields", "files(id,webViewLink)")
    .queryParam("supportsTeamDrives","true")
    .get(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status >= 300) {
    const error = "Failed to search \n status:" + status + "\n" + responseTxt;
    throw error;
  }
  engine.log("status:" + status + "\n" + responseTxt);
  
  jsonRes = JSON.parse(responseTxt);
  return jsonRes;
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC</icon>
</service-task-definition>