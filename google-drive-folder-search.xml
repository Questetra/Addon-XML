<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-02-04</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Drive: Search Folder</label>
<label locale="ja">Google ドライブ: フォルダ検索</label>
<summary>Search for the folder with the specific name, directly under the specified folder on Google Drive.</summary>
<summary locale="ja">Google ドライブ の指定フォルダ直下に、特定の名前のフォルダがあるかどうか調べます。</summary>
<help-page-url>https://support.questetra.com/addons/googledrive-foldersearch/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googledrive-foldersearch/</help-page-url>
<configs>
  <config name="OAuth" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/drive.metadata.readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2設定</label>
  </config>
  <config name="ParentFolderId" el-enabled="true">
    <label>C2: Parent Folder ID (When empty, search in My Drive root)</label>
    <label locale="ja">C2: 検索するフォルダの親フォルダの ID (空白の場合マイドライブのルートを検索します)</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>C3: Folder Name to search for</label>
    <label locale="ja">C3: 検索するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C4: String type data item that will save Folder ID</label>
    <label locale="ja">C4: 検索したフォルダの ID を保存する文字型データ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: String type data item that will save web view url of Folder</label>
    <label locale="ja">C5: 検索したフォルダの表示 URL を保存する文字型データ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main() {
  let parentFolderId = configs.get("ParentFolderId");
  if (parentFolderId === "" || parentFolderId === null) {
    parentFolderId = "root";
  }
  const folderName = configs.get("FolderName");
  if (folderName === "" || folderName === null) {
    throw "Folder Name is blank";
  }
  //get C4&C5
  const idDataDef = configs.getObject("FolderIdItem");
  const urlDataDef = configs.getObject("WebViewUrlItem");
  //If neither C4 nor C5 are set,throw error
  if (idDataDef === null && urlDataDef === null) {
    throw "Neither of Data Items to save result are set.";
  }
  const oauth = configs.get("OAuth");

  const folderNameRep = folderName.replace(/['\\]/g, "\\$&");
  const q = `mimeType = 'application/vnd.google-apps.folder' and trashed = false and name = '${folderNameRep}' and '${parentFolderId}' in parents`;
  const json = searchFolder(oauth, q);

  const folderNum = json.files.length;
  if (folderNum === 0) {
    throw `Could not find Folder ${folderName} with Parent Folder ID ${parentFolderId}`;
  }
  const folderIdList = [];
  const folderUrlList = [];
  for (let i = 0; i < folderNum; i++) {
    folderIdList.push(json.files[i].id);
    folderUrlList.push(json.files[i].webViewLink);
  }
  const folderIdsStr = folderIdList.join("\n");
  const folderUrlsStr = folderUrlList.join("\n");

  //set ID to Data Item
  setFolderData(idDataDef, folderIdsStr, folderNum);

  //set URL to Data Item
  setFolderData(urlDataDef, folderUrlsStr, folderNum);
}

/**
 * Google ドライブのフォルダを検索
 * @param {String} oauth OAuth2 認証設定
 * @param {String} q 検索クエリ
 * @return {Object} jsonRes レスポンス本文の JSON オブジェクト
 */
function searchFolder(oauth, q) {
  const url = "https://www.googleapis.com/drive/v3/files";
  const response = httpClient
    .begin()
    .authSetting(oauth)
    .queryParam("q", q)
    .queryParam("pageSize", "1000")
    .queryParam("fields", "files(id,webViewLink)")
    .queryParam("includeItemsFromAllDrives", "true")
    .queryParam("supportsAllDrives", "true")
    .get(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status >= 300) {
    const error = `Failed to search\nstatus:${status}`;
    engine.log(responseTxt);
    throw error;
  }
  engine.log("status:" + status);

  const jsonRes = JSON.parse(responseTxt);
  return jsonRes;
}

/**
 * フォルダの情報をデータ項目にセットする
 * @param {ProcessDataDefinitionView} dataDef 保存先データ項目の ProcessDataDefinitionView
 * @param {String} folderInfoStr 保存するフォルダ情報
 * @param {Number} folderNum フォルダの数
 */
function setFolderData(dataDef, folderInfoStr, folderNum) {
  if (dataDef !== null) {
    //Multiple Judge
    if (dataDef.matchDataType("STRING_TEXTFIELD") && folderNum > 1) {
      throw "Multiple folders are found.Can't set data to single-line string Data Item.";
    }
    engine.setData(dataDef, folderInfoStr);
  }
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC</icon>
</service-task-definition>