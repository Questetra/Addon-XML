<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2025-01-21</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Google Drive: Search Folder</label>
<label locale="ja">Google ドライブ: フォルダ検索</label>
<summary>This item searches for the folder with the specific name, directly under the specified folder on Google Drive.</summary>
<summary locale="ja">この工程は、Google ドライブ の指定フォルダ直下に、特定の名前のフォルダがあるかどうか調べます。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googledrive-foldersearch/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-foldersearch/</help-page-url>
<configs>
  <config name="OAuth_V2" required="true" form-type="OAUTH2" auth-type="OAUTH2_JWT_BEARER">
    <label>C1: Service Account Setting</label>
    <label locale="ja">C1: サービスアカウント設定</label>
  </config>
  <config name="ParentFolderId" required="true" el-enabled="true">
    <label>C2: Parent Folder ID</label>
    <label locale="ja">C2: 検索するフォルダの親フォルダの ID</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>C3: Folder Name to search for</label>
    <label locale="ja">C3: 検索するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data item that will save Folder ID</label>
    <label locale="ja">C4: 検索したフォルダの ID を保存するデータ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: Data item that will save web view URL of Folder</label>
    <label locale="ja">C5: 検索したフォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
function main() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauthV2 = configs.getObject("OAuth_V2");
    let parentFolderId = configs.get("ParentFolderId");
    if (parentFolderId === "") {
        throw new Error("Parent Folder ID is blank.");
    }
    const folderName = configs.get("FolderName");
    if (folderName === "" || folderName === null) {
        throw new Error("Folder Name is blank.");
    }
    const idDataDef = configs.getObject("FolderIdItem");
    const urlDataDef = configs.getObject("WebViewUrlItem");
    // If neither C4 nor C5 are set, throw error
    if (idDataDef === null && urlDataDef === null) {
        throw new Error("Neither of Data Items to save result are set.");
    }

    //// == 演算 / Calculating ==
    const driveId = getDriveId(oauthV2, parentFolderId);
    const folders = searchFolder(oauthV2, driveId, parentFolderId, folderName);
    const folderNum = folders.length;
    if (folderNum === 0) {
        throw new Error(`Could not find Folder:${folderName} with Parent Folder ID:${parentFolderId}`);
    }
    const folderIdList = [];
    const folderUrlList = [];
    for (let i = 0; i < folderNum; i++) {
        folderIdList.push(folders[i].id);
        folderUrlList.push(folders[i].webViewLink);
    }

    //// == ワークフローデータへの代入 / Data Updating ==
    setFolderData(idDataDef, folderIdList);
    setFolderData(urlDataDef, folderUrlList);
}

const URL_TOKEN_REQUEST = 'https://oauth2.googleapis.com/token';
const SCOPE = 'https://www.googleapis.com/auth/drive.readonly';

/**
 * @param auth HTTP 認証設定
 * @returns {any} アクセストークンを含むオブジェクト
 */
const getAccessToken = (auth) => {
    const privateKeyId = auth.getPrivateKeyId();
    const privateKey = auth.getPrivateKey();
    const serviceAccount = auth.getCustomSecret1();
    const scope = auth.getScope();
    if (!scope.split(' ').includes(SCOPE)) {
        throw new Error(`Scope ${SCOPE} must be included in the scope.`);
    }
    if (privateKeyId === '') {
        throw new Error('Private Key ID is required.');
    }
    if (privateKey === '') {
        throw new Error('Private Key is required.');
    }
    if (serviceAccount === '') {
        throw new Error('Service Account must be set to Custom Secret 1.');
    }
    const header = {
        "alg": "RS256",
        "typ": "at+jwt",
        "kid": privateKeyId
    };
    const now = Math.floor(Date.now() / 1000);
    const payload = {
        "iss": serviceAccount,
        "aud": URL_TOKEN_REQUEST,
        "sub": '',
        "iat": now,
        "exp": now + 3600,
        /**
         * https://developers.google.com/identity/protocols/oauth2/service-account#jwt-auth
         * "without OAuth" の話だが、OAuth でも 1 hour になるようだ。
         * 1 hour より長ければエラー。短ければ、1 hour のトークンが返ってくる。
         */
        scope
    };
    const keyB = rsa.readKeyFromPkcs8(privateKey);
    const assertion = jwt.build(header, payload, keyB);

    const response = httpClient.begin()
        .formParam("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer")
        .formParam('assertion', assertion)
        .post(URL_TOKEN_REQUEST);
    const responseText = response.getResponseAsString();
    if (response.getStatusCode() !== 200) {
        engine.log(responseText);
        throw new Error(`Failed to get Access token. status: ${response.getStatusCode()}`);
    }
    const result = JSON.parse(response.getResponseAsString());
    if (result.access_token === undefined) {
        engine.log(responseText);
        throw new Error(`Failed to get Access token. access token not found.`);
    }
    return result;
};

/**
 * 親フォルダのドライブ ID を取得する
 * @param {AuthSettingWrapper} oauthV2  OAuth2 認証設定（サービスアカウント設定）
 * @param {String} parentFolderId 親フォルダの ID
 * @return {String} driveId ドライブ ID (共有ドライブになければ null)
 */
function getDriveId(oauthV2, parentFolderId) {
    if (parentFolderId === "root") {
        return null;
    }
    const url = `https://www.googleapis.com/drive/v3/files/${parentFolderId}`;
    let request = httpClient.begin();
    request = request.oauth2JwtBearer(oauthV2, () => getAccessToken(oauthV2));

    const response = request.queryParam("fields", "driveId")
        .queryParam("supportsAllDrives", "true")
        .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status >= 300) {
        const errorMsg = `Failed to get parent folder with parent folder ID:${parentFolderId}. status:${status}`;
        engine.log(responseTxt);
        throw new Error(errorMsg);
    }
    const driveId = JSON.parse(responseTxt).driveId;
    if (driveId === undefined) {
        return null;
    }
    return driveId;
}

/**
 * Google ドライブのフォルダを検索
 * @param {AuthSettingWrapper} oauthV2  OAuth2 認証設定（サービスアカウント設定）
 * @param {String} driveId 親フォルダのドライブ ID (共有ドライブになければ null)
 * @param {String} parentFolderId 親フォルダの ID
 * @param {String} folderName 検索するフォルダの名前
 * @return {Array} folders 検索結果一覧
 * @return {String} folders[].id フォルダの ID
 * @return {String} folders[].webViewLink フォルダの表示 URL
 */
function searchFolder(oauthV2, driveId, parentFolderId, folderName) {
    const folderNameRep = folderName.replace(/['\\]/g, "\\$&"); // ' と \ をエスケープ
    const q = `mimeType = 'application/vnd.google-apps.folder' and trashed = false and name = '${folderNameRep}' and '${parentFolderId}' in parents`;
    const url = "https://www.googleapis.com/drive/v3/files";
    let request = httpClient.begin();

    request = request.oauth2JwtBearer(oauthV2, () => getAccessToken(oauthV2));
    request = request.queryParam("q", q)
        .queryParam("pageSize", "1000")
        .queryParam("fields", "files(id,webViewLink)");
    if (driveId !== null) { // 親フォルダが共有ドライブにある場合
        request = request
            .queryParam("includeItemsFromAllDrives", "true")
            .queryParam("supportsAllDrives", "true")
            .queryParam("corpora", "drive")
            .queryParam("driveId", driveId);
    }
    const response = request.get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status >= 300) {
        const errorMsg = `Failed to search. status:${status}`;
        engine.log(responseTxt);
        throw new Error(errorMsg);
    }
    const folders = JSON.parse(responseTxt).files;
    return folders;
}

/**
 * フォルダの情報をデータ項目にセットする
 * @param {ProcessDataDefinitionView} dataDef 保存先データ項目の ProcessDataDefinitionView
 * @param {Array<String>} folderInfoList 保存するフォルダ情報の配列
 */
function setFolderData(dataDef, folderInfoList) {
    if (dataDef !== null) {
        //Multiple Judge
        if (dataDef.matchDataType("STRING_TEXTFIELD") && folderInfoList.length > 1) {
            throw new Error("Multiple folders are found. Can't set data to single-line string Data Item.");
        }
        const folderInfoStr = folderInfoList.join("\n");
        engine.setData(dataDef, folderInfoStr);
    }
}

]]></script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAA71JREFUWEfF
V11oFFcU/s7M7K6TRs1vK1VUSGmbCK2SB6VFgpLWlYC2omIDLaUlCBGfimwWgw9Fu9mW0ocSoUhE
aKmlgUgUyShiEUWSh4AW7L9CS5PGZhuTJmTi7swcmUn3d+ZOdtGy87Ts3HvOd77zfefeIZT5oVLy
h2MP3wTMViJqZqABQM1/+6cIuMvMo4B8RYuGzhUbd0kArT1TK2VWj5CEg2DUFRWYkGALX5ikf3Kl
q2bGb48vgJ0x/T2WEC86cWEmQoIsRIai6mkRCCGAcHy+F0ydRVW81CLik1qk4pDXMk8A4bj+NRhv
LRW3pPeEs1pEbXeTVPDPE63clc3NRB4DTs8JfX6V7d2soKVRgizlk5cyGBdvmbj8velLDDHez9VE
JoqtdoXU3/wE19Io452tCtQgUP2Uu3u/TliInE1CT/pgICQM1p9LuyMTZUdMP06Eo37wYweC2LhO
wsQ0o245QZHzVxsm8O2IgS+vG74sMOPEpajabS/KAAjH9Um/6vdvUdD+qoKQAiykgFmdUb/CzcLE
DCN+PoWfxi0xCEJCi6j1GQDOhCNrQLRjdQ2h+40g1tdnE/4zy6gIkdOO3Mdi4OodE59eTPmbhKU9
9sR0IoZj870gsec7tivY1axAkbIxDQuY/JexaiWBCoiYnmd8fsnAzV98BMl8UotWHHK27uzRhxnY
7AX55XUSjrQFULvcTbdNs92G2kr3u1u/W4h+I1YjASNDXeqWRQZ69EnAe85Hdwew9QXZVeXsAqP3
soENayS0bZJR4EpHJ2eupTA4KmQhoXWpi00N9+j2qhyCF7l4/SUZHdsUVC7Lr9Du87UfTXx8IYW1
dYRje4JYXe1m4d7fjI8GkxibYi9yLa1LlYUAbHEd3xdE0xoXLhQqPdchuZlsnZwfNXDqqqct8wC4
WlBK0FLA5gDMtsBLhJ+9HcSLz7qrH3/AmFtgBJR8ym0uQwG4tGJawNBtE/3D+Szki9DDhrubZbzb
EsCyQBaz3wASmX7sAePDgST+SBToINeGokF0Yn8Qm9ZLTlXMwF/TjKdXuEewKHnSAPpHDHx1w0MD
uYPIcYLHKH7leRmHdyioqiCHdltU9u9inx/+tNDd73E4FY5iO6DoMPqgLYBtTTLuzzBWVZHL7yIw
cw8Zfd8Z0G6754DnYSQ6jm2fd74WQMMzhMpQcdXb7br+s4nYoMd5IDqOnZFcxIWkWPpF64QXkvSG
sl7JsiDKeCn9X5go9VqeBlHWD5M0iLJ+mhUquSwfp49ru6X2PwLQFL0wM02BagAAAABJRU5ErkJg
gg==
</icon>
    
<test><![CDATA[
const PRIVATE_KEY = `-----BEGIN PRIVATE KEY-----
MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQD3Zg0KVn2jff8t
NHk7p8uWEvsaxA59CkGi1v81kyVsnd+yxm23nWIKhGplhy0hK7dnBP3OMB0YCfvo
yXqryQMJb96xMyPkW+n9a1uh3wOibpPzhw/QbVzd5vgMcK9qN2M5oB1iYLEUvlGq
ogQ8r1gYUlt/Of0oIYKIwe9HiQXUTNxnNyW+wrURNkDio4QKMvAEqdG4iEzShAzE
bNLOG4YAdmKxZ+gL0646s5XRTIO7q/3haiF9BszxFul9GiugQ8rdPKxJEvQ9YMMt
cz39wVM4ZvJ8gmUrD5wwucDQXfeiP7bU9meBAQGpXcmYBFpBHI0hTEHYqM0MZ7pW
JVB9eEeFAgMBAAECggEBAK5LBCbjVjJHgu37COoBRcmd57AsrbRj9Gffpf69guEp
vD570zJHu5mDPl32xNGYteXrO0/2z5hu+D1BLJ43yF7upGociE3Kf2fdKbo5nprh
4nPwFDEXyxQ+M0S4YqynBs3DQtBbJIZjqq9W4ztJoPvJkdJpLTQHn6nvTz8LhsLQ
XN9nTWqTNQ3KSiUXPrXkV0dZ2sm2OCjQE99X9rm7araP6Y1FO2irGySPftwGnR+C
/jw1vLzeTCsI9+pZQ2A3JZMwYB5UPQPo/roWJ7tfrT/aT6h+eLpavDUd5W0Wowh/
HqzFQE2bJGE09F8w9mHaQAI+hG/Lr7BbO4sl3n5E3GUCgYEA/TZZc96Jqsom2f5g
iXtl6hX/5DrKVfHp6RzRpQ8aKNokJdTvtd25YiWHUY8h25O28Wdo9QDsKMkuCnlz
EOV3/624iiTGzuVCpB2/LInO4uL5mqYtBVHVDwR41WCOM2RbX5HyB8NqpycIHSO5
gZtb48OSJnGZbHEn1BkoaoywzwcCgYEA+h9Q/Bz/09GHfMNUfsjp4cQ67IX1iHqA
noPqnD8KY1UA2+KR3SBa04zk4KQkilNN5wb1r4XLvFnIWjEEicCQqsw2aEnJwGBI
6Tvd6KWw4xON2SqPlgPH75AOUQwbrsF0Gbee3OktMdOPsG86cTES7XwCOj1syN9d
kxyEMbIbRhMCgYAA8Vbb65QvopkKbrwFRwRWHsbZHq7qKwBn8ceGCcxbIpTH30cV
MkIib2lVkGbb3mzr8Sqe3uYCMN2PBGy9P113AjqRqRlkY84ftkyj6c9vYND1FnFM
d8WHTMj2YmmlH1aHwI9aIAwhmy+YjC2AogdxjaTZp8qecL1pOL7BxsxRuQKBgQCJ
qkjhqnhoNk/zLHNKIP0RhPbFjemZR4uZM5QikVP/Xh7N54NPCOrUuxySQ+XUuIsN
GDiLdgGv1l6+vXH4+6LkTue3OL2xg409yfSWgvO719xf5dwHvmcCBPDMTPTDl7h2
Gyl1/2UfoojYnC+3c0Iuse1r7rj8SmxvduePjq8SPwKBgACswSW/FWGFyqfhXvIv
QWSZF/yiIsywjJgiTsRp92Cr98QDQNC0c8SCQWew3T1r/CHX3EDqjf3djx5qISpi
ESFz5+HMVWL2lMD5KqLxIdHZNe4fbPyW779yMNdyd0rlgOS1kM3WrYdV9tgjc1VI
lweR14IODzhshANib/N8F47e
-----END PRIVATE KEY-----`;

const CERTIFICATE = `-----BEGIN CERTIFICATE-----
MIIDbzCCAlegAwIBAgIUPV0u0uVd+8UHrS6NRz/xVad9oRUwDQYJKoZIhvcNAQEL
BQAwRzELMAkGA1UEBhMCSlAxDjAMBgNVBAgMBUt5b3RvMRIwEAYDVQQKDAlRdWVz
dGV0cmExFDASBgNVBAsMC0RldmVsb3BtZW50MB4XDTI0MDExODA4MDYxMVoXDTI0
MDIxNzA4MDYxMVowRzELMAkGA1UEBhMCSlAxDjAMBgNVBAgMBUt5b3RvMRIwEAYD
VQQKDAlRdWVzdGV0cmExFDASBgNVBAsMC0RldmVsb3BtZW50MIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA92YNClZ9o33/LTR5O6fLlhL7GsQOfQpBotb/
NZMlbJ3fssZtt51iCoRqZYctISu3ZwT9zjAdGAn76Ml6q8kDCW/esTMj5Fvp/Wtb
od8Dom6T84cP0G1c3eb4DHCvajdjOaAdYmCxFL5RqqIEPK9YGFJbfzn9KCGCiMHv
R4kF1EzcZzclvsK1ETZA4qOECjLwBKnRuIhM0oQMxGzSzhuGAHZisWfoC9OuOrOV
0UyDu6v94WohfQbM8RbpfRoroEPK3TysSRL0PWDDLXM9/cFTOGbyfIJlKw+cMLnA
0F33oj+21PZngQEBqV3JmARaQRyNIUxB2KjNDGe6ViVQfXhHhQIDAQABo1MwUTAd
BgNVHQ4EFgQU+XQRQgTm3ffYqLngkqr03TFcbvcwHwYDVR0jBBgwFoAU+XQRQgTm
3ffYqLngkqr03TFcbvcwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
AQEAOnZodDZ4tqjkofJbIcuXczFGPta6geFl/my3H2Ubf2PJNEkDxklgml7uMych
vs/lWi0p7YQII52lbMytADKeG/YLOBVQMp5e3WDI3D+630b3T20AwZcXW3KuAYn1
sQuSh7RijcOKDoTMQNUCMjgBbzr5Z4eq0HYl/Uivmkdh5YH0nU2+LbU/G1RDDodh
Q+J3TyL+Ms9ba5V8/7gs7Vaz9uuRBdYpq/MP+Iyb78/yIGOxk9Qj0fXdc+W69XGP
rqpI6o1cfaFHC3zkRdyZA9Tvh3yE3XID9J5xRZRmUuCzUR4YkJQx436E7EzVohq7
lc8AgiU0Y7Qg6Nm8cXQ7LgMfKw==
-----END CERTIFICATE-----`;

/**
 * 設定の準備 - 保存する文字型データ項目が複数行
 * @param scome スコープ
 * @param privateKeyId 秘密鍵 ID
 * @param privateKey 秘密鍵
 * @param serviceAccount サービスアカウント
 * @param folderId フォルダ ID
 * @param folderName フォルダ名
 * @param isSingleLine 保存先データ項目が単一業かどうか
 * @return {
 *     idDef: {Object},
 *     urlDef: {Object}
 * }
 */
const prepareConfigs = (scope, privateKeyId, privateKey, serviceAccount, folderId, folderName, isSingleLine = false) => {
    // 認証設定を作成し、指定
    const jwtAuth = httpClient.createAuthSettingOAuth2JwtBearer('JWT', scope, '', '', privateKeyId, privateKey, serviceAccount, '');
    configs.putObject('OAuth_V2', jwtAuth);

    configs.put('ParentFolderId', folderId,);
    configs.put('FolderName', folderName);

    // 文字型データ項目を準備して、config に指定
    let dataType = 'STRING_TEXTAREA';
    if (isSingleLine) {
        dataType = 'STRING_TEXTFIELD';
    }
    const idDef = engine.createDataDefinition('ファイルID', 3, 'q_ids', dataType);
    configs.putObject('FolderIdItem', idDef);
    engine.setData(idDef, '事前文字列');
    const urlDef = engine.createDataDefinition('表示URL', 4, 'q_urls', dataType);
    configs.putObject('WebViewUrlItem', urlDef);
    engine.setData(urlDef, '事前文字列');

    return {
        idDef,
        urlDef
    };
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
        expect(e.message).toEqual(errorMsg);
    }
    if (!failed) {
        fail();
    }
};

/**
 * スコープが空
 */
test('Scope is empty', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs('', privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', 'フォルダ1');

    assertError(`Scope ${SCOPE} must be included in the scope.`);
});

const ANOTHER_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';

/**
 * スコープに必須スコープを含まない
 */
test('Required scope is missing', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs(ANOTHER_SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', 'フォルダ1');

    assertError(`Scope ${SCOPE} must be included in the scope.`);
});

/**
 * 秘密鍵 ID が空
 */
test('Private Key ID is empty', () => {
    const privateKeyId = '';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', 'フォルダ1');

    assertError('Private Key ID is required.');
});

/**
 * カスタム秘密情報1 に設定されているサービスアカウントが空
 */
test('Service Account is empty', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = '';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', 'フォルダ1');

    assertError('Service Account must be set to Custom Secret 1.');
});

/**
 * フォルダ名が空でエラーになる場合
 */
test('Folder Name is blank.', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', '');
});

/**
 * 検索したフォルダの ID を保存する文字型データ項目と検索したフォルダの表示 URL を保存するデータ項目の両方が未設定でエラーになる場合
 */
test('Neither of Data Items to save result are set.', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, 'folderId-12345', 'フォルダ1');

    // ID を保存する文字型データ項目を未設定に上書き
    configs.put('FolderIdItem', '');

    // URL を保存する文字型データ項目を未設定に上書き
    configs.put('WebViewUrlItem', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Neither of Data Items to save result are set.');
});

/**
 * サービスアカウント設定を使用する場合、親フォルダ ID が設定されていないとエラー
 */
test('Parent Folder ID is blank.', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, '', 'フォルダ1');

    assertError('Parent Folder ID is blank.');
});

/**
 * トークン取得リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param {String} scope
 * @param {String} serviceAccount
 */
const assertTokenRequest = ({
                                url,
                                method,
                                contentType,
                                body
                            }, scope, serviceAccount) => {
    expect(url).toEqual(URL_TOKEN_REQUEST);
    expect(method).toEqual('POST');
    expect(contentType).startsWith('application/x-www-form-urlencoded');
    const query = `grant_type=${encodeURIComponent('urn:ietf:params:oauth:grant-type:jwt-bearer')}&assertion=`;
    expect(body).startsWith(query);
    const assertion = decodeURIComponent(body.substring(query.length));

    const publicKey = rsa.readKeyFromX509(CERTIFICATE);
    expect(jwt.verify(assertion, publicKey)).toEqual(true);

    const payloadJson = base64.decodeFromUrlSafeString(assertion.split('.')[1]);
    const payload = JSON.parse(payloadJson);
    expect(payload.iss).toEqual(serviceAccount);
    expect(payload.aud).toEqual(URL_TOKEN_REQUEST);
    expect(payload.scope).toEqual(scope);
};

/**
 * リクエストのテスト（親フォルダのドライブ ID を取得する）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param token
 * @param parentFolderId
 */
const assertGetDriveIdRequest = ({ url, method, headers }, token, parentFolderId) => {
    expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${parentFolderId}?fields=driveId&supportsAllDrives=true`);
    expect(method).toEqual('GET');
    expect(headers.Authorization).toEqual(`Bearer ${token}`);
};


/**
 * リクエストのテスト（フォルダを検索する）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param token
 * @param driveId (共有ドライブになければ null)
 * @param parentFolderId
 * @param folderName
 */
const assertSearchFolderRequest = ({ url, method, headers }, token, driveId, parentFolderId, folderName) => {
    const encodedFolderName = encodeURIComponent(folderName)
        .replace(/%20/g, '+') // HttpRequestWrapper#queryParam() はスペースを + に置き換える
        .replace(/\!/g, '%21') // encodeURIComponent() でエンコードされない文字をエンコード
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
    const q = `mimeType+%3D+%27application%2Fvnd.google-apps.folder%27+and+trashed+%3D+false+and+name+%3D+%27${encodedFolderName}%27+and+%27${parentFolderId}%27+in+parents`;
    if (driveId !== null) { // 親フォルダが共有ドライブにある場合
        expect(url).toEqual(`https://www.googleapis.com/drive/v3/files?q=${q}&pageSize=1000&fields=files%28id%2CwebViewLink%29&includeItemsFromAllDrives=true&supportsAllDrives=true&corpora=drive&driveId=${driveId}`);
    } else {
        expect(url).toEqual(`https://www.googleapis.com/drive/v3/files?q=${q}&pageSize=1000&fields=files%28id%2CwebViewLink%29`);
    }
    expect(method).toEqual('GET');
    expect(headers.Authorization).toEqual(`Bearer ${token}`);
};

/**
 * GET リクエスト（親フォルダのドライブ ID を取得する）のレスポンスを準備
 * @param id ドライブID作成用文字列
 * @return {Object} responseObj
 */
const prepareGetDriveIdResponse = (id) => {
    return {
        "driveId": id
    }
};

/**
 * GET リクエスト（フォルダを検索する）のレスポンスを準備
 * @param id ドライブID作成用文字列
 * @param num
 * @return {Object} responseObj
 */
const prepareGetSearchDriveResponse = (id) => {
    return {
        "files": [
            {
                "id": `Folder1_${id}`,
                "webViewLink": `https://drive.google.com/drive/folders/Folder1_${id}`
            },
            {
                "id": `Folder2_${id}`,
                "webViewLink": `https://drive.google.com/drive/folders/Folder2_${id}`
            },
            {
                "id": `Folder3_${id}`,
                "webViewLink": `https://drive.google.com/drive/folders/Folder3_${id}`
            }
        ]
    };
};

/**
 * GET API リクエストでエラー
 *（親フォルダのドライブ ID を取得する）
 */
test('GET Get Parent folderId Failed', () => {
    const privateKeyId = 'key-12345';
    const serviceAccount = 'service@questetra.com';
    const folderId = 'folderId-12345';
    const folderName = 'フォルダ1';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);

    let reqCount = 0;
    const token = 'token';
    httpClient.setRequestHandler((request) => {
        if (reqCount++ === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        assertGetDriveIdRequest(request, token, folderId);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(`Failed to get parent folder with parent folder ID:${folderId}. status:400`);
});

/**
 * GET API リクエストでエラー
 *（フォルダを検索する）
 */
test('GET Search Failed', () => {
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'folderId-67890';
    const folderName = 'フォルダ2';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);
    
    let reqCount = 0;
    const token = 'token';
    const driveId = 'driveId-12345';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetDriveIdResponse(driveId)));
        }
        assertSearchFolderRequest(request, token, driveId, folderId, folderName);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Failed to search. status:400');
});

/**
 * GET API 成功 - 共有ドライブでフォルダが見つかる場合 - URL を保存する文字型データ項目が未設定
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Success - Shared drive - UrlData Items to save result are not set', () => {
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'folderId-67890';
    const folderName = 'フォルダ2';
    const {
        idDef
    } = prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);

    // URL を保存する文字型データ項目を未設定に上書き
    configs.put('WebViewUrlItem', '');

    let reqCount = 0;
    const token = 'token2';
    const driveId = 'driveId-67890';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetDriveIdResponse(driveId)));
        }
        assertSearchFolderRequest(request, token, driveId, folderId, folderName);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetSearchDriveResponse('aaabbbccc111222333')));
    });
    // <script> のスクリプトを実行
    main();
    // 文字型データ項目の値をチェック	  
    expect(engine.findData(idDef)).toEqual('Folder1_aaabbbccc111222333\nFolder2_aaabbbccc111222333\nFolder3_aaabbbccc111222333');
});

/**
 * GET API 成功 - フォルダが見つかる場合 - マイドライブでフォルダが見つかる場合 - エスケープ文字
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Success - My drive - Escape character', () => {
    const scope = `${SCOPE} ${ANOTHER_SCOPE}`; // スコープを複数セットした場合のテスト
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'folderId-67890';
    const folderName = 'Fol\\d\'er';
    const {
        idDef,
        urlDef
    } = prepareConfigs(scope, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);

    let reqCount = 0;
    const token = 'token3';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, scope, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            // マイドライブの場合、ドライブIDが無い
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        assertSearchFolderRequest(request, token, null, folderId, 'Fol\\\\d\\\'er');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetSearchDriveResponse('dddeeefff444555666')));
    });
    // <script> のスクリプトを実行
    main();
    // 文字型データ項目の値をチェック	  
    expect(engine.findData(idDef)).toEqual('Folder1_dddeeefff444555666\nFolder2_dddeeefff444555666\nFolder3_dddeeefff444555666');

    expect(engine.findData(urlDef)).toEqual('https://drive.google.com/drive/folders/Folder1_dddeeefff444555666\nhttps://drive.google.com/drive/folders/Folder2_dddeeefff444555666\nhttps://drive.google.com/drive/folders/Folder3_dddeeefff444555666');
});

/**
 * GET API 成功 - フォルダが見つかる場合 - ID を保存する文字型データ項目が未設定
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Success - Shared drive - IdData Items to save result are not set', () => {
    const scope = `${ANOTHER_SCOPE} ${SCOPE}`; // スコープを複数セットした場合のテスト
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'folderId-67890';
    const folderName = 'フォルダ5';
    const {
        urlDef
    } = prepareConfigs(scope, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);

    // ID を保存する文字型データ項目を未設定に上書き
    configs.put('FolderIdItem', '');

    let reqCount = 0;
    const token = 'token4';
    const driveId = 'driveId-ghi012';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, scope, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetDriveIdResponse(driveId)));
        }
        assertSearchFolderRequest(request, token, driveId, folderId, folderName);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetSearchDriveResponse('ggghhhiii777888999')));
    });
    // <script> のスクリプトを実行
    main();
    // 文字型データ項目の値をチェック	  
    expect(engine.findData(urlDef)).toEqual('https://drive.google.com/drive/folders/Folder1_ggghhhiii777888999\nhttps://drive.google.com/drive/folders/Folder2_ggghhhiii777888999\nhttps://drive.google.com/drive/folders/Folder3_ggghhhiii777888999');
});

/**
 * GET API 成功 - 検索したフォルダが見つからずエラー
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Could not find Folder', () => {
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'uvwx56789012';
    const folderName = 'folder6';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName);

    let reqCount = 0;
    const token = 'token5';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            // マイドライブの場合、ドライブIDが無い
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        assertSearchFolderRequest(request, token, null, folderId, folderName);
        // 親フォルダ内にリストが無い		
        const responsePostObj = {
            "files": []
        };
        return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(responsePostObj));
    });
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Could not find Folder:folder6 with Parent Folder ID:uvwx56789012');
});

/**
 * GET API 成功 - フォルダが複数見つかるが、 ID、URL を保存する文字型データ項目が単一行でエラー
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Cannot set multiple Folders to single-line string Data Item', () => {
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'yzab67890123';
    const folderName = 'folder7';
    prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName, true);

    let reqCount = 0;
    const token = 'token6';
    const driveId = 'Drive_jkl345';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetDriveIdResponse(driveId)));
        }
        assertSearchFolderRequest(request, token, driveId, folderId, folderName);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetSearchDriveResponse('jjjkkklll000111222')));
    });
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Multiple folders are found. Can\'t set data to single-line string Data Item.');
});

/**
 * GET API 成功 - フォルダが1つ見つかる ID、URL を保存する文字型データ項目が単一行
 *（親フォルダのドライブ ID を取得する）
 *（フォルダを検索する）
 */
test('Success - Set a Folder to single-line string Data Item', () => {
    const privateKeyId = 'key-67890';
    const serviceAccount = 'service2@questetra.com';
    const folderId = 'cdef78901234';
    const folderName = 'folder8';
    const {
        idDef,
        urlDef
    } = prepareConfigs(SCOPE, privateKeyId, PRIVATE_KEY, serviceAccount, folderId, folderName, true);

    let reqCount = 0;
    const token = 'token7';
    const driveId = 'Drive_mno678';
    httpClient.setRequestHandler((request) => {
        if (reqCount % 2 === 0) {
            assertTokenRequest(request, SCOPE, serviceAccount);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({
                'access_token': token
            }));
        }
        if (reqCount++ === 1) {
            assertGetDriveIdRequest(request, token, folderId);
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetDriveIdResponse(driveId)));
        }
        assertSearchFolderRequest(request, token, driveId, folderId, folderName);
        // 親フォルダ内に検索したフォルダが1つ見つかる
        const responsePostObj = {
            "files": [
                {
                    "id": `Folder1_mmmnnnooo333444555`,
                    "webViewLink": `https://drive.google.com/drive/folders/Folder1_mmmnnnooo333444555`
                }
            ]
        };
        return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(responsePostObj));
    });
    // <script> のスクリプトを実行
    main();
    // 文字型データ項目の値をチェック	  
    expect(engine.findData(idDef)).toEqual('Folder1_mmmnnnooo333444555');
    expect(engine.findData(urlDef)).toEqual('https://drive.google.com/drive/folders/Folder1_mmmnnnooo333444555');
});

]]></test>
</service-task-definition>
