<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2024-01-26</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Box: Apply Watermark to Folder</label>
    <label locale="ja">Box: フォルダに電子すかし適用</label>
    <summary>This item applies watermark to all files in the specified folder on Box.</summary>
    <summary locale="ja">この工程は、Box の指定フォルダ内の全ファイルに電子すかしを適用します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-folder-watermark-apply/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-folder-watermark-apply/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Folder ID to apply watermark to</label>
            <label locale="ja">C2: 電子すかしを適用するフォルダ ID</label>
        </config>
    </configs>

    <script><![CDATA[

function main(){
    const oauth2 = configs.getObject("conf_OAuth2");
    const folderId = decideFolderId();
    applyWatermark(oauth2, folderId);
}

/**
  * フォルダ ID を config から読み出して出力する
  * @return {String} folderId フォルダ ID
  */
function decideFolderId(){
    const folderId = engine.findData(configs.getObject('conf_FolderId'));
    if (folderId === '' || folderId === null) {
        throw 'Folder ID is blank.';
    }
    return folderId;
}

/**
  * 電子すかしを適用
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @param {String} folderId フォルダ ID
  */
function applyWatermark(oauth2, folderId) {
    const jsonBody = {};
    jsonBody['watermark'] = {'imprint': 'default'};
    const url = `https://api.box.com/2.0/folders/${encodeURIComponent(folderId)}/watermark`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(jsonBody), 'application/json; charset=UTF-8')
        .put(url);
    const status = response.getStatusCode();
    if (status !== 200 && status !== 201) { // 200: 更新, 201: 新規適用
        engine.log(response.getResponseAsString());
        throw `Failed to apply watermark. status:${status}`;
    }
}

    ]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param folderId
 */
const prepareConfigs = (folderId) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);

    // フォルダ ID を保存した文字型データ項目（単一行）を準備し、設定
    const folderIdDef = engine.createDataDefinition('フォルダ ID', 1, 'q_FolderId', 'STRING_TEXTFIELD');
    engine.setData(folderIdDef, folderId);
    configs.putObject('conf_FolderId', folderIdDef);
}

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * フォルダ ID の値が空でエラー
 */
test('Folder ID is blank', () => {
    prepareConfigs(null);
    assertError(main, 'Folder ID is blank.');
});

/**
 * API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param folderId
 */
const assertRequest = ({url, method, contentType, body}, folderId) => {
    expect(url).toEqual(`https://api.box.com/2.0/folders/${encodeURIComponent(folderId)}/watermark`);
    expect(method).toEqual('PUT');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.watermark.imprint).toEqual('default');
};

/**
 * API リクエストで失敗
 */
test('Fail in API Request', () => {
    prepareConfigs('folderId-1');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'folderId-1');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError(main, 'Failed to apply watermark. status:400');
});

/**
 * 電子すかし適用成功
 * 新規適用の場合、API のレスポンスは 201
 */
test('Succeed to apply watermark', () => {
    prepareConfigs('folderId-1');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'folderId-1');
        return httpClient.createHttpResponse(201, 'application/json', '{}');
    });

    main();
});

/**
 * 電子すかし適用成功
 * 更新の場合、API のレスポンスは 200
 */
test('Succeed to update watermark', () => {
    prepareConfigs('folderId-2');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'folderId-2');
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    main();
});

    ]]></test>

</service-task-definition>
