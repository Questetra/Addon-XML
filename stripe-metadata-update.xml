<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-09-09</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Update Metadata of Customer/Invoice</label>
    <label locale="ja">Stripe: 顧客/請求書のメタデータを更新</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-metadata-update/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-metadata-update/
    </help-page-url>

    <summary>This item updates metadata of a customer or an invoice on Stripe. Metadata Fields whose keys are not
        specified remain unchanged.</summary>
    <summary locale="ja">この工程は、Stripe 上の顧客または請求書のメタデータを更新します。キーを指定していないメタデータフィールドは変更されません。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_Id" required="true" form-type="SELECT" editable="true"
                select-data-type="SELECT_SINGLE|STRING_TEXTFIELD">
            <label>C2: ID of Customer or Invoice</label>
            <label locale="ja">C2: 顧客または請求書の ID</label>
        </config>
        <config name="conf_Key1" required="false" form-type="TEXTFIELD">
            <label>C-K1: Key of Metadata Field 1 to add/update/delete</label>
            <label locale="ja">C-K1: 追加/更新/削除するメタデータフィールド 1 のキー</label>
        </config>
        <config name="conf_Value1" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V1: New Value of Field 1 (if blank, delete the field)</label>
            <label locale="ja">C-V1: フィールド 1 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key2" required="false" form-type="TEXTFIELD">
            <label>C-K2: Key of Metadata Field 2 to add/update/delete</label>
            <label locale="ja">C-K2: 追加/更新/削除するメタデータフィールド 2 のキー</label>
        </config>
        <config name="conf_Value2" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V2: New Value of Field 2 (if blank, delete the field)</label>
            <label locale="ja">C-V2: フィールド 2 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key3" required="false" form-type="TEXTFIELD">
            <label>C-K3: Key of Metadata Field 3 to add/update/delete</label>
            <label locale="ja">C-K3: 追加/更新/削除するメタデータフィールド 3 のキー</label>
        </config>
        <config name="conf_Value3" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V3: New Value of Field 3 (if blank, delete the field)</label>
            <label locale="ja">C-V3: フィールド 3 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key4" required="false" form-type="TEXTFIELD">
            <label>C-K4: Key of Metadata Field 4 to add/update/delete</label>
            <label locale="ja">C-K4: 追加/更新/削除するメタデータフィールド 4 のキー</label>
        </config>
        <config name="conf_Value4" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V4: New Value of Field 4 (if blank, delete the field)</label>
            <label locale="ja">C-V4: フィールド 4 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key5" required="false" form-type="TEXTFIELD">
            <label>C-K5: Key of Metadata Field 5 to add/update/delete</label>
            <label locale="ja">C-K5: 追加/更新/削除するメタデータフィールド 5 のキー</label>
        </config>
        <config name="conf_Value5" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V5: New Value of Field 5 (if blank, delete the field)</label>
            <label locale="ja">C-V5: フィールド 5 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key6" required="false" form-type="TEXTFIELD">
            <label>C-K6: Key of Metadata Field 6 to add/update/delete</label>
            <label locale="ja">C-K6: 追加/更新/削除するメタデータフィールド 6 のキー</label>
        </config>
        <config name="conf_Value6" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V6: New Value of Field 6 (if blank, delete the field)</label>
            <label locale="ja">C-V6: フィールド 6 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key7" required="false" form-type="TEXTFIELD">
            <label>C-K7: Key of Metadata Field 7 to add/update/delete</label>
            <label locale="ja">C-K7: 追加/更新/削除するメタデータフィールド 7 のキー</label>
        </config>
        <config name="conf_Value7" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V7: New Value of Field 7 (if blank, delete the field)</label>
            <label locale="ja">C-V7: フィールド 7 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
        <config name="conf_Key8" required="false" form-type="TEXTFIELD">
            <label>C-K8: Key of Metadata Field 8 to add/update/delete</label>
            <label locale="ja">C-K8: 追加/更新/削除するメタデータフィールド 8 のキー</label>
        </config>
        <config name="conf_Value8" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>C-V8: New Value of Field 8 (if blank, delete the field)</label>
            <label locale="ja">C-V8: フィールド 8 の更新後の値（空の場合、フィールドごと削除します）</label>
        </config>
    </configs>

    <script><![CDATA[

const STRIPE_API_VERSION = '2022-08-01';
const FIELD_NUM = 8; // 扱うフィールドの数
const MAX_KEY_LENGTH = 40; // メタデータの key の最大文字数（Stripe の制限）
const MAX_VALUE_LENGTH = 500; // メタデータの value の最大文字数（Stripe の制限）

main();

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const id = retrieveId();
    const apiUri = decideApiUri(id);
    const metadataMap = retrieveMetadataMap();

    //// == Calculating / 演算 ==
    updateMetadata(auth, apiUri, metadataMap);
}

/**
  * config から顧客/請求書 ID を読み出す。空文字列の場合はエラー
  * @return {String} id 顧客/請求書 ID
  */
function retrieveId() {
    let id = configs.get('conf_Id'); // 固定値の場合
    const idDef = configs.getObject('conf_Id');
    if (idDef !== null) {
        if (idDef.matchDataType('SELECT_SINGLE')) { // 選択型データ項目の場合
            const select = engine.findData(idDef);
            if (select === null || select.size() === 0) { // 未選択
              throw 'Customer/Invoice ID is not selected.';
            }
            id = select.get(0).getValue();
        } else { // 文字型データ項目の場合
            id = engine.findData(idDef);
        }
    }
    if (id === null || id === '') {
        throw 'Customer/Invoice ID is blank.';
    }
    return id;
}

/**
  * id から API の URI を決定する。顧客/請求書 ID の形式でない場合、エラー
  * @param {String} id 顧客/請求書 ID
  * @return {String} apiUri
  */
function decideApiUri(id) {
    const prefix = id.substring(0, id.indexOf('_'));
    const baseUrl = 'https://api.stripe.com/v1/';
    switch (prefix) {
        case 'cus':
            return `${baseUrl}customers/${encodeURIComponent(id)}`;
        case 'in':
            return `${baseUrl}invoices/${encodeURIComponent(id)}`;
        default:
            throw 'Customer/Invoice ID must start with "cus_" or "in_".';
    }
}

/**
  * config からメタデータの key, value を読み出し、Map に格納して返す。以下の場合はエラー
  * - value は設定されているのに key が空
  * - key の指定が重複している
  * - key の文字数が Stripe の制限を超える
  * - value の文字数が Stripe の制限を超える
  * - 更新すべきメタデータがない
  * @return {Map<String, String>} metadataMap メタデータの Map
  */
function retrieveMetadataMap() {
    const metadataMap = new Map();
    for (let i = 0; i < FIELD_NUM; i++) {
        const key = configs.get(`conf_Key${i+1}`);
        const value = configs.get(`conf_Value${i+1}`);
        if (key === '') {
            if (value === '') {
                // key, value がともに空白の組は無視
                continue;
            }
            throw `C-V${i+1} is set but C-K${i+1} is blank.`;
        }
        if (metadataMap.has(key)) { // key の指定が重複
            throw `Field Key "${key}" is set multiple times.`;
        }
        if (key.length > MAX_KEY_LENGTH) {
            throw `C-K${i+1} exceeds the limit of ${MAX_KEY_LENGTH} characters.`;
        }
        if (value.length > MAX_VALUE_LENGTH) {
            throw `C-V${i+1} exceeds the limit of ${MAX_VALUE_LENGTH} characters.`;
        }
        metadataMap.set(key, value);
    }
    if (metadataMap.size === 0) {
        throw 'No metadata fields to update.';
    }
    return metadataMap;
}

/**
  * メタデータを更新する
  * @param {String} oauth 認証設定
  * @param {String} apiUri リクエスト URI
  * @param {Map<String, String>} metadataMap メタデータの Map
  */
function updateMetadata(auth, apiUri, metadataMap) {
    let request = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .header('Stripe-Version', STRIPE_API_VERSION);
    metadataMap.forEach((value, key) => {
        request = request.formParam(`metadata[${key}]`, value);
    });
    const response = request.post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to update metadata. status: ${status}`;
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAvJJREFUWEfF
        l19I01EUxz/XKZqWNbVS6cH+UfSUGQlCD0EQRCkoFDkDUzENi6IgkB4sKEgjDStFnVlzalC9+BBR
        IEFBEeVbFP3R/lhRpLRpKHO78dtv021u+pszfnv87Zzv+dxzzj33XoHOP6E1fvleGe9KJF/CDiSZ
        CDIAo8d/BMkggn4BfVE27rX0ir9atOcEKC6WqdEOTkuoAOK0iALjAponY7jY0SF+zOYzK0CJSVYI
        uAQkaAwcaDYm4VS7VTSH8g8JUFokryOpnGdgfzdBk7lTHAmmFRSgxCS7BBxYkOAeEQnd7VZRGKg5
        A2BBVz4z2oxM+AF4at60kCsP1JJQ6dsTUwBKtxscvI+g4bRyjzljWOfdHVMAZSZZL+G4VpVI7AQ0
        tFnFCUXDDaAMGWciv8PY55HEV3zHDTaSlWHlBigzySIJlvmoxsbBxHj4ngIOtllFpxug1CTNQMls
        MjnbIS0d7t6etmpshe9DcKEmfACg3WwVpSpAoXyFIDNQZuMm2J2rfk1Ng6XL4NlTSE4Blwt6LOB0
        QtEhkBKGvsCdHli9FnLzoe8h9L8MASfpN3eJLd4MDPscLFMeTTcgOhocDjXNi5fAr5+wYqUa+NOA
        ClF9FiYnVdtHD2DnLpiYgNhYqKmGr5+DQoyYrSLJCyCDmdQ1gtEIdpv6r7LKbgscroKr9ZC/Dzpa
        VIBr9VBeBYYoiDKotkLA/V7/svnGMVuFYuLugaAAx05C+ipIWa4KShe8eA7ZOdB4GQr2TwMMfoSM
        NfDuLazfALY/YLdD9y148zp4GXwBgpag9goYk2BkGJ48hj15MDoK8QnQUAtZ26DrJrRaVMBRO9Sd
        h7wC2JylAp87A9+G5ipBiCbU0ttbs6HiqFqCkA0XTCigCefchqFgFsWrO2TggxZcP5vpbRjJIAo7
        rMfBbxDpPoo941i/w0gB0P04ViB0vZB4m0nXK5kXQtdL6X/JRLjXcp9M6Pcw8ULo+jTznXK6PU7n
        O2q1+v0D2nRCMMki7aoAAAAASUVORK5CYII=
    </icon>

    <test><![CDATA[

const STRIPE_VERSION = '2022-08-01';
const FIELD_SIZE = 8; // 扱うフィールドの数
const KEY_MAX_LENGTH = 40; // key の最大長
const VALUE_MAX_LENGTH = 500; // value の最大長

/**
 * 指定の長さの文字列を作成
 * @param length
 * @return string
 */
const createString = (length) => {
    const sourceStr = 'あいうえおかきくけこ';
    const string = sourceStr.repeat(Math.floor(length / sourceStr.length))
        + sourceStr.slice(0, length % sourceStr.length);
    return string;
}

/**
 * 設定の準備
 * @param id
 * @param keys
 * @param values
 */
const prepareConfigs = (id, keys, values) => {
    configs.put('conf_Auth', 'Stripe');
    configs.put('conf_Id', id);

    for (let i = 0; i < FIELD_SIZE; i++) {
        configs.put(`conf_Key${i+1}`, keys[i]);
        configs.put(`conf_Value${i+1}`, values[i]);
    }
}

const SAMPLE_KEYS = new Array(FIELD_SIZE).fill('').map((_, i) => `フィールド ${i+1}`);
const SAMPLE_VALUES = new Array(FIELD_SIZE).fill('').map((_, i) => `フィールド ${i+1} の値`);

/**
 * 顧客/請求書 ID が空
 */
test('Customer/Invoice ID is blank', () => {
    prepareConfigs('', SAMPLE_KEYS, SAMPLE_VALUES);
    expect(execute).toThrow('Customer/Invoice ID is blank.');
});

/**
 * 顧客/請求書 ID が不正な形式 - アンダーバーを含まない
 */
test('Customer/Invoice ID is invalid - no underscore', () => {
    prepareConfigs('No-Underscore', SAMPLE_KEYS, SAMPLE_VALUES);
    expect(execute).toThrow('Customer/Invoice ID must start with "cus_" or "in_".');
});

/**
 * 顧客/請求書 ID が不正な形式 - アンダーバーより前の prefix が cus または in でない
 */
test('Customer/Invoice ID is invalid - prefix not supported', () => {
    prepareConfigs('pi_00001', SAMPLE_KEYS, SAMPLE_VALUES);
    expect(execute).toThrow('Customer/Invoice ID must start with "cus_" or "in_".');
});

/**
 * 値が指定されているのにキーが空
 */
test('Key is blank while its value is set', () => {
    prepareConfigs('cus_00001', SAMPLE_KEYS, SAMPLE_VALUES);
    configs.put('conf_Key1', '');
    expect(execute).toThrow('C-V1 is set but C-K1 is blank.');
});

/**
 * キーが重複
 */
test('Same key is set multiple times', () => {
    prepareConfigs('cus_00001', SAMPLE_KEYS, SAMPLE_VALUES);
    configs.put('conf_Key2', SAMPLE_KEYS[7]); // 2 番目と 8 番目が重複
    expect(execute).toThrow('Field Key "フィールド 8" is set multiple times.');
});

/**
 * キーが長すぎる
 */
test('Key is too long', () => {
    prepareConfigs('cus_00001', SAMPLE_KEYS, SAMPLE_VALUES);
    configs.put('conf_Key3', createString(KEY_MAX_LENGTH + 1));
    expect(execute).toThrow(`C-K3 exceeds the limit of ${KEY_MAX_LENGTH} characters.`);
});

/**
 * 値が長すぎる
 */
test('Value is too long', () => {
    prepareConfigs('cus_00001', SAMPLE_KEYS, SAMPLE_VALUES);
    configs.put('conf_Value4', createString(VALUE_MAX_LENGTH + 1));
    expect(execute).toThrow(`C-V4 exceeds the limit of ${VALUE_MAX_LENGTH} characters.`);
});

const ALL_BLANK = new Array(FIELD_SIZE).fill('');

/**
 * メタデータの key, value がすべて空の場合、エラー
 */
test('No fields to update', () => {
    prepareConfigs('cus_00001', ALL_BLANK, ALL_BLANK);
    expect(execute).toThrow('No metadata fields to update.');
});

/**
 * メタデータを更新する API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.contentType
 * @param request.body
 * @param expectedUrl
 * @param keys
 * @param values
 */
const assertUpdateMetadataRequest = ({url, method, headers, contentType, body}, expectedUrl, keys, values) => {
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('POST');
    expect(headers.get('Stripe-Version')).toEqual(STRIPE_VERSION);
    expect(contentType).startsWith('application/x-www-form-urlencoded');
    const formParamList = [];
    for (let i = 0; i < FIELD_SIZE; i++) {
        pushToListIfNotBlank(formParamList, keys[i], values[i]);
    }
    const expectedBody = formParamList.join('&')
        .replace(/%20/g, '+'); // HttpRequestWrapper#formParam() はスペースを + に置き換える
    expect(body).toEqual(expectedBody);
};

/**
  * key が空でない場合のみ、metadata[key]=value 形式の文字列を list に追加する
  * @param list
  * @param key
  * @param value
  */
const pushToListIfNotBlank = (list, key, value) => {
    if (key !== '') {
        const encodedParamName = encodeURIComponent(`metadata[${key}]`);
        list.push(`${encodedParamName}=${encodeURIComponent(value)}`);
    }
};

/**
 * 成功 - 顧客 ID を指定した場合
 * キー、値は最大文字数でテスト
 */
test('Success - Customer ID', () => {
    const keys = JSON.parse(JSON.stringify(SAMPLE_KEYS)); // ディープコピー
    keys[6] = createString(KEY_MAX_LENGTH);
    const values = JSON.parse(JSON.stringify(SAMPLE_VALUES)); // ディープコピー
    values[7] = createString(VALUE_MAX_LENGTH);
    prepareConfigs('cus_00001', keys, values);

    const expectedUrl = 'https://api.stripe.com/v1/customers/cus_00001';
    httpClient.setRequestHandler((request) => {
        assertUpdateMetadataRequest(request, expectedUrl, keys, values);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    execute();
});

/**
 * 成功 - 請求書 ID を指定した場合
 */
test('Success - Invoice ID', () => {
    prepareConfigs('in_00001', SAMPLE_KEYS, SAMPLE_VALUES);

    const expectedUrl = 'https://api.stripe.com/v1/invoices/in_00001';
    httpClient.setRequestHandler((request) => {
        assertUpdateMetadataRequest(request, expectedUrl, SAMPLE_KEYS, SAMPLE_VALUES);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    execute();
});

/**
 * メタデータを更新する HTTP リクエストで失敗
 */
test('Fail to update metadata', () => {
    prepareConfigs('cus_00002', SAMPLE_KEYS, SAMPLE_VALUES);

    const expectedUrl = 'https://api.stripe.com/v1/customers/cus_00002';
    httpClient.setRequestHandler((request) => {
        assertUpdateMetadataRequest(request, expectedUrl, SAMPLE_KEYS, SAMPLE_VALUES);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to update metadata. status: 400');
});

/**
 * 成功 - key, value が空のものがある場合
 */
test('Success - Some keys and values are blank', () => {
    const keys = JSON.parse(JSON.stringify(SAMPLE_KEYS)); // ディープコピー
    keys[1] = '';
    keys[3] = '';
    const values = JSON.parse(JSON.stringify(SAMPLE_VALUES)); // ディープコピー
    values[1] = ''; // key が空のものは値も空にする
    values[3] = '';
    values[5] = ''; // value だけ空のものがあってもよい
    prepareConfigs('in_00002', keys, values);

    const expectedUrl = 'https://api.stripe.com/v1/invoices/in_00002';
    httpClient.setRequestHandler((request) => {
        assertUpdateMetadataRequest(request, expectedUrl, keys, values);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    execute();
});

    ]]></test>

</service-task-definition>
