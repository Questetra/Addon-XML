<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-05-19</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Download File as PDF/Text/Image</label>
    <label locale="ja">Box: ファイルを指定形式でダウンロード</label>
    <summary>This item downloads the specified file on Box in the specified file format.</summary>
    <summary locale="ja">この工程は、Box 上のファイルを指定形式でダウンロードします。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-representation-download/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-representation-download/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: File ID to download</label>
            <label locale="ja">C2: ダウンロードするファイルの ID</label>
        </config>
        <config name="conf_Representation" required="true" form-type="SELECT_ITEM">
            <label>C3: File Format in which to download the file</label>
            <label locale="ja">C3: ダウンロードするファイル形式</label>
            <item value="[pdf]">
                <label>PDF</label>
            </item>
            <item value="[extracted_text]">
                <label>Text</label>
                <label locale="ja">テキスト</label>
            </item>
            <item value="[jpg?dimensions=32x32]">
                <label>JPEG (32x32)</label>
            </item>
            <item value="[jpg?dimensions=94x94]">
                <label>JPEG (94x94)</label>
            </item>
            <item value="[jpg?dimensions=160x160]">
                <label>JPEG (160x160)</label>
            </item>
            <item value="[jpg?dimensions=320x320]">
                <label>JPEG (320x320)</label>
            </item>
            <item value="[jpg?dimensions=1024x1024]">
                <label>JPEG (1024x1024)</label>
            </item>
            <item value="[jpg?dimensions=2048x2048]">
                <label>JPEG (2048x2048)</label>
            </item>
            <item value="[png?dimensions=1024x1024]">
                <label>PNG (1024x1024)</label>
            </item>
            <item value="[png?dimensions=2048x2048]">
                <label>PNG (2048x2048)</label>
            </item>
        </config>
        <config name="conf_FileName" form-type="TEXTFIELD" el-enabled="true">
            <label>C4: File Name (named with the file name on Box if blank)</label>
            <label locale="ja">C4: ファイル名 (空白の場合、Box でのファイル名を使用します)</label>
        </config>
        <config name="conf_Files" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C5: File type data item to add the downloaded file</label>
            <label locale="ja">C5: ダウンロードファイルを追加保存するファイル型データ項目</label>
        </config>
    </configs>

    <script><![CDATA[

main();
function main(){
    const oauth2 = configs.get('conf_OAuth2');
    const fileId = decideFileId();
    const representation = configs.get('conf_Representation');
    const fileName = configs.get('conf_FileName');
    const fileDef = configs.getObject("conf_Files");

    const {urlTemplate, paged} = getRepresentationInfo(oauth2, fileId, representation);
    if (paged !== 'true') { // ページ割されていない場合
        const qfile = download(oauth2, urlTemplate, fileName);
        saveFile(fileDef, qfile);
        return;
    }
    // ページ割されている場合
    const qfiles = downloadPages(oauth2, urlTemplate, representation, fileName);
    saveFiles(fileDef, qfiles);
}

/**
  * ファイル ID を config から読み出す
  * @return {String} fileId ファイル ID
  */
function decideFileId() {
    const fileId = engine.findData(configs.getObject('conf_FileId'));
    if (fileId === '' || fileId === null) {
        throw 'File ID is blank.';
    }
    return fileId;
}

/**
  * レプレゼンテーションの情報を取得する GET リクエストを送信
  * @param {String} oauth2 OAuth2 設定
  * @param {String} fileId ファイル ID
  * @param {String} representation レプレゼンテーション
  * @return {Object} representationInfo
  * @return {String} representationInfo.urlTemplate ダウンロードの際の URL テンプレート
  * @return {String|undefined} representationInfo.paged ページ割されているかどうか
  */
function getRepresentationInfo(oauth2, fileId, representation) {
    const url = `https://api.box.com/2.0/files/${encodeURIComponent(fileId)}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('fields', 'representations')
        .header('X-REP-HINTS', representation)
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get representations. status:${status}`;
    }
    const {entries} = JSON.parse(responseStr).representations;
    if (entries.length === 0) {
        throw `The ${representation} representation is unavailable.`;
    }
    const urlTemplate = entries[0].content.url_template;
    const paged = entries[0].properties.paged; // "true", "false" or undefined
    return {urlTemplate, paged};
}

/**
  * レプレゼンテーションをダウンロードする GET リクエストを送信
  * ページ割されていない場合
  * @param {String} oauth2 OAuth2 設定
  * @param {String} urlTemplate URL テンプレート
  * @param {String} fileName ファイル名
  * @return {NewQfile} qfile ダウンロードしたファイル
  */
function download(oauth2, urlTemplate, fileName) {
    const url = urlTemplate.replace('{+asset_path}', '');
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('set_content_disposition_type', 'attachment')
        .get(url);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw `Failed to download the representation. status:${status}`;
    }
    const contentType = response.getContentType();
    const content = response.getResponse();
    const fileNameToSet = decideFileNameToSet(fileName, response);
    const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
        fileNameToSet, contentType, content
    );
    return qfile;
}

/**
  * レプレゼンテーションをダウンロードする GET リクエストを送信
  * ページ割されている場合
  * @param {String} oauth2 OAuth2 設定
  * @param {String} urlTemplate URL テンプレート
  * @param {String} representation レプレゼンテーション
  * @param {String} fileName ファイル名
  * @return {Array<NewQfile>} qfiles ダウンロードしたファイルを格納した配列
  */
function downloadPages(oauth2, urlTemplate, representation, fileName) {
    const extension = representation.substring(1,4); // jpg or png
    const qfiles = [];
    let pageNum = 1;
    const httpLimit = httpClient.getRequestingLimit();
    while (true) {
        if (pageNum + 1 > httpLimit) { // レプレゼンテーション情報の取得で 1 回リクエスト済み
            throw 'Number of necessary HTTP requests exceeds the limit.';
        }
        const url = urlTemplate.replace('{+asset_path}', `${pageNum}.${extension}`);
        const response = httpClient.begin()
            .authSetting(oauth2)
            .queryParam('set_content_disposition_type', 'attachment')
            .get(url);
        const status = response.getStatusCode();
        if (pageNum === 1 && status === 202) { // レプレゼンテーション作成中でダウンロードできない
            throw `The representation ${representation} is being created and not available yet. Please try again later.`;
        }
        if (pageNum > 1 && status === 404) { // ページを最後までダウンロードした。ループから抜ける
            break;
        }
        if (status !== 200) { // その他のエラー
            engine.log(response.getResponseAsString());
            throw `Failed to download the page ${pageNum} of the representation ${representation}. status:${status}`;
        }
        const contentType = response.getContentType();
        const content = response.getResponse();
        let fileNameToSet = decideFileNameToSet(fileName, response);
        fileNameToSet = `${pageNum}-${fileNameToSet}`; // ファイル名にページ番号を追加
        const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
            fileNameToSet, contentType, content
        );
        qfiles.push(qfile);
        pageNum++;
    }
    return qfiles;
}

/**
  * 保存時のファイル名を決定する
  * @param {String} fileName 新しく名前をつける場合のファイル名
  * @param {HttpResponseWrapper} response ファイルダウンロードのレスポンス
  * @return {String} fileNameToSet 設定するファイル名
  */
function decideFileNameToSet(fileName, response) {
    if (fileName !== '' && fileName !== null) {
        return fileName;
    }
    // ファイル名をレスポンスの Content-Disposition ヘッダから取得する
    const contentDisposition = response.getHeaderValues('Content-Disposition')[0];
    const matched = contentDisposition.match(/filename\*=UTF-8''(.+)/);
    const fileNameToSet = decodeURI(matched[1]);
    return fileNameToSet;
}

/**
  * 1 つのファイルを追加保存する
  * @param {ProcessDataDefinitionView} fileDef 保存先データ項目
  * @param {NewQfile} qfile 追加保存するファイル
  */
function saveFile(fileDef, qfile) {
    let files = engine.findData(fileDef);
    if (files === null) {
        files = new java.util.ArrayList();
    }
    files.add(qfile);
    engine.setData(fileDef, files);
}

/**
  * 複数のファイルを追加保存する
  * @param {ProcessDataDefinitionView} fileDef 保存先データ項目
  * @param {Array<NewQfile>} qfiles 追加保存するファイルを格納した配列
  */
function saveFiles(fileDef, qfiles) {
    let files = engine.findData(fileDef);
    if (files === null) {
        files = new java.util.ArrayList();
    }
    qfiles.forEach(qfile => {
        files.add(qfile);
    });
    engine.setData(fileDef, files);
}

    ]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

</service-task-definition>