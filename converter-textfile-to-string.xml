<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>

    <label>Converter (Text File to String type data)</label>
    <label locale="ja">コンバータ (テキストファイル to 文字型データ)</label>

    <last-modified>2023-05-08</last-modified>
    <help-page-url>https://support.questetra.com/bpmn-icons/converter-textfile-to-string/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/converter-textfile-to-string/</help-page-url>

    <summary>This item overwrites the value of String type data item with the contents of a text file stored in File type data item.</summary>
    <summary locale="ja">この工程は、文字型データ項目の値を、ファイル型データ項目に格納されているテキストファイルの内容で、上書きします。</summary>

    <license>(C) Questetra, Inc. (MIT License)</license>

    <configs>
        <config name="File_DataId" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C1: File type data item that stores the target text file</label>
            <label locale="ja">C1: 対象のテキストファイルが格納されているファイル型データ項目</label>
        </config>
        <config name="conf_CharacterEncoding" required="true" form-type="SELECT_ITEM">
            <label>C2: Character encoding when reading</label>
            <label locale="ja">C2: 読み込む際の文字コード</label>
                <item value="UTF-8">
                    <label>UTF-8</label>
                </item>
                <item value="UTF-16">
                    <label>UTF-16BE with BOM</label>
                    <label locale="ja">UTF-16 (BE BOM あり)</label>
                </item>
                <item value="x-UTF-16LE-BOM">
                    <label>UTF-16LE with BOM</label>
                    <label locale="ja">UTF-16 (LE BOM あり)</label>
                </item>
                <item value="UTF-16BE">
                    <label>UTF-16BE without BOM</label>
                    <label locale="ja">UTF-16 (BE BOM なし)</label>
                </item>
                <item value="UTF-16LE">
                    <label>UTF-16LE without BOM</label>
                    <label locale="ja">UTF-16 (LE BOM なし)</label>
                </item>
        </config>
        <config name="String_DataId" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
            <label>C3: String type data item to save the text data</label>
            <label locale="ja">C3: テキストを保存する文字型データ項目</label>
        </config>
    </configs>

    <engine-type>3</engine-type>

    <script><![CDATA[

main();
function main() {
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const textFileDataNum = configs.get("File_DataId");
    const stringDataNum = configs.get("String_DataId");
    const characterEncoding = configs.get("conf_CharacterEncoding");

    //// == Data Retrieving / ワークフローデータの参照 ==
    const myFiles = engine.findDataByNumber(textFileDataNum);
    // java.util.ArrayList

    //// == Data Updating / ワークフローデータへの代入 ==
    updateData(stringDataNum, myFiles, characterEncoding);
}

/**
 * ファイルの内容を文字型データ項目に上書き出力
 * @param {String} stringDataNum 保存先文字型データ項目の番号
 * @param {java.util.ArrayList<QfileView>} myFiles ファイル型データの配列
 * @param {String} characterEncoding 読み込む際の文字コード
 */
function updateData(stringDataNum, myFiles, characterEncoding) {
    // ファイル型データに複数添付されている場合、エラー
    if (myFiles !== null && myFiles.size() > 1) {
        throw new Error("Attachment of multiple files can not be supported.");
    }

    let myFileText = "";
    // ファイル型データにファイルが1つ添付されている場合
    if (myFiles !== null) {
        fileRepository.readFile(myFiles.get(0), characterEncoding, function (line) {
            myFileText += line + "\n";
        });
    }
    // com.questetra.bpms.core.event.scripttask.FileRepositoryWrapper

    //// == Data Updating / ワークフローデータへの代入 ==
    // ファイル型データ項目にファイルが1つ添付されている場合はその値、1つも添付されていない場合は空をセット
    engine.setDataByNumber(stringDataNum, myFileText);
}


]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACx0lEQVRYR8WXz0sUYRjHP5O0CLX+
        uHTIQ7sHIby0BdIh0EU6hwmd20Vx9mb9AUvlQQSRVhBq0WW3gxcFKzx4000kBKO2QNgSssgS6uDu
        oQQJJt4ZZ3ecH+s4O+kLyy7s+z7fz/PM87zPMxKnvKRj6afpBbpRiCDRAkQOzhdQKCEhvvMkeOnW
        7tEAWVrYZwi4B6qom1UCUgSYII747bhqAzwhxhkeH0PYLCTE48i8cCJwBnhKCkn13I+VQua+nSF7
        gDQ54K4fyhUbCjkSxM02rQD+en5YT2GChJpLlXUYQHvmWV89txq7bcyJKoCW7Vt1JJxb7hIBwnp1
        VAHSPAQeuLVSa99U1xTzW/Msflt02vYIWdXDCCBKptkPgI07GzQFmhhcGXSCKCHTWgXQbrjnRvGe
        iz20nWvzxJO8lqS9uZ3t39u1INRc0CJgk/nCi47WDk8AxkOOEAcVoQGkyat3vGH5BbD3d4/RwijD
        b4fNzrxCJqoDfAEuGXdMd03TeaHTUwRC50NqDgjx8Q/jJN8k7ewUkLmqAyielBwOieiFg+Fa4tpJ
        GelIgODZIJnuDDt/dhh67a41rN5aZfnHspPnVWwDgOURiF1CPBvN0hvqJfcxx8DKgH+BUnhPgohj
        EhrFG6QG1n6usVne9ASw9H2J3CfR3w4tQxLalOHszVn6wn0I8XpXppixRs9UhpaLaPLGJP2X+2ls
        aKxXH1sAMFxE2l1guYqNEHOf51j4uuAJplgqsv5r3Xi2jKyNd0c2Ix1iZnPGzyS0aUZaOxbVYGlI
        Y9fH2N3fZeTdiKcImA6VCRCytmOx61QHEh3zf45kUAm9LndyQyk8QyZmfoYnNZZbPK8dAf1fbVAR
        V5jXSakMxLy9mOgQWnWIUVp83IIIYfFqlqrv1cz8wEREFKJIRFBoQeKKukU0FokSCgUk8rU8dp8D
        flS8Cxv/AFp57iGwqv7bAAAAAElFTkSuQmCC
    </icon>


    <test><![CDATA[
/**
 * ファイル型データ項目の添付ファイルが 1 つ
 * 文字コード: UTF-8
 */
test('success - UTF-8', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 1 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain', 'テスト1'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'UTF-8');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('テスト1\n');
});

/**
 * ファイル型データ項目の添付ファイルが無い
 * 文字コード: UTF-16
 */
test('no file', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。空。
    engine.setData(fileDef, null);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'UTF-16');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('');
});

/**
 * ファイル型データ項目の添付ファイルが 2 つ以上
 * 文字コード: x-UTF-16LE-BOM
 */
test('multiple files', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 2 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain; charset=x-UTF-16LE-BOM', 'テスト1'));
    files.add(engine.createQfile('2.txt', 'text/plain; charset=x-UTF-16LE-BOM', 'テスト2'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'x-UTF-16LE-BOM');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行し、エラーがスローされることを確認。
    expect(execute).toThrow('Attachment of multiple files can not be supported.');

});

/**
 * ファイル型データ項目の添付ファイルが 1 つ
 * 文字コード: UTF-16
 */
test('success - UTF-16', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 1 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain; charset=UTF-16', 'テスト1'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'UTF-16');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('テスト1\n');
});

/**
 * ファイル型データ項目の添付ファイルが 1 つ
 * 文字コード: x-UTF-16LE-BOM
 */
test('success - x-UTF-16LE-BOM', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 1 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain; charset=x-UTF-16LE-BOM', 'テスト1'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'x-UTF-16LE-BOM');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('テスト1\n');
});

/**
 * ファイル型データ項目の添付ファイルが 1 つ
 * 文字コード: UTF-16LE
 */
test('success - UTF-16BE', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 1 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain; charset=UTF-16BE', 'テスト1'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'UTF-16BE');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('テスト1\n');
});

/**
 * ファイル型データ項目の添付ファイルが 1 つ
 * 文字コード: UTF-16LE
 */
test('success - UTF-16LE', () => {
    // ファイル型データ項目を準備し、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定。ファイルは 1 つ。
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('1.txt', 'text/plain; charset=UTF-16LE', 'テスト1'));
    engine.setData(fileDef, files);

    // 読み込む際の文字コードを指定
    configs.put('conf_CharacterEncoding', 'UTF-16LE');

    // 文字型データ項目を準備し、config に指定。
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('String_DataId', stringDef);

    // 文字型データ項目の値を指定。
    engine.setData(stringDef, '事前文字列');

    // <script> のスクリプトを実行。
    execute();

    // 文字型データ項目の値をチェック。
    expect(engine.findData(stringDef)).toEqual('テスト1\n');
});

]]></test>
</service-task-definition>
