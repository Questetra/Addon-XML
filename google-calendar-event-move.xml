<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-03-23</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Google Calendar: Move Event to another Calendar</label>
    <label locale="ja">Google カレンダー: 予定のカレンダー移動</label>
    <summary>Move an event on Google Calendar to another calendar.</summary>
    <summary locale="ja">Google カレンダーの予定を別のカレンダーに移動します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-calendar-event-move/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-calendar-event-move/
    </help-page-url>

    <configs>
        <config name="conf_User" required="true" form-type="QUSER">
            <label>C1: User connects to Google Calendar (must be App Administrator)</label>
            <label locale="ja">C1: Google カレンダー に接続するユーザ（要アプリ管理権限）</label>
        </config>
        <config name="conf_CalendarId" form-type="TEXTFIELD">
            <label>C2: Calendar ID of the current event (Primary Calendar if blank)</label>
            <label locale="ja">C2: 予定の移動元カレンダー ID (空白の場合、プライマリのカレンダー)</label>
        </config>
        <config name="conf_Destination" form-type="TEXTFIELD">
            <label>C3: Destination Calendar ID (Primary Calendar if blank)</label>
            <label locale="ja">C3: 予定の移動先カレンダー ID (空白の場合、プライマリのカレンダー)</label>
        </config>
        <config name="conf_EventId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C4: Event ID</label>
            <label locale="ja">C4: 予定 ID</label>
        </config>
        <config name="conf_htmlLink" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C5: Data item to save Event URL</label>
            <label locale="ja">C5: 予定 URL を保存するデータ項目</label>
        </config>
    </configs>


    <script><![CDATA[
main();

function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const quser = configs.getObject("conf_User");
    if (quser === null) {
        throw `User not found.`;
    }
    const calendarId = getCalendarId("conf_CalendarId");
    const destination = getCalendarId("conf_Destination");

    const eventId = engine.findData(configs.getObject("conf_EventId"));
    if (eventId === "" || eventId === null) {
        throw "Event ID isn't set";
    }

    const htmlLinkDataDef = configs.getObject("conf_htmlLink");

    const calIdRegex = /^[\w\-_.!*'@]+$/;
    
    //// == 演算 / Calculating ==
    if (destination.search(calIdRegex) === -1) {
        throw "Invalid Destination Calendar ID";
    }

    if (calendarId.search(calIdRegex) === -1) {
        throw "Invalid Source Calendar ID";
    }

    moveEvent(quser, calendarId, eventId, destination);
    getHtmlLink(quser, destination, eventId, htmlLinkDataDef);
}

/**
 * configs から カレンダー ID を取得する
 * @param confName 設定名
 * @returns {string} カレンダー ID
 */
function getCalendarId(confName) {
    let calendarId = configs.get(confName);
    if (calendarId === "" || calendarId === null) {
        return "primary";
    }
    return calendarId;
}

/**
 * Google カレンダーのイベントを別のカレンダーに移動する
 * @param {QuserView} quser ユーザー
 * @param {String} calendarId カレンダーID
 * @param {String} eventId 予定ID
 * @param {String} destination 移動先カレンダーID
 */
function moveEvent(quser, calendarId, eventId, destination) {

    const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}/move`;

    const myObj = {};
    myObj.destination = destination;

    const response = httpClient.begin()
        .googleOAuth2(quser, "Calendar")
        .body(JSON.stringify(myObj), "application/json")
        .post(uri);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    engine.log(`Event ID: ${eventId}`);
    if (status >= 300) {
        engine.log(`Status: ${status}`);
        engine.log(responseStr);
        throw `Failed to move.`;
    }
    engine.log('Succeeded to move');
}

/**
 * イベントを再取得し、HTML Link を保存する
 * @param quser
 * @param calendarId
 * @param eventId
 * @param htmlLinkDataDef
 */
function getHtmlLink(quser, calendarId, eventId, htmlLinkDataDef) {
    if (htmlLinkDataDef === null) {
        return;
    }
    const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;

    const response = httpClient.begin()
        .googleOAuth2(quser, "Calendar")
        .get(uri);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(`Status: ${status}`);
        engine.log(responseStr);
        throw `Failed to get htmlLink.`;
    }
    const respJson = JSON.parse(responseStr);
    const htmlLink = respJson['htmlLink'];
    engine.setData(htmlLinkDataDef, htmlLink);
    engine.log("Succeeded to get htmlLink");
}
]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
        p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
        XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
        AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
        oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
        oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
        1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
        D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
        e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
        fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
        CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
        Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
        Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
        T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
        YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
        WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
        4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
        5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
        YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
        tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
        a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
        IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
        AABJRU5ErkJggg==
    </icon>

<test><![CDATA[

/**
 * 設定の準備
 * @param configs
 * @param calenderId
 * @param destination
 * @param eventId
 * @return {Object}
 */
const prepareConfigs = (configs, calenderId, destination, eventId) => {
  const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
  configs.putObject('conf_User', quser);
  
  configs.put('conf_CalendarId', calenderId);
  configs.put('conf_Destination', destination);
  
  // 文字型データ項目を準備して、config に指定
  const idDef = engine.createDataDefinition('予定 ID', 1, 'q_eventId', 'STRING_TEXTFIELD');
  configs.putObject('conf_EventId', idDef);
  // 文字型データ項目の値（予定 ID を保存するデータ項目）を指定
  engine.setData(idDef, eventId);
  
  // 文字型データ項目を準備して、config に指定
  const urlDef = engine.createDataDefinition('予定 URL', 2, 'q_urls', 'STRING_TEXTFIELD');
  configs.putObject('conf_htmlLink', urlDef);
  // 文字型データ項目の値（予定 URL を保存するデータ項目）を指定
  engine.setData(urlDef, '事前文字列');
  
  return urlDef;
};

/**
 * Google ドライブに接続する UserID に対応する QuserView がなくエラーになる場合
 */
test('User not found', () => {
  prepareConfigs(configs, 'test1@a.com', 'destination1@a.com', 'event1');
  // 設定されたユーザが削除された場合、未設定と同じ状態に上書きする
  configs.put('conf_User', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('User not found.');
  }
});

/**
 * 予定 IDが空でエラーになる場合
 */
test('Event ID is blank', () => {
  prepareConfigs(configs, 'test2@a.com', 'destination2@a.com', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Event ID isn\'t set');
  }
});

/**
 * 移動元カレンダー IDに不正な文字(半角スペース)が含まれていてエラーになる場合
 */
test('Invalid Source Calendar ID - Half-width space', () => {
  prepareConfigs(configs, 'test 3@a.com', 'destination3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Source Calendar ID');
  }
});

/**
 * 移動元カレンダー IDに不正な文字(許可してない記号<)が含まれていてエラーになる場合
 */
test('Invalid Source Calendar ID - Not allowed symbols<', () => {
  prepareConfigs(configs, 'test<3@a.com', 'destination3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Source Calendar ID');
  }
});

/**
 * 移動元カレンダー IDに不正な文字(許可してない記号\)が含まれていてエラーになる場合
 */
test('Invalid Source Calendar ID - Not allowed symbols\\', () => {
  prepareConfigs(configs, 'test\\3@a.com', 'destination3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Source Calendar ID');
  }
});

/**
 * 移動先カレンダー IDに不正な文字(半角スペース)が含まれていてエラーになる場合
 */
test('Invalid Destination Calendar ID - Half-width space', () => {
  prepareConfigs(configs, 'test4@a.com', 'destination 4@a.com', 'event4');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Destination Calendar ID');
  }
});

/**
 * 移動先カレンダー IDに不正な文字(許可してない記号&)が含まれていてエラーになる場合
 */
test('Invalid Destination Calendar ID - Not allowed symbols&', () => {
  prepareConfigs(configs, 'test4@a.com', 'destination&4@a.com', 'event4');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Destination Calendar ID');
  }
});

/**
 * 移動先カレンダー IDに不正な文字(許可してない記号,)が含まれていてエラーになる場合
 */
test('Invalid Destination Calendar ID - Not allowed symbols,', () => {
  prepareConfigs(configs, 'test4@a.com', 'destination,4@a.com', 'event4');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Destination Calendar ID');
  }
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param calendarId
 * @param destination
 * @param eventId
 */
const assertPostRequest = ({url, method, contentType, body}, calendarId, destination, eventId) => {
  expect(url).toEqual(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}/move`);
  expect(method).toEqual('POST');
  
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  expect(bodyObj.destination).toEqual(destination);
};

/**
 * POST API リクエストでエラー（400レスポンスが返ってくる）
 */
test('Failed to Move Event', () => {
  prepareConfigs(configs, 'test5@a.com', 'destination5@a.com', 'event5');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'test5@a.com', 'destination5@a.com', 'event5');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to move.');
  }
});

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param destination
 * @param eventId
 */
const assertGetRequest = ({url, method}, destination, eventId) => {
    expect(url).toEqual(`https://www.googleapis.com/calendar/v3/calendars/${destination}/events/${eventId}`);
    expect(method).toEqual('GET');
};

/**
 * GET API リクエストでエラー（400レスポンスが返ってくる）
 */
test('GET Failed', () => {
  prepareConfigs(configs, 'test6@a.com', 'destination6@a.com', 'event6');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'test6@a.com', 'destination6@a.com', 'event6');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'destination6@a.com', 'event6');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to get htmlLink.');
  }
});

/**
 * 予定移動成功(カレンダーID に使える全ての記号を含む)
 */
test('Succeed to Move Event', () => {
  const urlDef = prepareConfigs(configs, 'test-_.!*\'7@a.com', 'destination-_.!*\'7@a.com', 'event7');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'test-_.!*\'7@a.com', 'destination-_.!*\'7@a.com', 'event7');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'destination-_.!*\'7@a.com', 'event7');
    return httpClient.createHttpResponse(200, 'application/json', '{"htmlLink":"https://www.google.com/calendar/event?eid=abc123"}');
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=abc123');
});

/**
 * 予定移動成功 - 移動元カレンダーID 指定なし
 */
test('Succeed to Move Event - No Source Calender ID', () => {
  const urlDef = prepareConfigs(configs, '', 'destination8@a.com', 'event8');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'primary', 'destination8@a.com', 'event8');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'destination8@a.com', 'event8');
    return httpClient.createHttpResponse(200, 'application/json', '{"htmlLink":"https://www.google.com/calendar/event?eid=abc456"}');
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=abc456');
});

/**
 * 予定移動成功 - 移動先カレンダーID 指定なし
 */
test('Succeed to Move Event - No Destination Calendar ID', () => {
  const urlDef = prepareConfigs(configs, 'test9@a.com', '', 'event9');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'test9@a.com', 'primary', 'event9');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'primary', 'event9');
    return httpClient.createHttpResponse(200, 'application/json', '{"htmlLink":"https://www.google.com/calendar/event?eid=abc789"}');
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=abc789');
});

/**
 * 予定移動なし - 移動元カレンダーID/移動先カレンダーID 指定なし
 */
test('Event does not Move - No Source Calendar ID/Destination Calendar ID', () => {
  const urlDef = prepareConfigs(configs, '', '', 'event10');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'primary', 'primary', 'event10');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'primary', 'event10');
    return httpClient.createHttpResponse(200, 'application/json', '{"htmlLink":"https://www.google.com/calendar/event?eid=def123"}');
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=def123');
});

/**
 * 予定移動なし - 移動元カレンダーID/移動先カレンダーID が同じ
 */
test('Event does not Move - Source Calendar ID and Destination Calendar ID are the same', () => {
  const urlDef = prepareConfigs(configs, 'test11@a.com', 'test11@a.com', 'event11');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertPostRequest(request, 'test11@a.com', 'test11@a.com', 'event11');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', '{}');
    }
    assertGetRequest(request, 'test11@a.com', 'event11');
    return httpClient.createHttpResponse(200, 'application/json', '{"htmlLink":"https://www.google.com/calendar/event?eid=def456"}');
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=def456');
});

]]></test>
</service-task-definition>