<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2021-04-30</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Calendar: Move Event</label>
<label locale="ja">Google カレンダー: 予定のカレンダー移動</label>
<summary>Move an event on Google Calendar.</summary>
<summary locale="ja">Google カレンダーのイベントを別のカレンダーに移動します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-calendar-event-move/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-calendar-event-move/</help-page-url>

<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1: User who connects to Google Calendar</label>
    <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
  </config>
  <config name="conf_CalendarId" form-type="TEXTFIELD">
    <label>C2: Calendar ID (Primary Calendar if blank)</label>
    <label locale="ja">C2: Calendar ID (空白の場合、プライマリのカレンダー)</label>
  </config>
  <config name="conf_Destination" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C3: Destination (Primary Calendar if blank)</label>
    <label locale="ja">C3: イベントの移動先となるカレンダー ID</label>
  </config>
  <config name="conf_EventId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C4: Event ID</label>
    <label locale="ja">C4: イベント ID</label>
  </config>
</configs>


<script><![CDATA[
main();
function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const quser = configs.getObject("conf_User");
    if (quser === null) {
        throw `User not found.`;
    }
    let calendarId = configs.get("conf_CalendarId");
    if (calendarId === "" || calendarId === null) {
        calendarId = "primary";
    }
    const eventId = engine.findData(configs.getObject("conf_EventId"));
    if (eventId === "" || eventId === null) {
        throw "Event ID isn't set";
    }

    const destination = engine.findData(configs.getObject("conf_Destination"));
    if (destination === "" || destination === null) {
        throw "Destination isn't set";
    }

    //// == 演算 / Calculating ==
    if (calendarId.search(/[^\w\.@]/) !== -1) {
        throw "Invalid Calendar ID";
    }
    moveEvent(quser, calendarId, eventId, destination);
}

/**
 * Google カレンダーのイベントを別のカレンダーに移動する
 * @param {QuserView} quser ユーザー
 * @param {String} calendarId カレンダーID
 * @param {String} eventId 予定ID
 * @param {String} destination カレンダー識別子
 */
function moveEvent(quser, calendarId, eventId, destination) {

    const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}/move`;

    const myObj = {};
    myObj.destination = destination;

    let request = httpClient.begin().googleOAuth2(quser, "Calendar");
    
    const response = request
        .body(JSON.stringify(myObj), "application/json")
        .post(uri);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    engine.log(`Event ID: ${eventId}`);
    engine.log(`Status: ${status}`);
    if (status >= 300) {
        engine.log(responseStr);
        throw `Failed to move.`;
    }
    engine.log("Succeeded to move");
}
]]></script>
 
 
<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
AABJRU5ErkJggg==
</icon>
 
</service-task-definition>