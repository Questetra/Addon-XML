<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-05-17</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Slack: Post Chat (Bots)</label>
<label locale="ja">Slack: チャット投稿 (Bots)</label>
<summary>This item sends a message to Slack with Bots.</summary>
<summary locale="ja">この工程は、Bots 機能を使って Slack にメッセージを投稿します。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://slack.com/oauth2/chat:write,files:write">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="ChannelName" required="true">
    <label>C2: Slack Channel Name</label>
    <label locale="ja">C2: 投稿するチャンネルの名前</label>
  </config>
  <config name="Text" form-type="TEXTAREA" el-enabled="true">
    <label>C3: Sending Text</label>
    <label locale="ja">C3: 送信するテキスト</label>
  </config>
  <config name="conf_Mention" form-type="SELECT" select-data-type="STRING_TEXTFIELD|QUSER" editable="true">
    <label>C4: Mention (user or email address)</label>
    <label locale="ja">C4: メンション（ユーザ もしくは メールアドレス）</label>
  </config>
  <config name="Fallback" form-type="TEXTAREA" el-enabled="true">
    <label>C5: Attachment Summary (In notifications when no sending text)</label>
    <label locale="ja">C5: Attachment の要約 (送信テキストが空の場合に、通知で使用される)</label>
  </config>
  <config name="Color">
    <label>C6: Attachment Color</label>
    <label locale="ja">C6: Attachment の色</label>
  </config>
  <config name="Title" el-enabled="true">
    <label>C7: Attachment Title</label>
    <label locale="ja">C7: Attachment のタイトル</label>
  </config>
  <config name="TitleLink" el-enabled="true">
    <label>C8: Attachment Title Link</label>
    <label locale="ja">C8: Attachment のタイトルリンク</label>
  </config>
  <config name="AttachText" form-type="TEXTAREA" el-enabled="true">
    <label>C9: Attachment Text</label>
    <label locale="ja">C9: Attachment のテキスト</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/slack-chat-post-bots/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/slack-chat-post-bots/</help-page-url>
<script><![CDATA[
main();
function main() {
  const oauth2 = configs.get("conf_OAuth2");  
  let text = "";
  if (configs.get("Text") !== "" && configs.get("Text") !== null){
    text = configs.get("Text");
  }  
  const channel = configs.get("ChannelName");
  
  let attachment = {};

  attachAdd(attachment, "Fallback", "fallback");
  attachAdd(attachment, "Color", "color");
  attachAdd(attachment, "Title", "title");
    if (attachment["title"] !== undefined){
    attachAdd(attachment, "TitleLink", "title_link");
  }
  attachAdd(attachment, "AttachText", "text");
  
  const slackIdNum = decideSlackIdNum(oauth2);

  if (slackIdNum !== "" ){
    text = `${text}\n\n<@${slackIdNum}>`;
    engine.log('Slack Id:' + slackIdNum);
  }

  if (attachment["title"] === undefined && attachment["text"] === undefined && text === ""){
    throw "Message to send isn't set.";
  }

  sendMessage(oauth2, channel, text, attachment);
}


/**
  * メンション相手のメールアドレス（Slack アカウント）をconfigから読み出す
  * メールアドレスから Slack ID を取得する関数を呼ぶ
  * @return {String} slackIdNum  Slack ID
  */
function decideSlackIdNum(oauth2){
  let mailAddress = "";
  let slackIdNum = '';
  mailAddressDef = configs.getObject("conf_Mention");

  if(mailAddressDef === null){ //固定値
    mailAddress = configs.get( "conf_Mention");
  }else{  
    if ( mailAddressDef.matchDataType("QUSER")) { //ユーザ型
        const quserNum = configs.get("conf_Mention");
        const user = engine.findDataByNumber( quserNum );
          if ( user !== null){
          mailAddress = user.getEmail();
          }
    }else{ //文字型
        mailAddress = engine.findData(mailAddressDef);
    }
  }

    if (mailAddress !== "" && mailAddress !== null){ 
      engine.log("email: " + mailAddress);
      slackIdNum = usersLookupByEmail(oauth2, mailAddress);
    }  

  return slackIdNum;
}


/**
  * メールアドレスから Slack ID を取得する
  * users.lookupByEmail https://api.slack.com/methods/users.lookupByEmail
  * @param {String} oauth2 
  * @param {String} email
  * @return {String} responseJson.user.id  Slack ID
  */  
function usersLookupByEmail(oauth2, email) {

  const url = 'https://slack.com/api/users.lookupByEmail';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam( "email", email )
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  let responseJson;
  try {
    responseJson = JSON.parse(responseTxt);
  } catch(e) {
    engine.log("failed to parse as json");
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw `Failed to users lookup By email. status: ${status}`;
  }

  if (responseJson.ok !== true ) {
    const error = `Failed to send`;
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw error;
  }
  return responseJson.user.id;
}


/**
  * Send Message with Bots  チャット投稿
  * @param {String} oauth2 
  * @param {String} channel
  * @param {String} text 
  * @param {String} attachment
  */  
function sendMessage(oauth2, channel, text, attachment) {
  let jsonReq = {};
  jsonReq["text"] = text;
  jsonReq["channel"] = channel;
  jsonReq["as_user"] = "true";

  let attachArray = [];
  if (Object.keys(attachment).length !== 0) {
    attachArray.push(attachment);
  }

  jsonReq["attachments"] = attachArray;
 
  const url = 'https://slack.com/api/chat.postMessage';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  let responseJson;
  try {
    responseJson = JSON.parse(responseTxt);
  } catch(e) {
    engine.log("failed to parse as json");
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw `Failed to send. status: ${status}`;
  }

  if (responseJson.ok !== true ) {
    const error = `Failed to send`;
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw error;
  }
}

function attachAdd(attachment, config, attachName){
  const value = configs.get(config);
  if (value !== "" && value !== null){
    attachment[attachName] = value;
  }
}
]]></script>
<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==</icon>

<test><![CDATA[


/**
 * 設定の準備
 * @param configs
 * @param ChannelName
 * @param Text
 * @param Mention
 * @param Fallback
 * @param Color
 * @param Title
 * @param TitleLink
 * @param AttachText
 * @return attachment
 */
const prepareConfigs = (configs, channelName, text, mention, fallback, color, title, titleLink, attachText) => {
  configs.put('conf_OAuth2', 'Slack');
  configs.put('ChannelName', channelName);
  configs.put('Text', text);

  // 文字型データ項目を準備して、config に指定
  const mentionDef = engine.createDataDefinition('メンション', 4, 'q_mention', 'STRING_TEXTFIELD');
  configs.putObject('conf_Mention', mentionDef);
  // 文字型データ項目の値（保存先フォルダID）を指定
  engine.setData(mentionDef, mention);

  configs.put('Fallback', fallback);
  configs.put('Color', color);
  configs.put('Title', title);
  configs.put('TitleLink', titleLink);
  configs.put('AttachText', attachText);

  const attachment = {
    "fallback": fallback,
    "color": color,
    "title": title,
    "title_link": titleLink,
    "text": attachText
  }

  return attachment;
};


/**
 * POSTリクエストのテスト（Slack ID 取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param email
 */
const assertPostGetIdRequest = ({url, method}, email) => {

    let newEmail = email.replace("@", "%40");

    expect(url).toEqual(`https://slack.com/api/users.lookupByEmail?email=${newEmail}`);
    expect(method).toEqual('POST');
};


/**
 * POSTリクエストのテスト（チャット投稿）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param channel
 * @param text
 * @param attachment
 */
const assertPostRequest = ({url, method, contentType, body}, channel, text, attachment) => {
    expect(url).toEqual('https://slack.com/api/chat.postMessage');	
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.text).toEqual(text);
    expect(bodyObj.channel).toEqual(channel);
    expect(bodyObj.as_user).toEqual('true');

    let attachArray = [];
    if (Object.keys(attachment).length !== 0) {
      attachArray.push(attachment);
    }

    expect(bodyObj.attachments).toEqual(attachArray);
};



/**
 * チャット投稿失敗の場合
 * テキストが空、attachmentタイトル未入力、attachmentテキスト未入力
 *「テキスト」「Attachment タイトル」「Attachment テキスト」のいずれかが設定されていないと、投稿失敗する
 */
test('Message to send isn\'t set', () => {
  prepareConfigs(configs, 'channel1', '', null, 'fallback1', '#ff0000', '', 'https://titleLink1', '');


  // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Message to send isn\'t set.`);
});



/**
 * POST リクエストのレスポンスを準備（Slack ID 取得）
 * @param channel
 * @param text
 * @return responseObj
 */
const preparePostGetIdResponse = (id) => {
  return {
    "ok": true,
    "user": {
        "id": `${id}`
    }
  };
};



/**
 * POST リクエストのレスポンスを準備（チャット投稿）
 * @param channel
 * @param text
 * @return responseObj
 */
const preparePostResponse = (channel,text) => {
  return {
    "ok": true,
    "channel": `${channel}`,
    "ts": "1650857142.223299",
    "message": {
        "type": "message",
        "subtype": "bot_message",
        "text": `${text}`,
        "ts": "1650857142.223299",
        "bot_id": "B01JPAT1P4J"
    }
  };
};




/**
 * POST API リクエストでエラーになる場合（Slack ID 取得）
 */
test('POST GetId Failed', () => {
  const attachment = prepareConfigs(configs, 'channel2', 'text2','SouthPole@questetra.com', 'fallback2', '#ff0000', 'title2', 'https://titleLink2', 'attachText2');

  httpClient.setRequestHandler((request) => {
    assertPostGetIdRequest(request, 'SouthPole@questetra.com');
    return httpClient.createHttpResponse(400,'application/json', '{}');
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Failed to send`);
});




/**
 * チャット投稿失敗の場合
 * メンションが Slack アカウントのメールアドレスでない
 * （メンションがメールアドレスの形式ではない場合も同様）
 */
test('Not Slack account email address', () => {
  const attachment = prepareConfigs(configs, 'channel1', 'text1', 'SouthPole@gmail.com', 'fallback1', '#ff0000', 'title1', 'https://titleLink1', 'attachText2');

  httpClient.setRequestHandler((request) => {
    assertPostGetIdRequest(request, 'SouthPole@gmail.com');
    const responsePostObj = {
            "ok": false,
            "error": "users_not_found"
        };  
    return httpClient.createHttpResponse(200,'application/json', JSON.stringify(responsePostObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Failed to send`);
});






/**
 * POST API リクエストでエラーになる場合（チャット投稿）
 */
test('POST Failed', () => {
    const attachment = prepareConfigs(configs, 'channel2', 'text2', 'SouthPole@questetra.com', 'fallback2', '#ff0000', 'title2', 'https://titleLink2', 'attachText2');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostGetIdRequest(request, 'SouthPole@questetra.com');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostGetIdResponse('01234ABCDE')));
        }
        assertPostRequest(request, 'channel2', 'text2\n\n<@01234ABCDE>', attachment);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

   // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Failed to send`);
});



/**
 * チャット投稿成功の場合
 * メンションは文字型データ項目
 */
test('Success - Mention is a string data item', () => {
  const attachment = prepareConfigs(configs, 'channel3', 'text3', 'SouthPole@questetra.com', 'fallback3', '#ff0000', 'title3', 'https://titleLink3', 'attachText3');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostGetIdRequest(request, 'SouthPole@questetra.com');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostGetIdResponse('56789FGHIJ')));
        }
        assertPostRequest(request, 'channel3', 'text3\n\n<@56789FGHIJ>', attachment);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel3', 'text3')));
    });

  // <script> のスクリプトを実行
  execute();
});



/**
 * チャット投稿成功の場合
 * チャンネル、 テキストを入力
 * メンションは固定値
 * Message to send isn't set　のエラーにならない条件①
 *「テキスト」「Attachment タイトル」「Attachment テキスト」のいずれかが設定されていると、投稿成功する
 * Attachmentタイトルリンクが設定されているが、Attachmentタイトルが未設定のため無視されるケース（チャット投稿は成功する）
 */
test('Success - Mention is a fixed value', () => {
  prepareConfigs(configs, 'channel4', 'text4','', '', '', '', 'https://titleLink4', '');
  //conf_Mention の設定値を固定値で上書き
  configs.put('conf_Mention', 'SouthPole@questetra.com');

  //Attachmentタイトルが未設定のため、Attachmentタイトルリンクは設定されず、オブジェクトは空
  const attachment = {};

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostGetIdRequest(request, 'SouthPole@questetra.com');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostGetIdResponse('43210ABCDE')));
        }
        assertPostRequest(request, 'channel4', 'text4\n\n<@43210ABCDE>', attachment);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel4', 'text4')));
    });

  // <script> のスクリプトを実行
  execute();
});



/**
 * チャット投稿成功の場合
 * チャンネル、Attachmentテキスト を入力  （テキストは空）
 * メンションは文字型データ項目を選択していて空
 * Message to send isn't set　のエラーにならない条件②
 *「テキスト」「Attachment タイトル」「Attachment テキスト」のいずれかが設定されていると、投稿成功する
 */
test('Success - Channel and Attachment-text ', () => {
  prepareConfigs(configs, 'channel9', '', '', '', '', '', '', 'attachText9');
  
  const attachment = {
    "text": "attachText9"
  };

  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'channel9', '', attachment);
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel9', '')));
  });

  // <script> のスクリプトを実行
  execute();
});



/**
 * チャット投稿成功の場合
 * チャンネル、Attachmentタイトルを入力 （テキストは空）
 * メンションは固定値で空
 * Message to send isn't set　のエラーにならない条件③
 *「テキスト」「Attachment タイトル」「Attachment テキスト」のいずれかが設定されていると、投稿成功する
 */
test('Success - Channel and Attachment-title ', () => {
  prepareConfigs(configs, 'channel10', '', '', '', '', 'title10', '', '');

  //conf_Mention の設定値を固定値で上書き
  configs.put('conf_Mention', '');

  const attachment = {
    "title": "title10"
  };

  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'channel10', '', attachment);
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel10', '')));
  });

  // <script> のスクリプトを実行
  execute();
});



/**
 * チャット投稿成功の場合
 * メンションは文字型データ項目を選択
 * テキストは空であるが、メンションがあるため、メンションのみのテキストが投稿される
 * Attachment色が無効（無効であるが、チャット投稿は成功する）
 * AttachmentタイトルリンクがURLの形式でないため、Attachmentタイトルにリンクが無いケース（チャット投稿は成功する）
 */
test('Success- Invalid color setting and Invalid title-link setting', () => {
  const attachment = prepareConfigs(configs, 'channel11', '', 'SouthPole@questetra.com', 'fallback11', '#ff0000', 'title11', 'https://titleLink11', 'attachText11');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostGetIdRequest(request, 'SouthPole@questetra.com');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostGetIdResponse('AAAAA00000')));
        }
        assertPostRequest(request, 'channel11', '\n\n<@AAAAA00000>', attachment);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel11', '')));
    });

  // <script> のスクリプトを実行
  execute();
});



/**
 * チャット投稿失敗の場合
 * メンションは文字型データ項目を選択していて空
 * 存在しないチャンネル
 */
test('Failed - Non-existent channel', () => {
  const attachment = prepareConfigs(configs, 'no-channel5', 'text5', '', 'fallback5', '#ff0000', 'title5', 'https://titleLink5', 'attachText5');

  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'no-channel5', 'text5', attachment);
    const responseObj = {
      "ok": false,
      "error": "channel_not_found"
    };
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Failed to send`);  
 });
 

   
/**
 * チャット投稿失敗の場合
 * メンションは文字型データ項目を選択していて空
 * Bot が join していないチャンネル
 */
test('Failed - Channel that bot is not joining', () => {
  const attachment = prepareConfigs(configs, 'no-join6', 'text6', '', 'fallback6', '#ff0000', 'title6', 'https://titleLink6', 'attachText6');

  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'no-join6', 'text6', attachment);
    const responseObj = {
      "ok": false,
      "error": "not_in_channel"
    };
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
   expect(execute).toThrow(`Failed to send`);
});

]]></test>
</service-task-definition>
