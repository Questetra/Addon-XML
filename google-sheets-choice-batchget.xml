<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2019-06-04</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Google Sheets: Download Choice Data</label>
<label locale="ja">Google スプレッドシート: 選択肢データの一括取得</label>
<summary>Download Choice Data in specified 2 columns from Google Sheet.</summary>
<summary locale="ja">Google スプレッドシートから指定した2列に入っている選択肢データを取得します。</summary>
<help-page-url>https://support.questetra.com/addons/googlesheets-getidslabels/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googlesheets-getidslabels/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: ダウンロード元のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: ダウンロード元のシートのタイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="TEXTFIELD">
    <label>C4: Range of Choice IDs (e.g. "A1:A")</label>
    <label locale="ja">C4: 選択肢IDの領域情報 (例 "A2:A", "A:A")</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="TEXTFIELD">
    <label>C5: Range of Choice Labels (e.g. "D2:D")</label>
    <label locale="ja">C5: 選択肢ラベルの領域情報 (例 "B2:B", "B:B")</label>
  </config>
  <config name="conf_DataIdF" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C6: STRING Data item that will save Choise IDs</label>
    <label locale="ja">C6: 選択肢IDの一覧を保存する文字列型データ項目</label>
  </config>
  <config name="conf_DataIdG" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C7: STRING Data item that will save Choice Labels</label>
    <label locale="ja">C7: 選択肢ラベルの一覧を保存する文字列型データ項目</label>
  </config>
</configs>

<script><![CDATA[
// Batch to Get Data via Google Sheets API (ver. 20160921)
// (c) 2016, Questetra, Inc. (the MIT License)

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)
main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get( "conf_OAuth2" );
  const docId = configs.get( "conf_DataIdB" ) + "";
  const sheet= configs.get( "conf_DataIdC" ) + "";
  const rangeI = configs.get( "conf_DataIdD" ) + ""; // (returns Number)
  const rangeL = configs.get( "conf_DataIdE" ) + ""; // (returns Number)
  const dataIdF = configs.get( "conf_DataIdF" ); // (returns Number)
  const dataIdG = configs.get( "conf_DataIdG" ); // (returns Number)

  //// == ワークフローデータの参照 / Data Retrieving ==
  
  //// == 演算 / Calculating ==
  let accessLog = "";
  let responseJson = "";
  const token = httpClient.getOAuth2Token( oauth2 );

  let choiseIds = "";
  let choiseLabels = "";

  try{
    // Method: spreadsheets.values.batchGet
    const uri = "https://sheets.googleapis.com/v4/spreadsheets/" + docId + "/values/:batchGet" ;

    let response = httpClient.begin()
      .bearer(token)
      .queryParam( "ranges", sheet + "!" + rangeI )
      .queryParam( "ranges", sheet + "!" + rangeL )
      .queryParam( "valueRenderOption", "UNFORMATTED_VALUE" )
      .queryParam( "majorDimension", "COLUMNS" )
      .get( uri );
    accessLog += "---GET request--- " + response.getStatusCode() + "\n";
    responseJson = response.getResponseAsString();
    accessLog += responseJson;
    if( response.getStatusCode() != 200 ){
      throw accessLog;
    }
  }catch(e){
    accessLog += e.message + "\n";
    throw accessLog;
  }
  const jsonObj = JSON.parse( responseJson );
  //error for all cells empty
  if(jsonObj.valueRanges[0].values == null ){
    throw "All Cells in Choice-IDs range are empty.";
  }else if(jsonObj.valueRanges[1].values == null){
    throw "All Cells in Labels range are empty.";
  }
  //error for different number of cells 
  if(jsonObj.valueRanges[0].values[0].length != jsonObj.valueRanges[1].values[0].length){
    throw "Number of cells in two ranges is different.";
  }
  if(jsonObj.valueRanges[0].values[0].length > 150000){
    throw"Number of Choice Data is over 150,000."
  }
  //error for an empty cells,over 1000 characters and add to list
  for( let i = 0; i < jsonObj.valueRanges[0].values[0].length; i++ ){
    if ( jsonObj.valueRanges[0].values[0][i] == ""){
      throw "Empty Cell is in Choice-IDs range.";
    }else if ( jsonObj.valueRanges[0].values[0][i].length > 1000){
      throw "Over 1000-character Choice-ID is in range.";
    }
    choiseIds += jsonObj.valueRanges[0].values[0][i] + "\n";
    if ( jsonObj.valueRanges[1].values[0][i] == ""){
      throw "Empty Cell is in Labels range.";
    }else if ( jsonObj.valueRanges[1].values[0][i].length > 1000){
      throw "Over 1000-character Label is in range.";
    }
    choiseLabels += jsonObj.valueRanges[1].values[0][i] + "\n";
  }
  //error for same ids
  for(let j = 0;j < jsonObj.valueRanges[0].values[0].length;j++){
    for( let k = jsonObj.valueRanges[0].values[0].length -1 ; k > j;k--){
      if (jsonObj.valueRanges[0].values[0][j] === jsonObj.valueRanges[0].values[0][k] ){
        throw "Same Choice-IDs are in range.";
      }
    }
  }
  
  // for Debug
  // accessLog += responseJson + "\n";

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.setDataByNumber( dataIdF, choiseIds );
  engine.setDataByNumber( dataIdG, choiseLabels );
  engine.log(accessLog );
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
