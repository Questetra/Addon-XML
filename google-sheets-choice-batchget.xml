<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2024-05-30</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Google Sheets: Download Choice Data</label>
<label locale="ja">Google スプレッドシート: 選択肢データの一括取得</label>
<summary>This item downloads Choice Data in specified 2 columns from Google Sheet.</summary>
<summary locale="ja">この工程は、Google スプレッドシートから指定した2列に入っている選択肢データを取得します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googlesheets-getidslabels/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googlesheets-getidslabels/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: ダウンロード元のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: ダウンロード元のシートのタイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="TEXTFIELD">
    <label>C4: Range of Choice IDs (e.g. "A1:A")</label>
    <label locale="ja">C4: 選択肢 ID の領域情報 (例 "A2:A", "A:A")</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="TEXTFIELD">
    <label>C5: Range of Choice Labels (e.g. "D2:D")</label>
    <label locale="ja">C5: 選択肢ラベルの領域情報 (例 "B2:B", "B:B")</label>
  </config>
  <config name="conf_DataIdF" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C6: Data item that will save Choice IDs</label>
    <label locale="ja">C6: 選択肢 ID の一覧を保存するデータ項目</label>
  </config>
  <config name="conf_DataIdG" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C7: Data item that will save Choice Labels</label>
    <label locale="ja">C7: 選択肢ラベルの一覧を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets.readonly
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)
function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const oauth = configs.getObject("conf_OAuth2");
    const docId = retrieveStringData( "conf_DataIdB", "Spreadsheet ID" );
    const sheet = retrieveStringData( "conf_DataIdC", "Spreadsheet Title" );
    const rangeI = configs.get("conf_DataIdD");
    const rangeL = configs.get("conf_DataIdE");
    const idDataDef = configs.getObject("conf_DataIdF");
    const labelDataDef = configs.getObject("conf_DataIdG");

    //// == 演算 / Calculating ==
    const { idList, labelList } = getChoice(oauth, docId, sheet, rangeI, rangeL);

    //// == ワークフローデータへの代入 / Data Updating ==
    engine.setData(idDataDef, idList.join("\n"));
    engine.setData(labelDataDef, labelList.join("\n"));
}

/**
 * 文字列データを config から読み出す。空であればエラー。
 * @param  {String} confName config 名
 * @param  {String} label エラーメッセージ用のラベル
 * @return {String} string 文字列データ
 */
function retrieveStringData( confName, label ){
    const dataDef = configs.getObject( confName );
    let string;
    if (dataDef !== null) {
        string = engine.findData(dataDef);
    } else {
        string = configs.get(confName);
    }
    if (string === null || string === "") {
        throw new Error(`${label} is empty.`);
    }
    return string;
}

/**
 * Google スプレッドシートの選択肢データを取得
 * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
 * @param {String} docId スプレッドシートの ID
 * @param {String} sheet シート名
 * @param {String} rangeI 選択肢 ID の領域
 * @param {String} rangeL 選択肢 ラベル の領域
 * @return {Object} obj 選択肢データを格納したオブジェクト
 * @return {Array<String>} obj.idList 選択肢 ID を格納した配列
 * @return {Array<String>} obj.labelList 選択肢ラベルを格納した配列
 */
function getChoice(oauth, docId, sheet, rangeI, rangeL) {
    // Method: spreadsheets.values.batchGet
    const uri = `https://sheets.googleapis.com/v4/spreadsheets/${docId}/values/:batchGet`;
    const response = httpClient.begin()
        .authSetting(oauth)
        .queryParam("ranges", `${sheet}!${rangeI}`)
        .queryParam("ranges", `${sheet}!${rangeL}`)
        .queryParam("valueRenderOption", "UNFORMATTED_VALUE")
        .queryParam("dateTimeRenderOption", "FORMATTED_STRING")
        .queryParam("majorDimension", "COLUMNS")
        .get(uri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        const accessLog = `---GET request--- ${status}\n${responseStr}`;
        engine.log(accessLog);
        throw new Error(`Failed to get. status:${status}`);
    }
    const jsonObj = JSON.parse(responseStr);

    const I_LABEL = "Choice-ID";
    const L_LABEL = "Label";
    const idCols = jsonObj.valueRanges[0].values;
    const labelCols = jsonObj.valueRanges[1].values;
    // error for empty column, multiple columns
    checkCols(idCols, I_LABEL);
    checkCols(labelCols, L_LABEL);

    const idList = idCols[0];
    const labelList = labelCols[0];
    // error for different number of cells
    if (idList.length !== labelList.length) {
        throw new Error("Number of cells in two ranges is different.");
    }
    if (idList.length > 150000) {
        throw new Error("Number of Choice Data is over 150,000.");
    }
    // error for an empty cells, over 1000 characters
    checkData(idList, I_LABEL);
    checkData(labelList, L_LABEL);
    // error for same ids
    const idSet = new Set(idList); // idList の重複確認用の Set
    if (idSet.size !== idList.length) {
        throw new Error(`Same ${I_LABEL}s are in range.`);
    }

    return { idList, labelList };
}

/**
 * 列を確認し、空(undefined)や複数列ある場合はエラー
 * @param {Array} cols 列データの配列
 * @param {String} label エラー用のラベル
 */
function checkCols(cols, label) {
    if (cols === undefined) {
        throw new Error(`No Data in ${label}s range.`);
    }
    if (cols.length > 1) {
        throw new Error(`Multiple Columns in ${label}s range.`);
    }
}

/**
 * 配列の要素を確認し、空文字や1000字以上のデータがあればエラー
 * @param {Array<String>} list データが格納された配列
 * @param {String} label エラー用のラベル
 */
function checkData(list, label) {
    list.forEach(str => {
        if (str === "") {
            throw new Error(`Empty Cell is in ${label}s range.`);
        }
        if (str.length > 1000) {
            throw new Error(`Over 1000-character ${label} is in range.`);
        }
    });
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[


/**
 * 設定の準備
 * スプレッドシートの ID とシートのタイトルはデータ項目で指定
 * @param configs
 * @param sheetId
 * @param sheetTitle
 * @param conf_DataIdT
 * @return {
 *     idDataDef: {Object},
 *     labelDataDef: {Object}
 * }
 */
const prepareConfigs = (configs, sheetId, sheetTitle, rangeI, rangeL) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Google',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'spreadsheets',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);

    // スプレッドシートの ID を設定した文字型データ項目（単一行）を準備
    const spreadSheetIdDef = engine.createDataDefinition('スプレッドシートの ID', 1, 'q_SpreadSheetId', 'STRING_TEXTFIELD');
    engine.setData(spreadSheetIdDef, sheetId);
    configs.putObject('conf_DataIdB', spreadSheetIdDef);

    // シートのタイトルを設定した文字型データ項目（単一行）を準備
    const sheetTitleDef = engine.createDataDefinition('シートのタイトル', 2, 'q_SheetTitle', 'STRING_TEXTFIELD');
    engine.setData(sheetTitleDef, sheetTitle);
    configs.putObject('conf_DataIdC', sheetTitleDef);

    configs.put('conf_DataIdD', rangeI);
    configs.put('conf_DataIdE', rangeL);

    // 文字型データ項目を準備して、config に指定
    const idDataDef = engine.createDataDefinition('選択肢 ID の一覧', 1, 'q_Id', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdF', idDataDef);
    // 文字型データ項目の値（スプレッドシートの ID）を指定
    engine.setData(idDataDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const labelDataDef = engine.createDataDefinition('選択肢ラベルの一覧', 2, 'q_Label', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdG', labelDataDef);
    // 文字型データ項目の値（スプレッドシートのタイトル）を指定
    engine.setData(labelDataDef, '事前文字列');

    return {
        idDataDef,
        labelDataDef
    };
};



/**
 * Get リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param sheetId
 * @param sheetTitle
 */
const assertGetRequest = ({ url, method, contentType, body }, sheetId, sheetTitle, rangeI, rangeL) => {

    let newRangeI = rangeI.replace(":", "%3A");
    let newRangeL = rangeL.replace(":", "%3A");

    expect(url)
        .toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/:batchGet`
            + `?ranges=${sheetTitle}%21${newRangeI}&ranges=${sheetTitle}%21${newRangeL}`
            + "&valueRenderOption=UNFORMATTED_VALUE&dateTimeRenderOption=FORMATTED_STRING"
            + "&majorDimension=COLUMNS");	
    expect(method).toEqual('GET');
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        func();
    } catch (e) {
        failed = true;
        expect(e.message).toEqual(errorMsg);
    }
    if (!failed) {
        fail('No error was thrown.');
    }
};

/**
 * GET API リクエストでエラーになる場合
 */
test('GET Failed', () => {
    prepareConfigs(configs, '12345abcde', 'sheet1', 'C1:C3', 'E1:E3');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '12345abcde', 'sheet1', 'C1:C3', 'E1:E3');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認

    assertError(main, 'Failed to get. status:400');
});



/**
 * データの一括取得成功の場合
 * 行範囲も指定
 */
test('Success', () => {
    const {
        idDataDef,
        labelDataDef
    } = prepareConfigs(configs, '12345abcde', 'sheet1', 'A1:A5', 'B1:B5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '12345abcde', 'sheet1', 'A1:A5', 'B1:B5');


        const responseObj = {
            "spreadsheetId": "12345abcde",
            "valueRanges": [
                {
                    "range": "'sheet1'!A1:A5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5"
                        ]
                    ]
                },
                {
                    "range": "'sheet1'!B1:B5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "2023-02-07",
                            "c",
                            "d",
                            "2021年7月2日金曜日 11時00分00秒"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDataDef)).toEqual('1\n2\n3\n4\n5');
    expect(engine.findData(labelDataDef)).toEqual('a\n2023-02-07\nc\nd\n2021年7月2日金曜日 11時00分00秒');
});



/**
 * データの一括取得成功の場合
 * 行範囲は指定しない
 */
test('Success - without line range specified', () => {
    const {
        idDataDef,
        labelDataDef
    } = prepareConfigs(configs, '54321abcde', 'sheet1', 'A:A', 'B:B');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '54321abcde', 'sheet1', 'A:A', 'B:B');


        const responseObj = {
            "spreadsheetId": "54321abcde",
            "valueRanges": [
                {
                    "range": "'sheet1'!A1:A1000",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7"
                        ]
                    ]
                },
                {
                    "range": "'sheet1'!B1:B1000",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e",
                            "f",
                            "g"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDataDef)).toEqual('1\n2\n3\n4\n5\n6\n7');
    expect(engine.findData(labelDataDef)).toEqual('a\nb\nc\nd\ne\nf\ng');
});



/**
 * 取得した2列のデータ数が異なってエラーになる場合
 */
test('error for different number of cells', () => {
    prepareConfigs(configs, '23456bcdef', 'sheet2', 'A1:A3', 'B1:B5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '23456bcdef', 'sheet2', 'A1:A3', 'B1:B5');


        const responseObj = {
            "spreadsheetId": "12345abcde",
            "valueRanges": [
                {
                    "range": "'sheet2'!A1:A3",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "1",
                            "2",
                            "3"
                        ]
                    ]
                },
                {
                    "range": "'sheet2'!B1:B5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Number of cells in two ranges is different.');
});


/**
 * 取得した列のデータ数が150000を超えてエラーになる場合
 */
test('error for over 150,000 of Choice Data ', () => {
    prepareConfigs(configs, '23456bcdef', 'sheet2', 'A1:A150001', 'B1:B150001');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '23456bcdef', 'sheet2', 'A1:A150001', 'B1:B150001');

        const arr150001 = [];
        for (let i = 0; i <= 150000; i++) {
            arr150001.push(String(i));
        }

        const responseObj = {
            "spreadsheetId": "23456bcdef",
            "valueRanges": [
                {
                    "range": "'sheet2'!A1:A150001",
                    "majorDimension": "COLUMNS",
                    "values": [
                        arr150001
                    ]
                },
                {
                    "range": "'sheet2'!B1:B150001",
                    "majorDimension": "COLUMNS",
                    "values": [
                        arr150001
                    ]
                }
            ]
        };

        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Number of Choice Data is over 150,000.');
});



/**
 * 取得した列の選択肢IDデータが重複していてエラーになる場合
 */
test('error for same ids', () => {
    prepareConfigs(configs, '34567cdefg', 'sheet3', 'D1:D5', 'B1:B5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '34567cdefg', 'sheet3', 'D1:D5', 'B1:B5');


        const responseObj = {
            "spreadsheetId": "34567cdefg",
            "valueRanges": [
                {
                    "range": "'sheet3'!D1:D5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "1",
                            "2",
                            "3",
                            "1",
                            "2"
                        ]
                    ]
                },
                {
                    "range": "'sheet3'!B1:B5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Same Choice-IDs are in range.');
});



/**
 * 取得した列のデータの中に、空文字がありエラーになる場合
 * このテストケースは選択肢 ID のデータ中に、空文字がある
 */
test('error for Empty Cell is in', () => {
    prepareConfigs(configs, '45678defgh', 'sheet4', 'D1:D5', 'E1:E5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '45678defgh', 'sheet4', 'D1:D5', 'E1:E5');


        const responseObj = {
            "spreadsheetId": "45678defgh",
            "valueRanges": [
                {
                    "range": "'sheet4'!D1:D5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "b",
                            "",
                            "d",
                            "e"
                        ]
                    ]
                },
                {
                    "range": "'sheet4'!E1:E5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "aa",
                            "bb",
                            "cc",
                            "dd",
                            "ee"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Empty Cell is in Choice-IDs range.');
});



/**
 * 取得した列のデータが全て空で、エラーになる場合
 * このテストケースは選択肢 ID のデータが全て空
 * 指定した行範囲で、全てのセルの値が空（見た目上は「空文字がある」の特殊な形）
 */
test('error for empty column', () => {
    prepareConfigs(configs, '67890fghij', 'sheet6', 'A6:A10', 'B6:B10');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '67890fghij', 'sheet6', 'A6:A10', 'B6:B10');


        const responseObj = {
            "spreadsheetId": "67890fghij",
            "valueRanges": [
                {
                    //指定した行範囲で、全てのセルの値が空の場合、values がなくなる
                    "range": "'sheet6'!A6:A10",
                    "majorDimension": "COLUMNS"
                },
                {
                    "range": "'sheet6'!B6:B10",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "aa",
                            "bb",
                            "cc",
                            "dd",
                            "ee"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'No Data in Choice-IDs range.');
});



/**
 * 取得した列のデータの中に、1000字超のものがありエラーになる場合
 * このテストケースは選択肢ラベルのデータの中に、1000字超のものがある
 */
test('error for over 1000 characters is in', () => {
    prepareConfigs(configs, '56789efghi', 'sheet5', 'D1:D5', 'F1:F5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '56789efghi', 'sheet5', 'D1:D5', 'F1:F5');


        const responseObj = {
            "spreadsheetId": "56789efghi",
            "valueRanges": [
                {
                    "range": "'sheet5'!D1:D5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "aa",
                            "bb",
                            "cc",
                            "dd",
                            "ee"
                        ]
                    ]
                },
                {
                    "range": "'sheet5'!F1:F5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "aaa",
                            "bbb",
                            "ccc",
                            "ddd",
                            "".padEnd(1001, 'e') // 1001 文字のテキスト
                        ]
                    ]
                }
            ]
        };

        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Over 1000-character Label is in range.');
});



/**
 * 選択肢 ID または選択肢ラベルの領域として、複数列を指定してエラーになる場合
 * このテストケースは選択肢ラベルの領域として、複数列を指定
 */
test('error for multiple columns', () => {
    prepareConfigs(configs, '78901ghijk', 'sheet7', 'A6:A10', 'B6:C10');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '78901ghijk', 'sheet7', 'A6:A10', 'B6:C10');


        const responseObj = {
            "spreadsheetId": "67890fghij",
            "valueRanges": [
                {
                    "range": "'sheet6'!A6:A10",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "b",
                            "c",
                            "d",
                            "e"
                        ]
                    ]
                },
                {
                    "range": "'sheet6'!B6:C10",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "aa",
                            "bb",
                            "cc",
                            "dd",
                            "ee"
                        ],
                        [
                            "aaa",
                            "bbb",
                            "ccc",
                            "ddd",
                            "eee"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Multiple Columns in Labels range.');
});

/**
 * 設定の準備
 * スプレッドシートの ID とシートのタイトルは直接指定
 * @param configs
 * @param sheetId
 * @param sheetTitle
 * @param conf_DataIdT
 * @return {
 *     idDataDef: {Object},
 *     labelDataDef: {Object}
 * }
 */
const prepareConfigsWithFixedValue = (configs, sheetId, sheetTitle, rangeI, rangeL) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Google',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'spreadsheets',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('conf_DataIdB', sheetId);
    configs.put('conf_DataIdC', sheetTitle);

    configs.put('conf_DataIdD', rangeI);
    configs.put('conf_DataIdE', rangeL);

    // 文字型データ項目を準備して、config に指定
    const idDataDef = engine.createDataDefinition('選択肢 ID の一覧', 1, 'q_Id', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdF', idDataDef);
    // 文字型データ項目の値（スプレッドシートの ID）を指定
    engine.setData(idDataDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const labelDataDef = engine.createDataDefinition('選択肢ラベルの一覧', 2, 'q_Label', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdG', labelDataDef);
    // 文字型データ項目の値（スプレッドシートのタイトル）を指定
    engine.setData(labelDataDef, '事前文字列');

    return {
        idDataDef,
        labelDataDef
    };
};

/**
 * データの一括取得成功の場合
 * スプレッドシートの ID とシートのタイトルは固定値で指定
 * 行範囲も指定
 */
test('Success - Set the Spreadsheet ID and Title as a fixed value', () => {
    const {
        idDataDef,
        labelDataDef
    } = prepareConfigsWithFixedValue(configs, '12345abcde', 'sheet1', 'A1:A5', 'B1:B5');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '12345abcde', 'sheet1', 'A1:A5', 'B1:B5');


        const responseObj = {
            "spreadsheetId": "12345abcde",
            "valueRanges": [
                {
                    "range": "'sheet1'!A1:A5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "1",
                            "2",
                            "3",
                            "4",
                            "5"
                        ]
                    ]
                },
                {
                    "range": "'sheet1'!B1:B5",
                    "majorDimension": "COLUMNS",
                    "values": [
                        [
                            "a",
                            "2023-02-07",
                            "c",
                            "d",
                            "2021年7月2日金曜日 11時00分00秒"
                        ]
                    ]
                }
            ]
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDataDef)).toEqual('1\n2\n3\n4\n5');
    expect(engine.findData(labelDataDef)).toEqual('a\n2023-02-07\nc\nd\n2021年7月2日金曜日 11時00分00秒');
});
]]></test>
</service-task-definition>
