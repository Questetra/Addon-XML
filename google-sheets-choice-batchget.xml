<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-09-09</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Download Choice Data</label>
<label locale="ja">Google スプレッドシート: 選択肢データの一括取得</label>
<summary>Download Choice Data in specified 2 columns from Google Sheet.</summary>
<summary locale="ja">Google スプレッドシートから指定した2列に入っている選択肢データを取得します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googlesheets-getidslabels/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googlesheets-getidslabels/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: ダウンロード元のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: ダウンロード元のシートのタイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="TEXTFIELD">
    <label>C4: Range of Choice IDs (e.g. "A1:A")</label>
    <label locale="ja">C4: 選択肢 ID の領域情報 (例 "A2:A", "A:A")</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="TEXTFIELD">
    <label>C5: Range of Choice Labels (e.g. "D2:D")</label>
    <label locale="ja">C5: 選択肢ラベルの領域情報 (例 "B2:B", "B:B")</label>
  </config>
  <config name="conf_DataIdF" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C6: Data item that will save Choice IDs</label>
    <label locale="ja">C6: 選択肢 ID の一覧を保存するデータ項目</label>
  </config>
  <config name="conf_DataIdG" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C7: Data item that will save Choice Labels</label>
    <label locale="ja">C7: 選択肢ラベルの一覧を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets.readonly
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)
main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth = configs.get( "conf_OAuth2" );
  const docId = configs.get( "conf_DataIdB" );
  const sheet = configs.get( "conf_DataIdC" );
  const rangeI = configs.get( "conf_DataIdD" );
  const rangeL = configs.get( "conf_DataIdE" );
  const idDataDef = configs.getObject( "conf_DataIdF" );
  const labelDataDef = configs.getObject( "conf_DataIdG" );
  
  //// == 演算 / Calculating ==
  const {idList, labelList} = getChoice( oauth, docId, sheet, rangeI, rangeL );

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.setData( idDataDef, idList.join("\n") );
  engine.setData( labelDataDef, labelList.join("\n") );
}

/**
 * Google スプレッドシートの選択肢データを取得
 * @param {String} oauth OAuth2 認証設定
 * @param {String} docId スプレッドシートの ID
 * @param {String} sheet シート名
 * @param {String} rangeI 選択肢 ID の領域
 * @param {String} rangeL 選択肢 ラベル の領域
 * @return {Object} obj 選択肢データを格納したオブジェクト
 * @return {Array<String>} obj.idList 選択肢 ID を格納した配列
 * @return {Array<String>} obj.labelList 選択肢ラベルを格納した配列
 */
function getChoice( oauth, docId, sheet, rangeI, rangeL ) {
  // Method: spreadsheets.values.batchGet
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${docId}/values/:batchGet`;
  const response = httpClient.begin()
    .authSetting( oauth )
    .queryParam( "ranges", `${sheet}!${rangeI}` )
    .queryParam( "ranges", `${sheet}!${rangeL}` )
    .queryParam( "valueRenderOption", "UNFORMATTED_VALUE" )
    .queryParam( "majorDimension", "COLUMNS" )
    .get( uri );
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}`;
    engine.log( accessLog );
    throw `Failed to get. status:${status}`;
  }
  const jsonObj = JSON.parse( responseStr );

  const I_LABEL = "Choice-ID";
  const L_LABEL = "Label";
  const idCols = jsonObj.valueRanges[0].values;
  const labelCols = jsonObj.valueRanges[1].values;
  // error for empty column, multiple columns
  checkCols(idCols, I_LABEL);
  checkCols(labelCols, L_LABEL);

  const idList = idCols[0];
  const labelList = labelCols[0];
  // error for different number of cells
  if (idList.length !== labelList.length) {
    throw "Number of cells in two ranges is different.";
  }
  if (idList.length > 150000) {
    throw "Number of Choice Data is over 150,000.";
  }
  // error for an empty cells, over 1000 characters
  checkData(idList, I_LABEL);
  checkData(labelList, L_LABEL);
  // error for same ids
  const idSet = new Set( idList ); // idList の重複確認用の Set
  if ( idSet.size !== idList.length ) {
    throw `Same ${I_LABEL}s are in range.`;
  }

  return {idList, labelList};
}

/**
 * 列を確認し、空(undefined)や複数列ある場合はエラー
 * @param {Array} cols 列データの配列
 * @param {String} label エラー用のラベル
 */
function checkCols(cols, label) {
  if (cols === undefined) {
    throw `No Data in ${label}s range.`;
  }
  if (cols.length > 1) {
    throw `Multiple Columns in ${label}s range.`;
  }
}

/**
 * 配列の要素を確認し、空文字や1000字以上のデータがあればエラー
 * @param {Array<String>} list データが格納された配列
 * @param {String} label エラー用のラベル
 */
function checkData(list, label) {
  list.forEach(str => {
    if (str === "") {
      throw `Empty Cell is in ${label}s range.`;
    }
    if (str.length > 1000) {
      throw `Over 1000-character ${label} is in range.`;
    }
  });
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
