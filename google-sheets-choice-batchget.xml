<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2019-05-31</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Google Sheets: Download Choice Data</label>
<label locale="ja">Google Sheets: 選択肢データの一括取得</label>
<summary>Download Choice Data in specified 2 columns from Google Sheet.</summary>
<summary locale="ja">Google Sheet から指定した2列に入っている選択肢データを取得します。</summary>
<help-page-url>https://support.questetra.com/addons/googlesheets-getidslabels/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googlesheets-getidslabels/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: Set OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: ダウンロード元の Spreadsheet の ID</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: ダウンロード元の Sheet の タイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="TEXTFIELD">
    <label>C4: Range of Choice IDs (e.g. "A1:A")</label>
    <label locale="ja">C4: 選択肢IDの領域情報 (例 "A2:A", "A:A")</label>
  </config>
  <config name="conf_DataIdE" required="true" form-type="TEXTFIELD">
    <label>C5: Range of Choice Labels (e.g. "D2:D")</label>
    <label locale="ja">C5: 選択肢ラベルの領域情報 (例 "B2:B", "B:B")</label>
  </config>
  <config name="conf_DataIdF" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C6: STRING Data item that will save Choise IDs</label>
    <label locale="ja">C6: 選択肢IDの一覧を保存する文字列型データ項目</label>
  </config>
  <config name="conf_DataIdG" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
    <label>C7: STRING Data item that will save Choice Labels
    </label>
    <label locale="ja">C7: 選択肢ラベルの一覧を保存する文字列型データ項目</label>
  </config>
</configs>

<script><![CDATA[
// Batch to Get Data via Google Sheets API (ver. 20160921)
// (c) 2016, Questetra, Inc. (the MIT License)

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)
main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get( "conf_OAuth2" );
  const docId = configs.get( "conf_DataIdB" ) + "";
  const sheet= configs.get( "conf_DataIdC" ) + "";
  const rangeI = configs.get( "conf_DataIdD" ) + ""; // (returns Number)
  const rangeL = configs.get( "conf_DataIdE" ) + ""; // (returns Number)
  const dataIdF = configs.get( "conf_DataIdF" ); // (returns Number)
  const dataIdG = configs.get( "conf_DataIdG" ); // (returns Number)

  //// == ワークフローデータの参照 / Data Retrieving ==
  
  //// == 演算 / Calculating ==
  let accessLog = "";
  let responseJson = "";
  const token = httpClient.getOAuth2Token( oauth2 );

  let choiseIds = "";
  let choiseLabels = "";

  try{
    // Method: spreadsheets.values.batchGet
    const uri = "https://sheets.googleapis.com/v4/spreadsheets/" + docId + "/values/:batchGet" ;

    let response = httpClient.begin()
      .bearer(token)
      .queryParam( "ranges", sheet + "!" + rangeI )
      .queryParam( "ranges", sheet + "!" + rangeL )
      .queryParam( "valueRenderOption", "UNFORMATTED_VALUE" )
      .queryParam( "majorDimension", "COLUMNS" )
      .get( uri );
    accessLog += "---GET request--- " + response.getStatusCode() + "\n";
    responseJson = response.getResponseAsString();
    accessLog += responseJson;
    if( response.getStatusCode() != 200 ){
      throw accessLog;
    }
  }catch(e){
    accessLog += e.message + "\n";
    throw accessLog;
  }
  const jsonObj = JSON.parse( responseJson );
  //error for all cells empty
  if(jsonObj.valueRanges[0].values == null ){
    throw "All Cells in Choice-IDs range are empty.";
  }else if(jsonObj.valueRanges[1].values == null){
    throw "All Cells in Labels range are empty.";
  }
  //error for different number of cells 
  if(jsonObj.valueRanges[0].values[0].length != jsonObj.valueRanges[1].values[0].length){
    throw "Number of cells in two ranges is different.";
  }
  if(jsonObj.valueRanges[0].values[0].length > 150000){
    throw"Number of Choice Data is over 150,000."
  }
  //error for an empty cells,over 1000 characters and add to list
  for( let i = 0; i < jsonObj.valueRanges[0].values[0].length; i++ ){
    if ( jsonObj.valueRanges[0].values[0][i] == ""){
      throw "Empty Cell is in Choice-IDs range.";
    }else if ( jsonObj.valueRanges[0].values[0][i].length > 1000){
      throw "Over 1000-character Choice-ID is in range.";
    }
    choiseIds += jsonObj.valueRanges[0].values[0][i] + "\n";
    if ( jsonObj.valueRanges[1].values[0][i] == ""){
      throw "Empty Cell is in Labels range.";
    }else if ( jsonObj.valueRanges[1].values[0][i].length > 1000){
      throw "Over 1000-character Label is in range.";
    }
    choiseLabels += jsonObj.valueRanges[1].values[0][i] + "\n";
  }
  //error for same ids
  for(let j = 0;j < jsonObj.valueRanges[0].values[0].length;j++){
    for( let k = jsonObj.valueRanges[0].values[0].length -1 ; k > j;k--){
      if (jsonObj.valueRanges[0].values[0][j] === jsonObj.valueRanges[0].values[0][k] ){
        throw "Same Choice-IDs are in range.";
      }
    }
  }
  
  // for Debug
  // accessLog += responseJson + "\n";

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.setDataByNumber( dataIdF, choiseIds );
  engine.setDataByNumber( dataIdG, choiseLabels );
  engine.log(accessLog );
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACuUlEQVRYR82X0VHbQBCGd8UT8BA6
iFMBTgXxIwjP4A4SKoBUEFNBTAU4HTgz6PCjqCCkgpAOnBf5Sfdnfs3JcxKSLBmUyc34wZLu9t/d
2+/2VFqMk5OTwd7e3gcRGfIHYKCqA38qgCdVfRKRR/7SNH1YLpf83zi06W0Yhp9E5FJVabjzAPCo
qrMoir7VTa4UMB6PR9ba27KXnRW4CYxOEAQXd3d3cXmNZwLotare7mqsaR6AC2PM3P+mIMDl+lcf
xvM10zR95++NgoCzs7MrEfnapwAR+RxF0Sy3URDQZ/hzg+U0FASMRqOjg4MDltObPqIA4E+SJIM4
jleVEeBDV3qz1xZB40EQTMqVUFmGYRiy7imC8HnxAPAgIlfGGEKqMBpBdHp6OlFVluX5LioAfAcw
v7+/X7QCEasAAIwxN/4E7o39/f2RIyKjc8T3eYSch3zE3D6SgOv1OvZz7dI7VdVVUxXwgy+O69Mm
hLaNCMUfHh6eA7iiAwCujTHTujLMBHiLrwAwfAtr7c82h4vzdKiqxwAYtUkeMb7rKqDK0YznALJw
u1SMvA83Kaqa/BoC2ka/7rtGEjJ0P15qoWk+gPd+OVadhqz/yz5EALgxxvC82Yw6EL26iCrj2f6p
89TRkFWxE4TydQkjEZlWUfCZAJKvDBD2CEEQcJeznLhH3m7J8W9XHYskSRY+jLgWWeCTsXwc0+NL
ALMkSW7KJMsNMzpBEGQ0zIe1dlXnpTtl2VuStNwHrUC0gZAxhmHsPFxv+dGH0a4cyKGTtdzW2sp2
W1VJPkaGMPLhtBG/q4DO3tdN+L8F/IumtLEndCXH20xvPaG1dljbljNvfXbGWy8m+cZx5TPfBp22
OxMA4TTp3BO6aPDwOG5rzP/OtWrz8nVs62FUNubhOLueiwiRWkCy83JzPbfWxm06qL/sgpkwsGVs
hgAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
