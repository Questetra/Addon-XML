<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>

    <label>Converter (Date to Japanese calendar text)</label>
    <label locale="ja">コンバータ (Date to 和暦テキスト)</label>

    <last-modified>2024-04-16</last-modified>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <license>(C) Questetra, Inc. (MIT License)</license>

    <summary>This item converts a Date / Datetime type data item to Japanese calendar text and stores it in a String type data item.</summary>
    <summary locale="ja">この工程は、日付/日時型データ項目を和暦テキストに変換し、文字列型データ項目に格納します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/converter-datetojpera/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/converter-datetojpera/</help-page-url>

    <configs>
        <config name="conf_DataIdA" required="true" form-type="SELECT"
                select-data-type="DATE_YMD|DATETIME">
            <label>C1: Date / Datetime type data item to be converted</label>
            <label locale="ja">C1: 変換対象の日付 / 日時型データ項目</label>
        </config>
        <config name="conf_DataIdB" required="true" form-type="SELECT"
                select-data-type="STRING">
            <label>C2: String type data item to save Japanese calendar text</label>
            <label locale="ja">C2: 和暦テキストを保存する文字列型データ項目</label>
        </config>
    </configs>


    <script><![CDATA[

function main() {
  // データの参照
  const dData = engine.findDataByNumber(configs.get("conf_DataIdA"));
  if (dData === null) {
    // 日付 / 日時型データが空なら、処理失敗に
    throw "DATE/DATETIME Data is empty";
  }

  //元号変換
  // 1900-01-01 = 明治33年1月1日
  // 1912-07-29 = 明治45年7月29日
  // 1912-07-30 = 大正元年7月30日
  // 1926-12-24 = 大正15年12月24日
  // 1926-12-25 = 昭和元年12月25日
  // 1989-01-07 = 昭和64年1月7日
  // 1989-01-08 = 平成元年1月8日
  // 2019-04-30 = 平成31年4月30日
  // 2019-05-01 = 令和元年5月1日
  const locale = new java.util.Locale("ja", "JP", "JP");
  const formatter = new java.text.SimpleDateFormat("GGGGyyyy年M月d日", locale);
  const text = formatter.format(dData);

  //データ更新
  engine.setDataByNumber(configs.get("conf_DataIdB"), text);
}
]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACx0lEQVRYR8WXz0sUYRjHP5O0CLX+
        uHTIQ7sHIby0BdIh0EU6hwmd20Vx9mb9AUvlQQSRVhBq0WW3gxcFKzx4000kBKO2QNgSssgS6uDu
        oQQJJt4ZZ3ecH+s4O+kLyy7s+z7fz/PM87zPMxKnvKRj6afpBbpRiCDRAkQOzhdQKCEhvvMkeOnW
        7tEAWVrYZwi4B6qom1UCUgSYII747bhqAzwhxhkeH0PYLCTE48i8cCJwBnhKCkn13I+VQua+nSF7
        gDQ54K4fyhUbCjkSxM02rQD+en5YT2GChJpLlXUYQHvmWV89txq7bcyJKoCW7Vt1JJxb7hIBwnp1
        VAHSPAQeuLVSa99U1xTzW/Msflt02vYIWdXDCCBKptkPgI07GzQFmhhcGXSCKCHTWgXQbrjnRvGe
        iz20nWvzxJO8lqS9uZ3t39u1INRc0CJgk/nCi47WDk8AxkOOEAcVoQGkyat3vGH5BbD3d4/RwijD
        b4fNzrxCJqoDfAEuGXdMd03TeaHTUwRC50NqDgjx8Q/jJN8k7ewUkLmqAyielBwOieiFg+Fa4tpJ
        GelIgODZIJnuDDt/dhh67a41rN5aZfnHspPnVWwDgOURiF1CPBvN0hvqJfcxx8DKgH+BUnhPgohj
        EhrFG6QG1n6usVne9ASw9H2J3CfR3w4tQxLalOHszVn6wn0I8XpXppixRs9UhpaLaPLGJP2X+2ls
        aKxXH1sAMFxE2l1guYqNEHOf51j4uuAJplgqsv5r3Xi2jKyNd0c2Ix1iZnPGzyS0aUZaOxbVYGlI
        Y9fH2N3fZeTdiKcImA6VCRCytmOx61QHEh3zf45kUAm9LndyQyk8QyZmfoYnNZZbPK8dAf1fbVAR
        V5jXSakMxLy9mOgQWnWIUVp83IIIYfFqlqrv1cz8wEREFKJIRFBoQeKKukU0FokSCgUk8rU8dp8D
        flS8Cxv/AFp57iGwqv7bAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[
/**
 * 日時型データ項目を config に指定した場合
 */
test('DATETIME', () => {
    // 日時型データ項目を準備して、config に指定
    const datetimeDef = engine.createDataDefinition('日時', 5, 'q_datetime', 'DATETIME');
    configs.putObject('conf_DataIdA', datetimeDef);
    // 日時型データ項目の値を指定
    const datetime = java.sql.Timestamp.valueOf('2021-09-10 18:03:00');
    engine.setData(datetimeDef, datetime);

    // 文字型データ項目を準備して、config に指定
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdB', stringDef);
    // 文字型データ項目の値を指定。
    engine.setData(stringDef, null);

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(stringDef)).toEqual('令和3年9月10日');
});

/**
 * 日付型データ項目を config に指定した場合
 */
test('DATE', () => {
    // 日付型データ項目を準備して、config に指定
    const dateDef = engine.createDataDefinition('日付YMD', 5, 'q_dateYMD', 'DATE_YMD');
    configs.putObject('conf_DataIdA', dateDef);
    // 日付型データ項目の値を指定
    const date = java.sql.Date.valueOf('2020-10-03');
    engine.setData(dateDef, date);

    // 文字型データ項目を準備して、config に指定
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTAREA');
    configs.putObject('conf_DataIdB', stringDef);
    // 文字型データ項目の値を指定。
    engine.setData(stringDef, 'こんにちは\nさようなら');

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(stringDef)).toEqual('令和2年10月3日');
});

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
    }
    if (!failed) {
        fail();
    }
};

/**
 * 指定したデータ項目の値が空の場合
 */
test('null', () => {
    // 日付型データ項目を準備して、config に指定
    const datetimeDef = engine.createDataDefinition('日時', 5, 'q_datetime', 'DATETIME');
    configs.putObject('conf_DataIdA', datetimeDef);
    // 日付型データ項目の値を空に指定。
    engine.setData(datetimeDef, null);

    // 文字型データ項目を準備して、config に指定
    const stringDef = engine.createDataDefinition('文字', 1, 'q_string', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdB', stringDef);
    // 文字型データ項目の値を指定。
    engine.setData(stringDef, 'ほげほげ');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'DATE/DATETIME Data is empty');
});
]]></test>

</service-task-definition>
