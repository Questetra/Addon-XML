<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <last-modified>2023-06-06</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Twilio SendGrid: Add Contact</label>
    <label locale="ja">Twilio SendGrid: 宛先追加</label>
    <summary>This item adds a contact to existing lists on SendGrid. When you add the contact to multiple lists, write one list ID per line.</summary>
    <summary locale="ja">この工程は、SendGrid の既存のリストに宛先を追加します。複数のリストに宛先を追加する場合、1 行につき 1 つずつ ID を書くようにしてください。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/sendgrid-contact-add/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/sendgrid-contact-add/</help-page-url>
    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Key is set as token</label>
            <label locale="ja">C1: API キーをトークンとして設定した認証設定</label>
        </config>
        <config name="conf_ListIds" el-enabled="true" form-type="TEXTAREA">
            <label>C2: List IDs that the contact will be added to</label>
            <label locale="ja">C2: 宛先を追加するリストの ID</label>
        </config>
        <config name="conf_Email" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C3: Email Address</label>
            <label locale="ja">C3: メールアドレス</label>
        </config>
        <config name="conf_AlternateEmails" el-enabled="true" form-type="TEXTAREA">
            <label>C4: Additional Email Addresses (up to 5 addresses)</label>
            <label locale="ja">C4: 代替メールアドレス（最大 5 件）</label>
        </config>
        <config name="conf_LastName" el-enabled="true" form-type="TEXTFIELD">
            <label>C5: Last Name</label>
            <label locale="ja">C5: 姓</label>
        </config>
        <config name="conf_FirstName" el-enabled="true" form-type="TEXTFIELD">
            <label>C6: First Name</label>
            <label locale="ja">C6: 名</label>
        </config>
        <config name="conf_Country" el-enabled="true" form-type="TEXTFIELD">
            <label>C7: Country</label>
            <label locale="ja">C7: 国</label>
        </config>
        <config name="conf_PostalCode" el-enabled="true" form-type="TEXTFIELD">
            <label>C8: PostalCode</label>
            <label locale="ja">C8: 郵便番号</label>
        </config>
        <config name="conf_Region" el-enabled="true" form-type="TEXTFIELD">
            <label>C9: State, Province, or Region</label>
            <label locale="ja">C9: 都道府県</label>
        </config>
        <config name="conf_City" el-enabled="true" form-type="TEXTFIELD">
            <label>C10: City</label>
            <label locale="ja">C10: 市区町村</label>
        </config>
        <config name="conf_Address1" el-enabled="true" form-type="TEXTFIELD">
            <label>C11: Address 1st Line</label>
            <label locale="ja">C11: 住所 1 行目</label>
        </config>
        <config name="conf_Address2" el-enabled="true" form-type="TEXTFIELD">
            <label>C12: Address 2nd Line</label>
            <label locale="ja">C12: 住所 2 行目</label>
        </config>
        <config name="conf_CustomFields" form-type="SELECT" select-data-type="LIST">
            <label>C13: Custom Fields</label>
            <label locale="ja">C13: カスタムフィールド</label>
        </config>
    </configs>

    <script><![CDATA[

const MAX_EMAIL_LENGTH = 254;
const MAX_NAME_LENGTH = 50;
const MAX_CITY_LENGTH = 60;
const MAX_ADDRESS_LENGTH = 1000;
const MAX_ALTERNATE_EMAIL_NUM = 5;

main();
function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const listIds = retrieveListIds();
    const contact = retrieveContact();

    //// == Calculating / 演算 ==
    const jobId = addContact(auth, listIds, contact);

    // TODO ステータスを確認して、完了を待つように
}

function retrieveListIds() {
    const listIds = configs.get('conf_ListIds').split('\n')
        .filter(id => id !== '');
    // API ドキュメントに List ID 上限数の記載なしのため、上限数はチェックしない
    return listIds;
}

function retrieveContact() {
    const email = retrieveConfig('conf_Email', true, MAX_EMAIL_LENGTH, 'Email');
    const alternateEmails = retrieveAlternateEmails();
    const lastName = retrieveConfig('conf_LastName', false, MAX_NAME_LENGTH, 'Last Name');
    const firstName = retrieveConfig('conf_FirstName', false, MAX_NAME_LENGTH, 'First Name');
    const country = retrieveConfig('conf_Country', false, MAX_NAME_LENGTH, 'Country');
    // postal_code の文字数制限は API ドキュメントに記載がないが、試したところ city と同じ制限だった
    const postalCode = retrieveConfig('conf_PostalCode', false, MAX_CITY_LENGTH, 'Postal Code');
    const region = retrieveConfig('conf_Region', false, MAX_NAME_LENGTH, 'Region');
    const city = retrieveConfig('conf_City', false, MAX_CITY_LENGTH, 'City');
    const address1 = retrieveConfig('conf_Address1', false, MAX_ADDRESS_LENGTH, 'Address 1st Line');
    const address2 = retrieveConfig('conf_Address2', false, MAX_ADDRESS_LENGTH, 'Address 2nd Line');
    const customFields = retrieveCustomFields();

    const contact = {
        email,
        alternate_emails: alternateEmails,
        last_name: lastName,
        first_name: firstName,
        country,
        postal_code: postalCode,
        state_province_region: region,
        city,
        address_line_1: address1,
        address_line_2: address2
    };

    return contact;
}

function retrieveConfig(confName, required, maxLength, label) {
    const value = configs.get(confName);
    if (required && value === '') {
        throw `${label} is blank.`;
    }
    if (value.length > maxLength) {
        trow `${label} must be within ${maxLength} characters.`;
    }
    return value;
}

function retrieveAlternateEmails() {
    const alternateEmails = configs.get('conf_AlternateEmails').split('\n')
        .filter(email => email !== '');
    if (alternateEmails.length > MAX_ALTERNATE_EMAIL_NUM) {
        throw `The maximum number of alternate emails is ${MAX_ALTERNATE_EMAIL_NUM}.`;
    }
    // API ドキュメントに上限文字数の記載はないが、メインのメールアドレスと同様にチェック
    if (alternateEmails.some(email => email.length > MAX_EMAIL_LENGTH)) {
        throw `Each alternate email must be within ${MAX_EMAIL_LENGTH} characters.`;
    }
    return alternateEmails;
}

function retrieveCustomFields() {
    // TODO 後で
}

function addContact(auth, listIds, contact) {
    const requestBody = {
        "list_ids": listIds,
        "contacts": [contact]
    };
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(requestBody), 'application/json')
        .put('https://api.sendgrid.com/v3/marketing/contacts');

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 202) {
        engine.log(responseStr);
        throw `Failed to add contact. status: ${status}`;
    }
    return JSON.parse(responseStr).job_id;
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
        ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
        22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
        AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
        XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
        IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
        ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
        cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
        zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
        7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
        BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
        MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
        AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
        hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
        chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=
    </icon>

</service-task-definition>
