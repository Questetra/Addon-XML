<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <last-modified>2023-06-01</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Twilio SendGrid: Add Contact</label>
    <label locale="ja">Twilio SendGrid: 宛先追加</label>
    <summary>This item adds a contact to an existing list on SendGrid. When you add the contact to multiple lists, write one list ID per line.</summary>
    <summary locale="ja">この工程は、SendGrid の既存のリストに宛先を追加します。複数のリストに宛先を追加する場合、1 行につき 1 つずつ ID を書くようにしてください。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/sendgrid-contact-add/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/sendgrid-contact-add/</help-page-url>
    <configs>
    <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
        <label>C1: API Key</label>
        <label locale="ja">C1: API キー</label>
    </config>
    <config name="conf_ListIDs" el-enabled="true" form-type="TEXTAREA">
        <label>C2: List IDs that the contact will be added to</label>
        <label locale="ja">C2: 宛先を追加するリストの ID</label>
    </config>
    <config name="conf_Email" required="true" el-enabled="true" form-type="TEXTFIELD">
        <label>C3: Email Address</label>
        <label locale="ja">C3: メールアドレス</label>
    </config>
    <config name="conf_AlternateEmails" el-enabled="true" form-type="TEXTAREA">
        <label>C4: Additional Email Addresses (up to 5 addresses)</label>
        <label locale="ja">C4: 代替メールアドレス（最大 5 件）</label>
    </config>
    <config name="conf_LastName" el-enabled="true" form-type="TEXTFIELD">
        <label>C5: Last Name</label>
        <label locale="ja">C5: 姓</label>
    </config>
    <config name="conf_FirstName" el-enabled="true" form-type="TEXTFIELD">
        <label>C6: First Name</label>
        <label locale="ja">C6: 名</label>
    </config>
    <config name="conf_Country" el-enabled="true" form-type="TEXTFIELD">
        <label>C7: Country</label>
        <label locale="ja">C7: 国</label>
    </config>
    <config name="conf_PostalCode" el-enabled="true" form-type="TEXTFIELD">
        <label>C8: PostalCode</label>
        <label locale="ja">C8: 郵便番号</label>
    </config>
    <config name="conf_Region" el-enabled="true" form-type="TEXTFIELD">
        <label>C9: State, Province, or Region</label>
        <label locale="ja">C9: 都道府県</label>
    </config>
    <config name="conf_City" el-enabled="true" form-type="TEXTFIELD">
        <label>C10: City</label>
        <label locale="ja">C10: 市区町村</label>
    </config>
    <config name="conf_Address1" el-enabled="true" form-type="TEXTFIELD">
        <label>C11: Address 1st Line</label>
        <label locale="ja">C11: 住所 1 行目</label>
    </config>
    <config name="conf_Address2" el-enabled="true" form-type="TEXTFIELD">
        <label>C12: Address 2nd Line</label>
        <label locale="ja">C12: 住所 2 行目</label>
    </config> 
    <config name="conf_CustomFields" form-type="SELECT" select-data-type="LIST">
        <label>C13: Custom Fields</label>
        <label locale="ja">C13: カスタムフィールド</label>
    </config>
    </configs>

    <script><![CDATA[
    main();
    function main(){
    const auth = configs.get('conf_Auth');
    const listIds = configs.get('conf_ListIDs'); // TODO 後で、複数件の場合
    const email = configs.get('conf_Email'); // TODO 空文字のチェック
    const alternateEmails = retrieveAlternateEmails();
    const lastName = configs.get('conf_LastName');
    const firstName = configs.get('conf_FirstName');
    const country = configs.get('conf_Country');
    const postalCode = configs.get('conf_PostalCode');
    const region = configs.get('conf_Region');
    const city = configs.get('conf_City');
    const address1 = configs.get('conf_Address1');
    const address2 = configs.get('conf_Address2');
    const customFields = retrieveCustomFields();
    
    
    // TODO 現状、list_ids は空
    const json = {
        "list_ids": [
        ],
        "contacts": [{
        "custom_fields": {},
        }],
        
    };
    json["contacts"][0]["email"] = email;
    if(address1 !== "" && address1 !== null){
        json["contacts"][0]["address_line_1"] = address1;
    }
    if(city !== "" && city !== null){
        json["contacts"][0]["city"] = city;
    }
    if(country !== "" && country !== null){
        json["contacts"][0]["country"] = country;
    }
    if(firstName !== "" && firstName !== null){
        json["contacts"][0]["first_name"] = firstName;
    }
    if(lastName !== "" && lastName !== null){
        json["contacts"][0]["last_name"] = lastName;
    }
    if(postalCode !== "" && postalCode !== null){
        json["contacts"][0]["first_name"] = postalCode;
    }
    if(region !== "" && region !== null){
        json["contacts"][0]["state_province_region"] = region;
    }

    engine.log(JSON.stringify(json));
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(json), 'application/json')
        .put('https://api.sendgrid.com/v3/marketing/contacts');

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 202) {
        engine.log(responseStr);
        throw `Failed to add contact. status: ${status}`;
    }
    }

    function retrieveAlternateEmails() {
    const alternateEmailsStr = configs.get('conf_AlternateEmails');
    // TODO 後で
    }

    function retrieveCustomFields() {
    // TODO 後で
    }

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
        ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
        22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
        AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
        XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
        IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
        ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
        cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
        zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
        7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
        BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
        MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
        AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
        hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
        chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=
    </icon>
    
</service-task-definition>
