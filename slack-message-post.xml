<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-08-02</last-modified>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Slack: Post Message</label>
    <label locale="ja">Slack: メッセージ送信</label>
    <summary>This item posts a message to Slack. Blocks are available.</summary>
    <summary locale="ja">この工程は、Slack にメッセージを投稿します。Blocks に対応しています。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-slack-message-post/
    </help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-slack-message-post/
    </help-page-url>
    <configs>
        <config name="conf_Token" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which Bot Token is set</label>
            <label locale="ja">C1: Bot トークンを設定した認証設定</label>
        </config>
        <config name="conf_Channel" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C2: Channel ID (name is also available)</label>
            <label locale="ja">C2: チャンネル ID (名前も可)</label>
        </config>
        <config name="conf_Thread" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C3: Thread ID</label>
            <label locale="ja">C3: スレッド ID</label>
        </config>
        <config name="conf_Blocks" form-type="TEXTAREA" el-enabled="true">
            <label>C4: Blocks (JSON)</label>
        </config>
        <config name="conf_Text" required="true" form-type="TEXTAREA" el-enabled="true">
            <label>C5: Text</label>
            <label locale="ja">C5: Text</label>
        </config>
    </configs>
    <script><![CDATA[
function main() {
    const auth = configs.getObject("conf_Token");
    const channel = readStringData('conf_Channel');
    const thread = readStringData('conf_Thread');
    const text = configs.get("conf_Text") ?? '';
    const blocks = readBlocks();

    sendMessage(auth, channel, thread, blocks, text);
}

function readStringData(configName) {
    const def = configs.getObject(configName);
    if (def !== null) {
        return engine.findData(def);
    }
    // editable=true にも対応
    const value = configs.get(configName) ?? '';
    return value === '' ? null : value;
}

function readBlocks() {
    const blocksText = configs.get('conf_Blocks') ?? '';
    if (blocksText === '') {
        return null;
    }

    const errorMsg = `Config text must be JSON like below.
    {
        "blocks": [...]
    }
    `;
    let blocks;
    try {
        blocks = JSON.parse(blocksText).blocks;
    } catch (e) {
        throw new Error(errorMsg);
    }
    if (blocks === undefined) {
        throw new Error(errorMsg);
    }
    return blocks;
}

/**
 * Send Message with Bots  チャット投稿
 * @param {Object} auth
 * @param {String} channel チャンネルID
 * @param {String} thread スレッドID
 * @param {Object} blocks
 * @param {String} text
 */
function sendMessage(auth, channel, thread, blocks, text) {
    const jsonReq = {};
    jsonReq["channel"] = channel;
    if (thread !== null) {
        jsonReq["thread_ts"] = thread;
    }
    if (blocks !== null) {
        jsonReq['blocks'] = blocks;
    }
    jsonReq["text"] = text;

    const url = 'https://slack.com/api/chat.postMessage';
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
        .post(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();

    let responseJson;
    try {
        responseJson = JSON.parse(responseTxt);
    } catch (e) {
        engine.log("failed to parse as json");
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw new Error(`Failed to send. status: ${status}`);
    }

    if (responseJson.ok !== true) {
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw new Error(`Failed to send. status: ${status}`);
    }
}
]]></script>
    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[
/**
 * 設定の準備
 * @param channel
 * @param thread
 * @param blocks
 * @param text
 */
const prepareConfigs = (channel, thread, blocks, text) => {
    const auth = httpClient.createAuthSettingToken('Slack', 'Slack');
    configs.putObject('conf_Token', auth);

    const channelDef = engine.createDataDefinition('チャンネル', 1, 'q_channel', 'STRING_TEXTFIELD');
    engine.setData(channelDef, channel);
    configs.putObject('conf_Channel', channelDef);

    const threadDef = engine.createDataDefinition('スレッド', 2, 'q_thread', 'STRING_TEXTFIELD');
    engine.setData(threadDef, thread);
    configs.putObject('conf_Thread', threadDef);

    configs.put('conf_Blocks', blocks === null ? '' : JSON.stringify(blocks));
    configs.put('conf_Text', text);
};

/**
 * POSTリクエストのテスト（チャット投稿）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param channel
 * @param thread
 * @param blocks
 * @param text
 */
const assertPostRequest = ({url, method, contentType, body}, channel, thread, blocks, text) => {
    expect(url).toEqual('https://slack.com/api/chat.postMessage');
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.channel).toEqual(channel);
    if (thread === null) {
        expect(bodyObj['thread_ts']).toEqual(undefined);
    } else {
        expect(bodyObj['thread_ts']).toEqual(thread);
    }
    if (blocks === null) {
        expect(bodyObj.blocks).toEqual(undefined);
    } else {
        expect(bodyObj.blocks).toEqual(blocks.blocks);
    }
    expect(bodyObj.text).toEqual(text);
};

/**
 * POST リクエストのレスポンスを準備（チャット投稿）
 * @param channel
 * @param text
 * @return responseObj
 */
const preparePostResponse = (channel, text) => {
    return {
        "ok": true,
        "channel": `${channel}`,
        "ts": "1650857142.223299",
        "message": {
            "type": "message",
            "subtype": "bot_message",
            "text": `${text}`,
            "ts": "1650857142.223299",
            "bot_id": "B01JPAT1P4J"
        }
    };
};

/**
 * POST API リクエストでエラーになる場合（チャット投稿）
 */
test('POST Failed', () => {
    prepareConfigs('channel1', null, null, 'text1');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'channel1', null, null, 'text1');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    try {
        main();
    } catch (e) {
        expect(e.message).toEqual('Failed to send. status: 400');
    }
});

/**
 * チャット投稿成功の場合
 * スレッド指定なし
 * Blocks 指定なし
 */
test('Success - no thread, no blocks', () => {
    prepareConfigs('channel2', null, null, 'text2');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'channel2', null, null, 'text2');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel2', 'text2')));
    });

    main();
});

/**
 * チャット投稿成功の場合
 * スレッド指定あり
 * Blocks 指定あり
 */
test('Success - with thread, with blocks', () => {
    const blocks = {
        "blocks": [
            {
                "type": "section",
                "text": {
                    "type": "plain_text",
                    "text": "This is a plain text section block.",
                    "emoji": true
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "plain_text",
                    "text": "This is a plain text section block.",
                    "emoji": true
                }
            }
        ]
    };
    prepareConfigs('channel3', 'thread3', blocks, 'text3');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'channel3', 'thread3', blocks, 'text3');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('channel3', 'text3')));
    });

    main();
});
]]></test>
</service-task-definition>