<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-08-29</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Slack: Get User Name</label>
    <label locale="ja">Slack: ユーザ名取得</label>
    <summary>This item gets the specified Slack user's name and/or email address.</summary>
    <summary locale="ja">この工程は、指定した Slack のユーザのユーザ名やメールアドレスを取得します。</summary>
    <configs>
        <config name="conf_Token" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which Bot Token is set</label>
            <label locale="ja">C1: Bot トークンを設定した認証設定</label>
        </config>
        <config name="conf_SlackUserId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Slack User ID</label>
            <label locale="ja">C2: Slack ユーザ ID</label>
        </config>
        <config name="conf_UserName" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C3: Data item to save User Name</label>
            <label locale="ja">C3: ユーザ名を保存するデータ項目</label>
        </config>
        <config name="conf_Quser" form-type="SELECT" select-data-type="STRING_TEXTFIELD|QUSER">
            <label>C4: Data item to save Email Address or Questetra User</label>
            <label locale="ja">C4: メールアドレス もしくは Questetra ユーザを保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-slack-username-get/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-slack-username-get/</help-page-url>
    <script><![CDATA[

function main() {
    const auth = configs.getObject('conf_Token');
    const slackUserId = retrieveSlackUserId();
    const userNameDef = configs.getObject('conf_UserName');
    const quserDef = configs.getObject('conf_Quser');
    if (userNameDef === null && quserDef === null) {
        throw 'No data item to save the result is set.';
    }

    const { userName, emailAddress } = getUserInfo(auth, slackUserId);
    setData(userNameDef, userName);
    setData(quserDef, emailAddress);
}

/**
 * Slack のユーザ ID を config から読み出す
 * @return {String} slackUserId ユーザ ID
 */
function retrieveSlackUserId(){
    const slackUserId = engine.findData(configs.getObject('conf_SlackUserId'));
    if (slackUserId === null) {
        throw 'Slack User ID is blank.';
    }
    return slackUserId;
}

/**
 * Slack のユーザ ID からユーザ情報を取得する
 * users.info https://api.slack.com/methods/users.info
 * @param {AuthSettingWrapper} auth
 * @param {String} slackUserId
 * @return {Object} userInfo
 * @return {String} userInfo.userName ユーザ名
 * @return {String} userInfo.emailAddress メールアドレス
 */
function getUserInfo(auth, slackUserId) {
    const url = 'https://slack.com/api/users.info';
    const response = httpClient.begin()
        .authSetting(auth)
        .queryParam('user', slackUserId)
        .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();

    let responseJson;
    try {
        responseJson = JSON.parse(responseTxt);
    } catch (e) {
        engine.log('Failed to parse response as json.');
        engine.log(responseTxt);
        throw `Failed to get user info. status: ${status}`;
    }
    if (responseJson.ok !== true) {
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw `Response is not ok. error: ${responseJson.error}`;
    }
    const userName = responseJson.user.profile.real_name;
    const emailAddress = responseJson.user.profile.email;
    return { userName, emailAddress };
}

/**
 * データ項目に値をセットする
 * @param {DataDefinitionView} dataDef
 * @param {String} stringValue
 */
function setData(dataDef, stringValue) {
    if (dataDef === null) {
        return;
    }
    if (stringValue === undefined) { // スコープが不足していてメールアドレスを取得できなかった場合
        throw 'Failed to get Email Address. Scope users:read.email is required.';
    }
    // 文字型データ項目の場合
    if (dataDef.matchDataType('STRING_TEXTFIELD')) {
        engine.setData(dataDef, stringValue);
        return;
    }
    // ユーザ型の場合
    const quser = quserDao.findByEmail(stringValue); // メールアドレスでユーザを検索
    if (quser === null) {
        throw `Questetra User not found. email: ${stringValue}`;
    }
    engine.setData(dataDef, quser);
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * メールアドレスを文字型データ項目に保存する場合
 * @param slackUserId
 * @return returnObj
 * @return returnObj.userNameDef
 * @return returnObj.emailDef
 */
const prepareConfigs = (slackUserId) => {
    // 認証設定を準備
    const auth = httpClient.createAuthSettingToken('Slack Bot Token', 'slack-bot-token-12345');
    configs.putObject('conf_Token', auth);

    // 文字型データ項目を準備して、config に指定
    const slackUserIdDef = engine.createDataDefinition('ユーザ ID', 1, 'q_userId', 'STRING_TEXTFIELD');
    engine.setData(slackUserIdDef, slackUserId);
    configs.putObject('conf_SlackUserId', slackUserIdDef);

    const userNameDef = engine.createDataDefinition('ユーザ名', 2, 'q_userName', 'STRING_TEXTFIELD');
    engine.setData(userNameDef, '事前文字列');
    configs.putObject('conf_UserName', userNameDef);

    const emailDef = engine.createDataDefinition('メールアドレス', 3, 'q_mailAddress', 'STRING_TEXTFIELD');
    engine.setData(emailDef, '事前文字列');
    configs.putObject('conf_Quser', emailDef);

    return { userNameDef, emailDef };
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * ユーザ ID が空
 */
test('Slack User ID is blank', () => {
    prepareConfigs(null);
    assertError(main, 'Slack User ID is blank.');
});

/**
 * 保存先データ項目がいずれも未設定
 */
test('No data item to save the result is set', () => {
    prepareConfigs('U12345678');
    configs.put('conf_UserName', '');
    configs.put('conf_Quser', '');
    assertError(main, 'No data item to save the result is set.');
});

/**
 * ユーザ情報取得の API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param slackUserId
 */
const assertRequest = ({ url, method }, slackUserId) => {
    expect(url).toEqual(`https://slack.com/api/users.info?user=${slackUserId}`);
    expect(method).toEqual('GET');
};

/**
 * API リクエストに失敗 - レスポンスが JSON でない
 */
test('Failed to parse response as json', () => {
    prepareConfigs('U12345678');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        return httpClient.createHttpResponse(403, 'text/plain', 'Forbidden.');
    });
    assertError(main, 'Failed to get user info. status: 403');
});

/**
 * API リクエストに失敗 - レスポンスが ok でない
 */
test('Response is not ok', () => {
    prepareConfigs('U12345678');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        const errorResponse = {
            ok: false,
            error: 'missing_scope'
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(errorResponse));
    });
    assertError(main, 'Response is not ok. error: missing_scope');
});

/**
 * 成功
 * メールアドレスを文字型データ項目に保存
 */
test('Success - Email Address is saved to String type data item', () => {
    const { userNameDef, emailDef } = prepareConfigs('U12345678');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        const response = {
            ok: true,
            user: {
                profile: {
                    email: 'user1@example.com',
                    real_name: 'User 1'
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(userNameDef)).toEqual('User 1');
    expect(engine.findData(emailDef)).toEqual('user1@example.com');
});

/**
 * スコープの不足により、メールアドレスの取得に失敗
 */
test('Failed to get Email Address', () => {
    prepareConfigs('U12345678');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        const response = { // リクエスト自体には成功するが、メールアドレスのフィールドがレスポンスに含まれない
            ok: true,
            user: {
                profile: {
                    real_name: 'User 1'
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
    });
    assertError(main, 'Failed to get Email Address. Scope users:read.email is required.');
});

/**
 * 成功
 * メールアドレスを保存しない場合
 */
test('Success - Email Address is not saved', () => {
    const { userNameDef, emailDef } = prepareConfigs('U24680');
    configs.put('conf_Quser', ''); // メールアドレスを保存するデータ項目の選択を解除
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U24680');
        // メールアドレスを保存しない場合は、メールアドレスがレスポンスに含まれなくてもエラーにならない
        const response = {
            ok: true,
            user: {
                profile: {
                    real_name: 'User 2'
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(userNameDef)).toEqual('User 2');
    expect(engine.findData(emailDef)).toEqual('事前文字列');
});

/**
 * 成功
 * ユーザ名を保存しない
 * メールアドレスをユーザ型データ項目に保存
 */
test('Success - Email Address is saved to Quser type data item', () => {
    const { userNameDef, emailDef } = prepareConfigs('U12345678');
    configs.put('conf_UserName', ''); // ユーザ名を保存するデータ項目の選択を解除
    const quserDef = engine.createDataDefinition('Questetra ユーザ', 4, 'q_user', 'QUSER');
    configs.putObject('conf_Quser', quserDef);
    engine.createQuser(1, 'ユーザ 1', 'user1@example.com'); // 対象のユーザを作成しておく
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        const response = {
            ok: true,
            user: {
                profile: {
                    email: 'user1@example.com',
                    real_name: 'User 1'
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(userNameDef)).toEqual('事前文字列');
    expect(engine.findData(emailDef)).toEqual('事前文字列');
    const quser = engine.findData(quserDef);
    expect(quser.getEmail()).toEqual('user1@example.com');
    expect(quser.getName()).toEqual('ユーザ 1');
});

/**
 * メールアドレスが一致するQuestetra ユーザが存在しない場合
 */
test('Questetra User not found', () => {
    const { userNameDef, emailDef } = prepareConfigs('U12345678');
    const quserDef = engine.createDataDefinition('Questetra ユーザ', 4, 'q_user', 'QUSER');
    configs.putObject('conf_Quser', quserDef);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'U12345678');
        const response = {
            ok: true,
            user: {
                profile: {
                    email: 'user1@example.com',
                    real_name: 'User 1'
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
    });
    assertError(main, 'Questetra User not found. email: user1@example.com');
});


    ]]></test>
</service-task-definition>
