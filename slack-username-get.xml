<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <!--
    <last-modified>2023-08-28</last-modified>
    -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <label>Slack: Get User Name</label>
    <label locale="ja">Slack: ユーザ名取得</label>
    <summary>This item gets the specified Slack user's name and/or email address.</summary>
    <summary locale="ja">この工程は、指定した Slack のユーザのユーザ名やメールアドレスを取得します。</summary>
    <configs>
        <config name="conf_Token" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which Bot Token is set</label>
            <label locale="ja">C1: Bot トークンを設定した認証設定</label>
        </config>
        <config name="conf_SlackUserId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Slack User ID</label>
            <label locale="ja">C2: Slack ユーザ ID</label>
        </config>
        <config name="conf_UserName" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C3: Data item to save User Name</label>
            <label locale="ja">C3: ユーザ名を保存するデータ項目</label>
        </config>
        <config name="conf_Quser" form-type="SELECT" select-data-type="STRING_TEXTFIELD|QUSER">
            <label>C4: Data item to save Email Address or Questetra User</label>
            <label locale="ja">C4: メールアドレス もしくは Questetra ユーザを保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-slack-username-get/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-slack-username-get/</help-page-url>
    <script><![CDATA[
main();

function main() {
    const auth = configs.getObject('conf_Token');
    const slackUserId = retrieveSlackUserId();
    const userNameDef = configs.getObject('conf_UserName');
    const quserDef = configs.getObject('conf_Quser');
    if (userNameDef === null && quserDef === null) {
        throw 'No data item to save the result is set.';
    }

    const { userName, emailAddress } = getUserInfo(auth, slackUserId);
    setData(userNameDef, userName);
    setData(quserDef, emailAddress);
}

/**
 * Slack のユーザ ID を config から読み出す
 * @return {String} slackUserId ユーザ ID
 */
function retrieveSlackUserId(){
    const slackUserId = engine.findData(configs.getObject('conf_SlackUserId'));
    if (slackUserId === null) {
        throw 'Slack User ID is blank.';
    }
    return slackUserId;
}

/**
 * Slack のユーザ ID からユーザ情報を取得する
 * users.info https://api.slack.com/methods/users.info
 * @param {AuthSettingWrapper} auth
 * @param {String} slackUserId
 * @return {Object} userInfo
 * @return {String} userInfo.userName ユーザ名
 * @return {String} userInfo.emailAddress メールアドレス
 */
function getUserInfo(auth, slackUserId) {
    const url = 'https://slack.com/api/users.info';
    const response = httpClient.begin()
        .authSetting(auth)
        .queryParam('user', slackUserId)
        .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();

    let responseJson;
    try {
        responseJson = JSON.parse(responseTxt);
    } catch (e) {
        engine.log('Failed to parse response as json.');
        engine.log(responseTxt);
        throw `Failed to get user info. status: ${status}`;
    }
    if (responseJson.ok !== true) {
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw `Response is not ok. error: ${responseJson.error}`;
    }
    const userName = responseJson.user.profile.real_name;
    const emailAddress = responseJson.user.profile.email;
    return { userName, emailAddress };
}

/**
 * データ項目に値をセットする
 * @param {DataDefinitionView} dataDef
 * @param {String} stringValue
 */
function setData(dataDef, stringValue) {
    if (dataDef === null) {
        return;
    }
    if (stringValue === undefined) { // スコープが不足していてメールアドレスを取得できなかった場合
        throw 'Failed to get Email Address. Scope users:read.email is required.';
    }
    // 文字型データ項目の場合
    if (dataDef.matchDataType('STRING_TEXTFIELD')) {
        engine.setData(dataDef, stringValue);
        return;
    }
    // ユーザ型の場合
    const quser = quserDao.findByEmail(stringValue); // メールアドレスでユーザを検索
    if (quser === null) {
        throw `Questetra User not found. email: ${stringValue}`;
    }
    engine.setData(dataDef, quser);
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

    ]]></test>
</service-task-definition>
