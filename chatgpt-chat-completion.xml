<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <last-modified>2023-08-08</last-modified>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>

    <label>OpenAI ChatGPT: Chat</label>
    <label locale="ja">OpenAI ChatGPT: チャット</label>

    <help-page-url>https://support.questetra.com/addons/service-task-openai-chatgpt-chat/
    </help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/addons/service-task-openai-chatgpt-chat/
    </help-page-url>

    <summary>This item sends a message to OpenAI ChatGPT and stores the
        response in specified data item.</summary>
    <summary locale="ja">この工程は、OpenAI ChatGPT へメッセージを送信し、回答をデータ項目に保存します。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2"
                auth-type="TOKEN">
            <label>C1: Authorization Setting in which Authentication Key is set
            </label>
            <label locale="ja">C1: 認証キーを設定した認証設定</label>
        </config>
        <config name="conf_Model" required="true"
                form-type="SELECT_ITEM">
            <label>C2: Model</label>
            <label locale="ja">C2: モデル</label>
            <item value="gpt-3.5-turbo">
                <label>gpt-3.5-turbo</label>
            </item>
            <item value="gpt-4">
                <label>gpt-4</label>
            </item>
        </config>
        <config name="conf_GPT_Role" required="false" el-enabled="true"
                form-type="TEXTAREA">
            <label>C2: Set Responder Role (SYSTEM Role)</label>
            <label locale="ja">C2: ChatGPT に与える役割</label>
        </config>
        <!-- <config name="StrConfPro1" required="false" el-enabled="true" form-type="TEXTAREA">
            <label>Pro1: Set 1st Request PROMPT</label> <label locale="ja">Pro1: ２つ前のユーザメッセージ</label>
            </config> <config name="StrConfCom1" required="false" el-enabled="true" form-type="TEXTAREA">
            <label>Com1: Set 1st Response COMPLETION</label> <label locale="ja">Com1:
            ２つ前の ChatGPT の回答</label> </config> <config name="StrConfPro2" required="false"
            el-enabled="true" form-type="TEXTAREA"> <label>Pro2: １つ前のユーザメッセージ</label>
            <label locale="ja"></label> </config> <config name="StrConfCom2" required="false"
            el-enabled="true" form-type="TEXTAREA"> <label>Com2: Set 2nd Response COMPLETION</label>
            <label locale="ja">Com2: １つ前の ChatGPT の回答</label> </config> <config name="StrConfPro3"
            required="false" el-enabled="true" form-type="TEXTAREA"> <label>U1: ユーザメッセージ</label>
            <label locale="ja">U1: ３回目の指示文（PROMPT）をセットしてください</label> </config> <config
            name="StrConfCom3" required="false" el-enabled="true" form-type="TEXTAREA">
            <label>A1: Data item to save ChatGPT answer</label> <label locale="ja">A1:
            ChatGPT の回答を保存するデータ項目</label> </config> -->
        <config name="conf_Message1" required="true" el-enabled="true"
                form-type="TEXTAREA">
            <label>U1: User Message</label>
            <label locale="ja">U1: ユーザメッセージ</label>
        </config>
        <!-- <config name="StrConfA2" required="false" el-enabled="true" form-type="TEXTAREA">
            <label>A2: Set Parameters (Temp Top_P P-penalty F-penalty) in 4 lines</label>
            <label locale="ja">A2: パラメータ（サンプリング温度、サンプリング％、再出現禁止度、頻出禁止度）を4行に分けてセット</label>
            </config> <config name="StrConfA3" required="false" el-enabled="true" form-type="TEXTAREA">
            <label>A3: Set LogitBias (TokenID and Bias value pairs) for each line</label>
            <label locale="ja">A3: Logitバイアス（TokenID と バイアス値のペア）を各行に分けてセットしてください</label>
            </config> <config name="StrConfA4" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>A4: Set Number of Responses (default 1)</label> <label locale="ja">A4:
            レスポンス数をセットしてください (default 1)</label> </config> <config name="StrConfA5" required="false"
            el-enabled="true" form-type="TEXTFIELD"> <label>A5: Set Limit of Response
            Tokens (default 2048)</label> <label locale="ja">A5: レスポンストークンの許容量をセットしてください
            (default 2048)</label> </config> <config name="StrConfA6" required="false"
            el-enabled="true" form-type="TEXTAREA"> <label>A6: Set Stop Words (eg ".")</label>
            <label locale="ja">A6: 中断文字を各行に分けてセットしてください (eg "." "。")</label> </config> -->
        <config name="conf_Answer1" required="true" form-type="SELECT"
                select-data-type="STRING_TEXTAREA">
            <label>A1: Data item to save ChatGPT answer</label>
            <label locale="ja">A1: ChatGPT の回答を保存するデータ項目</label>
        </config>
        <!-- <config name="SelectConfC1" required="false" form-type="SELECT" select-data-type="DECIMAL">
            <label>C1: Select NUMERIC that stores PROMPT Tokens (update)</label> <label
            locale="ja">C1: PROMPT トークン数が格納される数値型データ項目を選択してください（更新）</label> </config>
            <config name="SelectConfC2" required="false" form-type="SELECT" select-data-type="DECIMAL">
            <label>C2: Select NUMERIC that stores COMPLETION Tokens (update)</label>
            <label locale="ja">C2: COMPLETION トークン数が格納される数値型データ項目を選択してください（更新）</label>
            </config> <config name="SelectConfC3" required="false" form-type="SELECT"
            select-data-type="DECIMAL"> <label>C3: Select NUMERIC that stores Total Tokens
            (update)</label> <label locale="ja">C3: 合計トークン数が格納される数値型データ項目を選択してください（更新）</label>
            </config> -->
    </configs>

    <script><![CDATA[
function main() {

////// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.getObject("conf_Auth");   /// REQUIRED
    const model = configs.get('conf_Model');

    // https://platform.openai.com/docs/guides/safety-best-practices
    // Sending end-user IDs in your requests can be a useful tool to help OpenAI monitor and detect abuse.
    const requestUser = "m" + processInstance.getProcessModelInfoId().toString();

    const gptRole = configs.get("conf_GPT_Role");    // NotRequired
    const message1 = configs.get("conf_Message1");    /// REQUIRED
    if (message1 === "") {
        throw new Error("User Message is empty.");
    }

    // const strParams = configs.get("StrConfA2");    // NotRequired
    // const arrParams = strParams !== "" ? strParams.split("\n") : null;
    //
    // const numTemperature = isNaN(parseFloat(arrParams?.[0])) ? 1 : parseFloat(arrParams[0]);
    // const numTopP = isNaN(parseFloat(arrParams?.[1])) ? 1 : parseFloat(arrParams[1]);
    // const numPresPenalty = isNaN(parseFloat(arrParams?.[2])) ? 0 : parseFloat(arrParams[2]);
    // const numFreqPenalty = isNaN(parseFloat(arrParams?.[3])) ? 0 : parseFloat(arrParams[3]);
    //
    // const strBias = configs.get("StrConfA3");    // NotRequired
    // const arrBias = strBias !== "" ? strBias.split("\n") : null;
    // const strChoises = configs.get("StrConfA4");    // NotRequired
    // const numChoises = isNaN(parseInt(strChoises, 10)) ? 1 : parseInt(strChoises, 10);
    // const strLimit = configs.get("StrConfA5");    // NotRequired
    const numLimit = 2048;
    // const strStops = configs.get("StrConfA6");    // NotRequired
    // const arrStops = strStops !== "" ? strStops.split("\n") : null;

    // const numPocketPromptTokens = configs.getObject("SelectConfC1"); // NotRequired
    // const numPocketCompletionTokens = configs.getObject("SelectConfC2"); // NotRequired
    // const numPocketTotalTokens = configs.getObject("SelectConfC3"); // NotRequired


////// == Data Retrieving / ワークフローデータの参照 ==
// (Nothing. Retrieved via Expression Language in Config Retrieving)


////// == Calculating / 演算 ==

//// OpenAI API > Documentation > API REFERENCE > CHAT
//// https://platform.openai.com/docs/api-reference/chat

/// prepare json
    const requestJson = {
        model,
        messages: []
    };
    if (gptRole !== "") {
        requestJson.messages.push({
            role: 'system',
            content: gptRole
        });
    }
    // if (strLogPro1 !== "" && strLogCom1 !== "") {
    //     let objLogPro = {};
    //     objLogPro.role = "user";
    //     objLogPro.content = strLogPro1;
    //     requestJson.messages.push(objLogPro);
    //     let objLogCom = {};
    //     objLogCom.role = "assistant";
    //     objLogCom.content = strLogCom1;
    //     requestJson.messages.push(objLogCom);
    // }
    requestJson.messages.push({
        role: "user",
        content: message1
    });

    // if (arrParams?.[0] !== "") {
    //     requestJson.temperature = numTemperature;
    // }
    // if (arrParams?.[1] !== "") {
    //     requestJson.top_p = numTopP;
    // }
    // if (arrParams?.[2] !== "") {
    //     requestJson.presence_penalty = numPresPenalty;
    // }
    // if (arrParams?.[3] !== "") {
    //     requestJson.frequency_penalty = numFreqPenalty;
    // }

    requestJson.n = 1;
    requestJson.max_tokens = numLimit;
    requestJson.user = requestUser;
    // if (arrStops !== null) {
    //     requestJson.stop = [];
    //     for (let i = 0; i < arrStops.length; i++) {
    //         if (arrStops[i] === "- - -") {
    //             requestJson.stop.push("\n");
    //         } else {
    //             requestJson.stop.push(arrStops[i]);
    //         }
    //     }
    // }
    // if (arrBias !== null) {
    //     requestJson.logit_bias = {};
    //     for (let i = 0; i < arrBias.length; i++) {
    //         let arrNumParts = arrBias[i].match(/-?\d+/g); // numbers (including with minus signs)
    //         if (arrNumParts.length >= 2) {
    //             requestJson.logit_bias[arrNumParts[0]] = Number(arrNumParts[1]);
    //         }
    //     }
    // }

    const response = httpClient.begin().authSetting(auth)
        .body(JSON.stringify(requestJson), "application/json")
        .post("https://api.openai.com/v1/chat/completions");

    const responseCode = response.getStatusCode();
    const responseBody = response.getResponseAsString();
    engine.log(responseBody);
    if (responseCode !== 200) {
        throw new Error(`Failed to request. status: ${responseCode}`);
    }
    const responseJson = JSON.parse(responseBody);

    saveData('conf_Answer1', responseJson.choices[0].message.content ?? '');

    // if (numPocketPromptTokens !== null) {
    //     engine.setData(numPocketPromptTokens, new java.math.BigDecimal(
    //         responseJson.usage.prompt_tokens ?? 0
    //     ));
    // }
    // if (numPocketCompletionTokens !== null) {
    //     engine.setData(numPocketCompletionTokens, new java.math.BigDecimal(
    //         responseJson.usage.completion_tokens ?? 0
    //     ));
    // }
    // if (numPocketTotalTokens !== null) {
    //     engine.setData(numPocketTotalTokens, new java.math.BigDecimal(
    //         responseJson.usage.total_tokens ?? 0
    //     ));
    // }
}

/**
 * データ項目への保存
 * @param configName
 * @param data
 */
const saveData = (configName, data) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    engine.setData(def, data);
};
]]></script>


    <icon>
        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
        AAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[
/**
 * 設定の準備
 * @param {String} authKey
 * @param {String} model
 * @param {String} gptRole
 * @param {String} message
 * @returns {DataDefinitionView} answerDef
 */
const prepareConfigs = (authKey, model, gptRole, message) => {
    const authSetting = httpClient.createAuthSettingToken('ChatGPT', authKey);
    configs.putObject('conf_Auth', authSetting);

    configs.put('conf_Model', model);
    configs.put('conf_GPT_Role', gptRole);
    configs.put('conf_Message1', message);

    const answerDef = engine.createDataDefinition('回答', 1, 'q_answer', 'STRING_TEXTAREA');
    engine.setData(answerDef, '事前文字列');
    configs.putObject('conf_Answer1', answerDef);
    return answerDef;
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    try {
        main();
        fail();
    } catch (e) {
        expect(e.message).toEqual(errorMsg);
    }
};

/**
 * メッセージが空
 */
test('Message is empty', () => {
    prepareConfigs('key', 'gpt-4', '', '');
    assertError('User Message is empty.');
});

/**
 * API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param {String} authKey
 * @param {String} model
 * @param {String} gptRole
 * @param {String} message
 */
const assertRequest = ({
                           url,
                           method,
                           contentType,
                           body
                       }, authKey, model, gptRole, message) => {
    expect(url).toEqual("https://api.openai.com/v1/chat/completions");
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.model).toEqual(model);
    if (gptRole === '') {
        expect(bodyObj.messages.length).toEqual(1);
    } else {
        expect(bodyObj.messages.length).toEqual(2);
        expect(bodyObj.messages[0]).toEqual({
            role: 'system',
            content: gptRole
        });
    }
    const userMessage = bodyObj.messages[bodyObj.messages.length - 1];
    expect(userMessage).toEqual({
        role: 'user',
        content: message
    });
};

/**
 * API リクエストでエラー
 */
test('Fail to request', () => {
    prepareConfigs('key2', 'gpt-3.5-turbo', '', 'こんにちは');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'key2', 'gpt-3.5-turbo', '', 'こんにちは');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to request. status: 400');
});

/**
 * API のレスポンスボディを作成
 * @param {String} answerText
 * @returns {String} response
 */
const createResponse = (answerText) => {
    const responseObj = {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "choices": [{
                "index": 0,
                "message": {
                    "role": "assistant",
                    "content": answerText,
                },
                "finish_reason": "stop"
            }],
            "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
            }
        }
    ;
    return JSON.stringify(responseObj);
};

/**
 * 成功
 */
test('Success to request', () => {
    const answerDef = prepareConfigs('key3', 'gpt-4', 'Robot', 'Hello World');

    httpClient.setRequestHandler(request => {
        assertRequest(request, 'key3', 'gpt-4', 'Robot', 'Hello World');
        return httpClient.createHttpResponse(200, 'application/json', createResponse("\n\nHello there, how may I assist you today?"));
    });
    main();

    // データ項目の値をチェック
    expect(engine.findData(answerDef)).toEqual("\n\nHello there, how may I assist you today?");
});
    ]]></test>
</service-task-definition>