<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <!--
    <last-modified>2023-11-14</last-modified>
    -->
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>

    <label>OpenAI ChatGPT: Chat</label>
    <label locale="ja">OpenAI ChatGPT: チャット</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-openai-chatgpt-chat/
    </help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-openai-chatgpt-chat/
    </help-page-url>

    <summary>This item sends a message to OpenAI ChatGPT and stores the
        response in the specified data item.</summary>
    <summary locale="ja">この工程は、OpenAI ChatGPT へメッセージを送信し、回答をデータ項目に保存します。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2"
                auth-type="TOKEN">
            <label>C1: Authorization Setting in which Authentication Key is set
            </label>
            <label locale="ja">C1: 認証キーを設定した認証設定</label>
        </config>
        <config name="conf_OrganizationId" required="false" form-type="TEXTFIELD">
            <label>C2: Organization ID (Default organization if blank)
            </label>
            <label locale="ja">C2: 組織 ID（空白の場合、デフォルトの組織）</label>
        </config>
        <config name="conf_Model" required="true"
                form-type="SELECT_ITEM" editable="true">
            <label>C3: Model</label>
            <label locale="ja">C3: モデル</label>
            <item value="gpt-3.5-turbo">
                <label>gpt-3.5-turbo</label>
            </item>
            <item value="gpt-4">
                <label>gpt-4</label>
            </item>
            <item value="gpt-4-32k">
                <label>gpt-4-32k</label>
            </item>
        </config>
        <config name="conf_MaxTokens" required="false" form-type="TEXTFIELD">
            <label>C4: Maximum number of tokens to consume (2048 if blank)</label>
            <label locale="ja">C4: 使用するトークン数の上限（空白の場合、2048）</label>
        </config>
        <config name="conf_GPT_Role" required="false" el-enabled="true"
                form-type="TEXTAREA">
            <label>C5: Role for ChatGPT</label>
            <label locale="ja">C5: ChatGPT に与える役割</label>
        </config>
        <config name="conf_Message1" required="true" el-enabled="true"
                form-type="TEXTAREA">
            <label>U1: User Message</label>
            <label locale="ja">U1: ユーザメッセージ</label>
        </config>
        <config name="conf_Images1" required="false" form-type="SELECT"
                select-data-type="FILE">
            <label>I1: Images to attach to user message</label>
            <label locale="ja">I1: ユーザメッセージに添付する画像</label>
        </config>
        <config name="conf_Answer1" required="true" form-type="SELECT"
                select-data-type="STRING_TEXTAREA">
            <label>A1: Data item to save response from ChatGPT</label>
            <label locale="ja">A1: ChatGPT の回答を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

const MAX_TOKENS_DEFAULT = 2048;
const MAX_IMAGE_SIZE = 20971520; // ChatGPT の制限。1 ファイルにつき 20 MB まで
const AVAILABLE_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];

function main() {
    ////// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const auth = configs.getObject('conf_Auth');   /// REQUIRED
    const organizationId = configs.get('conf_OrganizationId');
    const model = configs.get('conf_Model');
    const maxTokens = retrieveMaxTokens();

    // https://platform.openai.com/docs/guides/safety-best-practices
    // Sending end-user IDs in your requests can be a useful tool to help OpenAI monitor and detect abuse.
    const requestUser = `m${processInstance.getProcessModelInfoId().toString()}`;

    const gptRole = configs.get('conf_GPT_Role');    // NotRequired
    const message1 = configs.get('conf_Message1');    /// REQUIRED
    if (message1 === '') {
        throw new Error('User Message is empty.');
    }
    const imageUrls1 = retrieveImageUrls('conf_Images1');

    ////// == 演算 / Calculating ==
    const answer1 = createChat(auth, organizationId, model, maxTokens, requestUser, gptRole, message1, imageUrls1);

    ////// == ワークフローデータへの代入 / Data Updating ==
    saveData('conf_Answer1', answer1 ?? '');
}

/**
 * config から最大トークン数を読み出す
 * 指定なしの場合は 2048 を返す
 * @returns {Number}
 */
const retrieveMaxTokens = () => {
    const maxTokens = configs.get('conf_MaxTokens');
    if (maxTokens === '') {
        return MAX_TOKENS_DEFAULT;
    }
    const regExp = new RegExp(/^[1-9][0-9]*$/);
    if (!regExp.test(maxTokens)) {
        throw new Error('Maximum number of tokens must be a positive integer.');
    }
    return parseInt(maxTokens, 10);
};

/**
 * config から添付画像を読み出し、image_url パラメータに設定する文字列の配列として返す
 * @param configName
 * @returns {Array<String>} imageUrls
 */
const retrieveImageUrls = (configName) => {
    const imagesDef = configs.getObject(configName);
    if (imagesDef === null) {
        return [];
    }
    const images = engine.findData(imagesDef);
    const imageUrls = [];
    images.forEach(image => {
        if (image.getLength() > MAX_IMAGE_SIZE) {
            throw new Error(`Attached image "${image.getName()}" is too large. Each file must be less than ${MAX_IMAGE_SIZE} bytes.`);
        }
        const contentType = image.getContentType();
        if (!AVAILABLE_IMAGE_TYPES.includes(contentType)) {
            throw new Error(`Content-Type of "${image.getName()}" is not supported. Supported types are: ${AVAILABLE_IMAGE_TYPES.join(', ')}.`);
        }
        imageUrls.push(`data:${contentType};base64,${base64.encodeToString(fileRepository.readFile(image))}`);
    });
    return imageUrls;
};

/**
 * チャットの実行
 * @param auth
 * @param organizationId
 * @param model
 * @param maxTokens
 * @param requestUser
 * @param gptRole
 * @param message1
 * @param imageUrls1
 * @returns {String} answer1
 */
const createChat = (auth, organizationId, model, maxTokens, requestUser, gptRole, message1, imageUrls1) => {
    //// OpenAI API > Documentation > API REFERENCE > CHAT
    //// https://platform.openai.com/docs/api-reference/chat

    /// prepare json
    const requestJson = {
        model,
        messages: []
    };
    if (gptRole !== '') {
        requestJson.messages.push({
            role: 'system',
            content: gptRole
        });
    }
    const message1Content = [];
    message1Content.push({
        type: 'text',
        text: message1
    });
    imageUrls1.forEach(imageUrl => {
        message1Content.push({
            type: 'image_url',
            image_url: {
                url: imageUrl
            }
        });
    });
    requestJson.messages.push({
        role: 'user',
        content: message1Content
    });

    requestJson.n = 1;
    requestJson.max_tokens = maxTokens;
    requestJson.user = requestUser;

    let request = httpClient.begin().authSetting(auth)
        .body(JSON.stringify(requestJson), 'application/json');
    if (organizationId !== null && organizationId !== '') {
        request = request.header('OpenAI-Organization', organizationId);
    }
    const response = request.post('https://api.openai.com/v1/chat/completions');

    const responseCode = response.getStatusCode();
    const responseBody = response.getResponseAsString();
    engine.log(responseBody);
    if (responseCode !== 200) {
        throw new Error(`Failed to request. status: ${responseCode}`);
    }
    const responseJson = JSON.parse(responseBody);
    const answer1 = responseJson.choices[0].message.content;
    return answer1;
};

/**
 * データ項目への保存
 * @param configName
 * @param data
 */
const saveData = (configName, data) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    engine.setData(def, data);
};
]]></script>


    <icon>
        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
        AAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[
/**
 * 設定の準備
 * @param {String} authKey
 * @param {String} organizationId
 * @param {String} model
 * @param {String} maxTokens
 * @param {String} gptRole
 * @param {String} message
 * @returns {DataDefinitionView} answerDef
 */
const prepareConfigs = (authKey, organizationId, model, maxTokens, gptRole, message) => {
    const authSetting = httpClient.createAuthSettingToken('ChatGPT', authKey);
    configs.putObject('conf_Auth', authSetting);

    configs.put('conf_OrganizationId', organizationId);
    configs.put('conf_Model', model);
    configs.put('conf_MaxTokens', maxTokens);
    configs.put('conf_GPT_Role', gptRole);
    configs.put('conf_Message1', message);

    const answerDef = engine.createDataDefinition('回答', 1, 'q_answer', 'STRING_TEXTAREA');
    engine.setData(answerDef, '事前文字列');
    configs.putObject('conf_Answer1', answerDef);
    return answerDef;
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    try {
        main();
        fail();
    } catch (e) {
        expect(e.message).toEqual(errorMsg);
    }
};

/**
 * メッセージが空
 */
test('Message is empty', () => {
    prepareConfigs('key', '', 'gpt-4', '', '', '');
    assertError('User Message is empty.');
});

/**
 * トークン数の最大値が正の整数でない - 数字でない文字を含む場合
 */
test('Maximum number of tokens must be a positive integer - includes a non-numeric character', () => {
    prepareConfigs('key', '', 'gpt-4', '1.1', '', '');
    assertError('Maximum number of tokens must be a positive integer.');
});

/**
 * トークン数の最大値が正の整数でない - ゼロ
 */
test('Maximum number of tokens must be a positive integer - 0', () => {
    prepareConfigs('key', '', 'gpt-4', '0', '', '');
    assertError('Maximum number of tokens must be a positive integer.');
});

/**
 * API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.headers
 * @param request.body
 * @param {String} authKey
 * @param {String} organizationId
 * @param {String} model
 * @param {String} maxTokens
 * @param {String} gptRole
 * @param {String} message
 */
const assertRequest = ({
                           url,
                           method,
                           contentType,
                           headers,
                           body
                       }, authKey, organizationId, model, maxTokens, gptRole, message) => {
    expect(url).toEqual('https://api.openai.com/v1/chat/completions');
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    expect(headers['Authorization']).toEqual(`Bearer ${authKey}`);
    if (organizationId !== '') {
        expect(headers['OpenAI-Organization']).toEqual(organizationId);
    }
    const bodyObj = JSON.parse(body);
    expect(bodyObj.model).toEqual(model);
    expect(bodyObj.max_tokens).toEqual(maxTokens);
    if (gptRole === '') {
        expect(bodyObj.messages.length).toEqual(1);
    } else {
        expect(bodyObj.messages.length).toEqual(2);
        expect(bodyObj.messages[0]).toEqual({
            role: 'system',
            content: gptRole
        });
    }
    const userMessage = bodyObj.messages[bodyObj.messages.length - 1];
    expect(userMessage).toEqual({
        role: 'user',
        content: message
    });
};

/**
 * API リクエストでエラー
 */
test('Fail to request', () => {
    prepareConfigs('key2', '', 'gpt-3.5-turbo', '', '', 'こんにちは');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'key2', '', 'gpt-3.5-turbo', 2048, '', 'こんにちは');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to request. status: 400');
});

/**
 * API のレスポンスボディを作成
 * @param {String} answerText
 * @returns {String} response
 */
const createResponse = (answerText) => {
    const responseObj = {
            "id": "chatcmpl-123",
            "object": "chat.completion",
            "created": 1677652288,
            "choices": [{
                "index": 0,
                "message": {
                    "role": "assistant",
                    "content": answerText,
                },
                "finish_reason": "stop"
            }],
            "usage": {
                "prompt_tokens": 9,
                "completion_tokens": 12,
                "total_tokens": 21
            }
        }
    ;
    return JSON.stringify(responseObj);
};

/**
 * 成功
 */
test('Success to request', () => {
    const answerDef = prepareConfigs('key3', '', 'gpt-4', '', 'Robot', 'Hello World');

    httpClient.setRequestHandler(request => {
        assertRequest(request, 'key3', '', 'gpt-4', MAX_TOKENS_DEFAULT, 'Robot', 'Hello World');
        return httpClient.createHttpResponse(200, 'application/json', createResponse("\n\nHello there, how may I assist you today?"));
    });
    main();

    // データ項目の値をチェック
    expect(engine.findData(answerDef)).toEqual("\n\nHello there, how may I assist you today?");
});

/**
 * 成功 - 組織 ID を指定
 */
test('Success to request - with organization ID', () => {
    const answerDef = prepareConfigs('key4', 'org-1', 'gpt-4-32k', '', '', 'Hi!');

    httpClient.setRequestHandler(request => {
        assertRequest(request, 'key4', 'org-1', 'gpt-4-32k', MAX_TOKENS_DEFAULT, '', 'Hi!');
        return httpClient.createHttpResponse(200, 'application/json', createResponse("Hi! How can I help you?"));
    });
    main();

    // データ項目の値をチェック
    expect(engine.findData(answerDef)).toEqual("Hi! How can I help you?");
});

/**
 * 成功 - 最大トークン数を指定
 */
test('Success to request - with max_tokens', () => {
    const answerDef = prepareConfigs('key5', '', 'gpt-4-vision-preview', '100', 'Assistant', 'Hi! How\'s the weather in Kyoto today?');

    httpClient.setRequestHandler(request => {
        assertRequest(request, 'key5', '', 'gpt-4-vision-preview', 100, 'Assistant', 'Hi! How\'s the weather in Kyoto today?');
        return httpClient.createHttpResponse(200, 'application/json', createResponse("Hi! It's sunny today."));
    });
    main();

    // データ項目の値をチェック
    expect(engine.findData(answerDef)).toEqual("Hi! It's sunny today.");
});
    ]]></test>
</service-task-definition>