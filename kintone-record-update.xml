<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Update Record</label>
<label locale="ja">kintone: レコード更新</label>
<last-modified>2020-10-26</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Update values of a record in a Kintone App.</summary>
<summary locale="ja">kintone アプリのレコード（1件）の内容を更新します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: Authorization Setting in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した認証設定</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C2: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C2: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C3: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C3: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C4: App ID</label>
    <label locale="ja">C4: アプリ ID</label>
  </config>
  <config name="conf_recordId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: Record ID</label>
    <label locale="ja">C5: レコード ID</label>
  </config>
  <config name="conf_fieldCode1" required="false" form-type="TEXTFIELD">
    <label>C6F: Field Code 1</label>
    <label locale="ja">C6F: フィールドコード_1</label>
  </config>
  <config name="conf_fieldValue1" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6V: New Value 1</label>
    <label locale="ja">C6V: 新しい値_1</label>
  </config>
    <config name="conf_fieldCode2" required="false" form-type="TEXTFIELD">
    <label>C7F: Field Code 2</label>
    <label locale="ja">C7F: フィールドコード_2</label>
  </config>
  <config name="conf_fieldValue2" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7V: New Value 2</label>
    <label locale="ja">C7V: 新しい値_2</label>
  </config>
    <config name="conf_fieldCode3" required="false" form-type="TEXTFIELD">
    <label>C8F: Field Code 3</label>
    <label locale="ja">C8F: フィールドコード_3</label>
  </config>
  <config name="conf_fieldValue3" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C8V: New Value 3</label>
    <label locale="ja">C8V: 新しい値_3</label>
  </config>
    <config name="conf_fieldCode4" required="false" form-type="TEXTFIELD">
    <label>C9F: Field Code 4</label>
    <label locale="ja">C9F: フィールドコード_4</label>
  </config>
  <config name="conf_fieldValue4" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C9V: New Value 4</label>
    <label locale="ja">C9V: 新しい値_4</label>
  </config>
    <config name="conf_fieldCode5" required="false" form-type="TEXTFIELD">
    <label>C10F: Field Code 5</label>
    <label locale="ja">C10F: フィールドコード_5</label>
  </config>
  <config name="conf_fieldValue5" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C10V: New Value 5</label>
    <label locale="ja">C10V: 新しい値_5</label>
  </config>
    <config name="conf_fieldCode6" required="false" form-type="TEXTFIELD">
    <label>C11F: Field Code 6</label>
    <label locale="ja">C11F: フィールドコード_6</label>
  </config>
  <config name="conf_fieldValue6" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C11V: New Value 6</label>
    <label locale="ja">C11V: 新しい値_6</label>
  </config>
  <config name="conf_fieldCode7" required="false" form-type="TEXTFIELD">
    <label>C12F: Field Code 7</label>
    <label locale="ja">C12F: フィールドコード_7</label>
  </config>
  <config name="conf_fieldValue7" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C12V: New Value 7</label>
    <label locale="ja">C12V: 新しい値_7</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/kintone-record-add/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/kintone-record-add/</help-page-url>

<script><![CDATA[

const FIELD_NUM = 7; // 扱えるフィールドの数

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const auth = configs.get("conf_auth");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const recordId = retrieveRecordId();

  const apiToken = httpClient.getOAuth2Token( auth );
  const recordObj = retrieveRecordContent();

  //// == 演算 / Calculating ==
  const apiUri = determineApiUri( domain, guestSpaceId );
  updateRecord( apiUri, apiToken, appId, recordId, recordObj );
}

/**
  * config からレコード ID を読み出す
  * @return {Stromg} recordId  レコード ID
  */
function retrieveRecordId() {
  const recordIdDef = configs.getObject( "conf_recordId" );
  let recordId = configs.get( "conf_recordId" );
  if ( recordIdDef !== null ) {
    recordId = engine.findData( recordIdDef );
  }
  return recordId;
}

/**
  * configからレコード情報（フィールドコードとフィールドの値）を読み出し、JSON オブジェクトを返す
  * レコード情報が空の場合はエラーとする
  * @return {Object} recordObj  レコード情報の JSON オブジェクト
  */
function retrieveRecordContent() {
  const recordObj = {};
  for (let i = 0; i < FIELD_NUM; i++) {
    const fieldCodeConfigName = `conf_fieldCode${i+1}`;
    const fieldValueConfigName = `conf_fieldValue${i+1}`;

    const fieldCode = configs.get( fieldCodeConfigName );
    if ( fieldCode === "" || fieldCode === null ) { // フィールドコードが空
      continue;
    }
    if ( recordObj[fieldCode] !== undefined ) { // フィールドコードの指定が重複
      throw "The same Field Code is set multiple times.";
    }
    
    let fieldValue = configs.get( fieldValueConfigName );
    if ( fieldValue === "" || fieldValue === null ) { // 値が空
      fieldValue = null;
    }
    recordObj[fieldCode] = {
      "value": fieldValue
    };
  }
  if ( Object.keys(recordObj).length === 0 ) { // レコード情報が空
    throw "No field to update is set.";
  }
  return recordObj;
}

/**
  * kintone REST API のレコード追加の URI を決定する
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * ゲストスペース ID が不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @return {String} apiUri  API の URI
  */
function determineApiUri( domain, guestSpaceId ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const domainReg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !domainReg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
  let apiUri = "";
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/record.json`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/record.json`;
  }
  return apiUri;
}

/**
  * kintone REST API にレコード更新の PUT リクエストを送信する
  * アプリ ID、レコード ID が空、または不正な文字列であればエラーとする
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  * @param {Object} recordObj  レコード情報の JSON オブジェクト
  */
function updateRecord( apiUri, apiToken, appId, recordId, recordObj ) {
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
  if ( recordId === "" || recordId === null ) {
    throw "Record ID is empty.";
  }
  if ( !isValidId(recordId) ) {
    throw "Invalid Record ID.";
  }
  const body = {
    "app": appId,
    "id": recordId,
    "record": recordObj
  };
  engine.log(`API URI: ${apiUri}`);
  engine.log(`Request Body: ${JSON.stringify(body)}`);
  const response = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken )
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .put( apiUri );
  //when error thrown
  const responseJson = response.getResponseAsString();
  const status = response.getStatusCode();
  const accessLog = `---PUT request--- ${status}\n${responseJson}\n`;
  engine.log(accessLog);
  if (status >= 300) {
    throw `Failed to update record. status: ${status}`;
  }
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
