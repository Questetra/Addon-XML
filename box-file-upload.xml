<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>Box: Upload File</label>
<label locale="ja">Box: ファイルアップロード</label>
<last-modified>2020-06-16</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Upload files to the specified folder on Box.</summary>
<summary locale="ja">Box の指定フォルダにファイルをアップロードします。</summary>
<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C2: File type data item whose attached files will be uploaded</label>
    <label locale="ja">C2: アップロードするファイルが保存されているファイル型データ項目</label>
  </config>
  <config name="uploadedFolderId" el-enabled="true">
    <label>C3: Folder ID that files will be uploaded (Root folder if blank)</label>
    <label locale="ja">C3: ファイルをアップロードするフォルダの ID (指定がない場合は、ルートフォルダ)</label>
  </config>
  <config name="fileId" form-type="SELECT" select-data-type="STRING">
    <label>C4: String type data item that will save uploaded file ids</label>
    <label locale="ja">C4: ファイル ID を保存する文字型データ項目</label>
  </config>
  <config name="fileUrl" form-type="SELECT" select-data-type="STRING">
    <label>C5: String type data item that will save uploaded file urls</label>
    <label locale="ja">C5: ファイル URL を保存する文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/services/box-upload/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/box-upload/</help-page-url>


<script><![CDATA[
// Upload to box via boxAPI (ver. 20161018)
// (c) 2016, Questetra, Inc. (the MIT License)

// OAuth2 config
// Authorization Endpoint URL: https://app.box.com/api/oauth2/authorize
// Token Endpoint URL: https://app.box.com/api/oauth2/token
// Scope:
// Consumer Key: (Get by box Application on box Developers)
// Consumer Secret: (Get by box Application on box Developers)

const limitSize = 52428800; //File size border of Microsoft Graph
//50MB
//const packetMaxSize = 10485760; //size of each packet,must be a multiple of 327680(320KiB): 10485760=10MiB

main();
function main(){
  //main内は最後に直す
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("OAuth2");
  const idDataDef = configs.getObject("fileId");
  const urlDataDef = configs.getObject("fileUrl");
  //// == ワークフローデータの参照 / Data Retrieving ==
  const token = httpClient.getOAuth2Token( oauth2 );
  const folderId = folderIdDecision();
  const files = engine.findData(configs.getObject("uploadedFile")  );
  if (files === null) {
    setData(idDataDef,[""]);
    setData(urlDataDef,[""]);
    return;
  } 
  
  //// == 演算 / Calculating ==

  fileCheck(files,idDataDef,urlDataDef);
  let uploadedFileData = [[],[]]; //0:ID,1:URL
  let requestNum = 0;

  for(let i = 0; i< files.size(); i++){
    engine.log(files.get(i).getName());
    if(files.get(i).getLength() > limitSize){
      //over 50MB
      requestNum = processLargeFile(token,files.get(i),folderId,uploadedFileData,requestNum);
    }else{
      //under 50MB
      requestNum++;
      if(requestNum > httpClient.getRequestingLimit()){
        throw "Number of requests is over the limit";
      }
      upload(token,files.get(i),folderId,uploadedFileData);
    }
  }
  //// == ワークフローデータへの代入 / Data Updating ==
  setData(idDataDef,uploadedFileData[0]);
  setData(urlDataDef,uploadedFileData[1]);
}

/**
  * フォルダのIDをconfigから読み出して出力する。空の場合は"0"とする。
  * @return {String}  フォルダのID
  */
function folderIdDecision(){
  let folderId  = configs.get("uploadedFolderId");
  if(folderId === "" || folderId === null){
    //when folder ID isn't set, set "0"
    folderId = 0;
  }
  return folderId;
}

/**
  * アップロードしようとするファイルの数・サイズが適切かどうかチェックする
  * ファイル数、通信制限をチェック
  * 
  * 要修正かも
  * @param {Array<File>}  アップロードしようとするファイル
  * @param {ProcessDataDefinitionView} idDataDef  ID を保存するデータ項目の ProcessDataDefinitionView
  * @param {ProcessDataDefinitionView} urlDataDef  URL を保存するデータ項目の ProcessDataDefinitionView
  */
function fileCheck(files,idDataDef,urlDataDef){
  const fileNum = files.size(); //number of files
  fileNumCheck(idDataDef,fileNum);
  fileNumCheck(urlDataDef,fileNum);
}

/**
  * アップロードするデータが複数で パス・URL 出力先のデータ項目が単一行ならエラーにする
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Number} fileNum  アップロードしようとしているファイルの個数
  */
function fileNumCheck(dataDef,fileNum){
  if(dataDef !==  null){
    //Multiple Judge
    if(dataDef.matchDataType("STRING_TEXTFIELD") && fileNum > 1){
      throw "Multiple files are uploaded.Can't set data to single-line string Data Item."
    }
  }
}


/**
  * 50MB以下のファイルをアップロードする。一回につき一つのみ。
  * @param {String} token  OAuth2 トークン
  * @param {File} file  アップロードするファイル
  * @param {String} folderId  アップロード先フォルダのID
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  */
function upload(token,file,folderId,uploadedFileData){
  const url = "https://upload.box.com/api/2.0/files/content"
  let attributes = {
      parent : {id : folderId}
    };
  attributes["name"] = String(file.getName());

  let response = httpClient.begin()
        .bearer(token)
        .multipart('attributes', JSON.stringify(attributes))
        .multipart('file', file)
        .post(url);
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status !== 201) {
    if (status === 409) {
      throw "failed to upload: " + file.getName() + "\n status:" + status +"\n" + responseJson + "\n Same name file already exists.";
    }else{
      throw "failed to upload: " + file.getName() + "\n status:" + status + "\n" + responseJson;
    }
  }
  outputDataSet(status,responseStr,uploadedFileData);
}

/**
  * 50MBを超えるファイルのアップロード処理を行う
  * @param {String} token  OAuth2 のトークン
  * @param {File} file  アップロードするファイル
  * @param {String} folderId  アップロード先のフォルダのパス
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  * 通信数=50MB以下のファイルの数 + <50MBを超えるファイルそれぞれについて>(ceil(ファイルサイズ/パケットの最大サイズ) + 2)
  */
function processLargeFile(token,file,folderId,uploadedFileData,requestNum){
  const session = createSession(token,file,folderId);
  requestNum += (Math.ceil(size / session.part_size + 2));
  if(requestNum > httpClient.getRequestingLimit()){
    throw "Number of requests is over the limit";
  }
  const sessionId = session.id;
  const fileSize = file.getLength();
  let part;
  let partArray = [];
  let range = 0;
  fileRepository.readFile(file, session.part_size, function(packet){
    //upload each fragment of file
    part = uploadLarge(sessionId,range,packet,fileSize,uploadedFileData);
    partArray.push(part);
    range += part.size;
  });
  commitSession(sessionId,file);
  return requestNum;
}

/**
  * アップロード用のセッションを作成する
  * @param {String} token  OAuth2 のトークン
  * @param {String} fileName  アップロードするファイルのファイル名
  * @param {String} folderId  アップロード先のフォルダのID
  * @return {JSON Object}  アップロードセッション
  */
function createSession(token,file,folderId){
  const url = "https://upload.box.com/api/2.0/files/upload_sessions";
  const body = {
    "item": {
      "file_name" : file.getName(),
      "file_size" : file.getLength(),
      "folder_id" : folderId
    }
  };
  let response = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const jsonStr = response.getResponseAsString();
  if(status >= 300){
    throw `failed to create upload session 
    status: ${status}
    ${jsonStr}`;
  }
  return JSON.parse(jsonStr);
}

/**
  * 20MBを超えるファイルについて、各部分のアップロードを実行する
  * 要修正
  * @param {String} sessionId  アップロードセッションの ID
  * @param {Number} range  range
  * @param {ByteArrayWrapper} packet  アップロードするバイナリ
  * @param {Number} fileSize  アップロードするファイルのサイズ
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  * @return {Object}  Uploaded Part
  */
function uploadLarge(sessionId,range,packet,fileSize,uploadedFileData){
  const packetSize = packet.getLength();
  const url = `https://upload.box.com/api/2.0/files/upload_sessions/${sessionId}`;
  const rangetxt = `bytes ${range}-${range + packetSize - 1}/${fileSize}`;
  let sending = httpClient.begin()
    .header("content-range", rangetxt )
    .header("digest", crypto.subtle.digest('SHA-1', packet) ) //sha1どうする？
    .body(packet,"application/octet-stream")
    .put(url);
    
  const status = sending.getStatusCode();
  const responseStr = sending.getResponseAsString();
  if(status >= 300){
    throw `failed to upload
    status: ${status}
    ${responseStr}`;
  }else{
    return JSON.Parse(responseStr).part;
  }
}

/**
  * commit
 */
function commitSession(sessionId,file,uploadedFileData){
  const url = `https://upload.box.com/api/2.0/files/upload_sessions/${sessionId}/commit`;
  let commit = httpClient.begin()
    .header("digest", crypto.subtle.digest('SHA-1', file) )//whole fileらしいので要書き換え
    //if-(none-)matchを入れるか否か
    .body(partArray,"application/application/json")
    .push(url);

  const status = commit.getStatusCode();
  const responseStr = sending.getResponseAsString();
  if(status >= 300){
    throw `failed to create upload session 
    status: ${status}
    ${responseStr}`;
  }else{
    outputDataSet(status,responseStr,uploadedFileData);
  }
}
/**
  * ログを出力し、アップロードしたデータのIDとURLを配列にセットする。
  * @param {Number} status  送信時のステータスコード
  * @param {String} responseStr  送信時のレスポンスをテキスト出力したもの
  * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納される配列
  */
function outputDataSet(status,responseStr,uploadedFileData){
  engine.log(`status: ${status}`);
  engine.log(responseStr + "\n");
  const json = JSON.parse(responseStr);
  uploadedFileData[0].push(json.entries.id);
  uploadedFileData[1].push(`https://app.box.com/file/${json.entries[0].id}`);
}
/**
  * アップロードしたデータのパスとURLをデータ項目に出力する。
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納されている配列
  */
function setData(dataDef,uploadedFileData){
  if(dataDef !==  null){
    engine.setData(dataDef,uploadedFileData.join('\n'));
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD/UlEQVRYR82XbWibVRTHf/fJ2jXJ
2qSd65x11aC0YgJWZUwEWZ0D/SJaHYKKmgykbL70Bf2k4IYwZOKWOhFRMM9QZxHUjSEo+7AOlA1E
7WSRThzdqq1tWWxjm7Zrk1y5N+SlydM2XdvN50sebs5z7u+e8z/n3iu4xo9Y1Pz+3x6F5BagAYQb
oX4BSTfIUaAbIboIeY8W63dhAH+vGyZaQLYihLsox1LBiCA4OjA9CmzOZ34Af9gP8kDRE+dPo0GM
AObtR+YimBvAfzaIEC1FrXghIymDmL42KzNrgMBZE8RzC/ld1P8SE9MbyP+mEGA5V16Ykg5MX2vu
8GwAlXNBaFErW6yxFE25msgCaLXHeq9YcMWCaGE6PenqyAEI70bwRrF+lmQn2YPp3a18ZAECYVWv
rrTj0I4bqHLaeOTgn0uay/JjFQXTV5kFUB1OyK9zjYeC9ThKBeW7epYfQHfPlBZSEbBQ/nBHCmDN
zpUCkLoiUgCBcBegenzmUQDO1QaHT0dpqC3T4yd7YrzyxZB+33V/Jds3VbBmtUH/SJzmQwN07ryR
7r4p2jtTNh88uwHPdaU8uP+iVRRPEvI2pgEuADflA6wrtxV8+GPvJBcuzfDY3RXYjBzgfxNU2A0M
AW2fD1Jht/FmUzWx6STuFyyiqDYw03tnGkDmz6QioADUZO98F8HtMHh521o9lpQwNSMxvx/l9PkJ
XtpWxSaPnZFYArfDRmQ8oeFcDhvvHv+Hts5Bax2FvGJeAFUFW97q5Yc/JrWDVx9ay74n1uv3Iz+P
0fRetkIiB+uxlxj80jfFvbfatc2Jnhhb91mGPwWUA1CQgoH9dawrX0VN+zmGxxLa/qnNLj5rrtHv
ShtPf9ifWdnfB+p02X7z6zhNd5Xr8U9PRXnmo6zN7DDIM4R8DXOK8NRrHu65xY7K+QNvX2SDaxXH
Wmqpu75U+1FhVsL78qcxDjfX8ORml05BeZmN6YTUDUalQenh/RMjC4jQogwb6x189eJGKp02YpeT
2AxBWYmgLzLDwGhcw8UTaJG57AaT0xIlJGXTcTyi09HcWMml8QTVLecKAWRuGVo0IvXF1tuc7N1e
rUspnpSE+y+z4+N+/hqJ88nzNdxX58BRajAYjbPn6DB7H1/P70PTPNzRpyf8tr2WjVUleF8/bwGQ
24jU33mt2Fq2yzYaJeTVx7v/0WaktmMxoaohsyEt23pnO4oiHTcXbsfK6JoeSNKUK3oky54D0tNd
vUMp8hAhnz8/rVfpWF648vkjkEmHPqiYSxBmFCn8V3YxyUDoq1krAnWcLrZCokjU1Sy4tKtZfsJS
l9NGhGgA6QZxR8pEngExipTdYHTNt+LiNbBCTSDf7X8FbX8wYecpbwAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
