<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Box: Upload File</label>
    <label locale="ja">Box: ファイルアップロード</label>
    <last-modified>2021-09-29</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <summary>Upload files to the specified folder on Box.</summary>
    <summary locale="ja">Box の指定フォルダにファイルをアップロードします。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C2: File type data item whose attached files will be uploaded</label>
            <label locale="ja">C2: アップロードするファイルが保存されているファイル型データ項目</label>
        </config>
        <config name="uploadedFolderId" el-enabled="true">
            <label>C3: Folder ID that files will be uploaded (Root folder if blank)</label>
            <label locale="ja">C3: ファイルをアップロードするフォルダの ID (指定がない場合は、ルートフォルダ)</label>
        </config>
        <config name="fileId" form-type="SELECT" select-data-type="STRING">
            <label>C4: String type data item that will save uploaded file ids</label>
            <label locale="ja">C4: ファイル ID を保存する文字型データ項目</label>
        </config>
        <config name="fileUrl" form-type="SELECT" select-data-type="STRING">
            <label>C5: String type data item that will save uploaded file urls</label>
            <label locale="ja">C5: ファイル URL を保存する文字型データ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/box-upload/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/box-upload/</help-page-url>


    <script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://app.box.com/api/oauth2/authorize
// Token Endpoint URL: https://app.box.com/api/oauth2/token
// Scope:
// Consumer Key: (Get by box Application on box Developers)
// Consumer Secret: (Get by box Application on box Developers)

const SIZE_LIMIT = 52428800; //File size border of Box
//50MB

main();

function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const oauth2 = configs.get("conf_OAuth2");
    const idDataDef = configs.getObject("fileId");
    const urlDataDef = configs.getObject("fileUrl");
    //// == ワークフローデータの参照 / Data Retrieving ==
    const folderId = decideFolderId();
    const files = engine.findData(configs.getObject("uploadedFile"));
    if (files === null) {
        setData(idDataDef, [""]);
        setData(urlDataDef, [""]);
        return;
    }

    //// == 演算 / Calculating ==

    checkFile(files, idDataDef, urlDataDef);
    let uploadedFileData = [[], []]; //0:ID,1:URL
    const session = prepareSessionsAndCheckRequestNumber(oauth2, files, folderId);
    uploadAllFiles(oauth2, files, folderId, uploadedFileData, session);

    //// == ワークフローデータへの代入 / Data Updating ==
    setData(idDataDef, uploadedFileData[0]);
    setData(urlDataDef, uploadedFileData[1]);
}

/**
 * フォルダのIDをconfigから読み出して出力する。空の場合は"0"とする。
 * @return {String}  フォルダのID
 */
function decideFolderId() {
    let folderId = configs.get("uploadedFolderId");
    if (folderId === "" || folderId === null) {
        //when folder ID isn't set, set "0"
        folderId = "0";
    }
    return folderId;
}

/**
 * アップロードしようとするファイルの数・名前が適切かどうかチェックする
 * ファイル数が通信制限を超えたらエラーを出し、その後各関数を呼び出す
 * @param {Array<File>}　files アップロードしようとするファイルの配列
 * @param {String} folderId  アップロード先フォルダのID
 * @param {ProcessDataDefinitionView} idDataDef  ID を保存するデータ項目の ProcessDataDefinitionView
 * @param {ProcessDataDefinitionView} urlDataDef  URL を保存するデータ項目の ProcessDataDefinitionView
 */
function checkFile(files, idDataDef, urlDataDef) {
    const fileNum = files.size(); //number of files
    if (fileNum > httpClient.getRequestingLimit()) {
        throw "Number of requests is over the limit";
    }
    checkfileNum(idDataDef, fileNum);
    checkfileNum(urlDataDef, fileNum);
    checkFileName(files);
    checkFileNameOverlap(files);
}

/**
 * アップロードするファイルが複数で パス・URL 出力先のデータ項目が単一行ならエラーにする
 * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
 * @param {Number} fileNum  アップロードしようとするファイルの個数
 */
function checkfileNum(dataDef, fileNum) {
    if (dataDef !== null) {
        //Multiple Judge
        if (dataDef.matchDataType("STRING_TEXTFIELD") && fileNum > 1) {
            throw "Multiple files are set though the Data Item to save the output is Single-line String."
        }
    }
}

/**
 * アップロードするファイルの名前がBoxにおいて無効なファイル名となるものならエラーにする
 * Boxにおいて無効なファイル名となる条件
 * ・ファイル名に\ / のいずれかが含まれている
 * ・ファイル名の先頭か末尾にスペースがある
 * ・ファイル名が. または .. である
 * @param {Array<File>} files  アップロードしようとするファイルの配列
 */
function checkFileName(files) {
    for (let i = 0; i < files.size(); i++) {
        let fileName = files[i].getName();
        if (fileName.indexOf("/") !== -1 || fileName.indexOf("\\") !== -1 || fileName === "." || fileName === ".." || fileName.endsWith(" ") === true || fileName.startsWith(" ") === true) {
            throw "Invalid File Name";
        }
    }
}

/**
 * アップロードするファイルの中に同じファイル名のものが2つ以上あればエラー
 * @param {Array<File>}  アップロードしようとするファイルの配列
 */
function checkFileNameOverlap(files) {
    let fileNames = [];
    const fileNum = files.size();
    for (let i = 0; i < fileNum; i++) {
        if (fileNames.includes(files[i].getName())) {
            throw "Two or more files to upload have the same name.";
        }
        fileNames[i] = files[i].getName();
    }
}

/**
 * 50MBを超えるファイルについてセッションを作成し、通信数を確認する
 * 通信数が制限を超えたらエラーを出す
 * 通信数=50MB以下のファイルの数 + <50MBを超えるファイルそれぞれについて>(ceil(ファイルサイズ/パケットサイズ) + 2)
 * パケットサイズはセッション作成時に指定される
 * @param {String} oauth2  OAuth2 設定
 * @param {Array<File>} files  アップロードしようとするファイルの配列
 * @param {String} folderId  アップロード先フォルダのID
 * @return {Array<Object>} アップロードセッションの配列(50MB以下のファイルについては空オブジェクト)
 */
function prepareSessionsAndCheckRequestNumber(oauth2, files, folderId) {
    let requestNum = 0;
    let session = [];
    for (let i = 0; i < files.size(); i++) {
        requestNum++;
        if (files.get(i).getLength() > SIZE_LIMIT) {
            //over 50MB
            session[i] = createSession(oauth2, files.get(i), folderId);
            requestNum += (Math.ceil(files.get(i).getLength() / session[i].part_size + 1));
        } else {
            session[i] = {};
        }
    }
    if (requestNum > httpClient.getRequestingLimit()) {
        throw "Number of requests is over the limit";
    }
    return session;
}

/**
 * 各ファイルのアップロード処理を行う
 * ファイルのサイズごとに工程は異なる
 * @param {String} oauth2  OAuth2 設定
 * @param {Array<File>} files  アップロードしようとするファイルの配列
 * @param {String} folderId  アップロード先のフォルダのパス
 * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
 * @param {Array<Object>} session アップロードセッションの配列(50MB以下のファイルについては空オブジェクト)
 */
function uploadAllFiles(oauth2, files, folderId, uploadedFileData, session) {
    for (let i = 0; i < files.size(); i++) {
        engine.log(files.get(i).getName());
        if (files.get(i).getLength() > SIZE_LIMIT) {
            //over 50MB
            processLargeFile(oauth2, files.get(i), folderId, uploadedFileData, session[i]);
        } else {
            //under 50MB
            upload(oauth2, files.get(i), folderId, uploadedFileData);
        }
    }
}

/**
 * 50MB以下のファイルをアップロードする。一回につき一つのみ。
 * @param {String} oauth2  OAuth2 設定
 * @param {File} file  アップロードするファイル
 * @param {String} folderId  アップロード先フォルダのID
 * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
 */
function upload(oauth2, file, folderId, uploadedFileData) {
    const url = "https://upload.box.com/api/2.0/files/content";
    let attributes = {
        parent: {id: folderId}
    };
    attributes["name"] = String(file.getName());

    let response = httpClient.begin()
        .authSetting(oauth2)
        .multipart('attributes', JSON.stringify(attributes))
        .multipart('file', file)
        .post(url);
    //when error thrown
    const responseStr = response.getResponseAsString();
    const status = response.getStatusCode();
    if (status >= 300) {
        engine.log(` upload failure\n${responseStr}`);
        throw `failed to upload\nstatus: ${status}\nfile: ${file.getName()}`;
    }
    engine.log(" upload successful");
    addOutputToArray(responseStr, uploadedFileData);
}

/**
 * 50MBを超えるファイルのアップロード処理を行う
 * @param {String} oauth2  OAuth2 設定
 * @param {File} file  アップロードするファイル
 * @param {String} folderId  アップロード先のフォルダのパス
 * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
 * @param {Object} session  アップロードセッション
 */
function processLargeFile(oauth2, file, folderId, uploadedFileData, session) {
    const sessionId = session.id;
    const fileSize = file.getLength();
    let part;
    let partObj = {"parts": []};
    let range = 0;
    fileRepository.readFile(file, session.part_size, function (packet) {
        //upload each fragment of file
        part = uploadLargeFile(oauth2, sessionId, range, packet, fileSize, uploadedFileData, file.getName());
        partObj.parts.push(part);
        range += part.size;
    });
    commitSession(oauth2, sessionId, partObj, file, uploadedFileData);
}

/**
 * アップロード用のセッションを作成する
 * @param {String} oauth2  OAuth2 設定
 * @param {File} file　 アップロードするファイル
 * @param {String} folderId  アップロード先のフォルダのID
 * @return {JSON Object}  アップロードセッション
 */
function createSession(oauth2, file, folderId) {
    const url = "https://upload.box.com/api/2.0/files/upload_sessions";
    const body = {
        "file_name": file.getName(),
        "file_size": file.getLength(),
        "folder_id": folderId
    };
    let response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(body), "application/json; charset=UTF-8")
        .post(url);

    const status = response.getStatusCode();
    const jsonStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(file.getName())
        engine.log(` upload failure\n${jsonStr}`);
        throw `failed to create upload session \nstatus: ${status}\nfile: ${file.getName()}`;
    }
    return JSON.parse(jsonStr);
}

/**
 * 50MBを超えるファイルについて、各部分のアップロードを実行する
 * @param {String} oauth2  OAuth2 設定
 * @param {String} sessionId  アップロードセッションの ID
 * @param {Number} range  range
 * @param {ByteArrayWrapper} packet  アップロードするバイナリ
 * @param {Number} fileSize  アップロードするファイルのサイズ
 * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
 * @return {Object}  Uploaded Part
 */
function uploadLargeFile(oauth2, sessionId, range, packet, fileSize, uploadedFileData, fileName) {
    const packetSize = packet.getLength();
    const url = `https://upload.box.com/api/2.0/files/upload_sessions/${sessionId}`;
    const rangetxt = `bytes ${range}-${range + packetSize - 1}/${fileSize}`;
    const hash = `sha=${base64.encodeToString(digest.sha1(packet))}`;
    let sending = httpClient.begin()
        .authSetting(oauth2)
        .header("Content-Range", rangetxt)
        .header("Digest", hash)
        .body(packet, "application/octet-stream")
        .put(url);

    const status = sending.getStatusCode();
    const responseStr = sending.getResponseAsString();
    const json = JSON.parse(responseStr);
    if (status >= 300) {
        engine.log(` upload failure\n${responseStr}`);
        throw `failed to upload\nstatus: ${status}\nfile: ${fileName}`;
    } else {
        return json.part;
    }
}

/**
 * 50MBを超えるファイルについて、アップロードをコミットする
 * @param {String} oauth2  OAuth2 設定
 * @param {String} sessionId  アップロードセッションの ID
 * @param {Object} partObj　 これまでのアップロートパートをまとめたオブジェクト
 * @param {File} file　 アップロードするファイル
 * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
 */
function commitSession(oauth2, sessionId, partObj, file, uploadedFileData) {
    const url = `https://upload.box.com/api/2.0/files/upload_sessions/${sessionId}/commit`;
    const hash = `sha=${base64.encodeToString(digest.sha1(file))}`;
    let commit = httpClient.begin()
        .authSetting(oauth2)
        .header("Digest", hash)
        .body(JSON.stringify(partObj), "application/json")
        .post(url);

    const status = commit.getStatusCode();
    const responseStr = commit.getResponseAsString();
    if (status >= 300) {
        engine.log(` upload failure\n${responseStr}`);
        throw `failed to commit upload session \nstatus: ${status}\nfile: ${file.getName()}`;
    }
    engine.log(" upload successful");
    addOutputToArray(responseStr, uploadedFileData);
}

/**
 * アップロードしたデータのIDとURLを配列にセットする。
 * @param {String} responseStr  送信時のレスポンスをテキスト出力したもの
 * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納される配列
 */
function addOutputToArray(responseStr, uploadedFileData) {
    const json = JSON.parse(responseStr);
    uploadedFileData[0].push(json.entries[0].id);
    uploadedFileData[1].push(`https://app.box.com/file/${json.entries[0].id}`);
}

/**
 * アップロードしたデータのパスとURLをデータ項目に出力する。
 * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
 * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納されている配列
 */
function setData(dataDef, uploadedFileData) {
    if (dataDef !== null) {
        engine.setData(dataDef, uploadedFileData.join('\n'));
    }
}
  ]]>
    </script>

    <test><![CDATA[
/**
 * 設定の準備
 * @param configs
 * @param files
 * @param folderId
 * @return {{
 *     fileDef: {Object},
 *     idDef: {Object},
 *     urlDef: {Object}
 * }}
 */
const prepareConfigs = (configs, files, folderId) => {
    configs.put('conf_OAuth2', 'Box');

    const fileDef = engine.createDataDefinition('ファイル', 1, 'q_files', 'FILE');
    configs.putObject('uploadedFile', fileDef);
    engine.setData(fileDef, files);

    configs.put('uploadedFolderId', folderId);

    const idDef = engine.createDataDefinition('ファイルID', 2, 'q_ids', 'STRING_TEXTAREA');
    configs.putObject('fileId', idDef);
    engine.setData(idDef, '事前文字列');

    const urlDef = engine.createDataDefinition('ファイルURL', 3, 'q_urls', 'STRING_TEXTAREA');
    configs.putObject('fileUrl', urlDef);
    engine.setData(urlDef, '事前文字列');

    return {
        fileDef,
        idDef,
        urlDef
    };
};

test('File is null', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, null, '');

    execute();

    expect(engine.findData(idDef)).toEqual('');
    expect(engine.findData(urlDef)).toEqual('');
});

test('File Count > requestingLimit', () => {
    const files = new java.util.ArrayList();
    while (files.size() <= httpClient.getRequestingLimit()) {
        files.add(engine.createQfile('テスト', 'text/plain', ''));
    }

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Number of requests is over the limit');
    }
});

test('File Name contains /', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile('テスト/テスト', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Name contains \\', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile('テスト\\テスト', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Name starts with space', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile(' test', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Name ends with space', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile('test ', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Name is .', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile('.', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Name is ..', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('テスト', 'text/plain', ''));
    files.add(engine.createQfile('..', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

test('File Names are duplicated', () => {
    const files = new java.util.ArrayList();
    files.add(engine.createQfile('...', 'text/plain', ''));
    files.add(engine.createQfile('...', 'text/plain', ''));

    prepareConfigs(configs, files, '');

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Two or more files to upload have the same name.');
    }
});

/**
 * 指定サイズのテキストファイルを作成
 * @param name
 * @param size
 */
const createQfile = (name, size) => {
    let text = '';
    while (text.length < size) {
        if (text.length !== 0 && text.length * 2 < size) {
            text += text;
        } else {
            text += 'a';
        }
    }
    return engine.createQfile(name, 'text/plain; charset=US-ASCII', text);
};

test('Success', () => {
    const FILE_SIZE = 52428800 + 4;
    const files = new java.util.ArrayList();
    files.add(createQfile('...', 8));
    files.add(createQfile('large.txt', FILE_SIZE));
    files.add(createQfile('大きい.txt', FILE_SIZE));
    files.add(createQfile('test テスト', 16));

    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, files, '');

    const partSize = FILE_SIZE / 2;
    let fileCount = 0;
    const fileIds = [10, 20, 30, 40];
    let sessionCount = 0;
    httpClient.setRequestHandler(({url, method, contentType}) => {
        engine.log(url);
        switch (url) {
            case 'https://upload.box.com/api/2.0/files/content': {
                expect(method).toEqual('POST');
                expect(contentType).startsWith('multipart/form-data');
                const responseObj = {
                    "entries": [
                        {
                            "id": fileIds[fileCount++],
                            "etag": 1,
                            "type": "file"
                        }
                    ],
                    "total_count": 1
                };
                return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
            }
            case 'https://upload.box.com/api/2.0/files/upload_sessions': {
                expect(method).toEqual('POST');
                const responseObj = {
                    "id": `S${sessionCount++}`,
                    "type": "upload_session",
                    "part_size": partSize
                };
                return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
            }
            case 'https://upload.box.com/api/2.0/files/upload_sessions/S0':
            case 'https://upload.box.com/api/2.0/files/upload_sessions/S1': {
                expect(method).toEqual('PUT');
                const responseObj = {
                    "part": {
                        "size": partSize
                    }
                };
                return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
            }
            case 'https://upload.box.com/api/2.0/files/upload_sessions/S0/commit':
            case 'https://upload.box.com/api/2.0/files/upload_sessions/S1/commit': {
                expect(method).toEqual('POST');
                const responseObj = {
                    "entries": [
                        {
                            "id": fileIds[fileCount++],
                            "etag": 1,
                            "type": "file"
                        }
                    ],
                    "total_count": 1
                };
                return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
            }
            default:
                fail('Request Error');
        }
    });

    execute();

    expect(engine.findData(idDef)).toEqual('10\n20\n30\n40');
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/file/10\nhttps://app.box.com/file/20\nhttps://app.box.com/file/30\nhttps://app.box.com/file/40');
});
]]></test>


    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD/UlEQVRYR82XbWibVRTHf/fJ2jXJ
        2qSd65x11aC0YgJWZUwEWZ0D/SJaHYKKmgykbL70Bf2k4IYwZOKWOhFRMM9QZxHUjSEo+7AOlA1E
        7WSRThzdqq1tWWxjm7Zrk1y5N+SlydM2XdvN50sebs5z7u+e8z/n3iu4xo9Y1Pz+3x6F5BagAYQb
        oX4BSTfIUaAbIboIeY8W63dhAH+vGyZaQLYihLsox1LBiCA4OjA9CmzOZ34Af9gP8kDRE+dPo0GM
        AObtR+YimBvAfzaIEC1FrXghIymDmL42KzNrgMBZE8RzC/ld1P8SE9MbyP+mEGA5V16Ykg5MX2vu
        8GwAlXNBaFErW6yxFE25msgCaLXHeq9YcMWCaGE6PenqyAEI70bwRrF+lmQn2YPp3a18ZAECYVWv
        rrTj0I4bqHLaeOTgn0uay/JjFQXTV5kFUB1OyK9zjYeC9ThKBeW7epYfQHfPlBZSEbBQ/nBHCmDN
        zpUCkLoiUgCBcBegenzmUQDO1QaHT0dpqC3T4yd7YrzyxZB+33V/Jds3VbBmtUH/SJzmQwN07ryR
        7r4p2jtTNh88uwHPdaU8uP+iVRRPEvI2pgEuADflA6wrtxV8+GPvJBcuzfDY3RXYjBzgfxNU2A0M
        AW2fD1Jht/FmUzWx6STuFyyiqDYw03tnGkDmz6QioADUZO98F8HtMHh521o9lpQwNSMxvx/l9PkJ
        XtpWxSaPnZFYArfDRmQ8oeFcDhvvHv+Hts5Bax2FvGJeAFUFW97q5Yc/JrWDVx9ay74n1uv3Iz+P
        0fRetkIiB+uxlxj80jfFvbfatc2Jnhhb91mGPwWUA1CQgoH9dawrX0VN+zmGxxLa/qnNLj5rrtHv
        ShtPf9ifWdnfB+p02X7z6zhNd5Xr8U9PRXnmo6zN7DDIM4R8DXOK8NRrHu65xY7K+QNvX2SDaxXH
        Wmqpu75U+1FhVsL78qcxDjfX8ORml05BeZmN6YTUDUalQenh/RMjC4jQogwb6x189eJGKp02YpeT
        2AxBWYmgLzLDwGhcw8UTaJG57AaT0xIlJGXTcTyi09HcWMml8QTVLecKAWRuGVo0IvXF1tuc7N1e
        rUspnpSE+y+z4+N+/hqJ88nzNdxX58BRajAYjbPn6DB7H1/P70PTPNzRpyf8tr2WjVUleF8/bwGQ
        24jU33mt2Fq2yzYaJeTVx7v/0WaktmMxoaohsyEt23pnO4oiHTcXbsfK6JoeSNKUK3oky54D0tNd
        vUMp8hAhnz8/rVfpWF648vkjkEmHPqiYSxBmFCn8V3YxyUDoq1krAnWcLrZCokjU1Sy4tKtZfsJS
        l9NGhGgA6QZxR8pEngExipTdYHTNt+LiNbBCTSDf7X8FbX8wYecpbwAAAABJRU5ErkJggg==
    </icon>

</service-task-definition>
