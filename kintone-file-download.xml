<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Download File</label>
<label locale="ja">kintone: ファイルダウンロード</label>
<last-modified>2022-10-11</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>This item downloads files from an Attachment field of a record in a Kintone App.</summary>
<summary locale="ja">この工程は、kintone アプリのレコード（1件）の添付ファイルフィールドからファイルをダウンロードします。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: Authorization Setting in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した認証設定</label>
  </config>
  <config name="conf_basic" required="false" form-type="OAUTH2">
    <label>C2: Basic Auth Setting (required if enabled on Kintone)</label>
    <label locale="ja">C2: Basic 認証設定（kintone で設定されている場合のみ）</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C3: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C3: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C4: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C4: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C5: App ID</label>
    <label locale="ja">C5: アプリ ID</label>
  </config>
  <config name="conf_recordId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C6: Record ID</label>
    <label locale="ja">C6: レコード ID</label>
  </config>
  <config name="conf_fieldCode" required="true" form-type="TEXTFIELD">
    <label>C7: Field Code of Attachment field</label>
    <label locale="ja">C7: 添付ファイルフィールドのフィールドコード</label>
  </config>
  <config name="conf_files" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C8: File type data item to add the downloaded files</label>
    <label locale="ja">C8: ダウンロードファイルを追加保存するファイル型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/kintone-file-download/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/kintone-file-download/</help-page-url>

<script><![CDATA[

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const auth = configs.get("conf_auth");
  const basic = configs.get("conf_basic");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const recordId = retrieveRecordId();
  const fieldCode = configs.get("conf_fieldCode");
  const filesDef = configs.getObject("conf_files");

  const apiToken = httpClient.getOAuth2Token( auth );
  let files = engine.findData( filesDef );
  if (files === null) {
    files = new java.util.ArrayList();
  }

  //// == 演算 / Calculating ==
  checkDomainAndIds( domain, appId, recordId );
  const apiUri = determineApiUri( domain, guestSpaceId ); // /v1/ までの URI
  const attachments = getAttachmentsInfo( apiUri, apiToken, basic, appId, recordId, fieldCode );
  getAndAddAttachments( apiUri, apiToken, basic, attachments, files ); // 添付ファイルをダウンロードして files に追加

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.setData( filesDef, files );
}

/**
  * config からレコード ID を読み出す
  * @return {Stromg} recordId  レコード ID
  */
function retrieveRecordId() {
  const recordIdDef = configs.getObject( "conf_recordId" );
  let recordId = configs.get( "conf_recordId" );
  if ( recordIdDef !== null ) {
    recordId = engine.findData( recordIdDef );
  }
  return recordId;
}

/**
  * ドメイン、アプリ ID、レコード ID が空または不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  */
function checkDomainAndIds( domain, appId, recordId ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const reg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !reg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
  if ( recordId === "" || recordId === null ) {
    throw "Record ID is empty.";
  }
  if ( !isValidId(recordId) ) {
    throw "Invalid Record ID.";
  }
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

/**
  * kintone REST API の URI を決定する（/v1/ まで）
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @return {String} apiUri  API の URI（/v1/ まで）
  */
function determineApiUri( domain, guestSpaceId ) {
  let apiUri = "";
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/`;
  }
  return apiUri;
}

/**
  * kintone REST API にレコード取得の GET リクエストを送信し、添付ファイルの情報の配列を返す
  * @param {String} apiUri  API の URI（/v1/ まで）
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  * @param {String} fieldCode  添付ファイルフィールドのフィールドコード
  * @return {Array<Object>} attachments  添付ファイル情報 {contentType, fileKey, name, size} の配列
  */
function getAttachmentsInfo( apiUri, apiToken, basic, appId, recordId, fieldCode ) {
  let request = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken )
    .queryParam( "app", appId )
    .queryParam( "id", recordId );
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  const response = request.get( `${apiUri}record.json` );
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}\n`;
    engine.log(accessLog);
    throw `Failed to get record. status: ${status}`;
  }
  const json = JSON.parse(responseStr);
  if ( json.record[fieldCode] === undefined ) { // 一致するフィールドコードがない場合、エラー
    throw `${fieldCode} does not exist in the record.`;
  }
  if ( json.record[fieldCode].type !== "FILE" ) { // 添付ファイルフィールドでない場合、エラー
    throw `${fieldCode} is not an Attachment field.`;
  }
  return json.record[fieldCode].value;
}

/**
  * kintone REST API にファイルダウンロードの GET リクエストを送信し、添付ファイルを配列に追加する
  * @param {String} apiUri  API の URI（/v1/ まで）
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {Array<Object>} attachments  添付ファイル情報 {contentType, fileKey, name, size} の配列
  * @param {Array<Qfile>} files  ファイルの配列
  */
function getAndAddAttachments( apiUri, apiToken, basic, attachments, files ) {
  const fileNum = attachments.length;
  if ( fileNum + 1 > httpClient.getRequestingLimit() ) { // HTTP リクエストの上限を超える場合はエラー
    throw "Necessary HTTP requests exceeds the limit.";
  }
  attachments.forEach( att => {
    const response = getAttachment( apiUri, apiToken, basic, att );
    const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
      att.name, 
      response.getContentType(),
      response.getResponse()
    );
    files.add( qfile );
  });
}

/**
  * kintone REST API にファイルダウンロードの GET リクエストを送信し、レスポンスを返す
  * @param {String} apiUri  API の URI（/v1/ まで）
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {Object} attachment  添付ファイル情報 {contentType, fileKey, name, size}
  * @return {HttpResponseWrapper} response  レスポンス
  */
function getAttachment( apiUri, apiToken, basic, attachment ) {
  let request = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken )
    .queryParam( "fileKey", attachment.fileKey );
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  const response = request.get( `${apiUri}file.json` );
  //when error thrown
  const status = response.getStatusCode();
  if (status !== 200) {
    engine.log(`attachment: ${JSON.stringify(attachment)}`);
    const responseStr = response.getResponseAsString();
    const accessLog = `---GET request--- ${status}\n${responseStr}\n`;
    engine.log(accessLog);
    throw `Failed to download file. status: ${status}`;
  }
  return response;
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

<test><![CDATA[

const CONTENTTYPE = "text/plain";

/**
 * 設定の準備
 * @param basic
 * @param domain
 * @param guestSpaceId
 * @param appId
 * @param recordId
 * @param files
 * @return fileDef
 */
const prepareConfigs = (configs, basic, domain, guestSpaceId, appId, recordId, fieldCode, files) => {
    configs.put('conf_auth', 'kintone');
    configs.put('conf_basic', basic);
    configs.put('conf_domain', domain);
    configs.put('conf_guestSpaceId', guestSpaceId);
    configs.put('conf_appId', appId);

    const recordIdDef = engine.createDataDefinition('レコードの ID', 1, 'q_record_id', 'STRING_TEXTFIELD');
    configs.putObject('conf_recordId', recordIdDef);
    engine.setData(recordIdDef, recordId);

    configs.put(`conf_fieldCode`, fieldCode);

    const fileDef = engine.createDataDefinition('ファイル', 2, 'q_files', 'FILE');
    configs.putObject('conf_files', fileDef);
    engine.setData(fileDef, files);

    return fileDef;
};


/**
 * 指定サイズのテキストファイルを作成
 * @param name
 * @param size
 */
const createQfile = (name, size) => {
    let text = "";
    text.padStart(size, "a");
    return engine.createQfile(name, 'text/plain; charset=US-ASCII', text);
};


/**
 * ドメインが不正な文字列でエラーになる場合
 */
test('Invalid Kintone domain', () => {
    prepareConfigs(configs, '', 'invalidDomain', '', '1', '1', "添付ファイル", null);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Invalid Kintone domain.');
});


/**
 * ドメインが空でエラーになる場合
 */
test('Domain is empty', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile(`file2.txt`, 2));
    prepareConfigs(configs, '', '', '', '2', '2', "添付ファイル", files);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Domain is empty.');
});


/**
 * ゲストスペース ID が不正な文字列でエラーになる場合
 */
test('Invalid Guest Space ID', () => {
    prepareConfigs(configs, '', 'test.cybozu.com', '-1', '3', '3', "添付ファイル", null);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Invalid Guest Space ID.');
});


/**
 * アプリ ID が不正な文字列でエラーになる場合
 */
test('Invalid App ID', () => {
    prepareConfigs(configs, '', 'test.kintone.com', '1', '2.3', '4', "添付ファイル", null);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Invalid App ID.');
});


/**
 * アプリ ID が空でエラーになる場合
 */
test('App ID is empty', () => {
    prepareConfigs(configs, '', 'test.kintone.com', '1', '', '5', "添付ファイル", null);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('App ID is empty.');
});


/**
 * レコード ID が不正な文字列でエラーになる場合
 */
test('Invalid Record ID', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile(`file6.txt`, 6));
    prepareConfigs(configs, '', 'test.kintone.com', '', '6', '-3.3', "添付ファイル", files);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Invalid Record ID.');
});


/**
 * レコード ID が空でエラーになる場合
 */
test('Record ID is empty', () => {
    prepareConfigs(configs, '', 'test.kintone.com', '', '7', '', "添付ファイル", null);


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow('Record ID is empty.');
});


/**
 * GET リクエストのテスト レコード取得
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param domain
 * @param guestSpaceId
 * @param appId
 * @param recordId
 */
const assertGetRequest = ({ url, method, body }, domain, guestSpaceId, appId, recordId) => {
    expect(method).toEqual('GET');

    if (guestSpaceId === "" || guestSpaceId === null) {
        expect(url).toEqual(`https://${domain}/k/v1/record.json?app=${appId}&id=${recordId}`);
    } else {
        expect(url).toEqual(`https://${domain}/k/guest/${guestSpaceId}/v1/record.json?app=${appId}&id=${recordId}`);
    }
};


/**
 * GET リクエストのテスト ファイルダウンロード
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param domain
 * @param guestSpaceId
 * @param fileKey
 */
const assertDownloadRequest = ({ url, method, body }, domain, guestSpaceId, fileKey) => {
    expect(method).toEqual('GET');

    if (guestSpaceId === "" || guestSpaceId === null) {
        expect(url).toEqual(`https://${domain}/k/v1/file.json?fileKey=${fileKey}`);
    } else {
        expect(url).toEqual(`https://${domain}/k/guest/${guestSpaceId}/v1/file.json?fileKey=${fileKey}`);
    }
};



/**
 * GET リクエストのレスポンスを準備 レコード取得
 * @param attachFileFieldCode
 * @param num 添付されているファイル数
 * @param contentType
 * @return responseObj
 * @return responseObj.record[attachFileFieldCode].value
 */
const prepareGetResponse = (attachFileFieldCode, num) => {

    const responseObj = {
        "record": {
            [attachFileFieldCode]: {
                "type": "FILE",
                "value": [
                ]
            }
        }
    };

    for (let i = 1; i <= num; i++) {
        responseObj.record[attachFileFieldCode].value.push({
            "contentType": CONTENTTYPE,
            "fileKey": `key-${i}`,
            "name": `test${i}.txt`,
            "size": "23175"
        })
    }

    if (num !== 0) {
        return {
            getResponseObj: responseObj,
            value: responseObj.record[attachFileFieldCode].value
        };
    } else {
        return responseObj;
    }
};



/**
 * ファイルのテスト
 * @param file
 * @param name
 * @param contentType
 * @param encoding
 * @param body
 */
const assertFile = (file, name, encoding, body) => {
    expect(file.getName()).toEqual(name);
    expect(file.getContentType()).toEqual(CONTENTTYPE);
    let text = '';
    if (body.indexOf('\n') !== -1) {
        fileRepository.readFile(file, encoding, line => text += line + '\n');
    } else {
        fileRepository.readFile(file, encoding, line => text += line);
    }
    expect(text).toEqual(body);
};



/**
 * GET API リクエスト（レコード取得）でエラーになる場合
 */
test('GET Failed', () => {
    const domain = 'test.cybozu.com';
    const appId = '1';
    const recordId = '1';

    prepareConfigs(configs, '', domain, '', appId, recordId, "添付ファイル", null);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, domain, '', appId, recordId);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow(`Failed to get record. status: 400`);
});



/**
 * 取得したレコードに一致するフィールドコードが存在せずエラーになる場合
 */
test('fieldCode does not exist in the record', () => {
    const domain = 'test.kintone.com';
    const appId = '2';
    const recordId = '2';

    prepareConfigs(configs, '', domain, '', appId, recordId, "添付ファイル2", null);

    const attachFileFieldCode = "添付ファイル";

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, domain, '', appId, recordId);
        engine.log("test-fieldCode does not exist in the record");
        engine.log(JSON.stringify(prepareGetResponse(attachFileFieldCode, 0)));
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetResponse(attachFileFieldCode, 0)));
    });

    expect(execute).toThrow(`添付ファイル2 does not exist in the record.`);
});



/**
 * 取得したレコードに一致するフィールドコードが、添付ファイルフィールドでなくエラーになる場合
 */
test('fieldCode is not an Attachment field', () => {
    const domain = 'test.kintone.com';
    const appId = '3';
    const recordId = '3';

    prepareConfigs(configs, '', domain, '', appId, recordId, "文字列", null);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, domain, '', appId, recordId);
        const responseGetObj = {
            "record": {
                "文字列": {
                    "type": "SINGLE_LINE_TEXT",
                    "value": "テスト"
                }
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
    });

    expect(execute).toThrow(`文字列 is not an Attachment field.`);
});



/**
 * ファイル数が HTTP リクエスト数制限を超えてエラーになる場合 
 */
test('Necessary HTTP requests exceeds the limit', () => {
    const domain = 'test.kintone.com';
    const appId = '4';
    const recordId = '4';

    prepareConfigs(configs, '', domain, '', appId, recordId, "添付ファイル", null);

    const attachFileFieldCode = "添付ファイル";

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, domain, '', appId, recordId);
        const { getResponseObj, value } = prepareGetResponse(attachFileFieldCode, httpClient.getRequestingLimit());
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getResponseObj));
    });

    expect(execute).toThrow(`Necessary HTTP requests exceeds the limit.`);
});



/**
 * API リクエスト（ファイルダウンロード）でエラーになる場合 
 */
test('DownLoad Failed', () => {
    const domain = 'test.kintone.com';
    const appId = '5';
    const recordId = '5';

    prepareConfigs(configs, '', domain, '', appId, recordId, "添付ファイル", null);

    let reqCount = 0;
    const attachFileFieldCode = "添付ファイル";
    let fileKey = "";

    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, domain, '', appId, recordId);
            reqCount++;
            const { getResponseObj, value } = prepareGetResponse(attachFileFieldCode, 1);
            fileKey = value[0].fileKey;
            engine.log(JSON.stringify(getResponseObj));
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getResponseObj));
        }

        assertDownloadRequest(request, domain, '', fileKey);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow(`Failed to download file. status: 400`);
});



/**
 * ファイルダウンロード成功
 * basic 認証設定　ゲストスペースID 設定
 * 1 ファイル添付されているフィールドコード
 * ファイル型データ項目に他の 1 ファイルが保存されている状態
 */
test('Success - basic and guestSpaseId - File is not null', () => {
    const files = new java.util.ArrayList();
    const fileName = 'file7.txt';
    const fileSize = 7;
    files.add(createQfile(fileName, fileSize));

    const basic = 'basic';
    const guestSpaceId = '7';
    const domain = 'test.cybozu.com';
    const appId = '7';
    const recordId = '7';

    const fileDef = prepareConfigs(configs, basic, domain, guestSpaceId, appId, recordId, "添付ファイル7", files);

    let reqCount = 0;
    const attachFileFieldCode = "添付ファイル7";
    let fileKey = "";
    let name = "";

    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, domain, guestSpaceId, appId, recordId);
            reqCount++;
            const { getResponseObj, value } = prepareGetResponse(attachFileFieldCode, 1);

            fileKey = value[0].fileKey;
            name = value[0].name;

            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getResponseObj));
        }

        assertDownloadRequest(request, domain, guestSpaceId, fileKey);

        return httpClient.createHttpResponse(200, 'text/plain; charset= UTF-8', 'testcase-7');
    });

    // <script> のスクリプトを実行
    execute();

    const files_data = engine.findData(fileDef);
    expect(files_data.size()).toEqual(2);
    assertFile(files_data.get(1), name, 'UTF-8', 'testcase-7');
});



/**
 * ファイルダウンロード成功
 * 最大ファイル数が添付されているフィールドコード
 * ファイル型データ項目は空の状態
 */
test('Success - max-files - File is null', () => {
    const basic = '';
    const guestSpaceId = '';
    const domain = 'test.kintone.com';
    const appId = '8';
    const recordId = '8';

    const fileDef = prepareConfigs(configs, basic, domain, guestSpaceId, appId, recordId, "添付ファイル8", null);

    let reqCount = 0;
    const attachFileFieldCode = "添付ファイル8";
    let fileKey = [];
    let name = [];
    let contentType = [];

    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, domain, guestSpaceId, appId, recordId);
            reqCount++;
            const { getResponseObj, value } = prepareGetResponse(attachFileFieldCode, httpClient.getRequestingLimit() - 1);
            for (let i = 1; i <= httpClient.getRequestingLimit() - 1; i++) {
                fileKey[i - 1] = value[i - 1].fileKey;
                name[i - 1] = value[i - 1].name;
            }
            engine.log("max-test");
            engine.log(JSON.stringify(getResponseObj));
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(getResponseObj));
        }

        engine.log("max-test2");
        engine.log(fileKey[reqCount - 1]);
        assertDownloadRequest(request, domain, guestSpaceId, fileKey[reqCount - 1]);
        reqCount++;
        return httpClient.createHttpResponse(200, 'text/plain; charset= UTF-8', `file-${reqCount - 1}\n`);
    });

    // <script> のスクリプトを実行
    execute();

    const files_data = engine.findData(fileDef);
    expect(files_data.size()).toEqual(httpClient.getRequestingLimit() - 1);

    for (let j = 1; j <= httpClient.getRequestingLimit() - 1; j++) {
        engine.log("max-test3");
        engine.log(`file-${j}\n`);
        assertFile(files_data.get(j - 1), name[j - 1], 'UTF-8', `file-${j}\n`);
    }
});

]]></test>

</service-task-definition>
