<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-11-21</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box: Search Folder</label>
<label locale="ja">Box: フォルダ検索</label>
<summary>This item searches for a folder with a specific name directly under the specified folder on Box</summary>
<summary locale="ja">この工程は、Box の指定フォルダ直下に特定の名前のフォルダがあるかどうか調べます。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/box-folder-search/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/box-folder-search/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="ParentFolderId" el-enabled="true">
    <label>C2: Parent Folder ID (Root Folder if blank)</label>
    <label locale="ja">C2: 検索するフォルダの親フォルダの ID (空白の場合ルートフォルダ直下を検索します)</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>C3: Folder Name to search for</label>
    <label locale="ja">C3: 検索するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data Item that will save Folder ID</label>
    <label locale="ja">C4: フォルダの ID を保存するデータ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: Data Item that will save Folder URL</label>
    <label locale="ja">C5: フォルダの URL を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  let parentFolderId = configs.get("ParentFolderId");
  if (parentFolderId === "" ||parentFolderId === null) {
    parentFolderId = "0";
  }
  const folderName = configs.get("FolderName");
  if (folderName === "" ||folderName === null) {
    throw "Folder Name is blank";
  }
  //get C4&C5
  const idData = configs.getObject( "FolderIdItem" );
  const urlData = configs.getObject( "WebViewUrlItem" );

  //If neither C4 nor C5 are set,throw error
  if((idData === null || idData === "") && (urlData === null || urlData === "")){
    throw "Neither of Data Items to save result are set.";
  }
  const oauth2 = configs.get("conf_OAuth2");

  const {folderId, folderUrl} = searchFolder(oauth2,parentFolderId,folderName);

  //set ID to Data Item
  if (idData !== null) {
    engine.setData(idData,folderId);
  }

  //set URL to Data Item  
  if (urlData !== null) {
    engine.setData(urlData, folderUrl);
  }
}

//search folder on box
function searchFolder(oauth2,parentFolderId,folderName){
  const url = `https://api.box.com/2.0/folders/${parentFolderId}/items`;
  let marker = "";
  const limit = httpClient.getRequestingLimit();
  for(let count = 0; count < limit; count++) {
    const response = httpClient.begin()
      .authSetting(oauth2)
      .queryParam("fields", "id,type,name")
      .queryParam("limit", "1000")
      .queryParam("usemarker","true")
      .queryParam("marker",marker)
      .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    engine.log(`status: ${status}`);
    if (status >= 300) {
      engine.log(responseTxt);
      throw "Failed to search";
    }
    const json = JSON.parse(responseTxt)
    const items = json.entries;

    for(let i = 0; i < items.length; i++){
      if(items[i].type === "folder" && items[i].name === folderName){
        const url = `https://app.box.com/folder/${items[i].id}`;
        return {
          folderId : items[i].id,
          folderUrl : url
        };
      }
    }
    marker = json.next_marker;
    if(marker === undefined || marker === '' || marker === null) {
      throw `Folder ${folderName} doesn't exist.`;
    }
  }
  throw "Too many folders and files are in the specified folder";
}
]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD/UlEQVRYR82XbWibVRTHf/fJ2jXJ
2qSd65x11aC0YgJWZUwEWZ0D/SJaHYKKmgykbL70Bf2k4IYwZOKWOhFRMM9QZxHUjSEo+7AOlA1E
7WSRThzdqq1tWWxjm7Zrk1y5N+SlydM2XdvN50sebs5z7u+e8z/n3iu4xo9Y1Pz+3x6F5BagAYQb
oX4BSTfIUaAbIboIeY8W63dhAH+vGyZaQLYihLsox1LBiCA4OjA9CmzOZ34Af9gP8kDRE+dPo0GM
AObtR+YimBvAfzaIEC1FrXghIymDmL42KzNrgMBZE8RzC/ld1P8SE9MbyP+mEGA5V16Ykg5MX2vu
8GwAlXNBaFErW6yxFE25msgCaLXHeq9YcMWCaGE6PenqyAEI70bwRrF+lmQn2YPp3a18ZAECYVWv
rrTj0I4bqHLaeOTgn0uay/JjFQXTV5kFUB1OyK9zjYeC9ThKBeW7epYfQHfPlBZSEbBQ/nBHCmDN
zpUCkLoiUgCBcBegenzmUQDO1QaHT0dpqC3T4yd7YrzyxZB+33V/Jds3VbBmtUH/SJzmQwN07ryR
7r4p2jtTNh88uwHPdaU8uP+iVRRPEvI2pgEuADflA6wrtxV8+GPvJBcuzfDY3RXYjBzgfxNU2A0M
AW2fD1Jht/FmUzWx6STuFyyiqDYw03tnGkDmz6QioADUZO98F8HtMHh521o9lpQwNSMxvx/l9PkJ
XtpWxSaPnZFYArfDRmQ8oeFcDhvvHv+Hts5Bax2FvGJeAFUFW97q5Yc/JrWDVx9ay74n1uv3Iz+P
0fRetkIiB+uxlxj80jfFvbfatc2Jnhhb91mGPwWUA1CQgoH9dawrX0VN+zmGxxLa/qnNLj5rrtHv
ShtPf9ifWdnfB+p02X7z6zhNd5Xr8U9PRXnmo6zN7DDIM4R8DXOK8NRrHu65xY7K+QNvX2SDaxXH
Wmqpu75U+1FhVsL78qcxDjfX8ORml05BeZmN6YTUDUalQenh/RMjC4jQogwb6x189eJGKp02YpeT
2AxBWYmgLzLDwGhcw8UTaJG57AaT0xIlJGXTcTyi09HcWMml8QTVLecKAWRuGVo0IvXF1tuc7N1e
rUspnpSE+y+z4+N+/hqJ88nzNdxX58BRajAYjbPn6DB7H1/P70PTPNzRpyf8tr2WjVUleF8/bwGQ
24jU33mt2Fq2yzYaJeTVx7v/0WaktmMxoaohsyEt23pnO4oiHTcXbsfK6JoeSNKUK3oky54D0tNd
vUMp8hAhnz8/rVfpWF648vkjkEmHPqiYSxBmFCn8V3YxyUDoq1krAnWcLrZCokjU1Sy4tKtZfsJS
l9NGhGgA6QZxR8pEngExipTdYHTNt+LiNbBCTSDf7X8FbX8wYecpbwAAAABJRU5ErkJggg==</icon>
    
    
    
<test><![CDATA[

/**
 * 設定の準備
 * @param configs
 * @param folderId
 * @param folderName
 * @return {
 *     idDef: {Object},
 *     urlDef: {Object}
 * }
 */
const prepareConfigs = (configs, folderId, folderName) => {
    configs.put('conf_OAuth2', 'Box');
    configs.put('ParentFolderId', folderId);
    configs.put('FolderName', folderName);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ファイルID', 3, 'q_ids', 'STRING_TEXTAREA');
    configs.putObject('FolderIdItem', idDef);
    // 文字型データ項目の値（フォルダ ID を保存するデータ項目）を指定
    engine.setData(idDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('ファイルURL', 4, 'q_urls', 'STRING_TEXTAREA');
    configs.putObject('WebViewUrlItem', urlDef);
    // 文字型データ項目の値（フォルダ URL を保存するデータ項目）を指定
    engine.setData(urlDef, '事前文字列');

    return {
        idDef,
        urlDef
    };
};


/**
 * リクエストのテスト
 * フォルダ内の項目のリストを取得
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param folderId
 */
const assertRequest = ({ url, method }, folderId) => {
    expect(method).toEqual('GET');
    expect(url).toEqual(`https://api.box.com/2.0/folders/${folderId}/items?fields=id%2Ctype%2Cname&limit=1000&usemarker=true&marker=`);
};



/**
 * FolderName が空でエラーになる場合
 */
test('Folder Name is blank', () => {
    prepareConfigs(configs, '56789', '');

    expect(execute).toThrow('Folder Name is blank');
});


/**
 * FolderIdItem  WebViewUrlItem  が未設定でエラーになる場合
 */
test('Neither of Data Items to save result are set - neither C4 nor C5 are set ', () => {
    configs.put('conf_OAuth2', 'Box');
    configs.put('ParentFolderId', '98765');
    configs.put('FolderName', 'test3');

    expect(execute).toThrow('Neither of Data Items to save result are set.');
});


/**
 * Box への API リクエストでエラー 
 * フォルダ内の項目のリストを取得失敗
 */
test('GET Failed', () => {
    prepareConfigs(configs, '12345', 'test');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '12345');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to search');
});


/**
 * フォルダ検索成功
 * フォルダ内の項目のリスト（1 entrie）を取得成功
 * 検索するフォルダの親フォルダの ID 指定　
 */
test('200 Success - 1 entrie', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '54321', 'test2');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '54321');
        //レスポンスの"entries"は、簡易版レプリゼンテーション
        const responseObj = {
            "entries": [
                {
                    "id": 11111,
                    "etag": 1,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test2"
                }
            ],
            "limit": 1000,
            "offset": 2000,
            "order": [
                {
                    "by": "type",
                    "direction": "ASC"
                }
            ],
            "total_count": 5000
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual(11111);
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/folder/11111');
});


/**
 * フォルダ検索成功
 * フォルダ内の項目のリスト（3 entries）を取得成功
 * 検索するフォルダの親フォルダの ID 指定　
 */
test('200 Success - 3 entries', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '12345', 'test5');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '12345');
        //レスポンスの"entries"は、簡易版レプリゼンテーション
        const responseObj = {
            "entries": [
                {
                    "id": 11111,
                    "etag": 1,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test"
                },
                {
                    "id": 33333,
                    "etag": 3,
                    "type": "file",
                    "sequence_id": 3,
                    "name": "test5.txt"
                },
                {
                    "id": 55555,
                    "etag": 5,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test5"
                }
            ],
            "limit": 1000,
            "offset": 2000,
            "order": [
                {
                    "by": "type",
                    "direction": "ASC"
                }
            ],
            "total_count": 5000
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual(55555);
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/folder/55555');
});


/**
 * フォルダ検索成功
 * フォルダ内の項目のリスト（2 entries）を取得成功
 * 検索するフォルダの親フォルダの ID 無指定　
 */
test('200 Success - 2 entries  no parentId', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '', 'test5');


    httpClient.setRequestHandler((request) => {
        assertRequest(request, '0');
        //レスポンスの"entries"は、簡易版レプリゼンテーション
        const responseObj = {
            "entries": [
                {
                    "id": 11111,
                    "etag": 1,
                    "type": "file",
                    "sequence_id": 3,
                    "name": "test.txt"
                },
                {
                    "id": 33333,
                    "etag": 3,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test5"
                }
            ],
            "limit": 1000,
            "offset": 2000,
            "order": [
                {
                    "by": "type",
                    "direction": "ASC"
                }
            ],
            "total_count": 5000
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual(33333);
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/folder/33333');
});


/**
 * フォルダ検索失敗
 * フォルダ内の項目のリスト（3 entries）を取得成功
 * 検索するフォルダの親フォルダの ID 指定
 * 親フォルダ内に検索するフォルダ名が無い
 */
test('Failed - GET success, but the folder cannot be found in 3 entries', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '88888', 'test8');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '88888');
        //レスポンスの"entries"は、簡易版レプリゼンテーション
        const responseObj = {
            "entries": [
                {
                    "id": 11111,
                    "etag": 1,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test"
                },
                {
                    "id": 33333,
                    "etag": 3,
                    "type": "file",
                    "sequence_id": 3,
                    "name": "test5.txt"
                },
                {
                    "id": 55555,
                    "etag": 5,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": "test5"
                }
            ],
            "limit": 1000,
            "offset": 2000,
            "order": [
                {
                    "by": "type",
                    "direction": "ASC"
                }
            ],
            "total_count": 5000
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow("Folder test8 doesn't exist.");

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('事前文字列');
    expect(engine.findData(urlDef)).toEqual('事前文字列');
});



/**
 * レスポンスを設定する
 */
const setRequestHandler = () => {
    let requestCount = 0;

    httpClient.setRequestHandler(({ url, method }) => {
        engine.log(url);

        if (requestCount === 0) {
            expect(url).toEqual(`https://api.box.com/2.0/folders/54321/items?fields=id%2Ctype%2Cname&limit=1000&usemarker=true&marker=`);
        } else {
            expect(url).toEqual(`https://api.box.com/2.0/folders/54321/items?fields=id%2Ctype%2Cname&limit=1000&usemarker=true&marker=next${requestCount}`);
        }
        expect(method).toEqual('GET');

        const responseObj = {
            "entries": [
            ],
            "limit": 1000,
            "next_marker": `next${requestCount + 1}`,
            "offset": 2000,
            "order": [
                {
                    "by": "type",
                    "direction": "ASC"
                }
            ],
            "total_count": 5000
        };

        // responseObj の 配列"entries" に 1000 アイテム分の簡易版レプリゼンテーションを push する
        // 1回目のリクエストで返すアイテムは 、ID が 1 から 1000 のもの
        // 10回目のリクエストで返すアイテムは 、ID が 9001 から 10000 のもの
        for (let i = 0; i < 1000; i++) {
            let idNumber = (i + 1) + (requestCount) * 1000;
            // 奇数 ID がファイルで、偶数 ID がフォルダとする
            if (i % 2 === 0) {
                responseObj['entries'].push({
                    "id": idNumber,
                    "etag": 1,
                    "type": "file",
                    "sequence_id": 3,
                    "name": `test${idNumber}`
                });
            } else {
                responseObj['entries'].push({
                    "id": idNumber,
                    "etag": 1,
                    "type": "folder",
                    "sequence_id": 3,
                    "name": `test${idNumber}`
                });
            }
        }

        //    jsonStr = JSON.stringify(responseObj);  ログ出力確認用
        //    engine.log(jsonStr);  ログ出力確認用

        requestCount++;
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });
};


/**
 * フォルダ検索成功
 * リクエスト2回目で検索される
 */
test('200 success - 2 requests', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '54321', 'test1002');

    setRequestHandler();

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual(1002);
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/folder/1002');
});


/**
 * フォルダ検索失敗
 * リクエスト数の上限を超えてしまう場合
 */
test('Too many folders and files are in the specified folder', () => {
    const {
        idDef,
        urlDef
    } = prepareConfigs(configs, '54321', 'testnext');

    setRequestHandler();

    expect(execute).toThrow('Too many folders and files are in the specified folder');

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('事前文字列');
    expect(engine.findData(urlDef)).toEqual('事前文字列');
});

]]></test>
</service-task-definition>
