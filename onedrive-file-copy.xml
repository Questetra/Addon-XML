<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>One Drive: Copy File</label>
<label locale="ja">One Drive: ファイルコピー</label>
<last-modified>2020-05-12</last-modified>
<summary>Creates a copy of a file into the specified folder on OneDrive.</summary>
<summary locale="ja">OneDriveのファイルを複製し、指定フォルダに新規保存します。</summary>

<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="sourceFilePath" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source File Path</label>
    <label locale="ja">C2: コピー元ファイルのパス</label>
  </config>
  <config name="folderPath" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder Path to store (If blank, copied in the same folder)</label>
    <label locale="ja">C3: 保存先フォルダのパス (空白の場合元ファイルと同じ場所にコピーされます)</label>
  </config>
  <config name="newFileName" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C4: New File Name (If blank, named automatically)</label>
    <label locale="ja">C4: 新しいファイルのファイル名</label>
  </config>
  <config name="dataForPath" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: String type data item to save new file path</label>
    <label locale="ja">C5: 新しいファイルのパスを保存するデータ項目</label>
  </config>
  <config name="dataForUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C6: String type data item to save new file URL </label>
    <label locale="ja">C6: 新しいファイルの URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

  main();
  function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const oauth2 = configs.get( "OAuth2" );
    const filePathDef = configs.getObject( "sourceFilePath" );
    const folderPathDef = configs.getObject( "folderPath" );
    const savePathDataDef = configs.getObject( "dataForPath" );
    const saveUrlDataDef = configs.getObject( "dataForUrl" );
    const newFileNameDef = configs.getObject( "newFileName" );

    let filePath = configs.get( "sourceFilePath" );
    if (filePathDef !== null){
      filePath = engine.findData(filePathDef);
    }
    if(filePath === "" || filePath === null){
      throw "Source file path is empty.";
    }

    let folderPath = configs.get( "folderPath" );
    if (folderPathDef !== null){
      folderPath = engine.findData(folderPathDef);
    }

    let newFileName = configs.get( "newFileName" );
    if (newFileNameDef !== null){
      newFileName = engine.findData(newFileNameDef);
    }
    if(newFileName === "" || newFileName === null){
      throw "New file name is empty.";
    }

    //// == Calculating / 演算 ==
    const driveUri = "https://graph.microsoft.com/v1.0/me/drive/";
    const token  = httpClient.getOAuth2Token( oauth2 );
    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Request PATH
    const fileObj = getFileObj( filePath, driveUri, token );
    const fileId = fileObj.id;
    const apiUri = driveUri + "items/" + fileId + "/copy";

    // Request BODY (JSON, Form Parameters, etc)
    let requestObj = {};
    let folderObj = null;
    if ( folderPath !== "" && folderPath !== null ){
      const driveId = getDriveId( driveUri, token );
      folderObj = getFolderObj( folderPath, driveUri, token );
      const folderId = folderObj.id;
      requestObj.parentReference = {
        "driveId" : driveId,
        "id" : folderId
      };
    }else{ // parentReferenceを空にすれば同じフォルダにコピーされるが、明示的に同じフォルダを指定
      let i = filePath.lastIndexOf("/");
      if ( i < 0 ){
        folderPath = "";
      }else{
        folderPath = filePath.substr(0, i); // ワークフローデータへの代入でも使用
      }
      const driveId = getDriveId( driveUri, token );
      folderObj = getFolderObj( folderPath, driveUri, token ); // ワークフローデータへの代入でも使用
      const folderId = folderObj.id;
      requestObj.parentReference = {
        "driveId" : driveId,
        "id" : folderId
      };
    }
    if ( newFileName !== "" && newFileName !== null ){
      requestObj.name = newFileName;
    }
    apiRequest = apiRequest.body( JSON.stringify( requestObj ), "application/json" );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.post( apiUri ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---POST request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to copy \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);

    // ワークフローデータへの代入データの作成
    let newFilePath = "";
    let newFileUrl = "";
    if ( folderPath !== "" && folderPath !== null ) {
      newFilePath = folderPath + "/" + newFileName;
    }else{
      newFilePath = newFileName;
    }
    if ( folderObj !== "" && folderObj !== null) {
      newFileUrl = folderObj.webUrl + "/" + encodeURIComponent(newFileName);
    }

    //// == Data Updating / ワークフローデータへの代入 ==
    if ( savePathDataDef !== "" && savePathDataDef !== null ){
      engine.setData( savePathDataDef, newFilePath );
    }
    if ( saveUrlDataDef !== "" && saveUrlDataDef !== null ){
      engine.setData( saveUrlDataDef, newFileUrl );
    }

  }

  /**
    * OneDriveのドライブのメタデータを取得し、ドライブIDを返す
    * @param {String} driveUri  ドライブのURI
    * @param {String} token  OAuth2 トークン
    * @return {String} responseObj.id  ドライブID
    */
  function getDriveId( driveUri, token ) {
    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( driveUri ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get drive \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    return responseObj.id;
  }

  /**
    * OneDriveのファイルのメタデータを取得し、JSONオブジェクトを返す
    * @param {String} filePath  ファイルのパス
    * @param {String} driveUri  ドライブのURI
    * @param {String} token  OAuth2 トークン
    * @return {Object} responseObj  ファイルのメタデータのJSONオブジェクト
    */
  function getFileObj( filePath, driveUri, token ) {
    if (filePath === "" || filePath === null) {
      throw "File path is empty.";
    }

    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( driveUri + "root:/" + filePath ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get file \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    return responseObj;
  }

  /**
    * OneDriveのフォルダのメタデータを取得し、JSONオブジェクトを返す
    * @param {String} folderPath  フォルダのパス
    * @param {String} driveUri  ドライブのURI
    * @param {String} token  OAuth2 トークン
    * @return {Object} responseObj  フォルダのメタデータのJSONオブジェクト
    */
  function getFolderObj( folderPath, driveUri, token ) {
    if (folderPath === "" || folderPath === null) {
      folderPath = "root";
    }else{
      folderPath = "root:/" + folderPath;
    }

    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( driveUri + folderPath ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get folder \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    return responseObj;
  }

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
