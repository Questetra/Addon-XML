<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Microsoft 365 OneDrive for Business: Copy File / Folder</label>
<label locale="ja">Microsoft 365 OneDrive for Business: ファイル / フォルダコピー</label>
<last-modified>2022-05-24</last-modified>
<summary>This item creates a copy of a file/folder into the specified folder on OneDrive.</summary>
<summary locale="ja">この工程は、OneDrive 上のファイル / フォルダを複製し、指定フォルダに新規保存します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/onedrive-file-copy/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/onedrive-file-copy/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_sourceUrl" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source File / Folder URL</label>
    <label locale="ja">C2: コピー元ファイル / フォルダの URL</label>
  </config>
  <config name="conf_destUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder URL to store (The same folder as the Source if blank)</label>
    <label locale="ja">C3: 保存先フォルダの URL (空白の場合、元ファイル / フォルダと同じ場所にコピーされます)</label>
  </config>
  <config name="conf_newName" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C4: New File / Folder Name</label>
    <label locale="ja">C4: 新しいファイル / フォルダの名前</label>
  </config>
  <config name="conf_dataForUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: Data item to save new file / folder URL </label>
    <label locale="ja">C5: 新しいファイル / フォルダの URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
  // OAuth2 config sample at [OAuth 2.0 Setting]
  // - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
  // - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
  // - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
  // - Consumer Key: (Get by Microsoft Azure Active Directory)
  // - Consumer Secret: (Get by Microsoft Azure Active Directory)

  // グローバル変数
  const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

  main();
  function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const oauth2 = configs.get( "conf_OAuth2" );
    const sourceUrl = retrieveSourceUrl();
    const destUrl = retrieveDestUrl();
    const newName = retrieveNewName();
    const saveUrlDataDef = configs.getObject( "conf_dataForUrl" );

    //// == Calculating / 演算 ==
    // checking the HTTP requesting limit
    checkHttpRequestingLimit( destUrl );
    // getting itemInfo for Requesting Copy and Updating Data
    const sourceInfo = getItemInfoByUrl( sourceUrl, oauth2 );
    const destInfo = getItemInfoByUrl( destUrl, oauth2 );
    // sending Copy Request
    const copyResponse = sendCopyRequest( sourceInfo, destInfo, newName, oauth2 );

    // コピー状況を確認し、ドライブアイテム ID を取得
    const newItemId = getNewItemId( copyResponse );

    // ワークフローデータへの代入データの作成
    const newItemUrl = getNewItemUrl( sourceInfo.driveId, destInfo.driveId, newItemId, oauth2 );

    //// == Data Updating / ワークフローデータへの代入 ==
    if ( saveUrlDataDef !== null ){
      engine.setData( saveUrlDataDef, newItemUrl );
    }
  }

  /**
    * configから値を読み出し、必要に応じて値チェックを行った後、値を返す
    * @return {String} configの値
    */
  function retrieveSourceUrl() {
    const sourceUrlDef = configs.getObject( "conf_sourceUrl" );
    let sourceUrl = configs.get( "conf_sourceUrl" );
    if ( sourceUrlDef !== null ) {
      sourceUrl = engine.findData( sourceUrlDef );
    }
    if ( sourceUrl === "" || sourceUrl === null ) {
      throw `Source file / folder URL is empty.`;
    }
    return sourceUrl;
  }

  function retrieveDestUrl() {
    const destUrlDef = configs.getObject( "conf_destUrl" );
    let destUrl = configs.get( "conf_destUrl" );
    if ( destUrlDef !== null ) {
      destUrl = engine.findData( destUrlDef );
    }
    return destUrl;
  }

  function retrieveNewName() {
    const newName = configs.get( "conf_newName" );
    if ( newName === "" || newName === null ) {
      throw `New file / folder name is empty.`;
    }
    return newName;
  }

  /**
    * HTTPリクエストの上限を超えないか確認する
    * @param {String} destUrl  コピー先フォルダのURL
    */
  function checkHttpRequestingLimit( destUrl ) {
    const reqLimit = httpClient.getRequestingLimit();
    if ( destUrl !== "" && destUrl !== null ) {
      if ( reqLimit < 5 ) {
        throw `HTTP requesting limit is fewer than necessary requests.`;
      }
    } else if ( reqLimit < 4 ) {
      throw `HTTP requesting limit is fewer than neceessary requests.`;
    }
  }

  /**
    * ドライブアイテムのURLからアイテム情報（ドライブIDとアイテムID）を取得し、
    * オブジェクトで返す（URLが空の場合はドライブIDもアイテムIDも空文字列）
    * @param {String} driveItemUrl  ドライブアイテム（ファイル、フォルダ）のURL
    * @param {String} oauth2  OAuth2 認証設定
    * @return {Object} itemInfo  ドライブアイテム情報 {driveId, id}
    */
  function getItemInfoByUrl( driveItemUrl, oauth2 ) {
    let itemInfo = {driveId: "", id: ""};
    if ( driveItemUrl !== "" && driveItemUrl !== null ) {
      // 分割代入
      const {
        id: id,
        parentReference: {
          driveId: driveId
        }
      } = getObjBySharingUrl( driveItemUrl, oauth2 );
      itemInfo = {driveId: driveId, id: id};
    }
    return itemInfo;
  }

  /**
    * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
    * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
    * @param {String} sharingUrl  ドライブアイテムの共有URL
    * @param {String} oauth2  OAuth2 認証設定
    * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
    */
  function getObjBySharingUrl( sharingUrl, oauth2 ) {
    if (sharingUrl === "" || sharingUrl === null) {
      throw `Sharing URL is empty.`;
    }

    // encoding sharing URL
    const encodedSharingUrl = encodeSharingUrl(sharingUrl);

    // API Request
    const response = httpClient.begin() // HttpRequestWrapper
      .authSetting( oauth2 ) // Request HEADER (OAuth2 Token)
      .get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (httpStatus >= 300) {
      const accessLog = `---GET request--- ${httpStatus}\n${responseStr}\n`;
      engine.log(accessLog);
      throw `Failed to get drive item. status: ${httpStatus}`;
    }
    return JSON.parse( response.getResponseAsString() );
  }

  /**
    * 共有URLをunpadded base64url 形式にエンコードする
    * @param {String} sharingUrl  共有URL
    * @return {String} encodedSharingUrl  エンコードされた共有URL
    */
  function encodeSharingUrl( sharingUrl ) {
    let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
    while ( encodedSharingUrl.slice(-1) === '=' ) {
      encodedSharingUrl = encodedSharingUrl.slice(0,-1);
    }
    return `u!${encodedSharingUrl}`;
  }

  /**
    * copyリクエストをPOSTし、レスポンスを返す
    * @param {String} sourceInfo  コピー元アイテム情報 {driveId, id}
    * @param {String} destInfo  コピー先フォルダ情報 {driveId, id}
    * @param {String} newName  新しいファイル / フォルダの名前
    * @param {String} oauth2  OAuth2 認証設定
    * @return {HttpResponseWrapper} response  レスポンス
    */
  function sendCopyRequest( sourceInfo, destInfo, newName, oauth2 ) {
    // Request PATH
    const apiUri = `${GRAPH_URI}drives/${sourceInfo.driveId}/items/${sourceInfo.id}/copy`;
    // Request BODY (JSON, Form Parameters, etc)
    const requestBody = generateCopyRequestBody( destInfo, newName );
    // API Request
    const response = httpClient.begin() // HttpRequestWrapper
      .authSetting( oauth2 ) // Request HEADER (OAuth2 Token)
      .body( requestBody, "application/json" )
      .post( apiUri ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode();
    if (httpStatus >= 300) {
      const accessLog = `---POST request--- ${httpStatus}\n${response.getResponseAsString()}\n`;
      engine.log(accessLog);
      throw `Failed to copy. status: ${httpStatus}`;
    }
    return response;
  }

  /**
    * copyリクエストのBODYを生成し、JSON文字列で返す
    * @param {Object} destInfo  コピー先フォルダ情報 {driveId, id}
    * @param {String} newName  新しいファイル / フォルダの名前
    * @return {JSON String} requestBody  リクエストBODY
    */
  function generateCopyRequestBody( destInfo, newName ) {
    let requestBodyObj = {};
    if ( destInfo.driveId !== "" ) {
      requestBodyObj.parentReference = {
        driveId: destInfo.driveId,
        id: destInfo.id
      };
    }
    if ( newName !== "" && newName !== null ) {
      requestBodyObj.name = newName;
    }
    return JSON.stringify( requestBodyObj );
  }

  /**
    * コピーAPIのレスポンスからコピーの完了状態を確認し、新しいドライブアイテムのIDを返す
    * @param {HttpResponseWrapper} copyResponse  コピーAPIのレスポンス
    * @return {String} newItemId  新しいドライブアイテムのID
    */
  function getNewItemId( copyResponse ) {
    const location = copyResponse.getHeaderValues("Location").get(0);
    const monitorResponseObj = getMonitorResponseObj( location );
    const copyStatus = monitorResponseObj.status;
    let newItemId = "";
    if ( copyStatus === "notStarted" || copyStatus === "inProgress" ) {
      // 未開始または進行中の場合、newItemId は空文字列のまま
      engine.log(`Copy status: ${copyStatus}\nTo retrieve copy status, GET ${location}\n`);
    } else if ( copyStatus === "completed" ) {
      // 完了の場合、ドライブアイテムIDを取得
      engine.log(`Copy status: ${copyStatus}\n`);
      newItemId = monitorResponseObj.resourceId;
    } else {
      // 不明なステータスの場合はエラー
      engine.log(`error: ${JSON.stringify( monitorResponseObj.error )}\n`);
      throw `Copy is not in progress nor completed. status: ${copyStatus}`;
    }
    return newItemId;
  }

  /**
    * copyの完了状態レポートを取得し、JSONオブジェクトを返す
    * @param {String} location  copy応答のLocationヘッダの値（コピー操作の現在の状況を返すサービスの URL）
    * @return {Object} responseObj  copy完了状態レポートのJSONオブジェクト
    */
  function getMonitorResponseObj( location ) {
    // API Request
    const response = httpClient.begin() // HttpRequestWrapper
      .get( location ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (httpStatus >= 300) {
      const accessLog = `---GET request--- ${httpStatus}\n${responseStr}\n`;
      engine.log(accessLog);
      throw `Failed to get monitor. status: ${httpStatus}`;
    }
    return JSON.parse( responseStr );
  }

  /**
    * 新しいファイル / フォルダのURLを返す
    * @param {String} driveIdOfSource  コピー元アイテムのドライブのID（フォルダのドライブIDが空文字列の場合に使用）
    * @param {String} driveIdOfDest  コピー先フォルダのドライブID
    * @param {String} newItemId  新しいファイル/ フォルダのID
    * @param {String} oauth2  OAuth2 認証設定
    * @return {String} newItemUrl  新しいファイル / フォルダのURL
    */
  function getNewItemUrl( driveIdOfSource, driveIdOfDest, newItemId, oauth2 ) {
    let newItemUrl = "";
    // ドライブIDを決める（コピー先フォルダのドライブIDが空文字列でなければフォルダのドライブID）
    let driveId = driveIdOfSource;
    if ( driveIdOfDest !== "" ) {
      driveId = driveIdOfDest;
    }
    if ( newItemId !== "" ) {
      newItemUrl = getItemUrlById( driveId, newItemId, oauth2 );
    }
    return newItemUrl;
  }

  /**
    * OneDriveのドライブアイテムのメタデータを取得し、URLを返す
    * @param {String} driveId  ドライブID
    * @param {String} itemId  アイテムID
    * @param {String} oauth2  OAuth2 認証設定
    * @return {String} webUrl  ドライブアイテムのURL
    */
  function getItemUrlById( driveId, itemId, oauth2 ) {
    if (itemId === "" || itemId === null) {
      throw `DriveItem ID is empty.`;
    }
    if (driveId === "" || driveId === null) {
      throw `Drive ID is empty.`;
    }

    // API Request
    const response = httpClient.begin() // HttpRequestWrapper
      .authSetting( oauth2 ) // Request HEADER (OAuth2 Token)
      .get( `${GRAPH_URI}drives/${driveId}/items/${itemId}` ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (httpStatus >= 300) {
      const accessLog = `---GET request--- ${httpStatus}\n${responseStr}\n`;
      engine.log(accessLog);
      throw `Failed to get file. status: ${httpStatus}`;
    }
    const responseObj = JSON.parse( responseStr );
    return responseObj.webUrl;
  }

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

<test><![CDATA[

/**
 * 設定の準備
 * @param sourceUrl
 * @param destUrl
 * @param newName
 * @return dataForUrlDef
 */
const prepareConfigs = (sourceUrl, destUrl, newName) => {
  configs.put('conf_OAuth2', 'Microsoft');
  configs.put('conf_newName', newName);
  
  // コピー元ファイル / フォルダの URL を保存する文字型データ項目（単数行）を準備
  const sourceUrlDef = engine.createDataDefinition('コピー元ファイル / フォルダの URL', 1, 'q_source_url', 'STRING_TEXTFIELD');
  engine.setData(sourceUrlDef, sourceUrl);
  configs.putObject('conf_sourceUrl', sourceUrlDef);
  
  // 保存先フォルダの URL  を保存する文字型データ項目（単数行）を準備
  const destUrlDef = engine.createDataDefinition('保存先フォルダの URL', 2, 'q_dest_url', 'STRING_TEXTFIELD');
  engine.setData(destUrlDef, destUrl);
  configs.putObject('conf_destUrl', destUrlDef);
  
  // 新しいファイル / フォルダの URL を保存する文字型データ項目（単数行）を準備
  const dataForUrlDef = engine.createDataDefinition('新しいファイル / フォルダの URL', 3, 'q_data_for_url', 'STRING_TEXTFIELD');
  engine.setData(dataForUrlDef, '事前文字列');
  configs.putObject('conf_dataForUrl', dataForUrlDef);
  
  return dataForUrlDef;
};

/**
 * コピー元ファイル / フォルダの URLがnullでエラー
 */
test('Source file / folder URL is null', () => {
  prepareConfigs(
    null, 
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder1',
    'file1'
  );
  expect(execute).toThrow('Source file / folder URL is empty.');
});

/**
 * 新しいファイル / フォルダの名前が空でエラー
 */
test('New File / Folder Name is blank', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test2.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder2',
    ''
  );
  expect(execute).toThrow('New file / folder name is empty.');
});

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param deleteUrl
 */
const assertGetRequest = ({url, method}, sharingUrl) => {
  const encodedUrl = encodeSharingUrl(sharingUrl);
  expect(url).toEqual(`${GRAPH_URI}shares/${encodedUrl}/driveItem`);
  expect(method).toEqual('GET');
};

/**
 * GET リクエストでエラー - コピー元ファイル / フォルダの URL
 */
test('GET Failed - Source Url', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test3.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder3',
    'copy3.txt'
  );
  
  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test3.txt');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get drive item. status: 400');
});

const SAMPLE_SRC_GET = {
  "id":"SrcId001",
  "parentReference":{
    "driveId":"SrcDrive001"
  }
};

/**
 * GET リクエストでエラー - 保存先フォルダの URL
 */
test('GET Failed - Folder Url to save', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test4.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder4',
    'copy3.txt'
  );
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test4.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder4');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get drive item. status: 400');
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param srcDriveId
 * @param srcId
 * @param destDriveId
 * @param destId
 * @param newName
 */
const assertPostRequest = ({url, method, contentType, body}, srcDriveId, srcId, destDriveId, destId, newName) => {
  expect(url).toEqual(`${GRAPH_URI}drives/${srcDriveId}/items/${srcId}/copy`);
  expect(method).toEqual('POST');
  expect(contentType).toEqual("application/json; charset=UTF-8");
  const bodyObj = JSON.parse(body);
  if (destDriveId !==  null){ 
    expect(bodyObj.parentReference.driveId).toEqual(destDriveId);
  }
  if (destId !==  null){ 
    expect(bodyObj.parentReference.id).toEqual(destId);
  }
  expect(bodyObj.name).toEqual(newName);
};

const SAMPLE_DEST_GET = {
  "id":"DestId001",
  "parentReference":{
    "driveId":"DestDrive001"
  }
};

/**
 * POST リクエストでエラー
 */
test('POST Failed', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test5.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder5',
    'copy5.txt'
  );
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test5.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    if (reqCount === 1) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder5');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_DEST_GET));
    }
    assertPostRequest(request, 'SrcDrive001', 'SrcId001', 'DestDrive001', 'DestId001', 'copy5.txt');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to copy. status: 400');
});

/**
 * GET リクエストでエラー - コピー状況
 */
test('GET Failed - Copy status', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test6.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder6',
    'copy6.txt'
  );
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test6.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    if (reqCount === 1) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder6');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_DEST_GET));
    }
    if (reqCount === 2) {
      assertPostRequest(request, 'SrcDrive001', 'SrcId001', 'DestDrive001', 'DestId001', 'copy6.txt');
      reqCount++;
      const response = httpClient.createHttpResponse(202, 'application/json', '{}');
      response.addHeader('Location', 'https://test-my.sharepoint.com/personal/aaa/_api/v2.0/drives/DestDrive001/items/resourceId001');
      return response;
    }
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get monitor. status: 400');
});

/**
 * コピー状況が不明
 */
test('Copy status is unknown', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test7.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder7',
    'copy7.txt'
  );
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test7.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    if (reqCount === 1) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder7');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_DEST_GET));
    }
    if (reqCount === 2) {
      assertPostRequest(request, 'SrcDrive001', 'SrcId001', 'DestDrive001', 'DestId001', 'copy7.txt');
      reqCount++;
      const response = httpClient.createHttpResponse(202, 'application/json', '{}');
      response.addHeader('Location', 'https://test-my.sharepoint.com/personal/aaa/_api/v2.0/drives/DestDrive001/items/resourceId001');
      return response;
    }
    reqCount++;
    const responseObj = {"status":"unknown"};
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });
  
  expect(execute).toThrow('Copy is not in progress nor completed. status: unknown');
});

/**
 * GET リクエストのテスト - 新しいファイル / フォルダのメタデータ
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param driveId
 * @param itemId
 */
const assertGetNewItemRequest = ({url, method}, driveId, itemId) => {
  expect(url).toEqual(`${GRAPH_URI}drives/${driveId}/items/${itemId}`);
  expect(method).toEqual('GET');
};

const SAMPLE_STATUS_GET = {
  "resourceId":"resourceId001",
  "status":"completed"
};

/**
 * GET リクエストでエラー - 新しいファイル / フォルダのURL
 */
test('GET Failed - New file / folder URL', () => {
  prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test8.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder8',
    'copy8.txt'
  );
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test8.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    if (reqCount === 1) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder8');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_DEST_GET));
    }
    if (reqCount === 2) {
      assertPostRequest(request, 'SrcDrive001', 'SrcId001', 'DestDrive001', 'DestId001', 'copy8.txt');
      reqCount++;
      const response = httpClient.createHttpResponse(202, 'application/json', '{}');
      response.addHeader('Location', 'https://test-my.sharepoint.com/personal/aaa/_api/v2.0/drives/DestDrive001/items/resourceId001');
      return response;
    }
    if (reqCount === 3) {
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_STATUS_GET));
    }
    assertGetNewItemRequest(request, 'DestDrive001', 'resourceId001');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get file. status: 400');
});

/**
 * コピー成功 - 保存先フォルダの URL 指定
 */
test('201 Success - Specify Folder URL to store', () => {
  const dataForUrlDef = prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/test9.txt',
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder9',
    'copy9.txt'
  );
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/test9.txt');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_SRC_GET));
    }
    if (reqCount === 1) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder9');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_DEST_GET));
    }
    if (reqCount === 2) {
      assertPostRequest(request, 'SrcDrive001', 'SrcId001', 'DestDrive001', 'DestId001', 'copy9.txt');
      reqCount++;
      const response = httpClient.createHttpResponse(202, 'application/json', '{}');
      response.addHeader('Location', 'https://test-my.sharepoint.com/personal/aaa/_api/v2.0/drives/DestDrive001/items/resourceId001');
      return response;
    }
    if (reqCount === 3) {
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_STATUS_GET));
    }
    assertGetNewItemRequest(request, 'DestDrive001', 'resourceId001');
    const responseObj = {"webUrl": "https://test-my.sharepoint.com/personal/aaa/Documents/folder9/test9.txt"};
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
//  expect(engine.findData(dataForUrlDef)).toEqual('https://test-my.sharepoint.com/personal/aaa/Documents/folder9/test9.txt');
});

/**
 * コピー成功 - 保存先フォルダの URL がnull
 */
test('201 Success - Folder URL to store is null', () => {
  const dataForUrlDef = prepareConfigs(
    'https://test-my.sharepoint.com/personal/aaa/Documents/folder10/test10.txt',
    null,
    'copy10.txt'
  );
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/folder10/test10.txt');
      reqCount++;
      const responseSrcGetObj = {
        "id":"SrcId002",
        "parentReference":{
          "driveId":"SrcDrive002"
        }
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseSrcGetObj));
    }
    if (reqCount === 1) {
      assertPostRequest(request, 'SrcDrive002', 'SrcId002', null, null, 'copy10.txt');
      reqCount++;
      const response = httpClient.createHttpResponse(202, 'application/json', '{}');
      response.addHeader('Location', 'https://test-my.sharepoint.com/personal/aaa/_api/v2.0/drives/SrcDrive001/items/resourceId002');
      return response;
    }
    if (reqCount === 2) {
      reqCount++;
      const responseStatusGetObj = {
        "resourceId":"resourceId002",
        "status":"completed"
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseStatusGetObj));
    }
    const responseObj = {"webUrl": "https://test-my.sharepoint.com/personal/aaa/Documents/folder10/test10.txt"};
    assertGetNewItemRequest(request, 'SrcDrive002', 'resourceId002');
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(dataForUrlDef)).toEqual('https://test-my.sharepoint.com/personal/aaa/Documents/folder10/test10.txt');
});

]]></test>

</service-task-definition>
