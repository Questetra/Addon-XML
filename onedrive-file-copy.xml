<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>One Drive: Copy File</label>
<label locale="ja">One Drive: ファイルコピー</label>
<last-modified>2020-05-26</last-modified>
<summary>Creates a copy of a file into the specified folder on OneDrive.</summary>
<summary locale="ja">OneDriveのファイルを複製し、指定フォルダに新規保存します。</summary>

<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="sourceFileUrl" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source File URL</label>
    <label locale="ja">C2: コピー元ファイルの URL</label>
  </config>
  <config name="folderUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder URL to store (If blank, the same folder)</label>
    <label locale="ja">C3: 保存先フォルダの URL (空白の場合元ファイルと同じ場所にコピーされます)</label>
  </config>
  <config name="newFileName" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C4: New File Name</label>
    <label locale="ja">C4: 新しいファイルのファイル名</label>
  </config>
  <config name="dataForUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: String type data item to save new file URL </label>
    <label locale="ja">C5: 新しいファイルの URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

  main();
  function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const oauth2 = configs.get( "OAuth2" );
    const fileUrlDef = configs.getObject( "sourceFileUrl" );
    const folderUrlDef = configs.getObject( "folderUrl" );
    const newFileNameDef = configs.getObject( "newFileName" );
    const saveUrlDataDef = configs.getObject( "dataForUrl" );

    let fileUrl = configs.get( "sourceFileUrl" );
    if (fileUrlDef !== null){
      fileUrl = engine.findData(fileUrlDef);
    }
    if(fileUrl === "" || fileUrl === null){
      throw "Source file URL is empty.";
    }

    let folderUrl = configs.get( "folderUrl" );
    if (folderUrlDef !== null){
      folderUrl = engine.findData(folderUrlDef);
    }

    let newFileName = configs.get( "newFileName" );
    if (newFileNameDef !== null){
      newFileName = engine.findData(newFileNameDef);
    }
    if(newFileName === "" || newFileName === null){
      throw "New file name is empty.";
    }

    //// == Calculating / 演算 ==
    // checking the HTTP requesting limit
    const reqLimit = httpClient.getRequestingLimit();
    if ( reqLimit < 4 ) {
      throw "HTTP requesting limit is fewer than required requests.";
    }

    // preparing for API Request
    const graphUri = "https://graph.microsoft.com/v1.0/"
    const token  = httpClient.getOAuth2Token( oauth2 );
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Request PATH
    const sourceFileObj = getObjBySharingUrl( fileUrl, graphUri, token);
    const sourceFileId = sourceFileObj.id;
    const sourceDriveId = sourceFileObj.parentReference.driveId;
    const apiUri = graphUri
      + "drives/" + sourceDriveId + "/items/" + sourceFileId + "/copy";

    // Request BODY (JSON, Form Parameters, etc)
    let requestObj = {};
    let folderObj = null;
    let destDriveId = sourceDriveId;
    if ( folderUrl !== "" && folderUrl !== null ) {
      // checking the HTTP requesting limit
      if ( reqLimit < 5 ) {
        throw "HTTP requesting limit is fewer than required requests.";
      }
      folderObj = getObjBySharingUrl( folderUrl, graphUri, token );
      destDriveId = folderObj.parentReference.driveId;
      const folderId = folderObj.id;
      requestObj.parentReference = {
        "driveId" : destDriveId,
        "id" : folderId
      };
    }

    if ( newFileName !== "" && newFileName !== null ) {
      requestObj.name = newFileName;
    }
    apiRequest = apiRequest.body( JSON.stringify( requestObj ), "application/json" );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.post( apiUri ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---POST request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to copy \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);

    // コピー状況を確認し、完了であればファイルIDを取得
    const location = response.getHeaderValues("Location").get(0);
    let monitorResponseObj = getMonitorResponseObj( location );
    let copyStatus = monitorResponseObj.status;
    let newFileId = "";
    if ( copyStatus == "inProgress" ) { // 進行中の場合、C5を空文字列で上書きして正常終了
      engine.log("Copy status:" + copyStatus + "\n" + "To retrieve copy status, GET " + location + "\n");
      if ( saveUrlDataDef !== "" && saveUrlDataDef !== null ){
        engine.setData( saveUrlDataDef, "" );
      }
      return;
    } else if ( copyStatus == "completed" ) { // 完了の場合、ファイルIDを取得
      engine.log("Copy status:" + copyStatus + "\n");
      newFileId = monitorResponseObj.resourceId;
    } else { // 不明なステータスの場合はエラー
      const error = "Copy is not in progress nor completed \n status:" + copyStatus;
      throw error;
    }

    // ワークフローデータへの代入データの作成
    const newFileUrl = getFileUrlById( destDriveId, newFileId, graphUri, token );

    //// == Data Updating / ワークフローデータへの代入 ==
    if ( saveUrlDataDef !== "" && saveUrlDataDef !== null ){
      engine.setData( saveUrlDataDef, newFileUrl );
    }
  }

  /**
    * OneDriveのファイルのメタデータを取得し、ファイルのURLを返す
    * @param {String} driveId  ドライブのID
    * @param {String} fileId  ファイルのID
    * @param {String} graphUri  Microsoft GraphのURI
    * @param {String} token  OAuth2 トークン
    * @return {String} fileUrl  ファイルのURL
    */
  function getFileUrlById( driveId, fileId, graphUri, token ) {
    if (fileId === "" || fileId === null) {
      throw "File ID is empty.";
    }
    if (driveId === "" || driveId === null) {
      throw "Drive ID is empty.";
    }

    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( graphUri + "drives/" + driveId + "/items/" + fileId ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get file \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    const fileUrl = responseObj.webUrl;
    return fileUrl;
  }

  /**
    * copyの完了状態レポートを取得し、JSONオブジェクトを返す
    * @param {String} location  copy応答のLocationヘッダの値（コピー操作の現在の状況を返すサービスの URL）
    * @param {String} token  OAuth2 トークン
    * @return {Object} responseObj  copy完了状態レポートのJSONオブジェクト
    */
  function getMonitorResponseObj( location ) {
    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( location ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get monitor \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    return responseObj;
  }

  /**
    * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
    * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
    * @param {String} sharingUrl  ファイルの共有URL
    * @param {String} graphUri  Microsoft GraphのURI
    * @param {String} token  OAuth2 トークン
    * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
    */
  function getObjBySharingUrl( sharingUrl, graphUri, token ) {
    if (sharingUrl === "" || sharingUrl === null) {
      throw "Sharing URL is empty.";
    }

    // encoding sharing URL
    const encodedSharingUrl = encodeSharingUrl(sharingUrl);

    // preparing for API Request
    let apiRequest = httpClient.begin(); // HttpRequestWrapper
    // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
    // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
    apiRequest = apiRequest.bearer( token );
    // Access to the API (POST, GET, PUT, etc)
    let response = apiRequest.get( graphUri + "shares/" + encodedSharingUrl + "/driveItem" ); // HttpResponseWrapper
    const httpStatus = response.getStatusCode() + "";
    let accessLog = "---GET request--- " + httpStatus + "\n";
    accessLog += response.getResponseAsString() + "\n";
    if (httpStatus >= 300) {
      const error = "Failed to get file \n status:" + httpStatus + "\n" + response.getResponseAsString();
      throw error;
    }
    engine.log(accessLog);
    const responseObj = JSON.parse( response.getResponseAsString() );
    return responseObj;
  }

  /**
    * 共有URLをunpadded base64url 形式にエンコードする
    * @param {String} sharingUrl  共有URL
    * @return {String} encodedSharingUrl  エンコードされた共有URL
    */
  function encodeSharingUrl( sharingUrl ) {
    let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
    while ( encodedSharingUrl.slice(-1) === '=' ) {
      encodedSharingUrl = encodedSharingUrl.slice(0,-1);
    }
    encodedSharingUrl = "u!" + encodedSharingUrl;
    return encodedSharingUrl;
  }


]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
