<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-09-25</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <label>Slack: Get User ID</label>
    <label locale="ja">Slack: ユーザ ID 取得</label>
    <summary>This item gets a user ID on Slack.</summary>
    <summary locale="ja">この工程は、Slack のユーザ ID を取得します。</summary>
    <configs>
        <config name="conf_OAuth2" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://slack.com/oauth2/chat:write,users:read,users:read.email">
            <label locale="ja">C1-a: HTTP 認証設定 (Questetra が登録済みの Bot を使用する場合) </label>
        </config>
        <config name="conf_Token" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1-b: Authorization Setting ( Using a Bot registered yourself )</label>
            <label locale="ja">C1-b: HTTP 認証設定 (独自に登録した Bot を使用する場合)</label>
        </config>
        <config name="conf_Quser" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|QUSER" editable="true">
            <label>C2: Questetra User or Email Address</label>
            <label locale="ja">C2: Questetra ユーザ もしくは メールアドレス</label>
        </config>
        <config name="conf_SlackUserId" required="true" form-type="SELECT" select-data-type="STRING">
            <label>C3: Data item to save Slack User ID</label>
            <label locale="ja">C3: Slack ユーザ ID を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-slack-userid-get/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-slack-userid-get/</help-page-url>
    <script><![CDATA[
main();

function main() {

    const auth = decideAuth();

    const mailAddress = getmailAddress();
    const slackUserId = usersLookupByEmail(auth, mailAddress).id;
	
    const resultDataDefNum = configs.getObject("conf_SlackUserId");

    engine.setData(resultDataDefNum, slackUserId);
}


/** 
  * config から認証設定値を読み出す
  * 両方とも設定されていれば、auth-type="OAUTH2" の方を優先
  * 両方とも設定されていなければ、スクリプトエラー
  * @return auth
  */
function decideAuth() {
    const auth_OAuth2 = configs.getObject("conf_OAuth2");
    const auth_Token = configs.getObject("conf_Token")

    if (auth_OAuth2 !== null ){
        return auth_OAuth2;
    } else if (auth_Token !== null){
        return auth_Token;
    } else {
        throw `No Authorization Setting.`;
    }
}


/**
 * ユーザのメールアドレス（Slack アカウント）をconfigから読み出す
 * @return {String} mailAddress  mail address
 */
function getmailAddress(){
    let mailAddress = "";
    const mailAddressDef = configs.getObject("conf_Quser");

    if (mailAddressDef === null) { //固定値
        mailAddress = configs.get("conf_Quser");
    } else {
        const user = engine.findData(mailAddressDef);
        if (mailAddressDef.matchDataType("QUSER")) { //ユーザ型
            if (user !== null) {
                mailAddress = user.getEmail();
            }
        } else { //文字型
            mailAddress = user;
        }
    }
    if (mailAddress !== "" && mailAddress !== null) {
        engine.log("email: " + mailAddress);        
    } else {
        throw `No Questetra User or Email address.`;
    }
    return mailAddress;
}


/**
 * メールアドレスから Slack User オブジェクト を取得する
 * users.lookupByEmail https://api.slack.com/methods/users.lookupByEmail
 * @@param {AuthSettingWrapper}
 * @param {String} email
 * @return {String} responseBody  User オブジェクト
 */
function usersLookupByEmail(auth, email) {

    const url = 'https://slack.com/api/users.lookupByEmail';
    const response = httpClient.begin()
        .authSetting(auth)
        .queryParam("email", email)
        .get(url);
    const status = response.getStatusCode();
    const responseJson = response.getResponseAsString();

    let responseBody;
    try {
        responseBody = JSON.parse(responseJson);
    } catch (e) {
        engine.log("failed to parse as json");
        engine.log(`status: ${status}`);
        engine.log(responseJson);
        throw `Failed to users lookup By email. status: ${status}`;
    }

    if (responseBody.ok !== true) {
        const error = `Failed to get`;
        engine.log(`status: ${status}`);
        engine.log(responseJson);
        throw error;
    }
    return responseBody.user;
}
]]></script>
    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[


/**
 * 設定の準備
 * @param configs
 * @param user
 */
const prepareConfigs = (configs, user, oauth2, token) => {
    if (oauth2){
        const auth_OAuth2 = httpClient.createAuthSettingOAuth2(
            'Slack',
            'https://slack.com/oauth/v2/authorize',
            'https://slack.com/api/oauth.v2.access',
            'chat:write,users:read,users:read.email',
            'consumer_key',
            'consumer_secret',
            'access_token'
        );
        configs.putObject('conf_OAuth2', auth_OAuth2);
    } else {
        configs.put('conf_OAuth2', '');
    }

    if (token){
        const auth_Token = httpClient.createAuthSettingToken(
            'Slack Bot Token',
            'slack-bot-token'
        );
        configs.putObject('conf_Token', auth_Token);
    } else {
        configs.put('conf_Token', '');
    }


    // 文字型データ項目を準備して、config に指定
    const userDef = engine.createDataDefinition('ユーザ', 2, 'q_user', 'STRING_TEXTFIELD');
    configs.putObject('conf_Quser', userDef);

    engine.setData(userDef, user);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ユーザID', 3, 'q_ids', 'STRING_TEXTFIELD');
    configs.putObject('conf_SlackUserId', idDef);
    // 文字型データ項目の値（ユーザ ID を保存するデータ項目）を指定
    engine.setData(idDef, '事前文字列');

    return idDef;

};


/**
 * POSTリクエストのテスト（Slack ID 取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param email
 */
const assertGetRequest = ({ url, method }, email) => {

    let newEmail = email.replace("@", "%40");

    expect(url).toEqual(`https://slack.com/api/users.lookupByEmail?email=${newEmail}`);
    expect(method).toEqual('GET');
};


/**
 * 認証設定が両方されていない場合
 */
test('No Authorization Setting', () => {
    prepareConfigs(configs, null, false, false);
    expect(execute).toThrow('No Authorization Setting.');
});



/**
 * ユーザ ID 取得失敗の場合
 * ユーザは文字型データ項目を選択していて空
 */
test('No Questetra User or Email address.- User is a string data item', () => {
    prepareConfigs(configs, null, true, false);
    expect(execute).toThrow('No Questetra User or Email address.');
});


/**
 * ユーザ ID 取得失敗の場合
 * ユーザはユーザ型データ項目で空
 */
test('No Questetra User or Email address.- User is a user-type data items', () => {
    prepareConfigs(configs, null, false, true);

    // ユーザ型データ項目を準備して、config に指定
    const userDef = engine.createDataDefinition('ユーザ', 5, 'q_user', 'QUSER');
    //conf_Quser の設定値を上書き
    configs.putObject('conf_Quser', userDef);
    engine.setData(userDef, null);
    expect(execute).toThrow('No Questetra User or Email address.');
});


/**
 * GET リクエストのレスポンスを準備（Slack ID 取得）
 * @param channel
 * @param text
 * @return responseObj
 */
const prepareGetIdResponse = (id) => {
    return {
        "ok": true,
        "user": {
            "id": `${id}`
        }
    };
};


/**
 * GET API リクエストでエラーになる場合（Slack ID 取得）
 */
test('GET Failed', () => {
    prepareConfigs(configs, 'SouthPole@questetra.com', true , true);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'SouthPole@questetra.com');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    expect(execute).toThrow(`Failed to get`);
});


/**
 * ユーザ ID 取得成功の場合
 * ユーザは文字型データ項目
 * C1-a: HTTP 認証設定 (Questetra が登録済みの Bot を使用する場合) 設定
 * C1-b: HTTP 認証設定 (独自に登録した Bot を使用する場合) 設定
 */
test('Success - User is a string data item', () => {
    const idDef = prepareConfigs(configs, 'SouthPole@questetra.com', true , true);
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'SouthPole@questetra.com');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetIdResponse('56789FGHIJ')));
    });

    // <script> のスクリプトを実行
    execute();
    expect(engine.findData(idDef)).toEqual('56789FGHIJ');
});


/**
 * ユーザ ID 取得成功の場合
 * ユーザは固定値
 * C1-a: HTTP 認証設定 (Questetra が登録済みの Bot を使用する場合) 設定
 * C1-b: HTTP 認証設定 (独自に登録した Bot を使用する場合) 未設定
 */
test('Success - User is a fixed value', () => {
    const idDef = prepareConfigs(configs, '', true , false);
    //conf_Quser の設定値を固定値で上書き
    configs.put('conf_Quser', 'SouthPole@questetra.com');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'SouthPole@questetra.com');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetIdResponse('43210ABCDE')));
    });

    // <script> のスクリプトを実行
    execute();
    expect(engine.findData(idDef)).toEqual('43210ABCDE');
});


/**
 * ユーザ ID 取得成功の場合
 * ユーザはユーザ型データ項目を選択
 * C1-a: HTTP 認証設定 (Questetra が登録済みの Bot を使用する場合) 未設定
 * C1-b: HTTP 認証設定 (独自に登録した Bot を使用する場合) 設定
 */
test('Success - User is a user-type data items', () => {
    const idDef = prepareConfigs(configs, 'SouthPole@questetra.com', false , true);

    // ユーザ型データ項目を準備して、config に指定
    const userDef = engine.createDataDefinition('ユーザ', 4, 'q_user', 'QUSER');
    //conf_Quser の設定値を上書き
    configs.putObject('conf_Quser', userDef);

    const quser = engine.createQuser(5, 'サウスポール', 'SouthPole@questetra.com');

    // ユーザ型データ項目の値を指定
    engine.setData(userDef, quser);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'SouthPole@questetra.com');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareGetIdResponse('AAAAA00000')));

    });

    // <script> のスクリプトを実行
    execute();
    expect(engine.findData(idDef)).toEqual('AAAAA00000');
});

]]></test>
</service-task-definition>
