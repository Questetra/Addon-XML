<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box: Move File</label>
<label locale="ja">Box: ファイル移動</label>
<last-modified>2022-11-25</last-modified>
<summary>This item moves the File to the specified Folder. File ID and URL won't change.</summary>
<summary locale="ja">この工程は、既存ファイルを指定フォルダに移動します。ファイルの ID・URL は変化しません。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-move/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-move/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C2: File ID to move</label>
    <label locale="ja">C2: 移動させるファイルの ID</label>
  </config>
  <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder ID to move to</label>
    <label locale="ja">C3: 移動先フォルダの ID</label>
  </config>
</configs>


<script><![CDATA[
main();
function main(){
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.get( "conf_OAuth2" ) ;
  const fileId = decideFileId();

  if(fileId === "" || fileId === null){
    throw "No File ID";
  }

  const folderId = decideFolderId();

  if(folderId === "" || folderId === null){
    //空の場合はエラーとする when folder id isn't set, throw error
    throw "No Folder ID";
  }
  moveFile(oauth2, folderId, fileId);
}

/**
  * ファイルのIDをconfigから読み出して出力する。
  * @return {String}  ファイルの ID
  */
function decideFileId(){
  const fileIdDef = configs.getObject("conf_FileId");
  const fileId = engine.findData(fileIdDef);
  return fileId;
}

/**
  * フォルダのIDをconfigから読み出して出力する。
  * @return {String}  フォルダの ID
  */
function decideFolderId(){
  let folderId = "";
  const folderIdDef = configs.getObject("conf_FolderId");
  if(folderIdDef === null){
    folderId = configs.get( "conf_FolderId");
  }else{
    folderId = engine.findData(folderIdDef);
  }
  return folderId;
}

/**
  * Box 上のファイルを指定フォルダに移動する。
  */
function moveFile(oauth2, folderId, fileId) {
  const jsonReq = {};
  jsonReq["parent"] = {"id": folderId };
  const url = `https://api.box.com/2.0/files/${fileId}`;

  const response = httpClient.begin()
    .authSetting(oauth2)
    // fields には id を指定（レスポンスを基本レプリゼンテーションに縮小するため）
    .queryParam("fields", "id")
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .put(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status >= 300) {
    engine.log(responseTxt);
    throw `Failed to move. status: ${status}`;
  }
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>
    
<test><![CDATA[

/**
 * 設定の準備
 * conf_FileId  conf_FolderId は、文字型データ項目で指定
 * @param configs
 * @param fileId
 * @param folderId
 * @return {
 *     fileIdDef: {Object},
 *     folderIdDef: {Object}
 * }
 */
const prepareConfigs = (configs, fileId, folderId) => {
    configs.put('conf_OAuth2', 'Box');

    // 文字型データ項目を準備して、config に指定
    const fileIdDef = engine.createDataDefinition('移動させるファイルID', 1, 'q_sourceFileId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FileId', fileIdDef);
    // 文字型データ項目の値（移動させるファイルの ID）を指定
    engine.setData(fileIdDef, fileId);

    // 文字型データ項目を準備して、config に指定
    const folderIdDef = engine.createDataDefinition('移動先フォルダID', 2, 'q_folderId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FolderId', folderIdDef);
    // 文字型データ項目の値（移動先フォルダの ID）を指定
    engine.setData(folderIdDef, folderId);

    return {
        fileIdDef,
        folderIdDef
    };
};


/**
 * リクエストのテスト
 * ファイル移動
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param folderId
 */
const assertRequest = ({url, method, contentType, body}, fileId, folderId) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}?fields=id`);
    expect(method).toEqual('PUT');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.parent.id).toEqual(folderId);
};


/**
 * conf_FileId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('No File ID - FileId specified by String Data', () => {
    prepareConfigs(configs, null, '12345');
    expect(execute).toThrow('No File ID');
});


/**
 * conf_FolderId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('No Folder ID - FolderId specified by String Data', () => {
    prepareConfigs(configs, '12345678', null);
    expect(execute).toThrow('No Folder ID');
});


/**
 * conf_FolderId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('No Folder ID - FolderId specified with fixed value ' , () => {
    prepareConfigs(configs, '87654321', '54321');
    //conf_FolderId の設定値を固定値（空）で上書き
    configs.put('conf_FolderId', '');
    expect(execute).toThrow('No Folder ID');
});



/**
 * ファイル移動失敗
 * Box への API リクエストでエラー
 */
test('Failed to move. - PUT Failed ', () => {
    prepareConfigs(configs, '87654321', '54321');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '87654321', '54321');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to move. status: 400');
});


/**
 * ファイル移動成功　
 */
test('200 Success', () => {
    const {
        fileIdDef,
        folderIdDef
    } = prepareConfigs(configs, '12345678', '12345');
	
    httpClient.setRequestHandler((request) => {        
        assertRequest(request, '12345678', '12345');
        //レスポンスは、簡易版レプリゼンテーション
        const responseObj = {
            "type": "file",
            "id": "12345678",
            "etag": "0"
        };        
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual('12345678');
    expect(engine.findData(folderIdDef)).toEqual('12345');
});

]]></test>

</service-task-definition>
