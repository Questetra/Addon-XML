<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2019-01-18</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Google Calendar: Insert Event</label>
<label locale="ja">Google カレンダー: 予定追加</label>
<summary>Insert an event to Google Calendar.</summary>
<summary locale="ja">Google カレンダーに予定を追加します。</summary>
<help-page-url>https://support.questetra.com/addons/services/googlecalendar-insertevent/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/googlecalendar-insertevent/</help-page-url>

<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1: User Who Connects with Google Calendar</label>
    <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
  </config>
  <config name="conf_DataIdB" form-type="TEXTFIELD">
    <label>C2: Calendar ID(When empty,inserted to the primary calendar)</label>
    <label locale="ja">C2: Calendar ID(空白の場合プライマリのカレンダーに追加されます)</label>
  </config>
  <config name="conf_DataIdC" required="true" el-enabled="true" form-type="TEXTFIELD">
    <label>I1: Event Title</label>
    <label locale="ja">I1: 予定タイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="DATETIME">
    <label>I2: Select DATETIME DATA for Event Start</label>
    <label locale="ja">I2: 予定開始時刻が格納されている日時型データを選択してください</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="SELECT"  select-data-type="DATETIME">
    <label>I3: Select DATETIME DATA for Event End (Not-selected +1:00)</label>
    <label locale="ja">I3: 予定終了時刻が格納されている日時型データを選択してください（未設定の場合、+1:00）</label>
  </config>
  <config name="conf_DataIdF" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>I4: Location</label>
    <label locale="ja">I4: 場所情報</label>
  </config>
  <config name="conf_DataIdG" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>I5: Description</label>
    <label locale="ja">I5: 説明情報</label>
  </config>
  <!--
  <config name="conf_EventSource" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C6: EventSource Title (e.g. "BPMS" "#{processInstanceTitle}")</label>
    <label locale="ja">C6: 情報元のタイトル（例 "BPMS" "#{processInstanceTitle}"）</label>
  </config>
  <config name="conf_EventSourceUrl" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C7: EventSource URL (e.g. "${var[applicationRoot]}")</label>
    <label locale="ja">C7: 情報元のURL（例 "${var[applicationRoot]}"）</label>
  </config>
  -->
</configs>


<script><![CDATA[
//// == 工程コンフィグの参照 / Config Retrieving ==
var userId = configs.get( "conf_User" );
var quser = quserDao.findById(parseInt(userId));
if (quser == null) {
  throw "User not found:" + userId;
}
var dataIdB = configs.get( "conf_DataIdB" );
var dataIdC = configs.get( "conf_DataIdC" );
if (dataIdC == "" ||dataIdC == null) {
    throw "Event Title is blank";
  }
var dataIdD = configs.get( "conf_DataIdD" );
var dataIdE = configs.get( "conf_DataIdE" );
var dataIdF = configs.get( "conf_DataIdF" );
var dataIdG = configs.get( "conf_DataIdG" );
//var eventSource = configs.get( "conf_EventSource" ) + "";
//var eventSourceUrl = configs.get( "conf_EventSourceUrl" ) + "";

//// == ワークフローデータの参照 / Data Retrieving ==
var calendarId = "";
if(dataIdB instanceof java.util.ArrayList ){
  calendarId = dataIdB.get(0).getValue() + "";
}else if( dataIdB instanceof java.lang.String ){
  calendarId = dataIdB+ "";
}
if (calendarId == "" ||calendarId == null) {
  calendarId = "primary";
}
if (!calendarId.match(/^[\w\.@]+/)){
  throw "Invalid Calendar ID";
}
var eventSummary =dataIdC + "";
if (dataIdD == "" || engine.findDataByNumber( dataIdD ) == null) {
  throw "Event Start Date is blank";
}else{
  var eventStart = engine.findDataByNumber( dataIdD ).toString() + "";
}
eventStart = eventStart.replace(" ", "T") + ":00";
if( dataIdE !== "" && engine.findDataByNumber( dataIdE ) !== null ){
  var eventEnd = engine.findDataByNumber( dataIdE ).toString() + "";
  eventEnd = eventEnd.replace(" ", "T") + ":00";
}else{
  var eventEnd = engine.findDataByNumber( dataIdD ).addHours(1).toString() + "";
  eventEnd = eventEnd.replace(" ", "T") + ":00";
}
//日時の検証
var sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
var startDate = sdf.parse(eventStart);
var endDate = sdf.parse(eventEnd);
if (endDate.before(startDate)){
  throw "Event End Date comes before Event Start Date";
}
var eventLocation = "";
if( dataIdF !== "" && dataIdF !== null ){
  eventLocation = dataIdF + "";
}
var eventDescription = "";
if( dataIdG !== "" && dataIdG !== null ){
  eventDescription =dataIdG + "";
}

var timeZone = engine.getTimeZoneOffsetInMinutes()/60;
if (timeZone > 0){
  timeZone = "+" + timeZone
}
var eventTimeZone = "GMT" + timeZone + ":00";
//// == 演算 / Calculating ==
var accessLog = "";
var token;
try{
    token = httpClient.getGoogleOAuth2Token(quser, "Calendar");
  }catch(e){
    throw "This User has not connected with Google Calendar."
  }
var uri = "https://www.googleapis.com/calendar/v3/calendars/";
uri += calendarId;
uri += "/events";

var myObj = {};
myObj.summary = eventSummary;
myObj.location = eventLocation;
myObj.description = eventDescription;
myObj.start = {};
myObj.start.dateTime = eventStart;
myObj.start.timeZone = eventTimeZone;
myObj.end = {};
myObj.end.dateTime = eventEnd;
myObj.end.timeZone = eventTimeZone;
myObj.source = {};
/* if( eventSource !== "" ){
  myObj.source.title = eventSource;
}
if( eventSourceUrl !== "" ){
  myObj.source.url = eventSourceUrl;
}
*/
//debug
//accessLog += JSON.stringify( myObj ) + "\n"; 

var response = httpClient.begin()
  .bearer( token )
  .body( JSON.stringify( myObj ), "application/json" )
  .post( uri );
var status = response.getStatusCode();
accessLog += "---POST request--- " + status + "\n";
accessLog += response.getResponseAsString() + "\n";

//// == ログの出力 / Log Output ==
if (status >= 300) {
    throw accessLog;
}
engine.log(accessLog);
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
AABJRU5ErkJggg==
</icon>

</service-task-definition>
