<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<!--    <last-modified>2022-07-29</last-modified> -->
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Slack: Reply</label>
    <configs>
        <config name="conf_Token" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Token</label>
        </config>
        <config name="conf_Channel" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Channel</label>
        </config>
        <config name="conf_Thread" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C3: Thread</label>
        </config>
        <config name="conf_Text" required="true" form-type="TEXTAREA" el-enabled="true">
            <label>C4: Text</label>
        </config>
        <config name="conf_Blocks" form-type="TEXTAREA" el-enabled="true">
            <label>C5: Blocks</label>
        </config>
    </configs>
    <script><![CDATA[
function main() {
    const oauth2 = configs.getObject("conf_Token");
    const channel = readStringData('conf_Channel');
    const thread = readStringData('conf_Thread');
    const text = configs.get("conf_Text") ?? '';
    let blocks = null;
    let blocksText = configs.get('conf_Blocks');
    try {
        blocks = JSON.parse(blocksText).blocks;
        if (blocks !== undefined) {
            throw new Error('root must be blocks');
        }
    } catch (ignore) {}

    sendMessage(oauth2, channel, thread, text, blocks);
}

function readStringData(configName) {
    const def = configs.getObject(configName);
    if ( def === null) {
        return null;
    }
    return engine.findData(def);
}

/**
 * Send Message with Bots  チャット投稿
 * @param {String} oauth2
 * @param {String} channel
 * @param {String} text
 * @param {String} attachment
 */
function sendMessage(oauth2, channel, thread, text, blocks) {
    const jsonReq = {};
    jsonReq["text"] = text;
    jsonReq["channel"] = channel;
    if(thread !== null) {
        jsonReq["thread_ts"] = thread;
    }
    if (blocks !== null) {
        jsonReq['blocks'] = blocks;
    }

    const url = 'https://slack.com/api/chat.postMessage';
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
        .post(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();

    let responseJson;
    try {
        responseJson = JSON.parse(responseTxt);
    } catch (e) {
        engine.log("failed to parse as json");
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw `Failed to send. status: ${status}`;
    }

    if (responseJson.ok !== true) {
        const error = `Failed to send`;
        engine.log(`status: ${status}`);
        engine.log(responseTxt);
        throw error;
    }
}
]]></script>
    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[
]]></test>
</service-task-definition>