<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2022-03-08</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Calendar: Delete Event</label>
<label locale="ja">Google カレンダー: 予定削除</label>
<summary>Delete an event on Google Calendar.</summary>
<summary locale="ja">Google カレンダーの予定を削除します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-calendar-event-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-calendar-event-delete/</help-page-url>
 
<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1: User who connects to Google Calendar</label>
    <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
  </config>
  <config name="conf_CalendarId" form-type="TEXTFIELD">
    <label>C2: Calendar ID (Primary Calendar if blank)</label>
    <label locale="ja">C2: Calendar ID (空白の場合、プライマリのカレンダー)</label>
  </config>
  <config name="conf_EventId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C3: Event ID</label>
    <label locale="ja">C3: 予定 ID</label>
  </config>
</configs>
 
 
<script><![CDATA[
main();
function main() {
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const quser = configs.getObject("conf_User");
  if (quser === null) {
    throw `User not found.`;
  }
  let calendarId = configs.get("conf_CalendarId");
  if (calendarId === "" || calendarId === null) {
    calendarId = "primary";
  }
  const eventId = engine.findData(configs.getObject("conf_EventId"));
  if (eventId === "" || eventId === null) {
    throw "Event ID isn't set";
  }

  //// == 演算 / Calculating ==
  if (calendarId.search(/^[\w\-_.!*'@]+$/) === -1) {
    throw "Invalid Calendar ID";
  }
  deleteEvent(quser,calendarId,eventId);
}
/**
 * Google カレンダーの予定を削除する
 * @param {QuserView} quser ユーザー
 * @param {String} calendarId カレンダーID
 * @param {String} eventId 予定ID
 */
function deleteEvent(quser,calendarId,eventId) {
  const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`;

  const response = httpClient.begin()
    .googleOAuth2(quser, "Calendar")
    .delete(uri);

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  engine.log(`Event ID: ${eventId}`);
  engine.log(`Status: ${status}`);
  if (status >= 300) {
    engine.log(responseStr);
    throw `Failed to delete.`;
  }
  engine.log("Succeeded to delete");
}
]]></script>
 
 
<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
AABJRU5ErkJggg==
</icon>
 

<test><![CDATA[

/**
 * 設定の準備
 * @param configs
 * @param calenderId
 * @param eventId
 */
const prepareConfigs = (configs, calenderId, eventId) => {
  const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
  configs.putObject('conf_User', quser);
  
  configs.put('conf_CalendarId', calenderId,);
  
  // 文字型データ項目を準備して、config に指定
  const idDef = engine.createDataDefinition('予定 ID', 1, 'q_eventId', 'STRING_TEXTAREA');
  configs.putObject('conf_EventId', idDef);
  // 文字型データ項目の値（予定 ID を保存するデータ項目）を指定
  engine.setData(idDef, eventId);
};

/**
 * Google ドライブに接続する UserID に対応する QuserView がなくエラーになる場合
 */
test('User not found', () => {
  prepareConfigs(configs, 'test1@a.com', 'event1');
  // 設定されたユーザが削除された場合、未設定と同じ状態に上書きする
  configs.put('conf_User', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('User not found.');
  }
});

/**
 * 予定 IDが空でエラーになる場合
 */
test('Event ID is blank', () => {
  prepareConfigs(configs, 'test2@a.com', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Event ID isn\'t set');
  }
});

/**
 * カレンダー IDに不正な文字(半角スペース)が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - Half-width space', () => {
  prepareConfigs(configs, 'test 3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Calendar ID');
  }
});

/**
 * カレンダー IDに不正な文字(許可してない記号()が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - Not allowed symbols(', () => {
  prepareConfigs(configs, 'test(3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Calendar ID');
  }
});

/**
 * カレンダー IDに不正な文字(許可してない記号#)が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - Not allowed symbols#', () => {
  prepareConfigs(configs, 'test#3@a.com', 'event3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Calendar ID');
  }
});

/**
 * DELETE リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param calendarId
 * @param eventId
 */
const assertDeleteRequest = ({url, method}, calendarId, eventId) => {
  expect(url).toEqual(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events/${eventId}`);
  expect(method).toEqual('DELETE');
};

/**
 * ファイル削除失敗の場合（400レスポンスが返ってくる）
 */
test('Failed to delete Event', () => {
  prepareConfigs(configs, 'test4@a.com', 'event4');
  
  httpClient.setRequestHandler((request) => {
    assertDeleteRequest(request, 'test4@a.com', 'event4', );
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to delete.');
  }
});

/**
 * 予定削除成功(カレンダーID にurlで使える全ての記号を含む)
 */
test('Succeed to Delete Event', () => {
  prepareConfigs(configs, 'test5-_.!*\'@a.com', 'event5');
  
  httpClient.setRequestHandler((request) => {
    assertDeleteRequest(request, 'test5-_.!*\'@a.com', 'event5', );
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });
});

/**
 * 予定削除成功 - カレンダーID 指定なし
 */
test('Succeed to Delete Event - No calender ID', () => {
  prepareConfigs(configs, '', 'event6');
  
  httpClient.setRequestHandler((request) => {
    assertDeleteRequest(request, 'primary', 'event6');
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });
});

]]></test>
</service-task-definition>