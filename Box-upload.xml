<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Upload to Box</label>
<label locale="ja">Box アップロード</label>
<last-modified>2019-05-24</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2">
    <label>A: Set OAuth2 Setting Name</label>
    <label locale="ja">A: OAuth2設定名</label>
  </config>
  <config name="conf_DataIdB" el-enabled="true">
    <label>B: Select STRING/SELECT for Folder ID on Box (Empty for Root)</label>
    <label locale="ja">B: アップロードするBoxのフォルダID（空白の場合はルートフォルダ）</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C: Select FILE DATA for Upload</label>
    <label locale="ja">C: アップロードファイルが格納されているファイル型データ項目</label>
  </config>
</configs>

<help-page-url>https://support.questetra.com/addons/services/box-upload/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/box-upload/</help-page-url>


<script><![CDATA[
// Upload to box via boxAPI (ver. 20161018)
// (c) 2016, Questetra, Inc. (the MIT License)

// OAuth2 config
// Authorization Endpoint URL: https://app.box.com/api/oauth2/authorize
// Token Endpoint URL: https://app.box.com/api/oauth2/token
// Scope:
// Consumer Key: (Get by box Application on box Developers)
// Consumer Secret: (Get by box Application on box Developers)

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get( "conf_OAuth2" );
  const dataIdC = configs.get( "conf_DataIdC" ); // (returns Number)

  //// == ワークフローデータの参照 / Data Retrieving ==
  let folderId = configs.get( "conf_DataIdB");
  if(folderId == "" || folderId == null){
    folderId = "0";
  }
  const files = engine.findDataByNumber( dataIdC );
  //// == 演算 / Calculating ==
  let accessLog = "";
  let responseJson = "";
  const token = httpClient.getOAuth2Token( oauth2 );
  if (files !== null) {
    for (let i=0; i< files.size(); i++) {
      const file = files.get(i);
      let attributes = {
        //parent : '0'
        parent : {id : folderId}
      };
      attributes["name"] = String(file.getName());
      let response = httpClient.begin()
        .bearer(token)
        .multipart('attributes', JSON.stringify(attributes))
        .multipart('file', file)
        .post('https://upload.box.com/api/2.0/files/content');
      accessLog += "---POST request--- " + response.getStatusCode() + "\n";
      accessLog += file.getName() + "\n";
      responseJson += response.getResponseAsString() + "\n";
      //if (response.getStatusCode() !== 201) {
      //  throw "failed to upload: " + file.getName() + " status:" + response.getStatusCode();
      //}
    }
  }

  // for Debug
  accessLog += responseJson + "\n";

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.log(accessLog);
  ]]>
}
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAABoElEQVRYR+2WwVXCQBCG9w83TpZACVCByQ0mvKdUIFSgViBWoFYgViAHMnAzHUAJlJBTbuz4lmd8ATewiTz0kDnlsDv/t7PzTxZKKUVEYwAP5vtcISKPzDxGDfAvKtDv932ttX+u+zc6nufFs9ks3vZA1fB9/8LsjeM4qZqjMoARbzabH0aYmTtnBwjDcKKUujHCIjJh5lEViEoVCMPwTin1tCd4H0XRc1mI0gC9Xu/a87x3m5DWejCfz6dlIEoBEFEbgLn3bfNZIhGRgJlXrhDOAF9NtwTQOpRcRNZpmnZcneEMQEQxgEvHk8VRFAUua50A8h3vkrSMM44CENEQwKurcH6diIyY2di1MA4CmBEtItthUzUABGbkFu0vBOh2u61Go7E80PGuTMlms+ksFou1bYMVIBuzANquKkecsUrTNLA5wwpARFMAV6cQz3KIyJSZB/s5fwAQ0TOA21OK5yBemNmM8e/YAfhNx7sC7ztjB8B0fVEiERlmfz8HsTcAVvtprZP8qD46BzKxMi/n7MXrAKpqgLoCdQXqCvx5BT4B10IBMHMpvgcAAAAASUVORK5CYII=
</icon>

</service-task-definition>
