<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Converter (Excel-CSV FILE to Table type data)</label>
<label locale="ja">アドオン：コンバータ (Excel-CSV ファイル to テーブル型データ)</label>

<last-modified>2021-09-30</last-modified>
<help-page-url>https://support.questetra.com/bpmn-icons/converter-excelcsv-to-table/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/converter-excelcsv-to-table/</help-page-url>

<summary>Overwrite the value of a Table type data item with a contents of the Excel compatible CSV file(TSV UTF-16 LE with BOM) stored in a File type data item.</summary>
<summary locale="ja">テーブル型データ項目の値を、ファイル型データ項目に格納されている Excel 対応 CSV ファイル(TSV UTF-16 LE BOM あり)の内容で、上書きします。</summary>


<license>(C) Questetra, Inc. (MIT License)</license>


<configs>
  <config name="File_DataId" required="true" form-type="SELECT" select-data-type="FILE">
    <label>A: File type data item that stores target Excel-CSV file</label>
    <label locale="ja">A: 対象の Excel-CSV が格納されているファイル型データ項目</label>
  </config>
  <config name="Table_DataId" required="true" form-type="SELECT" select-data-type="LIST">
    <label>B: Table type data item to save Excel-CSV data</label>
    <label locale="ja">B: Excel-CSV を保存するテーブル型データ項目</label>
  </config>
</configs>

<engine-type>2</engine-type>

<script><![CDATA[
main();
function main() {
  //// == 自動工程コンフィグの参照 / Config Retrieving ==
  const myFilesDef = configs.getObject("File_DataId"); // (returns ProcessDataDefinitionView)
  const tableDataDef = configs.getObject("Table_DataId"); // (returns ProcessDataDefinitionView)
  const myFiles = engine.findData(myFilesDef);

  // ファイル型データに複数添付されている場合、エラー
  if (myFiles !== null && myFiles.size() > 1) {
    throw new Error("Attachment of multiple files can not be supported.");
  }
  const myTable = tableDataDef.createListArray();
  // ファイル型データにファイルが1つ添付されている場合
  if (myFiles.size() !== null) {
    // ファイル型を1行ずつ読み込んで、テーブル型にセット
    fileRepository.readFile(myFiles.get(0), "x-UTF-16LE-BOM", function (line) {
      const newRow = myTable.addRow();
      const cellsArray = line.split("\t");
      if (newRow.size() < cellsArray.length) {
        throw `The file has ${cellsArray.length} columns while the table has ${newRow.size()} columns.`;
      }
      for (let j = 0; j < newRow.size(); j++) {
        newRow.setCol(j, cellsArray[j]);
      }
    });
  }

  //// == ワークフローデータへの代入 / Data Updating ==
  // ファイル型データ項目にファイルが1つ添付されている場合はその値、1つも添付されていない場合は空をセット
  engine.setData(tableDataDef, myTable);
}
]]></script>

<test><![CDATA[
const prepareTableDef = () => {
  const tableDef = engine.createDataDefinition(
    "テーブル",
    10,
    "q_table",
    "LIST"
  );
  tableDef.addSubDataDefinition("文字", "string", "STRING");
  return tableDef;
};

const assertFile = (file, name, contentType) => {
  expect(file.getName()).toEqual(name);
  expect(file.getContentType()).toEqual(contentType);
};

test("success", () => {
  const fileDef = engine.createDataDefinition("ファイル", 5, "q_file", "FILE");
  configs.putObject("File_DataId", fileDef);

  let files = new java.util.ArrayList();
  files.add(
    engine.createQfile("テスト.csv", "text/tab-separated-values", "hogehoge")
  );
  engine.setData(fileDef, files);

  const tableDef = prepareTableDef();
  configs.putObject("Table_DataId", tableDef);

  const list = tableDef.createListArray();
  const addRow = (string) => {
    const newRow = list.addRow();
    newRow.put("string", string);
  };
  addRow("hogehoge");
  engine.setData(tableDef, list);

  execute();

  expect(engine.findData(tableDef)).toEqual('hogehoge');
});

test("multiple files", () => {
  const fileDef = engine.createDataDefinition("ファイル", 5, "q_file", "FILE");
  configs.putObject("File_DataId", fileDef);

  const files = new java.util.ArrayList();
  files.add(
    engine.createQfile("1.csv", "text/tab-separated-values", "テスト1")
  );
  files.add(
    engine.createQfile("2.csv", "text/tab-separated-values", "テスト2")
  );
  engine.setData(fileDef, files);

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith(
      "Attachment of multiple files can not be supported."
    );
  }
});
]]></test>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACx0lEQVRYR8WXz0sUYRjHP5O0CLX+
uHTIQ7sHIby0BdIh0EU6hwmd20Vx9mb9AUvlQQSRVhBq0WW3gxcFKzx4000kBKO2QNgSssgS6uDu
oQQJJt4ZZ3ecH+s4O+kLyy7s+z7fz/PM87zPMxKnvKRj6afpBbpRiCDRAkQOzhdQKCEhvvMkeOnW
7tEAWVrYZwi4B6qom1UCUgSYII747bhqAzwhxhkeH0PYLCTE48i8cCJwBnhKCkn13I+VQua+nSF7
gDQ54K4fyhUbCjkSxM02rQD+en5YT2GChJpLlXUYQHvmWV89txq7bcyJKoCW7Vt1JJxb7hIBwnp1
VAHSPAQeuLVSa99U1xTzW/Msflt02vYIWdXDCCBKptkPgI07GzQFmhhcGXSCKCHTWgXQbrjnRvGe
iz20nWvzxJO8lqS9uZ3t39u1INRc0CJgk/nCi47WDk8AxkOOEAcVoQGkyat3vGH5BbD3d4/RwijD
b4fNzrxCJqoDfAEuGXdMd03TeaHTUwRC50NqDgjx8Q/jJN8k7ewUkLmqAyielBwOieiFg+Fa4tpJ
GelIgODZIJnuDDt/dhh67a41rN5aZfnHspPnVWwDgOURiF1CPBvN0hvqJfcxx8DKgH+BUnhPgohj
EhrFG6QG1n6usVne9ASw9H2J3CfR3w4tQxLalOHszVn6wn0I8XpXppixRs9UhpaLaPLGJP2X+2ls
aKxXH1sAMFxE2l1guYqNEHOf51j4uuAJplgqsv5r3Xi2jKyNd0c2Ix1iZnPGzyS0aUZaOxbVYGlI
Y9fH2N3fZeTdiKcImA6VCRCytmOx61QHEh3zf45kUAm9LndyQyk8QyZmfoYnNZZbPK8dAf1fbVAR
V5jXSakMxLy9mOgQWnWIUVp83IIIYfFqlqrv1cz8wEREFKJIRFBoQeKKukU0FokSCgUk8rU8dp8D
flS8Cxv/AFp57iGwqv7bAAAAAElFTkSuQmCC
</icon>

</service-task-definition>