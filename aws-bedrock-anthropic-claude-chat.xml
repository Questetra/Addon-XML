<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Amazon Bedrock: Anthropic Claude: Chat</label>
    <label locale="ja">Amazon Bedrock: Anthropic Claude: チャット</label>
    <last-modified>2025-01-03</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <summary>This item sends a message to an Anthropic Claude model on Amazon Bedrock
        and stores the response in the specified data item.</summary>
    <summary locale="ja">この工程は、Amazon Bedrock 上で動作する Anthropic Claude 
        のモデルにメッセージを送信し、回答をデータ項目に保存します。
    </summary>
    <configs>
        <config name="conf_AccessKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Access Key</label>
            <label locale="ja">C1: アクセスキー</label>
        </config>
        <config name="conf_SecretKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Secret Access Key</label>
            <label locale="ja">C2: シークレットアクセスキー</label>
        </config>
        <config name="conf_Region" required="true" form-type="TEXTFIELD">
            <label>C3: Region Code</label>
            <label locale="ja">C3: リージョンコード</label>
        </config>
        <config name="conf_Model" required="true" form-type="SELECT_ITEM" editable="true">
            <label>C4: Model</label>
            <label locale="ja">C4: モデル</label>
            <item value="anthropic.claude-3-haiku-20240307-v1:0">
                <label>Claude 3 Haiku</label>
            </item>
            <item value="anthropic.claude-3-opus-20240229-v1:0">
                <label>Claude 3 Opus</label>
            </item>
            <item value="anthropic.claude-3-5-sonnet-20240620-v1:0">
                <label>Claude 3.5 Sonnet</label>
            </item>
            <item value="anthropic.claude-3-5-sonnet-20241022-v2:0">
                <label>Claude 3.5 Sonnet v2</label>
            </item>
            <item value="anthropic.claude-3-5-haiku-20241022-v1:0">
                <label>Claude 3.5 Haiku</label>
            </item>
        </config>
        <config name="conf_UseCrossRegion" form-type="TOGGLE">
            <label>C5: Use cross-region inference</label>
            <label locale="ja">C5: クロスリージョン推論を利用する</label>
        </config>
        <config name="conf_MaxTokens" required="false" form-type="TEXTFIELD">
            <label>C6: Maximum number of tokens to consume (2048 if blank)</label>
            <label locale="ja">C6: 使用するトークン数の上限（空白の場合、2048）</label>
        </config>
        <config name="conf_Temperature" required="false" form-type="TEXTFIELD">
            <label>C7: Temperature (0.0 - 1.0) (1.0 if blank)</label>
            <label locale="ja">C7: 温度（0.0 〜 1.0）（空白の場合、1.0）</label>
        </config>
        <config name="conf_StopSequences" required="false" form-type="TEXTAREA">
            <label>C8: Stop Sequences (write one per line)</label>
            <label locale="ja">C8: 停止シーケンス（1 行に 1 つ）</label>
        </config>
        <config name="conf_SystemPrompt" required="false" el-enabled="true"
                form-type="TEXTAREA">
            <label>C9: System Prompt</label>
            <label locale="ja">C9: システムプロンプト</label>
        </config>
        <config name="conf_Message1" required="true" el-enabled="true"
                form-type="TEXTAREA">
            <label>U1: User Message</label>
            <label locale="ja">U1: ユーザメッセージ</label>
        </config>
        <config name="conf_Images1" required="false" form-type="SELECT"
                select-data-type="FILE">
            <label>I1: Images to attach to user message</label>
            <label locale="ja">I1: ユーザメッセージに添付する画像</label>
        </config>
        <config name="conf_Pdfs1" required="false" form-type="SELECT"
                select-data-type="FILE">
            <label>D1: PDFs to attach to user message</label>
            <label locale="ja">D1: ユーザメッセージに添付する PDF</label>
        </config>
        <config name="conf_Answer1" required="true" form-type="SELECT"
                select-data-type="STRING_MULTILINE">
            <label>A1: Data item to save response</label>
            <label locale="ja">A1: 回答を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>

    <script><![CDATA[
const SERVICE = 'bedrock';
const ANTHROPIC_VERSION = 'bedrock-2023-05-31';

function main() {
    ////// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const awsKey = configs.getObject('conf_AccessKey').getToken();
    const awsSecret = configs.getObject('conf_SecretKey').getToken();
    const region = retrieveRegion();
    let model = retrieveModel();
    const useCrossRegion = configs.getObject("conf_UseCrossRegion");
    if (useCrossRegion) {
        model = decideCrossRegionModel(model, region);
    } 

    const maxTokens = retrieveMaxTokens();
    const temperature = retrieveTemperature();
    const stopSequences = retrieveStopSequences();
    const systemPrompt = configs.get('conf_SystemPrompt');
    const userMessage = retrieveUserMessage(); // 添付画像の取得も含む

    ////// == 演算 / Calculating ==
    const answer = invokeModel(awsKey, awsSecret, region, model, maxTokens, temperature, stopSequences, systemPrompt, userMessage);

    ////// == ワークフローデータへの代入 / Data Updating ==
    saveData('conf_Answer1', answer);
}

/**
 * config からリージョンコードを読み出す
 * リージョンコードの形式として不正な場合はエラー
 * @return {String}
 */
function retrieveRegion() {
    const region = configs.get('conf_Region');
    // 今後リージョンが増えることも考えて、中央の最大文字数には余裕をみている
    const reg = new RegExp('^[a-z]{2}-[a-z]{4,16}-[1-9]$');
    if (!reg.test(region)) {
        throw new Error('Region Code is invalid.');
    }
    return region;
}

/**
 * config からモデル ID を読み出す
 * モデル ID として不正な場合はエラー
 * @return {String}
 */
function retrieveModel() {
    const model = configs.get('conf_Model');
    const reg = new RegExp('^[a-z0-9.:-]+$');
    if (!reg.test(model)) {
        throw new Error('Model is invalid. It contains an invalid character.');
    }
    const MODEL_PREFIX = 'anthropic.claude';
    if (!model.startsWith(MODEL_PREFIX)){
        throw new Error(`Model is invalid. It must start with "${MODEL_PREFIX}".`);
    }
    return model;
}

/**
 * クロスリージョン推論モデル ID を決定する
 * C3 のリージョンがクロスリージョン推論の対象でない場合はエラー
 * @return {String}
 */
function decideCrossRegionModel(model, region) {
    if (region.startsWith('us-')){
        return `us.${model}`;
    } else if(region.startsWith('eu-')){
        return `eu.${model}`;
    } else if (region.startsWith('ap-')){
        return `apac.${model}`;
    }
    throw new Error(`Cross-region inference is not supported in ${region}.`);
}

const MAX_TOKENS_DEFAULT = 2048;

/**
 * config から最大トークン数を読み出す
 * 指定なしの場合は 2048 を返す
 * @returns {Number}
 */
const retrieveMaxTokens = () => {
    const maxTokens = configs.get('conf_MaxTokens');
    if (maxTokens === '') {
        return MAX_TOKENS_DEFAULT;
    }
    const regExp = new RegExp(/^[1-9][0-9]*$/);
    if (!regExp.test(maxTokens)) {
        throw new Error('Maximum number of tokens must be a positive integer.');
    }
    return parseInt(maxTokens, 10);
};

/**
 * config から温度を読み出す
 * 指定なしの場合は 1 を返す
 * @returns {Number}
 */
const retrieveTemperature = () => {
    const temperature = configs.get('conf_Temperature');
    if (temperature === '') {
        return 1;
    }
    const regExp = /^(0(\.\d+)?|1(\.0+)?)$/;
    if (!regExp.test(temperature)) {
        throw new Error('Temperature must be a number from 0 to 1.');
    }
    return parseFloat(temperature);
};

const MAX_STOP_SEQUENCES_NUM = 8191;

/**
 * config から停止シーケンスを読み出す
 * @returns {Array<String>}
 */
const retrieveStopSequences = () => {
    const stopSequencesStr = configs.get('conf_StopSequences');
    if (stopSequencesStr === '') {
        return [];
    }
    const stopSequences = stopSequencesStr.split('\n')
        .filter(s => s !== '');
    if (stopSequences.length > MAX_STOP_SEQUENCES_NUM) {
        throw new Error(`Too many stop sequences. The maximum number is ${MAX_STOP_SEQUENCES_NUM}.`);
    }
    return stopSequences;
};

/**
 * config からユーザメッセージ（添付画像、添付 PDF を含む）を読み出す
 * ユーザメッセージが空の場合、添付画像や添付 PDF が不正な場合はエラー
 * @returns {Object} ユーザメッセージオブジェクト
 */
const retrieveUserMessage = () => {
    const message = configs.get('conf_Message1');
    if (message === '') {
        throw new Error('User Message is empty.');
    }
    const inlineImages = retrieveImages();
    const inlinePdfs = retrievePdfs();
    const userMessage = {
        role: 'user',
        content: [
            {
                text: message
            },
            ...inlineImages,
            ...inlinePdfs
        ]
    };
    return userMessage;
	
};

const MAX_IMAGE_NUM = 20; // Messages API の制限。1 ユーザメッセージにつき添付画像 20 個まで
const MAX_IMAGE_SIZE = 3032160; // Messages API の制限。1 ファイルにつき 3.75 MB まで
const ALLOWED_MEDIA_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];

/**
 * config から画像を読み出す
 * 以下の場合はエラー
 * - 添付ファイルの総数が多すぎる場合
 * - ファイルサイズが大きすぎる場合
 * - Content-Type が許可されていない場合
 * @returns {Array<Object>} 画像オブジェクトの配列
 */
const retrieveImages = () => {
    const imagesDef = configs.getObject('conf_Images1');
    if (imagesDef === null) {
        return [];
    }
    const images = engine.findData(imagesDef);
    if (images === null) {
        return [];
    }
    if (images.size() > MAX_IMAGE_NUM) {
        throw new Error(`Too many images attached. The maximum number is ${MAX_IMAGE_NUM}.`);
    }

    const inlineImages = [];
    images.forEach(image => {

        if (image.getLength() > MAX_IMAGE_SIZE) {
            throw new Error(`Attached file "${image.getName()}" is too large. The maximum size is ${MAX_IMAGE_SIZE} bytes.`);
        }

        const contentType = image.getContentType().split(';')[0];
        if (!ALLOWED_MEDIA_TYPES.includes(contentType)) {
            throw new Error(`Content-Type of the attached file "${image.getName()}" is not allowed.`);
        }

        const format = contentType.split('/')[1];

        const inlineImage = {
            image: {
                format,
                source: {
                    bytes: base64.encodeToString(fileRepository.readFile(image))
                }
            }
        };

        inlineImages.push(inlineImage);
    });
    return inlineImages;
};


const MAX_PDF_NUM = 5; // Messages API の制限。1 ユーザメッセージにつき PDF 5 個まで
const MAX_PDF_SIZE = 4718592; // Messages API の制限。1 ファイルにつき 4.5 MB まで
const ALLOWED_DOCUMENT_TYPE = 'application/pdf';

/**
 * config から PDF を読み出す
 * 以下の場合はエラー
 * - 添付ファイルの総数が多すぎる場合
 * - ファイルサイズが大きすぎる場合
 * - Content-Type が許可されていない場合
 * @returns {Array<Object>} PDF オブジェクトの配列
 */
const retrievePdfs = () => {
    const pdfsDef = configs.getObject('conf_Pdfs1');
    if (pdfsDef === null) {
        return [];
    }
    const pdfs = engine.findData(pdfsDef);
    if (pdfs === null) {
        return [];
    }
    if (pdfs.size() > MAX_PDF_NUM) {
        throw new Error(`Too many PDFs attached. The maximum number is ${MAX_PDF_NUM}.`);
    }

    const inlinePdfs = [];
    pdfs.forEach( (pdf, index ) => {

        if (pdf.getLength() > MAX_PDF_SIZE) {
            throw new Error(`Attached file "${pdf.getName()}" is too large. The maximum size is ${MAX_PDF_SIZE} bytes.`);
        }

        const contentType = pdf.getContentType().split(';')[0];
        if (!ALLOWED_DOCUMENT_TYPE.includes(contentType)) {
            throw new Error(`Content-Type of the attached file "${pdf.getName()}" is not allowed.`);
        }

        const format = contentType.split('/')[1];

        const inlinePdf = {
            document: {
                format,
                name: `PDF${index}`,
                source: {
                    bytes: base64.encodeToString(fileRepository.readFile(pdf))
                }
            }
        };
        inlinePdfs.push(inlinePdf);
    });
    return inlinePdfs;
};

/**
 * モデルの実行
 * @param awsKey
 * @param awsSecret
 * @param region
 * @param model
 * @param maxTokens
 * @param temperature
 * @param stopSequences
 * @param systemPrompt
 * @param userMessage
 * @returns {String} answer
 */
const invokeModel = (awsKey, awsSecret, region, model, maxTokens, temperature, stopSequences, systemPrompt, userMessage) => {
    const URL = `https://bedrock-runtime.${region}.amazonaws.com/model/${model}/converse`;
    const payload = {
        anthropic_version: ANTHROPIC_VERSION,
        inferenceConfig: {
            maxTokens,
            stopSequences,
            temperature
        },

        messages: [userMessage]
    };

    if (systemPrompt !== '') {
        Object.assign(payload, {
            system: [
            {text :`${systemPrompt}`}
            ]
        });
    }


    const response = httpClient.begin()
        .awsSignV4(awsKey, awsSecret, region, SERVICE)
        .body(JSON.stringify(payload), 'application/json')
        .post(URL);

    const status = response.getStatusCode();
    const respTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(respTxt);
        throw new Error(`Failed to invoke model. status: ${status}`);
    }
    const {output, stopReason, usage} = JSON.parse(respTxt);
    engine.log(`Stop Reason: ${stopReason}`);
    engine.log(`Input Tokens: ${usage.inputTokens}`);
    engine.log(`Output Tokens: ${usage.outputTokens}`);
    return output.message.content[0].text;
};

/**
 * データ項目への保存
 * @param configName
 * @param data
 */
const saveData = (configName, data) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    engine.setData(def, data);
};

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABE9JREFUWEfN
        l3tMlWUcxz/v4SCXA38gtyPTiXo2m8YdEp3cUzGxOdw0E5tRNqlsMDGlRRE5kFJjqUDLKEJsYuCN
        xD8qA5oMGeBhXpIdbiuRrORSkOKBt71vHuIcDnRU2un5893v8nl/z/f3e55HwMpLsDS/V1CQo6Pe
        MR6EKBECAG/A5b5/D9AhQBOI5weVg+VdDQ2DlsT+VwDvBZFqpXJkpyiwFbC3JChwRxAp0OsVOR1X
        v+uezGdSgLl+YVtB2CuAysLERmYiDICY2qatKZjIf0IAjX9EniiKSQ+T2NRHEIR83aWql83FMgug
        8Q8vEUWenYrkhhiCwFHdpeqN4+BMP0zln1tSCaMKSHsuIORP5Z+bxhIRk8ZqYhRAUrvCdkT3sIKz
        FFoS5sg9hcbQHaMAGt/wD0SBZEsDPYqdIJKra65OkWLIANKQcdCrfjPt85zMXcTGRGCjtGFo6B6f
        lRwnfMkibv58i2073ubwwRw8Pdx4bUcGcbHRrIlbQfnpc2xcvwZnJxV37w6Rd7iYwuJSU947fyoH
        XKVhJQNo/MISRIRiU6uQQF96evvRtXXw8YE9eKk9adG147NwPum79/Hum9txUqnI2nuQVSuiUXu6
        09f/OwqFgoQtycya6SWH/PGnrnEFExA36bQ1R+4DhH8iQqKp1aJgf57bsJaZXmpEUcTe3o6S0lO8
        tHkDpScqeGp5FPrhYWrrGglbEkJ9YzNKpZLVK2PQtXVypvJrjpVXMDAwfioLUKjTVr8gA8zzC2/k
        7/k+uubMnkVBbha9fX18efIsq2JjUHu48Xp6Nvuz07n1y69Ms53GjZvduLtNZ4bak4MfFVF2upLl
        0WGsfXoli58I5JuqC6SkZZqTTFOrtjrQAHB7zMEiG0vO72Wmcb6mls+/KCd3z1s4ONjz4qs72ZWS
        xJLQICrOfUvXzW6eT1jHja5unkncxrKopVy+2iLrpCh/H38MDLA5KdUcQE+rtnq6AUA0Z7E7PZWV
        yyLR6/VcbNDi4e5Kbl4hPgvmy1tTeKSU1vZOMtJSqG/UytU58P47LF0cwjRbW2739PJhwaccP3nW
        bNO0aquFSQEepdUs8R0LMG4LUrdtoa5BS82Fi5bEMrKRxCkJVaqYnZ0dZacqydp3yDSO0RaME6HU
        AW9sf0Uuf+mJr2Q1P8haHx/HDLUHi4IDaL58jez9eabu/4hQ42e+DVUqRzJ2JbMseinDwyNcu66j
        SXuFKz+0UFNbP9pekl3Y4hCCA3zxffwx5s2ZTW9fP8fKzrDiyQhZB1Xf1xkBGLXhRIPI4KGZ603i
        pnVEhoXi6uKCjY3CbDGkyXdd1yYnlioWvzoWZ2cVRUfLJh9EE41ic1mkaRcaEoC/z0KcVI6yia69
        k+strXLLWriMR7HkZNXDSAKw+nEsQVj1QjIquCm8jJrqwdzl9P93Kf0vKvHA13IDhFUfJgYIqz7N
        xorIao9TCyfbQ5v9BWbg5jDAzldXAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param key
 * @param secret
 * @param region
 * @param model
 * @param useCrossRegion
 * @param maxTokens
 * @param temperature
 * @param stopSequences
 * @param systemPrompt
 * @param message
 * @returns {ProcessDataDefinitionView} answerDef
 */
const prepareConfigs = (key, secret, region, model,  useCrossRegion, maxTokens, temperature, stopSequences, systemPrompt, message) => {
    // 認証設定を作成し、指定
    const keyAuth = httpClient.createAuthSettingToken('Access Key', key);
    configs.putObject('conf_AccessKey', keyAuth);
    const secretAuth = httpClient.createAuthSettingToken('Secret Access Key', secret);
    configs.putObject('conf_SecretKey', secretAuth);

    configs.put('conf_Region', region);
    configs.put('conf_Model', model);
    configs.putObject('conf_UseCrossRegion', useCrossRegion);
    configs.put('conf_MaxTokens', maxTokens);
    configs.put('conf_Temperature', temperature);
    configs.put('conf_StopSequences', stopSequences);
    configs.put('conf_SystemPrompt', systemPrompt);
    configs.put('conf_Message1', message);
    
    // 回答を保存するデータ項目を作成し、指定
    const answerDef = engine.createDataDefinition('回答', 1, 'q_response', 'STRING_TEXTAREA');
    configs.putObject('conf_Answer1', answerDef);
    engine.setData(answerDef, '事前文字列');
    return answerDef;
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
        expect(e.message).toEqual(errorMsg);
    }
    if (!failed) {
        fail('No error was thrown.');
    }
};

const MODEL_2 = 'anthropic.claude-v2';
const MODEL_2_1 = 'anthropic.claude-v2:1';
const MODEL_3_SONNET = 'anthropic.claude-3-sonnet-20240229-v1:0';
const MODEL_3_5_SONNET_V2 = 'anthropic.claude-3-5-sonnet-20241022-v2:0';
const MODEL_3_5_HAIKU = 'anthropic.claude-3-5-haiku-20241022-v1:0';

/**
 * リージョンコードの形式が不正 - ハイフンを含まない
 */
test('Region Code is invalid - no hyphens', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'invalidregioncode';
    prepareConfigs(key, secret, region, MODEL_2, false, '', '', '', '', 'Hi. How are you?');

    assertError('Region Code is invalid.');
});

/**
 * リージョンコードの形式が不正 - ハイフンの間の文字列が長すぎる
 */
test('Region Code is invalid - too many characters', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'eu-toomanycharacters-1';
    prepareConfigs(key, secret, region, MODEL_2, false, '', '', '', '', 'Hi. How are you?');

    assertError('Region Code is invalid.');
});

/**
 * モデルの指定が不正 - 不正な文字を含む
 */
test('Model is invalid - contains an invalid character', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    prepareConfigs(key, secret, region, 'anthropic.claude-テスト', false, '1280', '', '', '', 'Hi. How are you?');

    assertError('Model is invalid. It contains an invalid character.');
});

/**
 * モデルの指定が不正 - anthropic.claude で始まらない
 */
test('Model is invalid - does not start with the prefix', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    prepareConfigs(key, secret, region, 'invalid-model-2.0:1', false, '1280', '', '', '', 'Hi. How are you?');

    assertError('Model is invalid. It must start with "anthropic.claude".');
});

/**
 * リージョンコードがクロスリージョン推論の対象でない
 */
test('Region is not supported by cross-region inference', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ca-sentral-1';
    prepareConfigs(key, secret, region, MODEL_2, true, '1280', '', '', '', 'Hi. How are you?');

    assertError('Cross-region inference is not supported in ca-sentral-1.');
});

/**
 * トークン数の最大値が正の整数でない - 数字でない文字を含む場合
 */
test('Maximum number of tokens must be a positive integer - includes a non-numeric character', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    prepareConfigs(key, secret, region, MODEL_2, false, '1.1', '', '', '', 'Hi. How are you?');

    assertError('Maximum number of tokens must be a positive integer.');
});

/**
 * トークン数の最大値が正の整数でない - ゼロ
 */
test('Maximum number of tokens must be a positive integer - 0', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    prepareConfigs(key, secret, region, MODEL_2, false, '0', '', '', '', 'Hi. How are you?');

    assertError('Maximum number of tokens must be a positive integer.');
});

/**
 * 温度が不正 - 数字、小数点でない文字を含む
 */
test('Invalid temperature - includes a non-numeric character', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const maxTokens = '100';
    const temperature = '-0.1';
    const message = 'Hi. How are you?';
    prepareConfigs(key, secret, region, MODEL_2, false, maxTokens, temperature, '', message);

    assertError('Temperature must be a number from 0 to 1.');
});

/**
 * 温度が不正 - 1 を超える
 */
test('Invalid temperature - bigger than 1', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const maxTokens = '100';
    const temperature = '1.1';
    const message = 'Hi. How are you?';
    prepareConfigs(key, secret, region, MODEL_2, false, maxTokens, temperature, '', message);

    assertError('Temperature must be a number from 0 to 1.');
});

/**
 * 停止シークエンスの数が多すぎる
 */
test('Too many stop sequences', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const maxTokens = '100';
    const temperature = '1.0';
    const stopSequences = 'a\n'.repeat(MAX_STOP_SEQUENCES_NUM + 1);
    const message = 'Hi. How are you?';
    prepareConfigs(key, secret, region, MODEL_2, false, maxTokens, temperature, stopSequences, message);

    assertError(`Too many stop sequences. The maximum number is ${MAX_STOP_SEQUENCES_NUM}.`);
});

/**
 * メッセージが空
 */
test('Message is empty', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    prepareConfigs(key, secret, region, MODEL_2, false, '1280', '', '', '', '');

    assertError('User Message is empty.');
});

/**
 * 指定サイズのファイルを作成
 * @param name
 * @param contentType
 * @param size
 * @return qfile
 */
const createQfile = (name, contentType, size) => {
    let text = '';
    if (size >= 4000) {
      text = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(100); // 40 * 100 = 4000
    }
    while (text.length < size) {
        if (text.length !== 0 && text.length * 2 <= size) {
            text += text;
        } else if (text.length + 1000 <= size) {
            text += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(25); // 40 * 25 = 1000
        } else {
            text += 'a';
        }
    }
    return engine.createQfile(name, contentType, text);
};

/**
 * 画像を添付
 * @param {Array<Qfile>} images
 */
const attachImages = (images) => {
    const imagesDef = engine.createDataDefinition('添付画像', 2, 'q_images', 'FILE');
    engine.setData(imagesDef, images);
    configs.putObject('conf_Images1', imagesDef);
};

/**
 * 添付ファイルの数が多すぎる
 */
test('Too many files attached', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const message = 'Describe each image attached.';
    prepareConfigs(key, secret, region, MODEL_3_SONNET, false, '', '', '', message);

    // 添付ファイルを指定
    const images = [];
    for (let i = 0; i < MAX_IMAGE_NUM + 1; i++) {
        images.push(createQfile(`画像${i}.png`, 'image/png', 100));
    }
    attachImages(images);

    assertError(`Too many images attached. The maximum number is ${MAX_IMAGE_NUM}.`);
});

/**
 * 添付ファイルのサイズが大きすぎる
 */
test('Attached image is too large', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const message = 'Describe each image attached.';
    prepareConfigs(key, secret, region, MODEL_3_SONNET, false, '', '', '', message);

    // 添付ファイルを指定
    const image1 = createQfile('画像1.png', 'image/png', 100);
    const image2 = createQfile('画像2.jpg', 'image/jpeg', MAX_IMAGE_SIZE + 1);
    attachImages([image1, image2]);

    assertError(`Attached file "画像2.jpg" is too large. The maximum size is ${MAX_IMAGE_SIZE} bytes.`);
});

/**
 * 添付ファイルに許可されていない Content-Type のファイルを含む
 */
test('Content-Type of an attached file is not allowed', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'us-east-1';
    const message = 'Describe each image attached.';
    prepareConfigs(key, secret, region, MODEL_3_SONNET, false, '', '', '', message);

    // 添付ファイルを指定
    const image1 = createQfile('画像1.png', 'image/png;filename="画像1.png"', 100);
    const image2 = createQfile('画像2.jpg', 'image/jpeg', 200);
    const image3 = createQfile('画像3.gif', 'image/gif', 300);
    const image4 = createQfile('画像4.webp', 'image/webp', 100);
    const imageNotAllowed = createQfile('許可されていない画像.svg', 'image/svg+xml', 200);
    attachImages([image1, image2, image3, image4, imageNotAllowed]);

    assertError('Content-Type of the attached file "許可されていない画像.svg" is not allowed.');
});

/**
 * API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param {String} region
 * @param {String} model
 * @param {Number} maxTokens
 * @param {Number} temperature
 * @param {Array<String>} stopSequences
 * @param {String} systemPrompt
 * @param {String} message
 * @param {Array<Qfile>} images
 */
const assertRequest = ({
                           url,
                           method,
                           contentType,
                           body
                       }, region, model, maxTokens, temperature, stopSequences, systemPrompt, message, images = []) => {
    expect(url).toEqual(`https://bedrock-runtime.${region}.amazonaws.com/model/${model}/converse`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    // Authorization ヘッダのテストは省略
    const bodyObj = JSON.parse(body);
    expect(bodyObj.anthropic_version).toEqual(ANTHROPIC_VERSION);
    expect(bodyObj.max_tokens).toEqual(maxTokens);
    expect(bodyObj.temperature).toEqual(temperature);
    expect(bodyObj.stop_sequences).toEqual(stopSequences);
    expect(bodyObj.system).toEqual(systemPrompt);
    expect(bodyObj.messages[0].role).toEqual('user');
    expect(bodyObj.messages[0].content[0].type).toEqual('text');
    expect(bodyObj.messages[0].content[0].text).toEqual(message);
    expect(bodyObj.messages[0].content.length).toEqual(images.length + 1);
    images.forEach((image, i) => {
        expect(bodyObj.messages[0].content[i + 1].type).toEqual('image');
        expect(bodyObj.messages[0].content[i + 1].source.type).toEqual('base64');
        expect(bodyObj.messages[0].content[i + 1].source.media_type).toEqual(image.getContentType().split(';')[0]);
        expect(bodyObj.messages[0].content[i + 1].source.data).toEqual(base64.encodeToString(fileRepository.readFile(image)));
    });
};

/**
 * API リクエストでエラー
 * クロスリージョン推論を利用する
 * 選択したモデルは、クロスリージョン推論 ID が無い
 */
test('Fail to request', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const temperature = '';
    const stopSequences = '';
    const message = 'Hi. How are you?';
    prepareConfigs(key, secret, region, MODEL_2, true, '1280', temperature, stopSequences, '', message);

    httpClient.setRequestHandler((request) => {
        assertRequest(request, region, 'apac.anthropic.claude-v2', 1280, 1, [], '', message);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to invoke model. status: 400');
});

/**
 * API のレスポンスボディを作成
 * @param {String} model
 * @param {String} answerText
 * @returns {String} response
 */
const createResponse = (model, answerText) => {
    const responseObj = {
        model,
        stop_reason: 'end_turn',
        content: [
            {
                type: 'text',
                text: answerText
            }
        ],
        usage: {
            input_tokens: 1024,
            output_tokens: 2048
        }
    };
    return JSON.stringify(responseObj);
};

/**
 * 成功 - 必須項目のみ指定
 * 最大トークン数はデフォルト値の 2048
 * 温度はデフォルト値の 1 でリクエストされる
 */
test('Success - only with required configs', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'eu-central-2';
    const maxTokens = '';
    const temperature = '';
    const stopSequences = '';
    const message = 'Hi. How are you?';
    const answerDef = prepareConfigs(key, secret, region, MODEL_2_1, false, maxTokens, temperature, stopSequences, '', message);

    const answer = 'Fine, thanks.';
    httpClient.setRequestHandler((request) => {
        assertRequest(request, region, MODEL_2_1, MAX_TOKENS_DEFAULT, 1, [], '', message);
        return httpClient.createHttpResponse(200, 'application/json', createResponse(MODEL_2_1, answer));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(answerDef)).toEqual(answer);
});

/**
 * 成功 - 必須項目のみ指定
 * 最大トークン数はデフォルト値の 2048 を指定
 * 温度はデフォルト値の 1 を指定
 * クロスリージョン推論を利用する
 * 回答を保存するデータ項目に、文字型 Markdown を指定
 */
test('Success - only with required configs - CrossRegionModel - Markdown', () => {
    const key = 'key-abcde';
    const secret = 'secret-fghij';
    const region = 'us-west-1';
    const maxTokens = '2048';
    const temperature = '1';
    const stopSequences = '';
    const message = 'Hi. How are you?';
    prepareConfigs(key, secret, region, MODEL_3_5_HAIKU, true, maxTokens, temperature, stopSequences, '', message);

    // 回答を保存するデータ項目に、文字型 Markdown を指定
    const answerDef = engine.createDataDefinition('回答', 1, 'q_answer', 'STRING_MARKDOWN');
    engine.setData(answerDef, '事前文字列');
    configs.putObject('conf_Answer1', answerDef);

    const answer = 'Fine, thanks.';
    httpClient.setRequestHandler((request) => {
        assertRequest(request, region,`us.${MODEL_3_5_HAIKU}`, MAX_TOKENS_DEFAULT, 1, [], '', message);
        return httpClient.createHttpResponse(200, 'application/json', createResponse(`us.${MODEL_3_5_HAIKU}`, answer));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(answerDef)).toEqual(answer);
});

/**
 * 成功 - 最大トークン数、温度を指定
 */
test('Success - with max tokens and temperature', () => {
    const key = 'key-99999';
    const secret = 'secret-00000';
    const region = 'us-east-1';
    const maxTokens = '500';
    const temperature = '0.5';
    const stopSequences = '';
    const message = 'Are you a robot?\n\nHow old are you?';
    const answerDef = prepareConfigs(key, secret, region, MODEL_2, false, maxTokens, temperature, stopSequences, '', message);

    const answer = "Yes, I'm an AI assistant created by Anthropic.\n\nI don't have an age.";
    httpClient.setRequestHandler((request) => {
        assertRequest(request, region, MODEL_2, 500, 0.5, [], '', message);
        return httpClient.createHttpResponse(200, 'application/json', createResponse(MODEL_2, answer));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(answerDef)).toEqual(answer);
});

/**
 * 成功 - 温度、停止シーケンス、システムプロンプトを指定
 * 添付画像のデータ項目は指定しているが、添付ファイルなし
 */
test('Success - with temperature, stop sequences and system prompt, empty attached files', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'eu-central-2';
    const maxTokens = '';
    const temperature = '0';
    const stopSequences = 'さようなら\nありがとう\nおやすみなさい';
    const systemPrompt = "You are a translator. Translate the user's input into Japanese.";
    const message = 'Hi. How are you?';
    const answerDef = prepareConfigs(key, secret, region, MODEL_3_SONNET, false, maxTokens, temperature, stopSequences, systemPrompt, message);
    attachImages([]);

    const answer = 'こんにちは。お元気ですか？';
    httpClient.setRequestHandler((request) => {
        assertRequest(request, region, MODEL_3_SONNET, MAX_TOKENS_DEFAULT, 0, ['さようなら', 'ありがとう', 'おやすみなさい'], systemPrompt, message);
        return httpClient.createHttpResponse(200, 'application/json', createResponse(MODEL_3_SONNET, answer));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(answerDef)).toEqual(answer);
});

/**
 * 成功 - 添付画像を最大個数指定
 * クロスリージョン推論を利用する
 * 回答を保存するデータ項目に、文字型 Markdown を指定
 */
test('Success - with attached images - CrossRegionModel - Markdown', () => {
    const key = 'key-54321';
    const secret = 'secret-99999';
    const region = 'ap-northeast-1';
    const maxTokens = '';
    const temperature = '';
    const stopSequences = '';
    const message = 'Describe each image attached.';
    prepareConfigs(key, secret, region, MODEL_3_SONNET, true, maxTokens, temperature, stopSequences, '', message);

    // 回答を保存するデータ項目に、文字型 Markdown を指定
    const answerDef = engine.createDataDefinition('回答', 1, 'q_answer', 'STRING_MARKDOWN');
    engine.setData(answerDef, '事前文字列');
    configs.putObject('conf_Answer1', answerDef);

    // 添付ファイルを指定
    const images = [];
    for (let i = 0; i < MAX_IMAGE_NUM - 1; i++) {
        images.push(createQfile(`画像${i}.png`, ALLOWED_MEDIA_TYPES[i % 4], 100));
    }
    images.push(createQfile('最大サイズの画像.jpg', 'image/jpeg;filename="最大サイズの画像.jpg"', MAX_IMAGE_SIZE));
    attachImages(images);

    const answer = 'The 1st image shows a cat. The 2nd image shows a dog.';
    httpClient.setRequestHandler((request) => {
        assertRequest(request, region, `apac.${MODEL_3_SONNET}`, MAX_TOKENS_DEFAULT, 1, [], '', message, images);
        return httpClient.createHttpResponse(200, 'application/json', createResponse(`apac.${MODEL_3_SONNET}`, answer));
    });

    expect(main()).toEqual(undefined);
    expect(engine.findData(answerDef)).toEqual(answer);
});

]]></test>
</service-task-definition>
