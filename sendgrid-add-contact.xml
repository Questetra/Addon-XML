<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<engine-type>1</engine-type>
<last-modified>2019-10-25</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<label>Sendgrid: Add contact</label>
<label locale="ja">Sendgrid: 宛先追加</label>
<summary>Send a mail from SendGrid. </summary>
<summary locale="ja">SendGrid でメールを送信します。(未更新)</summary>
<help-page-url>https://support.questetra.com/addons/sendgrid-mail-send/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/sendgrid-mail-send/</help-page-url>
<configs>
  <config name="Key" required="true">
    <label>C1: API Key</label>
    <label locale="ja">C1: API Key</label>
  </config>
  <config name="ListIDs">
    <label>C2: Source Mail Address</label>
    <label locale="ja">C2: 追加するリストのID</label>
  </config>
  <config name="Address">
    <label>C3: Source Name</label>
    <label locale="ja">C3: 住所</label>
  </config>
  <config name="City">
    <label>C4: Template ID</label>
    <label locale="ja">C4: 都市</label>
  </config> 
  <config name="Country">
    <label>C4: Template ID</label>
    <label locale="ja">C4: 国</label>
  </config>
  <config name="Email" required="true">
    <label>C4: Template ID</label>
    <label locale="ja">C5: メールアドレス</label>
  </config> 
  <config name="FirstName">
    <label>C4: Template ID</label>
    <label locale="ja">C6: 名前</label>
  </config> 
  <config name="LastName">
    <label>C4: Template ID</label>
    <label locale="ja">C7: 名字</label>
  </config> 
  <config name="PostCode">
    <label>C4: Template ID</label>
    <label locale="ja">C8: 郵便番号</label>
  </config> 
  <config name="state_province_region">
    <label>C4: Template ID</label>
    <label locale="ja">C9: 州</label>
  </config> 
  <config name="CustomFields" form-type="SELECT" select-data-type="LIST">
    <label>C5: Table Item with destination and dynamic template data</label>
    <label locale="ja">C10: カスタムフィールドを設定したテーブル型データ</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  const listId = configs.get("ListIDs");
  const address = configs.get("Address");
  const city = configs.get("City");
  const country = configs.get("Country");
  const email = configs.get("Email");
  const firstName = configs.get("FirstName");
  const lastName = configs.get("LastName");
  const postCode = configs.get("PostCode");
  const state = configs.get("state_province_region");
  let customField = null;
  if(configs.get("CustomFields") !== "" && configs.get("CustomFields") !== null){
    customField = engine.findDataByNumber();
    const customFieldData = engine.findDataDefinitionByNumber(configs.get("CustomFields"));
  }
  
  let subData;
  const json = {
    "list_ids": [
    ],
    "contacts": [{
      "custom_fields": {},
    }],
    
  };
  json["contacts"][0]["email"] = email;
  if(address !== "" && address !== null){
    json["contacts"][0]["address_line_1"] = address;
  }
  if(city !== "" && city !== null){
    json["contacts"][0]["city"] = city;
  }
  if(country !== "" && country !== null){
    json["contacts"][0]["country"] = country;
  }
  if(firstName !== "" && firstName !== null){
    json["contacts"][0]["first_name"] = firstName;
  }
  if(lastName !== "" && lastName !== null){
    json["contacts"][0]["last_name"] = lastName;
  }
  if(postCode !== "" && postCode !== null){
    json["contacts"][0]["first_name"] = postCode;
  }
  if(state !== "" && state !== null){
    json["contacts"][0]["state_province_region"] = state;
  }

  if(customField !== null){
    const subdataLimit = 50;
    if(customField.getRow(0).size() > subdataLimit){
      throw "number of subdata can't be over " + subdataLimit + ".";
    }
    if(dynamicTemp.getRow(0).size() > 0){
      for(j=0;j<dynamicTemp.getRow(0).size();j++){
        subData = dyTempData.getSubDataDefinitions()[j].getName();
        if(subData !== "" && subData !== null){
          json["contacts"][0]["custom_fields"][subData] = customField(0,j);
        }
      }
    }
  }
  
 const response = httpClient.begin()
    .bearer(configs.get("Key"))
    .body(JSON.stringify(json),"application/json; charset=UTF-8")
    .put("https://api.sendgrid.com/v3/marketing/contacts");

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status >= 300) {
    const error = "Failed to send \n status:" + status + "\n" + responseTxt
    throw error;
  }
  engine.log(status);
  engine.log(responseTxt);
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=</icon>
</service-task-definition>