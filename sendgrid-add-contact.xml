<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<engine-type>1</engine-type>
<last-modified>2019-09-20</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<label>Sendgrid: Send mail</label>
<label locale="ja">Sendgrid: メール送信</label>
<summary>Send a mail from SendGrid. </summary>
<summary locale="ja">SendGrid でメールを送信します。</summary>
<help-page-url>https://support.questetra.com/addons/sendgrid-mail-send/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/sendgrid-mail-send/</help-page-url>
<configs>
  <config name="Key" required="true">
    <label>C1: API Key</label>
    <label locale="ja">C1: API Key</label>
  </config>
  <config name="FromAddress" required="true">
    <label>C2: Source Mail Address</label>
    <label locale="ja">C2: 送信元のメールアドレス</label>
  </config>
  <config name="FromName">
    <label>C3: Source Name</label>
    <label locale="ja">C3: 送信元の表示名</label>
  </config>
  <config name="Template" required="true">
    <label>C4: Template ID</label>
    <label locale="ja">C4: テンプレート ID</label>
  </config> 
  <config name="DynamicTemp" required="true" form-type="SELECT" select-data-type="LIST">
    <label>C5: Table Item with destination and dynamic template data</label>
    <label locale="ja">C5: 送信用データを設定したテーブル型データ</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  const tempId = configs.get("Template");
  const fromAddress = configs.get("FromAddress");
  const dynamicTemp = engine.findDataByNumber(configs.get("DynamicTemp"));
  const dyTempData = engine.findDataDefinitionByNumber(configs.get("DynamicTemp"));
  const fromName = configs.get("FromName");
  let subData;
  const json = {
    "personalizations": [
      
    ],
    "from": {},
  };
  json["template_id"] = tempId;
  json["from"]["email"] = fromAddress;
  if(fromName !== "" && fromName !== null){
    json["from"]["name"] = fromName;
  }
  if(dynamicTemp === null){
    throw "the table data is empty.";
  }
  const tableSize = dynamicTemp.size();
  const destinationLimit = 200;
  const subdataLimit = 50;
  if(tableSize > destinationLimit){
    throw "number of destination mail addresses can't be over " + destinationLimit + ".";
  }
  if(dynamicTemp.getRow(0).size() > subdataLimit){
      throw "number of subdata can't be over " + subdataLimit + ".";
    }
  for(i=0;i<tableSize;i++){
    json["personalizations"][i] = {
        "to": [{}],
        "dynamic_template_data": {},
      };
    if(dynamicTemp.get(i,0) === "" || dynamicTemp.get(i,0) === null){
      throw "Destination mail address is empty.";
    }
    json["personalizations"][i]["to"][0]["email"] = dynamicTemp.get(i,0);
    if(dynamicTemp.getRow(0).size() > 1){
      if(dynamicTemp.get(i,1) !== "" && dynamicTemp.get(i,1) !== null){
        if(dynamicTemp.get(i,1).search(/[;\,]/) !== -1){
          throw "invalid character is included in the destination name";
        }
        json["personalizations"][i]["to"][0]["name"] = dynamicTemp.get(i,1)
      }
      for(j=2;j<dynamicTemp.getRow(0).size();j++){
        subData = dyTempData.getSubDataDefinitions()[j].getName();
        if(subData !== "" && subData !== null){
          json["personalizations"][i]["dynamic_template_data"][subData] = dynamicTemp.get(i,j);
        }
      }
    }
  }
 const response = httpClient.begin()
    .bearer(configs.get("Key"))
    .body(JSON.stringify(json),"application/json; charset=UTF-8")
    .post("https://api.sendgrid.com/v3/mail/send");

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status >= 300) {
    const error = "Failed to send \n status:" + status + "\n" + responseTxt
    throw error;
  }
  engine.log(status);
  engine.log(responseTxt);
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=</icon>
</service-task-definition>