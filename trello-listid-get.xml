<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Trello: Get List Id</label>
    <label locale="ja">Trello: リスト ID 取得</label>
    <last-modified>2023-09-07</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item gets a list ID on Trello.</summary>
    <summary locale="ja">この工程は、Trello のリスト ID を取得します。</summary>
    <configs>
        <config name="conf_ApiKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Key is set</label>
            <label locale="ja">C1: API キーを設定した認証設定</label>
        </config>
        <config name="conf_ApiToken" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Authorization Setting in which API Token is set</label>
            <label locale="ja">C2: API トークンを設定した認証設定</label>
        </config>
        <config name="conf_BoardId" required="true" form-type="TEXTFIELD">
            <label>C3: Board ID</label>
            <label locale="ja">C3: ボード ID</label>
        </config>
        <config name="conf_ListName" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
            <label>C4: List Name</label>
            <label locale="ja">C4: リストの名前</label>
        </config>
        <config name="conf_ListId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C5: Data item to save ID of the list</label>
            <label locale="ja">C5: リスト ID を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-trello-listid-get/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-trello-listid-get/</help-page-url>

    <script><![CDATA[

function main() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const authKey = configs.getObject("conf_ApiKey");
    const authToken = configs.getObject("conf_ApiToken");
    const boardId = configs.get('conf_BoardId');//固定値指定のみ 必須
    const listName = retrieveListName();
    const listId = configs.get("conf_ListId");

    const apiKey = authKey.getToken();
    const apiToken = authToken.getToken();

    //// == Calculating / 演算 ==
    const listObj = getListInformation(apiKey, apiToken, boardId);
    const trelloListId = getListId(listObj, listName);

    engine.setDataByNumber(listId, trelloListId);
}


/**
  * config からリストの名前 を読み出す
  * @return {String} listName
  */
function retrieveListName() {
    const listNameDef = configs.getObject('conf_ListName');
    if (listNameDef === null) { // 固定値で指定　必須
        return configs.get('conf_ListName');
    }
    const listName = engine.findData(listNameDef);
    if (listName === null) {
        throw 'List Name is blank.';
    }
    return listName;
}


/**
  * ボード内のリスト情報を取得する
  * @param {String} auth.apiKey
  * @param {String} auth.apiToken
  * @param {String} boardId
  * @return {Object} list
  */
function getListInformation(apiKey, apiToken, boardId) {

    const url = `https://api.trello.com/1/boards/${boardId}/lists?key=${apiKey}&token=${apiToken}`;
    const response = httpClient.begin()
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get list information. status: ${status}`;
    }
    return JSON.parse(responseStr);
}


/**
  * リスト情報からリスト名に対応するリスト ID を取得する
  * @param {Object} listObj  リスト情報の JSON オブジェクト
  * @param {String} listName リスト名
  * @return {String} listId  リスト ID
  */
function getListId(listObj, listName) {

    let listId;
    let index = listObj.findIndex((listObj) => listObj.name === listName);
    if (index !== -1) {
        listId = listObj[index].id
    } else {
        throw `List name: "${listName}" not found in the Board`;
    }

    return listId;
}
    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAzBJREFUWEfF
        l11IFFEUx/93xnH9iPzow0jBaIOsSNJWI+glX6KHJLcvkiKwF7WXolJ76iWiSLBeUortoSSLcDfp
        pZfwJXrQVV8MIsNEjFbwI5T1e/bGndnZnRlnZ8ZZau/b3HvuOb97zrnnniFI8SC27Z8KZoGPeMHz
        x0FpGSh2gSBP2k8xC4IxEDIEUeyFyPnxwbNgR7c1wLm+HRBJM0DqAWTYUQpgCaAd4OlDvKsMme0x
        B6gJ1oOgFUC2TcN6sTAobiHg6Ui0PzGAN/gUQINDw/pt7fB7Go10GQPU9L8GIRfZhgyBQ3qadaSM
        lM8tivFpSrsQqKjVy63XHD15aXEmAs1u7C5wOXbCyhqF79MUGp+NKzrWeUILIMe8nUl/uV+Co3ud
        hl7L7G4cxujksjxJ0aDOiTiAlO3cDyXhlt6UwyU4c73eZQ8CIdzp/KVMh8FH9ii3I27B298GkOuK
        1PLbck3s5xdF/AnLMXUJHLbnpMXsrIoUodlV6ZvjCHbmCSAq9taeSdx+OaHioo/hr7jBJmQxVmQE
        TKvvuRogQgH+7IDmYCFfKQpyBWmutu0nuj7PxNZ914pRV7U19r0eAEtYxRZWrGSA032XwHGv1BbU
        ACyZXBcGNQBjHQdRvC1dmjt5bwQfh+biBq8U4WZ1gRkAEIlcxvvKThngzIAPlNb9VwBCXqD78FUZ
        wBtkxyv7rwDAEPyechmgJjgTe1iiFP88BOwBC3jyFQ9QTYABbASAZThLNGX0tLhRXZFrngNs1e+J
        XhZvMCkApovdFDbYidRXkM0Z3AJZOAaQZAj03tN/GwLoQpBUEjoC0CShxTVcEymE89o6MPG8FIX5
        ciGyGoYe0FxDi0LEDIxPrWB6fk2ylZnOoaTQbnOUIAc0hciiFFud0GrduhRLxcj8MbIyYrb+qGcS
        TaaPEdute46/PjmA/UX23WwGcKTlG/pGwopIgueYLasakhOHNqO7yY1sF5fM4dE7PI+qu9/jOhI2
        JIqIrhk9tm8TcrJ4RxCDowv4He0TogosWjLFjKopdWTZaJPtpjSBJ5IE2WBbHvNEKn9MFIiU/pqp
        /Z6yn9Mkg2+1/S+COKkwjkUALAAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
  * 設定の準備
  * @param boardId
  * @param listName
  * @return returnObj.idDef
  */
const prepareConfigs = (boardId, listName) => {
    const authKey = httpClient.createAuthSettingToken(
        'Trello',
        'TrelloApiKey',
    );
    configs.putObject('conf_ApiKey', authKey);

    const authToken = httpClient.createAuthSettingToken(
        'Trello',
        'TrelloApiToken',
    );
    configs.putObject('conf_ApiToken', authToken);

    configs.put('conf_BoardId', boardId);

    // 文字型データ項目を準備して、config に指定
    const listNameDef = engine.createDataDefinition('リスト名', 2, 'q_ListName', 'STRING_TEXTFIELD');
    configs.putObject('conf_ListName', listNameDef);

    engine.setData(listNameDef, listName);

    // 文字型データ項目を準備して、config に指定
    const listIdDef = engine.createDataDefinition('リスト ID を保存するデータ項目', 3, 'q_ListId', 'STRING_TEXTFIELD');
    configs.putObject('conf_ListId', listIdDef);

    engine.setData(listIdDef, '事前文字列');

    return listIdDef;
};


/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};


/**
  * リスト名 が空
  */
test('List Name is blank - set by STRING', () => {
    prepareConfigs('123ABC', null);
    assertError(main, 'List Name is blank.');
});


/**
 * GET リクエスト のテスト
 * @param url
 * @param method
 * @param boardId
 */
const assertRequest = ({ url, method }, boardId) => {
    expect(url).toEqual(`https://api.trello.com/1/boards/${boardId}/lists?key=TrelloApiKey&token=TrelloApiToken`); // 認証設定のトークンのテスト時の値は token
    expect(method).toEqual('GET');
};


/**
 * GET リクエストで失敗 存在しないボード ID 、権限のないボード ID など
 */
test("GET Failed", () => {
    prepareConfigs('234BCD', 'test');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, "234BCD");
        return httpClient.createHttpResponse(400, "application/json", "{}");
    });
    assertError(main, 'Failed to get list information. status: 400');
});


/**
 * GET リクエストのレスポンス（ボード内のリスト情報を取得）を準備
 * @param id
 * @return responseObj
 */
const prepareResponse = (id, name) => {

    const responseObj = [
        {
            id,
            name,
            "closed": true,
            "pos": 2154,
            "softLimit": "<string>",
            "idBoard": "<string>",
            "subscribed": true
        },
        {
            "id": "12345",
            "name": "完了",
            "closed": true,
            "pos": 2154,
            "softLimit": "<string>",
            "idBoard": "<string>",
            "subscribed": true
        },
        {
            "id": "6789012345fghij",
            "name": "ToDo",
            "closed": true,
            "pos": 2154,
            "softLimit": "<string>",
            "idBoard": "<string>",
            "subscribed": true
        }
    ];
    return responseObj;
};


/**
 * 成功 -　ボード内の 1 つ目のリストにリスト名がある場合
 */
test("Success - first list", () => {
    const listIdDef = prepareConfigs('123ABC', '作業中');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareResponse('1234567890abcde', '作業中')));
    });
    main();
    expect(engine.findData(listIdDef)).toEqual('1234567890abcde');
});


/**
 * 成功 -　ボード内の 3 つ目のリストにリスト名がある場合
 */
test("Success - third list", () => {
    const listIdDef = prepareConfigs('123ABC', 'ToDo');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareResponse('1234567890abcde', '作業中')));
    });
    main();
    expect(engine.findData(listIdDef)).toEqual('6789012345fghij');
});


/**
 * 失敗 リスト名が存在しない
 */
test("Failed", () => {
    const listIdDef = prepareConfigs('123ABC', 'test');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(prepareResponse('1234567890abcde', '作業中')));
    });
    assertError(main, 'List name: "test" not found in the Board');
});

    ]]></test>

</service-task-definition>
