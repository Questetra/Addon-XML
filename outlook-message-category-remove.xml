<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Microsoft 365 Outlook for Business: Remove Category from Email</label>
    <label locale="ja">Microsoft 365 Outlook for Business: メールのカテゴリ解除</label>
    <last-modified>2023-09-26</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>
        This item removes categories from an email message in Outlook. Multiple categories can be removed at once.
    </summary>
    <summary locale="ja">この工程は、Outlook のメールからカテゴリを外します。一度に複数のカテゴリを解除可能です。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://graph.microsoft.com/Mail.ReadWrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_MessageId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Message ID</label>
            <label locale="ja">C2: メール ID</label>
        </config>
        <config name="conf_Category" required="true" form-type="TEXTAREA">
            <label>C3: Categories to remove (write one per line)</label>
            <label locale="ja">C3: 解除するカテゴリ（1 行に 1 つ）</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-outlook-message-category-remove/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-outlook-message-category-remove/</help-page-url>

    <script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Mail.ReadWrite offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

function main(){
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const auth = configs.getObject('conf_OAuth2');
    const messageId = retrieveMessageId();
    const categoriesToRemove = retrieveCategories();

    //// == 演算 / Calculating ==
    const currentCategories = getMessageCategories(auth, messageId);
    const newCategories = currentCategories.filter(category => !categoriesToRemove.includes(category));
    if (newCategories.length < currentCategories.length) { // 差分がある場合のみ、更新
        updateMessageCategories(auth, messageId, newCategories);
    }
}

/**
 * config からメール ID を読み出す
 * 空の場合はエラー
 * @returns {String} メール ID
 */
function retrieveMessageId() {
    const messageId = engine.findData(configs.getObject('conf_MessageId'));
    if (messageId === null) {
        throw 'Message ID is blank.';
    }
    return messageId;
}

/**
 * ワークフローデータからカテゴリの一覧を読み出す
 * 末尾の改行のみ無視し、他の空行はエラー
 * @returns {Array<String>} categories カテゴリ一覧
 */
function retrieveCategories() {
    let categoriesStr = configs.get('conf_Category');
    if (categoriesStr.endsWith('\n')) { // 末尾に空行がある場合、削除
        categoriesStr = categoriesStr.slice(0, -1);
    }
    const categories = categoriesStr.split('\n');
    if (categories.some(line => line === '')) {
        throw 'Empty lines are not allowed for category.';
    }
    return categories;
}

/**
 * Microsoft Graph API にメール取得の GET リクエストを送信し、カテゴリ一覧を取得する
 * @param {AuthSettingWrapper} auth 認証設定
 * @param {String} messageId メール ID
 * @returns {Array<String>} categories メールに設定されたカテゴリ一覧
 */
function getMessageCategories(auth, messageId) {
    const response = httpClient.begin()
        .authSetting(auth)
        .queryParam('$select', 'categories')
        .get(`https://graph.microsoft.com/v1.0/me/messages/${encodeURI(messageId)}`);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get message. status: ${status}`;
    }
    return JSON.parse(responseStr).categories;
}

/**
 * Microsoft Graph API にメール更新の PATCH リクエストを送信し、カテゴリ一覧を置き換える
 * @param {AuthSettingWrapper} auth 認証設定
 * @param {String} messageId メール ID
 * @param {Array<String>} categories カテゴリ一覧
 */
function updateMessageCategories(auth, messageId, categories) {
    const body = {categories};
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(body), 'application/json; charset=UTF-8')
        .patch(`https://graph.microsoft.com/v1.0/me/messages/${encodeURI(messageId)}`);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw `Failed to update message. status: ${status}`;
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAA/RJREFUWEfN
        l1tsDFEYx/+z7W7X7rZFS1nLA42kCU0QEg9oS4IgfXF5ERVxefAg7n1o0bhkoy6RkIhEiMSt4pII
        xYNu9cElrqUqhApFabub7W679z1yzsys2Z2ZnWlTYV52Zuec7/t95/y/73zD4R9fXL/8V34tAbjd
        kjklwr2L/yWNAFxwjhWeta3rA6j8uifFsbZlkBo4x+7RGpge4E/EYqRa9hTepwdRBxhQ1Gp86hDK
        AIPqXIRShpAD/BXn6hDJADqcP9k4AsWjjLq04A8TTKj9CW8wLhlPSqVZkgLQTrQsxw+MAacvd5ip
        BWe6cfd9UGrWBaejVPzjjykd0dNJFOBJexg763vgWp+Pps9hVN/rYfburMnDT38cFXUeLC4yY9ss
        mxIArReJFJUAJEc/qcCIeYVZsgU5sigX77uiOPm4F0cX56KuOYAVF91snK/GjjZ3FMXHfqFiqgVn
        lw1TAQDgdDDfPACf7w1Sb/4aO6wm7bUORgk6e/k9duRkIEaAH74YbCYOw4YY1AHAa0EEkFW60D47
        TBn8a0KANk8U0ThQmJcJg4QrHCNw9/EABTYeoKs3BqvJgOwsLg0ALdmOUgGgnUafVO1EgEiMYMaJ
        TpSMz4LZyOHamwCaN41EViY/dcBbwM4MHQDHH/YiECHYPtvGHNJnuuxUYPRq+BTCjnpehE0b8vHD
        F8fyC26UF5lRVZaN/Q0+VAkiTRFUEoAs/cQVWHreja2zbJg5zsTmP/oSRu0DP66uHK6VsYn32257
        cbjJLx/vdAgZXSnPfxGA0tN9Xz3NwgxcehXAh+4oqsuy2fPrjghOP+1j9wcX5sATIGj8FMLy4iEJ
        h4ea/Nh+25sWQFUDPSGCwtoOnCgfygxsueVF65YCpnJ6NbaFUHKqi93TNLQaOVao4gS48LIPK6dY
        oAKgTwPUcChKcP9jiKmfilEUoBjSZ08M9z4EsW66lTl//j2C8nPdTCudVaMHBhDYa4dZULraZtMU
        vN4SxArJclMBXnkdYFPyrYY0AHw1VC1E1OiSInPCd77FgPkTzWzPmzsi7P+brUFcbg5git2ImxV5
        GJOTAV+IYFWdGzfeBrUAJIWIWlMQojRyegK+2jQSO+q9LAuUrl1zs1FdloNMA/DwSxhrr3rQsrlA
        eQuSSjEDSN/3iQAvvkfw7FtYNQVzzQYsm8xnABUi1Y1chEqHEb8KsmwQPVmMHDy7RyfKsypBygta
        xpec68atd5IjWYieDk1tSGSHkl5H+sclt2b/WUsmhqGzOdEfNR2ptyn9KxD9bcsHD8IlRK76qabd
        8uhIUeWtGIxPs1TLrHWjjQs3R3iV8nGa2OtB/jjtn9r6Nfo39MDfMN80fiMAAAAASUVORK5CYII=
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param messageId
 * @param categoryStr
 */
const prepareConfigs = (messageId, categoryStr) => {
    // 認証設定を作成し、指定
    const oauth2 = httpClient.createAuthSettingOAuth2(
        'Outlook',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/token',
        'https://graph.microsoft.com/Mail.ReadWrite offline_access',
        'client_id',
        'client_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', oauth2);

    // メール ID を設定
    const messageIdDef = engine.createDataDefinition('メール ID', 1, 'q_MessageId', 'STRING_TEXTFIELD');
    engine.setData(messageIdDef, messageId);
    configs.putObject('conf_MessageId', messageIdDef);

    // カテゴリを設定
    configs.put('conf_Category', categoryStr);
};

/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * メール ID が空であればエラー
 */
test('Message ID is empty', () => {
    prepareConfigs(null, '赤の分類');
    assertError(main, 'Message ID is blank.');
});

/**
 * カテゴリが空であればエラー
 */
test('No categories', () => {
    prepareConfigs('messageId-1', '');
    assertError(main, 'Empty lines are not allowed for category.');
});

/**
 * カテゴリが改行のみであればエラー
 */
test('No categories - line break only', () => {
    prepareConfigs('messageId-1', '\n');
    assertError(main, 'Empty lines are not allowed for category.');
});

/**
 * カテゴリの途中に空行を含む場合はエラー
 */
test('Categories include an empty line', () => {
    prepareConfigs('messageId-1', '赤の分類\n\n青の分類');
    assertError(main, 'Empty lines are not allowed for category.');
});

/**
 * メッセージ取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param messageId
 */
const assertGetMessageRequest = ({url, method}, messageId) => {
    const expectedUrl = `https://graph.microsoft.com/v1.0/me/messages/${encodeURI(messageId)}`
        + `?${encodeURIComponent('$select')}=categories`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
};

/**
 * メール取得の GET リクエストで失敗
 */
test('Fail in GET message request', () => {
    const messageId = 'messageId-1';
    prepareConfigs(messageId, '赤の分類');

    httpClient.setRequestHandler((request) => {
        assertGetMessageRequest(request, messageId);
        return httpClient.createHttpResponse(400, 'application/json', `{}`);
    });

    assertError(main, 'Failed to get message. status: 400');
});

/**
 * メッセージ更新の PATCH リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param messageId
 * @param categories
 */
const assertUpdateMessageRequest = ({url, method, body}, messageId, categories) => {
    const expectedUrl = `https://graph.microsoft.com/v1.0/me/messages/${encodeURI(messageId)}`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('PATCH');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.categories).toEqual(categories);
};

const SAMPLE_MESSAGE = {
    "categories": [
        "赤の分類",
        "青の分類",
        "緑の分類"
    ]
};

/**
 * メール更新の PATCH リクエストで失敗
 */
test('Fail in PATCH message request', () => {
    const messageId = 'messageId-1';
    prepareConfigs(messageId, '赤の分類');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetMessageRequest(request, messageId);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_MESSAGE));
        }
        assertUpdateMessageRequest(request, messageId, ['青の分類', '緑の分類']);
        return httpClient.createHttpResponse(400, 'application/json', `{}`);
    });

    assertError(main, 'Failed to update message. status: 400');
});

/**
 * 成功
 * カテゴリを 1 つだけ解除
 */
test('Succeed - remove one category', () => {
    const messageId = 'messageId-1';
    const dataDefs = prepareConfigs(messageId, '赤の分類\n'); // カテゴリの末尾の改行は無視される

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetMessageRequest(request, messageId);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_MESSAGE));
        }
        assertUpdateMessageRequest(request, messageId, ['青の分類', '緑の分類']);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });
    expect(main()).toEqual(undefined);
});

/**
 * 成功
 * カテゴリを複数解除し、カテゴリ設定が 1 つもなくなる場合
 */
test('Succeed - remove all categories', () => {
    const messageId = 'messageId-2';
    const dataDefs = prepareConfigs(messageId, '赤の分類\n緑の分類\n青の分類');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetMessageRequest(request, messageId);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_MESSAGE));
        }
        assertUpdateMessageRequest(request, messageId, []);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });
    expect(main()).toEqual(undefined);
});

/**
 * 成功
 * メールに設定されていないカテゴリのみを指定した場合、メールを更新せずに正常終了
 */
test('Succeed - message does not have the specified category', () => {
    const messageId = 'messageId-2';
    const dataDefs = prepareConfigs(messageId, 'オレンジの分類');

    httpClient.setRequestHandler((request) => {
        assertGetMessageRequest(request, messageId);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_MESSAGE));
    });
    expect(main()).toEqual(undefined);
});

/**
 * 成功
 * メールに設定されているカテゴリ、メールに設定されていないカテゴリを両方指定した場合
 */
test('Succeed - message includes one of the specified categories', () => {
    const messageId = 'messageId-3';
    const dataDefs = prepareConfigs(messageId, '青の分類\nオレンジの分類');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetMessageRequest(request, messageId);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_MESSAGE));
        }
        assertUpdateMessageRequest(request, messageId, ['赤の分類', '緑の分類']);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });
    expect(main()).toEqual(undefined);
});

    ]]></test>

</service-task-definition>
