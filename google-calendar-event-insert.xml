<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2021-02-18</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Calendar: Insert Event</label>
<label locale="ja">Google カレンダー: 予定追加</label>
<summary>Insert an event to Google Calendar.</summary>
<summary locale="ja">Google カレンダーに予定を追加します。</summary>
<help-page-url>https://support.questetra.com/addons/services/googlecalendar-insertevent/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/googlecalendar-insertevent/</help-page-url>
 
<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1: User Who Connects with Google Calendar</label>
    <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
  </config>
  <config name="conf_DataIdB" form-type="TEXTFIELD">
    <label>C2: Calendar ID(When empty,inserted to the primary calendar)</label>
    <label locale="ja">C2: Calendar ID(空白の場合プライマリのカレンダーに追加されます)</label>
  </config>
  <config name="conf_DataIdC" required="true" el-enabled="true" form-type="TEXTFIELD">
    <label>C3: Event Title</label>
    <label locale="ja">C3: 予定タイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="DATETIME">
    <label>C4: Select DATETIME DATA for Event Start</label>
    <label locale="ja">C4: 予定開始時刻が格納されている日時型データを選択してください</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="SELECT"  select-data-type="DATETIME">
    <label>C5: Select DATETIME DATA for Event End (Not-selected +1:00)</label>
    <label locale="ja">C5: 予定終了時刻が格納されている日時型データを選択してください（未設定の場合、+1:00）</label>
  </config>
  <config name="conf_DataIdF" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C6: Location</label>
    <label locale="ja">C6: 場所情報</label>
  </config>
  <config name="conf_DataIdG" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C7: Description</label>
    <label locale="ja">C7: 説明情報</label>
  </config>
</configs>
 
 
<script><![CDATA[
main();
function main() {
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const quser = configs.getObject("conf_User");
  if (quser === null) {
    throw `User not found.`;
  }
  let calendarId = configs.get("conf_DataIdB");
  const eventSummary = configs.get("conf_DataIdC");
  if (eventSummary === "" || eventSummary === null) {
    throw "Event Title is blank";
  }
  const startDate = engine.findData(configs.getObject("conf_DataIdD"));
  if (startDate === null) {
    throw "Event Start Date is blank";
  }
  const endDateDef = configs.getObject("conf_DataIdE");
  let endDate = null;
  if (endDateDef !== null) {
    endDate = engine.findData(endDateDef);
  }
  let eventLocation = configs.get("conf_DataIdF");
  if (eventLocation === null) {
    eventLocation = "";
  }
  let eventDescription = configs.get("conf_DataIdG");
  if (eventDescription === null) {
    eventDescription = "";
  }
 
  //// == 演算 / Calculating ==
  if (calendarId === "" || calendarId === null) {
    calendarId = "primary";
  }
  if (calendarId.search(/[^\w\.@]/) !== -1) {
    throw "Invalid Calendar ID";
  }

  if (endDate === null) {
    endDate = startDate.addHours(1);
  }
  if ( endDate.getTime() < startDate.getTime()) {
    throw "Event End Date comes before Event Start Date";
  }
  const sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
  const eventStart = sdf.format(startDate);
  const eventEnd = sdf.format(endDate);
 
 
  const eventTimeZone = engine.getTimeZoneId();
 
  //// == 予定を追加する / Insert Event ==
  insertEvent(
    quser,
    calendarId,
    eventSummary,
    eventLocation,
    eventDescription,
    eventStart,
    eventTimeZone,
    eventEnd
  );
}
 
/**
 * Google カレンダーにイベントを追加する
 * @param {QuserView} quser ユーザー
 * @param {String} calendarId カレンダーID
 * @param {String} eventSummary 予定タイトル
 * @param {String} eventLocation 場所情報
 * @param {String} eventDescription 説明情報
 * @param {String} eventStart 予定開始時刻
 * @param {String} eventTimeZone タイムゾーン
 * @param {String} eventEnd 予定終了時刻
 */
function insertEvent(
  quser,
  calendarId,
  eventSummary,
  eventLocation,
  eventDescription,
  eventStart,
  eventTimeZone,
  eventEnd
) {
  let token;
  try {
    token = httpClient.getGoogleOAuth2Token(quser, "Calendar");
  } catch (e) {
    throw "This User has not connected with Google Calendar.";
  }
  const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;
 
  const myObj = {};
  myObj.summary = eventSummary;
  myObj.location = eventLocation;
  myObj.description = eventDescription;
  myObj.start = {};
  myObj.start.dateTime = eventStart;
  myObj.start.timeZone = eventTimeZone;
  myObj.end = {};
  myObj.end.dateTime = eventEnd;
  myObj.end.timeZone = eventTimeZone;
  myObj.source = {};
 
  const response = httpClient
    .begin()
    .bearer(token)
    .body(JSON.stringify(myObj), "application/json")
    .post(uri);
 
  var status = response.getStatusCode();
  if (status >= 300) {
    const accessLog = `---POST request---${status}\n${response.getResponseAsString()}`;
    engine.log(accessLog);
    throw `Failed to insert event.\nstatus:${status}`;
  }
}
]]></script>
 
 
<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
AABJRU5ErkJggg==
</icon>
 
</service-task-definition>