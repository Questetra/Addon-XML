<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2022-03-10</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Calendar: Insert Event</label>
<label locale="ja">Google カレンダー: 予定追加</label>
<summary>Insert an event to Google Calendar.</summary>
<summary locale="ja">Google カレンダーに予定を追加します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googlecalendar-insertevent/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googlecalendar-insertevent/</help-page-url>
 
<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1: User who connects to Google Calendar</label>
    <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
  </config>
  <config name="conf_DataIdB" form-type="TEXTFIELD">
    <label>C2: Calendar ID (When empty, inserted to the primary calendar)</label>
    <label locale="ja">C2: Calendar ID (空白の場合プライマリのカレンダーに追加されます)</label>
  </config>
  <config name="conf_DataIdC" required="true" el-enabled="true" form-type="TEXTFIELD">
    <label>C3: Event Title</label>
    <label locale="ja">C3: 予定タイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="DATETIME">
    <label>C4: Data item for Event Start Datetime</label>
    <label locale="ja">C4: 開始時刻が格納されているデータ項目</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="SELECT"  select-data-type="DATETIME">
    <label>C5: Data item for Event End Datetime (Not-selected +1:00)</label>
    <label locale="ja">C5: 終了時刻が格納されているデータ項目 (未設定の場合、+1:00)</label>
  </config>
  <config name="conf_DataIdF" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C6: Location</label>
    <label locale="ja">C6: 場所</label>
  </config>
  <config name="conf_DataIdG" required="false" el-enabled="true" form-type="TEXTAREA">
    <label>C7: Description</label>
    <label locale="ja">C7: 説明</label>
  </config>
  <config name="conf_eventId" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C8: Data item that will save Event ID</label>
    <label locale="ja">C8: 予定 ID を保存するデータ項目</label>
  </config>
  <config name="conf_eventUrl" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C9: Data item that will save Event URL</label>
    <label locale="ja">C9: 予定 URL を保存するデータ項目</label>
  </config>
  <config name="conf_meetUrl" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C10: Data item that will save Google Meet URL</label>
    <label locale="ja">C10: Google Meet の URL を保存するデータ項目</label>
  </config>
</configs>
 
 
<script><![CDATA[
main();
function main() {
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const quser = configs.getObject("conf_User");
  if (quser === null) {
    throw `User not found.`;
  }
  let calendarId = configs.get("conf_DataIdB");
  if (calendarId === "" || calendarId === null) {
    calendarId = "primary";
  }
  const eventSummary = configs.get("conf_DataIdC");
  if (eventSummary === "" || eventSummary === null) {
    throw "Event Title is blank";
  }
  const startDate = engine.findData(configs.getObject("conf_DataIdD"));
  if (startDate === null) {
    throw "Event Start Date is blank";
  }
  const endDateDef = configs.getObject("conf_DataIdE");
  let endDate = null;
  if (endDateDef !== null) {
    endDate = engine.findData(endDateDef);
  }
  let eventLocation = configs.get("conf_DataIdF");
  if (eventLocation === null) {
    eventLocation = "";
  }
  let eventDescription = configs.get("conf_DataIdG");
  if (eventDescription === null) {
    eventDescription = "";
  }

  const eventIdDataDef = configs.getObject("conf_eventId");
  const eventUrlDataDef = configs.getObject("conf_eventUrl");
  const meetUrlDataDef = configs.getObject("conf_meetUrl");

  //// == 演算 / Calculating ==
  if (calendarId.search(/^[\w\-_.!*'@]+$/) === -1) {
    throw "Invalid Calendar ID";
  }

  if (endDate === null) {
    endDate = startDate.addHours(1);
  }
  if (endDate.getTime() < startDate.getTime()) {
    throw "Event End Date comes before Event Start Date";
  }

  //// == 予定を追加する / Insert Event ==
  insertEvent(
    quser,
    calendarId,
    eventSummary,
    eventLocation,
    eventDescription,
    startDate,
    endDate,
    eventIdDataDef,
    eventUrlDataDef,
    meetUrlDataDef
  );
}

/**
 * Google カレンダーにイベントを追加する
 * @param {QuserView} quser ユーザー
 * @param {String} calendarId カレンダーID
 * @param {String} eventSummary 予定タイトル
 * @param {String} eventLocation 場所情報
 * @param {String} eventDescription 説明情報
 * @param {AddableTimestamp} startDate 開始日時
 * @param {AddableTimestamp} endDate 終了日時
 * @param {ProcessDataDefinitionView} eventIdDataDef Event ID を保存する文字型データ項目
 * @param {ProcessDataDefinitionView} eventUrlDataDef Event URL を保存する文字型データ項目
 * @param {ProcessDataDefinitionView} meetUrlDataDef Meet URL を保存する文字型データ項目
 */
function insertEvent(
  quser,
  calendarId,
  eventSummary,
  eventLocation,
  eventDescription,
  startDate,
  endDate,
  eventIdDataDef,
  eventUrlDataDef,
  meetUrlDataDef
) {
  const uri = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;

  const sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");

  const myObj = {};
  myObj.summary = eventSummary;
  myObj.location = eventLocation;
  myObj.description = eventDescription;
  myObj.start = {};
  myObj.start.dateTime = sdf.format(startDate);
  myObj.start.timeZone = engine.getTimeZoneId();
  myObj.end = {};
  myObj.end.dateTime = sdf.format(endDate);
  myObj.end.timeZone = engine.getTimeZoneId();
  myObj.source = {};
  myObj.conferenceData = {};
  myObj.conferenceData.createRequest = {};
  myObj.conferenceData.createRequest.requestId = `q-${processInstance.getProcessInstanceId()}`;
  myObj.conferenceData.createRequest.conferenceSolutionKey = {};
  myObj.conferenceData.createRequest.conferenceSolutionKey.type =
    "hangoutsMeet";

  let request = httpClient.begin().googleOAuth2(quser, "Calendar");
  if (meetUrlDataDef !== null) {
    request = request.queryParam("conferenceDataVersion", "1");
  }
  const response = request
    .body(JSON.stringify(myObj), "application/json")
    .post(uri);

  const status = response.getStatusCode();
  if (status >= 300) {
    const accessLog = `---POST request---${status}\n${response.getResponseAsString()}`;
    engine.log(accessLog);
    throw `Failed to insert event. status:${status}`;
  }

  const responseStr = response.getResponseAsString();
  const eventJson = JSON.parse(responseStr);
  const eventId = eventJson.id;
  const eventUrl = eventJson.htmlLink;
  const meetUrl = eventJson.hangoutLink;
  if (eventIdDataDef !== null) {
    engine.setData(eventIdDataDef, eventId);
  }
  if (eventUrlDataDef !== null) {
    engine.setData(eventUrlDataDef, eventUrl);
  }
  if (meetUrlDataDef !== null) {
    engine.setData(meetUrlDataDef, meetUrl);
  }
}
]]></script>
 
 
<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
AABJRU5ErkJggg==
</icon>
    
    
<test><![CDATA[
/**
 * 設定の準備
 * @param configs
 * @param calendarId
 * @param eventTitle
 * @param startDate
 * @param endDate
 * @param location
 * @param description
 * @return {
 *     idDef: {Object}, 予定 ID を保存するデータ項目
 *     urlDef: {Object}, 予定 URL を保存するデータ項目
 *     meetDef: {Object} Meet URL を保存するデータ項目
 * }
 */
const prepareConfigs = (configs, calendarId, eventTitle, startDate, endDate, location, description) => {

    // Google ドライブ に接続するユーザを config に指定
    const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
    configs.putObject('conf_User', quser);

    configs.put('conf_DataIdB', calendarId,); //C2: Calendar ID
    configs.put('conf_DataIdC', eventTitle); //C3: 予定タイトル
	
    // 日時型データ項目（開始時刻）を準備して、config に指定
    const startDateDef = engine.createDataDefinition('開始時刻', 1, 'q_StartDate', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdD', startDateDef);
    // 日時型データ項目の値（開始時刻）を指定
    if ( startDate !== null ){ 
        //スクリプトの addHours() に対応 - java.sql.Timestamp.valueOf(startDate) ではエラーになる
        const datetimeS = new com.questetra.bpms.util.AddableTimestamp(java.sql.Timestamp.valueOf(startDate).getTime()); 
        engine.setData(startDateDef, datetimeS);
    }else{
        engine.setData(startDateDef, null);
    }
	
    // 日時型データ項目（終了時刻）を準備して、config に指定
    const endDateDef = engine.createDataDefinition('終了時刻', 2, 'q_EndDate', 'STRING_TEXTFIELD');
    configs.putObject('conf_DataIdE', endDateDef);
    // 日時型データ項目の値（終了時刻）を指定
    if ( endDate !== null ){ 
        const datetimeE = java.sql.Timestamp.valueOf(endDate); 
        engine.setData(endDateDef, datetimeE);
    }else{
        engine.setData(endDateDef, null);
    }

    configs.put('conf_DataIdF', location); //C6: 場所
    configs.put('conf_DataIdG', description); //C7: 説明

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('予定 ID', 3, 'q_ids', 'STRING_TEXTAREA');
    configs.putObject('conf_eventId', idDef);
    // 文字型データ項目の値（予定 ID を保存するデータ項目）を指定
    engine.setData(idDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('予定 URL', 4, 'q_urls', 'STRING_TEXTAREA');
    configs.putObject('conf_eventUrl', urlDef);
    // 文字型データ項目の値（予定 URL を保存するデータ項目）を指定
    engine.setData(urlDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const meetDef = engine.createDataDefinition('Meet URL', 5, 'q_meet', 'STRING_TEXTAREA');
    configs.putObject('conf_meetUrl', meetDef);
    // 文字型データ項目の値（Meet URL を保存するデータ項目）を指定
    engine.setData(meetDef, '事前文字列');

    return {
        idDef,
        urlDef,
        meetDef
    };
};



/**
 * Google ドライブに接続する UserID に対応する QuserView がなくエラーになる場合
 */
test('User not found', () => {
    prepareConfigs(configs, 'abcde@123.com', 'event1', '2022-01-01 10:03:00', '2022-01-01 18:03:00', 'location1', 'description1');
    // 設定されたユーザが削除された場合　未設定と同じ状態に上書きする
    configs.put('conf_User', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('User not found.');
    }
});


/**
 * 予定タイトルが空でエラーになる場合
 */
test('Event Title is blank', () => {
    prepareConfigs(configs, 'bcdef@234.com', '', '2022-01-02 10:03:00', '2022-01-02 18:03:00', 'location2', 'description2');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Event Title is blank');
    }
});


/**
 * 開始時刻が空でエラーになる場合
 */
test('Event Start Date is blank', () => {
    prepareConfigs(configs, 'cdefg@345.com', 'event3', null, '2022-01-03 18:03:00', 'location3', 'description3');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Event Start Date is blank');
    }
});


/**
 * 終了時刻が開始時刻より前でエラーになる場合
 */
test('Event End Date comes before Event Start Date', () => {
    prepareConfigs(configs, 'defgh@456.net', 'event4', '2022-01-04 18:03:00', '2022-01-04 10:03:00', 'location4', 'description4');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Event End Date comes before Event Start Date');
    }
});


/**
 * カレンダーIDにサポート外の文字 $ が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - used $', () => {
    prepareConfigs(configs, 'efghi$＠56789.com', 'event5', '2022-01-05 10:03:00', '2022-01-05 18:03:00', 'location5', 'description5');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Calendar ID');
    }
});

/**
 * カレンダーIDにサポート外の文字 & が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - used &', () => {
    prepareConfigs(configs, 'efghi＠56789!&.com', 'event5', '2022-01-05 10:03:00', '2022-01-05 18:03:00', 'location5', 'description5');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Calendar ID');
    }
});

/**
 * カレンダーIDにサポート外の文字 : が含まれていてエラーになる場合
 */
test('Invalid Calendar ID - used :', () => {
    prepareConfigs(configs, 'efghi＠56:789.com', 'event5', '2022-01-05 10:03:00', '2022-01-05 18:03:00', 'location5', 'description5');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Calendar ID');
    }
});


/**
 * リクエストのテスト（予定を追加する）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param calendarId
 * @param eventTitle
 * @param startDate
 * @param endDate
 * @param timezone
 * @param location
 * @param description
 * @param meetUrlDataDef
 */
const assertPostRequest = ({url, method, contentType, body}, calendarId, eventTitle, startDate, endDate, timezone, location, description, meetUrlDataDef) => {
    if (meetUrlDataDef !== null ) {
        expect(url).toEqual(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?conferenceDataVersion=1`);
    }else{
        expect(url).toEqual(`https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`);
    }

    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);

    expect(bodyObj.summary).toEqual(eventTitle);

    if ( location !== null ){ 
        expect(bodyObj.location).toEqual(location);
    }else{
        //location が空の場合、bodyObj に location の指定がないことを確認
        expect(bodyObj.location === undefined).toEqual(true);
    }

    if ( description !== null ){ 
        expect(bodyObj.description).toEqual(description);
    }else{
        //description が空の場合、bodyObj に description の指定がないことを確認
        expect(bodyObj.description === undefined).toEqual(true);
    }

    expect(bodyObj.start.dateTime).toEqual(startDate);
    expect(bodyObj.start.timeZone).toEqual(timezone);
    expect(bodyObj.end.dateTime).toEqual(endDate);
    expect(bodyObj.end.timeZone).toEqual(timezone);
    expect(bodyObj.conferenceData.createRequest.requestId).toEqual(`q-${processInstance.getProcessInstanceId()}`);
    expect(bodyObj.conferenceData.createRequest.conferenceSolutionKey.type).toEqual("hangoutsMeet");
};


/**
 * POST リクエスト（予定追加）のレスポンスを準備
 * @param id ID作成用文字列
 * @param description 説明作成用文字列
 * @param location 場所作成用文字列
 * @return {Object} responseObj
 */
const preparePostResponse = (id ,description, location) => {

    return {
        "id": `id_${id}`,
        "htmlLink": `https://www.google.com/calendar/event?eid=htmlLink_${id}`,
        "hangoutLink": `https://www.google.com/calendar/event?eid=hangoutLink_${id}`,
        "summary": `summary_${id}`,
        "description": `${description}`,
        "location": `${location}`
    }
};


/**
 * POST API リクエストでエラー
 *（予定を追加する）
 *（タイムゾーン GMT+04:30）
 */
test('Failed to insert event - timezone:GMT+04:30', () => {

  engine.setTimeZoneOffsetInMinutes(270); // テストスクリプトではタイムゾーンの値をコントロール可能 timezone = 'GMT+04:30' に設定する

  const meetDef = prepareConfigs(configs, 'fghij*!@67890.com', 'event6', '2022-01-06 10:03:00', '2022-01-06 18:03:00', 'location6', 'description6');
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fghij*!@67890.com', 'event6', '2022-01-06T10:03:00', '2022-01-06T18:03:00', 'GMT+04:30', 'location6', 'description6', meetDef);
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to insert event. status:400');
  }
});


/**
 * POST API 成功
 *（予定を追加する）
 *（カレンダー ID に許可されている全ての記号が含まれている）
 *（予定 ID 、予定 URL 、Google Meet の URL を保存するデータ項目全てを設定）
 *（タイムゾーン GMT+09:00）
 */
test('Success', () => {

    const {
        idDef,
        urlDef,
        meetDef
    } = prepareConfigs(configs, 'ghijk_78901-_.!*\'@a-sample.com', 'event7', '2022-01-07 10:03:00', '2022-01-07 18:03:00', 'location7', 'description7');
    
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'ghijk_78901-_.!*\'@a-sample.com', 'event7', '2022-01-07T10:03:00', '2022-01-07T18:03:00', 'GMT+09:00', 'location7', 'description7', meetDef);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('calender123', 'location7', 'description7')));
    });

    // <script> のスクリプトを実行
    execute();
    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('id_calender123');
    expect(engine.findData(urlDef)).toEqual('https://www.google.com/calendar/event?eid=htmlLink_calender123');
    expect(engine.findData(meetDef)).toEqual('https://www.google.com/calendar/event?eid=hangoutLink_calender123');
});


/**
 * POST API 成功
 *（予定を追加する）
 *（予定 ID 、予定 URL 、Google Meet の URL を保存するデータ項目全てが未設定）
 *（場所、説明、終了時刻が空）
 *（タイムゾーン GMT）
 */
test('Success - All of Data Items to save result are not set - location, description and End Datetime are blank - timezone:GMT', () => {
    
    engine.setTimeZoneOffsetInMinutes(0); // テストスクリプトではタイムゾーンの値をコントロール可能　timezone = 'GMT'　に設定する

    prepareConfigs(configs, 'hijkl@890.net', 'event8', '2022-01-08 10:03:00', null, '', '');

    // ID を保存する文字型データ項目を未設定に上書き
    configs.put('conf_eventId', '');

    // URL を保存する文字型データ項目を未設定に上書き
    configs.put('conf_eventUrl', '');

    // MEET を保存する文字型データ項目を未設定に上書き
    configs.put('conf_meetUrl', '');
    
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'hijkl@890.net', 'event8', '2022-01-08T10:03:00', '2022-01-08T11:03:00', 'GMT', '', '', null);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('calender456', '', '')));
    });

    // <script> のスクリプトを実行
    execute();
});
]]></test>
 
</service-task-definition>
