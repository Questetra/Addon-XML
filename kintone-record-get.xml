<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Get Record</label>
<label locale="ja">kintone: レコード取得</label>
<last-modified>2021-12-13</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Get values of a record in a Kintone App.</summary>
<summary locale="ja">kintone アプリのレコード（1件）の内容を取得します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: Authorization Setting in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した認証設定</label>
  </config>
  <config name="conf_basic" required="false" form-type="OAUTH2">
    <label>C2: Basic Auth Setting (required if enabled on Kintone)</label>
    <label locale="ja">C2: Basic 認証設定（kintone で設定されている場合のみ）</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C3: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C3: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C4: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C4: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C5: App ID</label>
    <label locale="ja">C5: アプリ ID</label>
  </config>
  <config name="conf_recordId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|SELECT_SINGLE">
    <label>C6: Record ID</label>
    <label locale="ja">C6: レコード ID</label>
  </config>
  <config name="conf_fieldCode1" required="false" form-type="TEXTFIELD">
    <label>C7F: Field Code 1</label>
    <label locale="ja">C7F: フィールドコード_1</label>
  </config>
  <config name="conf_fieldValue1" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C7V: Data item that will save Value 1</label>
    <label locale="ja">C7V: 値_1 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode2" required="false" form-type="TEXTFIELD">
    <label>C8F: Field Code 2</label>
    <label locale="ja">C8F: フィールドコード_2</label>
  </config>
  <config name="conf_fieldValue2" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C8V: Data item that will save Value 2</label>
    <label locale="ja">C8V: 値_2 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode3" required="false" form-type="TEXTFIELD">
    <label>C9F: Field Code 3</label>
    <label locale="ja">C9F: フィールドコード_3</label>
  </config>
  <config name="conf_fieldValue3" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C9V: Data item that will save Value 3</label>
    <label locale="ja">C9V: 値_3 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode4" required="false" form-type="TEXTFIELD">
    <label>C10F: Field Code 4</label>
    <label locale="ja">C10F: フィールドコード_4</label>
  </config>
  <config name="conf_fieldValue4" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C10V: Data item that will save Value 4</label>
    <label locale="ja">C10V: 値_4 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode5" required="false" form-type="TEXTFIELD">
    <label>C11F: Field Code 5</label>
    <label locale="ja">C11F: フィールドコード_5</label>
  </config>
  <config name="conf_fieldValue5" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C11V: Data item that will save Value 5</label>
    <label locale="ja">C11V: 値_5 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode6" required="false" form-type="TEXTFIELD">
    <label>C12F: Field Code 6</label>
    <label locale="ja">C12F: フィールドコード_6</label>
  </config>
  <config name="conf_fieldValue6" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C12V: Data item that will save Value 6</label>
    <label locale="ja">C12V: 値_6 を保存するデータ項目</label>
  </config>
  <config name="conf_fieldCode7" required="false" form-type="TEXTFIELD">
    <label>C13F: Field Code 7</label>
    <label locale="ja">C13F: フィールドコード_7</label>
  </config>
  <config name="conf_fieldValue7" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C13V: Data item that will save Value 7</label>
    <label locale="ja">C13V: 値_7 を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/kintone-record-get/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/kintone-record-get/</help-page-url>

<script><![CDATA[

const FIELD_NUM = 7; // 扱えるフィールドの数

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const auth = configs.get("conf_auth");
  const basic = configs.get("conf_basic");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const recordId = retrieveRecordId();

  const fieldCodeList = [];
  const fieldValueDefList = [];
  retrieveFieldConfigs( fieldCodeList, fieldValueDefList );

  const apiToken = httpClient.getOAuth2Token( auth );

  //// == 演算 / Calculating ==
  const apiUri = determineApiUri( domain, guestSpaceId, appId, recordId );
  const fieldValueList = [];
  const fieldTypeList = [];
  getRecord( apiUri, apiToken, basic, fieldCodeList, fieldValueList, fieldTypeList );

  //// == ワークフローデータへの代入 / Data Updating ==
  setDataByLists( fieldValueDefList, fieldValueList, fieldTypeList );
}

/**
  * config からレコード ID を読み出す
  * @return {String} recordId  レコード ID
  */
function retrieveRecordId() {
  const recordIdDef = configs.getObject( "conf_recordId" );
  if ( recordIdDef.matchDataType("SELECT_SINGLE") ) { // 選択型データ項目の場合
    const select = engine.findData( recordIdDef );
    if ( select === null || select.size() === 0 ) { // 未選択
      throw "Record ID is not selected.";
    }
    return select.get(0).getValue();
  }
  return engine.findData( recordIdDef ); // 文字型データ項目の場合
}

/**
  * config のフィールド情報を読み出し、配列に格納する
  * 以下の場合はエラーとする
  * 1. フィールドコードが空で、値を保存するデータ項目が設定されている
  * 2. フィールドコードが設定されていて、値を保存するデータ項目が設定されていない
  * 3. 値を保存するデータ項目が重複して設定されている
  * 4. フィールドコードが一つも設定されていない
  * @param {Array<String>} fieldCodeList  フィールドコードを格納する配列
  * @param {Array<ProcessDataDefinitionView>} fieldValueDefList  フィールドの値を格納するデータ項目の ProcessDataDefinitionView を格納する配列
  */
function retrieveFieldConfigs( fieldCodeList, fieldValueDefList ) {
  const dataItemNumList = []; // データ項目の重複確認用
  for (let i = 0; i < FIELD_NUM; i++) {
    const fieldCodeConfigName = `conf_fieldCode${i+1}`;
    const fieldValueConfigName = `conf_fieldValue${i+1}`;
    const fieldCode = configs.get( fieldCodeConfigName );
    const fieldValueDef = configs.getObject( fieldValueConfigName );
    const dataItemNum = configs.get( fieldValueConfigName ); // データ項目の重複確認用
    if ( fieldCode === "" || fieldCode === null ) { // フィールドコードが空
      if ( fieldValueDef !== null ) { // 値を保存するデータ項目が設定されている
        throw `Field Code ${i+1} is empty but Data item that will save Value ${i+1} is set.`;
      } else { // 値を保存するデータ項目が設定されていない
        continue;
      }
    } else { // フィールドコードが設定されている
      if ( fieldValueDef === null ) { // 値を保存するデータ項目が設定されていない
        throw `Data item to save the value of ${fieldCode} is not set.`;
      }
    }
    if ( dataItemNumList.indexOf( dataItemNum ) !== -1 ) { // 既に指定されているデータ項目
      throw "The same data item is set multiple times.";
    }
    fieldCodeList.push( fieldCode );
    fieldValueDefList.push( fieldValueDef );
    dataItemNumList.push( dataItemNum ); // データ項目の重複確認用
  }
  if ( fieldCodeList.length === 0 ) { // フィールドコードが一つも設定されていない
    throw "No Field Code is set.";
  }
}

/**
  * kintone REST API のレコード取得の URI を決定する
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  * @return {String} apiUri  API の URI
  */
function determineApiUri( domain, guestSpaceId, appId, recordId ) {
  checkDomainAndIds( domain, appId, recordId );
  let apiUri = "";
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/record.json?app=${appId}&id=${recordId}`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/record.json?app=${appId}&id=${recordId}`;
  }
  return apiUri;
}

/**
  * ドメイン、アプリ ID、レコード ID が空または不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  */
function checkDomainAndIds( domain, appId, recordId ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const reg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !reg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
  if ( recordId === "" || recordId === null ) {
    throw "Record ID is empty.";
  }
  if ( !isValidId(recordId) ) {
    throw "Invalid Record ID.";
  }
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

/**
  * kintone REST API にレコード取得の GET リクエストを送信する
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {Array<String>} fieldCodeList  フィールドコードが格納された配列
  * @param {Array<String>} fieldValueList  フィールドの値を格納する配列
  * @param {Array<String>} fieldTypeList  フィールドの型を格納する配列
  */
function getRecord( apiUri, apiToken, basic, fieldCodeList, fieldValueList, fieldTypeList ) {
  let request = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken );
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  //when error thrown
  const response = request.get( apiUri );
  const responseJson = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    engine.log(`API URI: ${apiUri}`);
    const accessLog = `---GET request--- ${status}\n${responseJson}\n`;
    engine.log(accessLog);
    throw `Failed to get record. status: ${status}`;
  }
  const json = JSON.parse(responseJson);
  extractFieldValues( json.record, fieldCodeList, fieldValueList, fieldTypeList );
}

/**
  * レコード情報の JSON オブジェクトからフィールドコードに対応する値を読み出し、配列に格納する
  * @param {Object} recordObj  レコード情報の JSON オブジェクト
  * @param {Array<String>} fieldCodeList  フィールドコードが格納された配列
  * @param {Array<String>} fieldValueList フィールドの値を格納する配列
  * @param {Array<String>} fieldTypeList  フィールドの型を格納する配列
  */
function extractFieldValues( recordObj, fieldCodeList, fieldValueList, fieldTypeList ) {
  for ( const i in fieldCodeList ) {
    if ( recordObj[fieldCodeList[i]] === undefined ) { // レコード情報に一致するフィールドコードがない場合、エラー
      throw `${fieldCodeList[i]} does not exist in the record.`;
    }
    const fieldValueObj = recordObj[fieldCodeList[i]].value;
    const fieldType = recordObj[fieldCodeList[i]].type;
    if ( fieldValueObj === null ) { // null であれば、値の配列に空文字列を push する
      fieldValueList.push( "" );
      fieldTypeList.push( fieldType );
    } else if ( typeof fieldValueObj === 'string' ) { // String であれば、値の配列に文字列を push する
      fieldValueList.push( fieldValueObj );
      fieldTypeList.push( fieldType );
    } else { // String 以外のクラス（Object）であればエラー
      throw `Unable to save the value of ${fieldCodeList[i]}. Field Type ${fieldType} is not supported.`;
    }
  }
}

/**
  * データ項目に出力する
  * @param {Array<ProcessDataDefinitionView>} dataDefList  保存先データ項目の ProcessDataDefinitionView が格納された配列
  * @param {Array<String>} dataStringList  出力するデータが格納された配列
  * @param {Array<String>} fieldTypeList  出力するデータのフィールド型が格納された配列
  */
function setDataByLists( dataDefList, dataStringList, fieldTypeList ) {
  if ( (dataDefList.length !== dataStringList.length) || (dataDefList.length !== fieldTypeList.length) ) {
    throw "Array length does not match.";
  }
  for (let i in dataDefList) {
    if ( dataDefList[i] !==  null ) {
      if ( dataDefList[i].matchDataType("STRING") ) { // 保存先データ項目が文字型の場合
        // 保存先データ項目が改行に対応しておらず、保存する文字列に改行が含まれる場合のエラーは QBPMS のバリデーションに任せる
        engine.setData( dataDefList[i], dataStringList[i] );
      } else if ( dataDefList[i].matchDataType("DECIMAL") ) { // 保存先データ項目が数値型の場合
        convertTypeAndSetData( dataDefList[i], dataStringList[i], fieldTypeList[i], "DECIMAL", "Numeric" );
      } else if ( dataDefList[i].matchDataType("SELECT") ) { // 保存先データ項目が選択型の場合
        convertTypeAndSetData( dataDefList[i], dataStringList[i], fieldTypeList[i], "SELECT", "Select" );
      } else if ( dataDefList[i].matchDataType("DATE") ) { // 保存先データ項目が日付型の場合
        convertTypeAndSetData( dataDefList[i], dataStringList[i], fieldTypeList[i], "DATE", "Date" );
      } else if ( dataDefList[i].matchDataType("DATETIME") ) { // 保存先データ項目が日時型の場合
        convertTypeAndSetData( dataDefList[i], dataStringList[i], fieldTypeList[i], "DATETIME", "Datetime" );
      }
    }
  }
}

/**
  * データ項目の型にしたがってデータを変換して出力する
  * 対応しないフィールド型の場合はエラーとする
  * 変換できない値の場合はエラーとする
  * @param {ProcessDataDefinitionView} dataDef  保存先データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力するデータ（変換前の文字列データ）
  * @param {String} fieldType  出力するデータのフィールド型
  * @param {String} dataType  保存先データ項目のデータ型
  * @param {String} dataTypeLabel  保存先データ項目のデータ型の表示名（エラー出力用）
  */
function convertTypeAndSetData( dataDef, dataString, fieldType, dataType, dataTypeLabel ) {
  const supportedFieldTypes = { // 保存先データ項目が文字型以外の場合にサポートするフィールド型
    "DECIMAL": [ "NUMBER", "CALC" ],
    "SELECT": [ "DROP_DOWN", "RADIO_BUTTON" ],
    "DATE": [ "DATE", "CALC" ],
    "DATETIME": [ "DATETIME", "CREATED_TIME", "UPDATED_TIME", "CALC" ]
  };
  if ( supportedFieldTypes[dataType].indexOf( fieldType ) === -1 ) { // 対応しないフィールド型の場合はエラー
    throw `The value of Field Type ${fieldType} cannot be saved to ${dataTypeLabel} type data item.`;
  }
  let convertedData;
  if ( dataString === "" || dataString === null ) { // 空値の場合は null を設定
    convertedData = null;
  } else {
    try { // CALC 等、フィールド型だけでは変換可否を判定できないものがあるので try-catch でエラーを捕捉
      switch (dataType) {
        case 'DECIMAL':
          convertedData = new java.math.BigDecimal( dataString );
          break;
        case 'SELECT': // 一致する選択肢 ID がない場合のエラーは QBPMS のバリデーションに任せる
          convertedData = new java.util.ArrayList();
          convertedData.add( dataString );
          break;
        case 'DATE':
          convertedData = java.sql.Date.valueOf( dataString );
          break;
        case 'DATETIME':
          const dateFormatter = new java.text.SimpleDateFormat( "yyyy-MM-dd'T'HH:mm:ssX" );
          convertedData = new java.sql.Timestamp( dateFormatter.parse( dataString ).getTime() );
          break;
      }
    } catch (e) { // 変換できない値の場合はエラー
      throw `Returned value "${dataString}" cannot be saved to ${dataTypeLabel} type data item.`;
    }
  }
  engine.setData( dataDef, convertedData );
}

]]></script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

<test><![CDATA[

const FIELD_SIZE = 7;

/**
 * 設定の準備
 * @param configs
 * @param domain
 * @param guestSpaceId
 * @param appId
 * @param recordIdDef
 * @return dataDefList
 */
const prepareConfigs = (configs, domain, guestSpaceId, appId, recordIdDef) => {
  configs.put('conf_auth', 'kintone');
  configs.put('conf_domain', domain);
  configs.put('conf_guestSpaceId', guestSpaceId);
  configs.put('conf_appId', appId);
  configs.putObject('conf_recordId', recordIdDef);
  const dataDefList = [];
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, `フィールドコード_${i+1}`);

    // 文字型データ項目（単一行）を準備
    const dataDef = engine.createDataDefinition(`文字型データ項目_${i+1}`, i+2, `q_value${i+1}`, 'STRING_TEXTFIELD');
    engine.setData(dataDef, `事前文字列_${i+1}`);
    configs.putObject(`conf_fieldValue${i+1}`, dataDef);
    dataDefList.push(dataDef);
  }
  return dataDefList;
};

/**
 * レコード ID の準備（文字型データ項目の場合）
 * @param recordId
 * @return recordIdDef
 */
const prepareRecordIdStringDef = (recordId) => {
  // 文字型データ項目（単一行）を準備
  const recordIdDef = engine.createDataDefinition('レコード ID', 1, 'q_recordId', 'STRING_TEXTFIELD');
  engine.setData(recordIdDef, recordId);
  return recordIdDef;
};

/**
 * レコード ID の準備（選択型データ項目の場合）
 * @param recordId
 * @return recordIdDef
 */
const prepareRecordIdSelectDef = (recordId) => {
  // 選択型データ項目を準備
  const recordIdDef = engine.createDataDefinition('レコード ID', 1, 'q_recordId', 'SELECT_SINGLE');
  const select = new java.util.ArrayList();
  const item = engine.createItem(recordId, `${recordId} を選択`);
  select.add(item);
  engine.setData(recordIdDef, select);
  return recordIdDef;
};

/**
 * リクエストのテスト
 * ゲストスペース外のアプリの場合
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param domain
 * @param appId
 * @param recordId
 */
const assertRequestWithoutGuestSpaceId = ({url, method}, domain, appId, recordId) => {
  expect(method).toEqual('GET');
  expect(url).toEqual(`https://${domain}/k/v1/record.json?app=${appId}&id=${recordId}`);
};

/**
 * リクエストのテスト
 * ゲストスペース内のアプリの場合
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param domain
 * @param guestSpaceId
 * @param appId
 * @param recordId
 */
const assertRequestWithGuestSpaceId = ({url, method}, domain, guestSpaceId, appId, recordId) => {
  expect(method).toEqual('GET');
  expect(url).toEqual(`https://${domain}/k/guest/${guestSpaceId}/v1/record.json?app=${appId}&id=${recordId}`);
};

/**
 * ドメインが不正な文字列でエラーになる場合
 */
test('Invalid Kintone domain', () => {
  prepareConfigs(configs, 'invalidDomain', '1', '2', prepareRecordIdStringDef('3'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Kintone domain.');
  }
});

/**
 * ゲストスペース ID が不正な文字列でエラーになる場合
 */
test('Invalid Guest Space ID', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', 'invalidId', '2', prepareRecordIdStringDef('3'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Guest Space ID.');
  }
});

/**
 * アプリ ID が不正な文字列でエラーになる場合
 */
test('Invalid App ID', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', 'invalidId', prepareRecordIdStringDef('3'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid App ID.');
  }
});

/**
 * レコード ID を文字型データ項目で指定し、不正な文字列でエラーになる場合
 */
test('Invalid Record ID - String', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', prepareRecordIdStringDef('invalidId'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Record ID.');
  }
});

/**
 * レコード ID を選択型データ項目で指定し、不正な文字列でエラーになる場合
 */
test('Invalid Record ID - Select', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', prepareRecordIdSelectDef('invalidId'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Record ID.');
  }
});

/**
 * レコード ID を文字型データ項目で指定し、空文字列でエラーになる場合
 */
test('Record ID is empty', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', prepareRecordIdStringDef(''));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Record ID is empty.');
  }
});

/**
 * レコード ID を選択型データ項目で指定し、未選択でエラーになる場合
 */
test('Record ID is not selected', () => {
  // 選択型データ項目を準備
  const recordIdDef = engine.createDataDefinition('レコード ID', 1, 'q_recordId', 'SELECT_SINGLE');
  const select = new java.util.ArrayList();
  engine.setData(recordIdDef, select); // 空のままセット
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', recordIdDef);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Record ID is not selected.');
  }
});

/**
 * フィールドコードが空なのに値を保存するデータ項目が設定されていて、エラーになる場合
 */
test('Field Code is empty while Data item to save the value is set', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', prepareRecordIdStringDef('3'));

  // 3 番目のフィールドコードを空に
  configs.put('conf_fieldCode3', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message)
      .endsWith('Field Code 3 is empty but Data item that will save Value 3 is set.');
  }
});

/**
 * フィールドコードが設定されているのに値を保存するデータ項目が設定されておらず、エラーになる場合
 */
test('Data item to save the value is not set', () => {
  configs.put('conf_auth', 'kintone');
  configs.put('conf_domain', 'xxxxx.kintone.com');
  configs.put('conf_appId', '123');
  configs.putObject('conf_recordId', prepareRecordIdStringDef('456'));
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, `フィールドコード_${i+1}`);

    // 文字型データ項目（単一行）を準備。4 番目の値を保存するデータ項目はセットしない
    if (i !== 3) {
      const dataDef = engine.createDataDefinition(`文字型データ項目_${i+1}`, i+2, `q_value${i+1}`, 'STRING_TEXTFIELD');
      engine.setData(dataDef, `事前文字列_${i+1}`);
      configs.putObject(`conf_fieldValue${i+1}`, dataDef);
    }
  }

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Data item to save the value of フィールドコード_4 is not set.');
  }
});

/**
 * 値を保存するデータ項目が重複して設定されており、エラーになる場合
 */
test('The same data item is set multiple times', () => {
  const dataDefList = prepareConfigs(configs, 'xxxxx.kintone.com', '1', '2', prepareRecordIdStringDef('3'));

  // 5 番目の値を保存するデータ項目を、4 番目のものと同じに
  configs.putObject('conf_fieldValue5', dataDefList[3]);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('The same data item is set multiple times.');
  }
});

/**
 * フィールドコードが一つも設定されておらず、エラーになる場合
 */
test('No Field Code is set', () => {
  configs.put('conf_auth', 'kintone');
  configs.put('conf_domain', 'xxxxx.kintone.com');
  configs.put('conf_appId', '123');
  configs.putObject('conf_recordId', prepareRecordIdStringDef('456'));

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message)
      .endsWith('No Field Code is set.');
  }
});

/**
 * レコード取得成功
 * ゲストスペース外のアプリ
 * レコード ID は文字型データ項目で指定
 * 取得データはすべて文字列（単一行）で、保存先データ項目はすべて文字列（単一行）
 */
test('200 Success - without guestSpaceId, recordId with String, SINGLE_LINE_TEXT to STRING_TEXTFIELD', () => {
  const dataDefList = prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      responseObj.record[`フィールドコード_${i+1}`] = {
        "type": "SINGLE_LINE_TEXT",
        "value": `値_${i+1}`
      };
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();
  
  // 文字型データ項目の値をチェック
  for (let i = 0; i < FIELD_SIZE; i++) {
    expect(engine.findData(dataDefList[i])).toEqual(`値_${i+1}`);
  }
});

/**
 * レコード取得成功
 * ゲストスペース内のアプリ
 * レコード ID は選択型データ項目で指定
 * 取得データに文字列（複数行）を含み、複数行のものの保存先データ項目は文字列（複数行）
 */
test('200 Success - with guestSpaceId, recordId with Select, MULTI_LINE_TEXT to STRING_TEXTAREA', () => {
  const dataDefList = prepareConfigs(configs, 'xxxxx.cybozu.com', '123', '456', prepareRecordIdSelectDef('789'));

  // 文字型データ項目（複数行）を準備し、1番目の保存先データ項目を置き換える
  const dataDef = engine.createDataDefinition('文字型データ項目（複数行）', 10, 'q_textarea', 'STRING_TEXTAREA');
  engine.setData(dataDef, '事前文字列');
  configs.putObject('conf_fieldValue1', dataDef);
  dataDefList[0] = dataDef;

  httpClient.setRequestHandler((request) => {
    assertRequestWithGuestSpaceId(request, 'xxxxx.cybozu.com', '123', '456', '789');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      if (i === 0) {
        responseObj.record['フィールドコード_1'] = {
          "type": "MULTI_LINE_TEXT",
          "value": "複数行の\n文字列"
        };
      } else {
        responseObj.record[`フィールドコード_${i+1}`] = {
          "type": "SINGLE_LINE_TEXT",
          "value": `値_${i+1}`
        };
      }
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();
  
  // 文字型データ項目の値をチェック
  for (let i = 0; i < FIELD_SIZE; i++) {
    if (i === 0) {
      expect(engine.findData(dataDefList[0])).toEqual('複数行の\n文字列');
    } else {
      expect(engine.findData(dataDefList[i])).toEqual(`値_${i+1}`);
    }
  }
});

/**
 * GET リクエストで失敗
 */
test('GET Failed', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to get record. status: 400');
  }
});

/**
 * 存在しないフィールドコードを指定し、エラーになる場合
 */
test('Field Code does not exist', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  // 6 番目のフィールドコードを存在しないものに
  configs.put(`conf_fieldCode6`, '存在しないフィールドコード');

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      responseObj.record[`フィールドコード_${i+1}`] = {
        "type": "SINGLE_LINE_TEXT",
        "value": `値_${i+1}`
      };
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('存在しないフィールドコード does not exist in the record.');
  }
});

/**
 * 値が配列のフィールドコードを指定し、エラーになる場合
 */
test('Field Value is an Array', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      if (i === 6) { // 7 番目のフィールドをチェックボックス型に
        responseObj.record['フィールドコード_7'] = {
          "type": "CHECK_BOX",
          "value": ["選択肢1", "選択肢2"]
        };
      } else {
        responseObj.record[`フィールドコード_${i+1}`] = {
          "type": "SINGLE_LINE_TEXT",
          "value": `値_${i+1}`
        };
      }
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Unable to save the value of フィールドコード_7. Field Type CHECK_BOX is not supported.');
  }
});

/**
 * 値がオブジェクトのフィールドコードを指定し、エラーになる場合
 */
test('Field Value is an Object', () => {
  prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      if (i === 0) { // 1 番目のフィールドを作成者に
        responseObj.record['フィールドコード_1'] = {
          "type": "CREATOR",
          "value": {
            "code": "ques",
            "name": "Ques Kun"
          }
        };
      } else {
        responseObj.record[`フィールドコード_${i+1}`] = {
          "type": "SINGLE_LINE_TEXT",
          "value": `値_${i+1}`
        };
      }
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Unable to save the value of フィールドコード_1. Field Type CREATOR is not supported.');
  }
});

/**
 * 保存先データ項目が文字型以外で、kintone 側のデータのフィールド型が保存可能なものでない場合
 */
test('Field Type not supported', () => {
  const dataDefList = prepareConfigs(configs, 'xxxxx.kintone.com', '', '123', prepareRecordIdStringDef('456'));

  // 数値型データ項目を準備し、2番目の保存先データ項目を置き換える
  const dataDef = engine.createDataDefinition('数値型データ項目', 10, 'q_decimal', 'DECIMAL');
  configs.putObject('conf_fieldValue2', dataDef);
  dataDefList[1] = dataDef;

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
      }
    };
    for (let i = 0; i < FIELD_SIZE; i++) {
      responseObj.record[`フィールドコード_${i+1}`] = {
        "type": "SINGLE_LINE_TEXT",
        "value": `値_${i+1}`
      };
    }
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message)
      .endsWith('The value of Field Type SINGLE_LINE_TEXT cannot be saved to Numeric type data item.');
  }
});

/**
 * 保存先データ項目が文字型以外で、kintone 側のデータのフィールド型が保存可能なものの場合（計算型以外）
 * 1. NUMBER to DECIMAL
 * 2. DROP_DOWN to SELECT
 * 3. RADIO_BUTTON to SELECT
 * 4. DATE to DATE
 * 5. DATETIME to DATETIME
 * 6. CREATED_TIME to DATETIME
 * 7. UPDATED_TIME to DATETIME
 */
test('200 Success - Saved to various data-type items', () => {
  configs.put('conf_auth', 'kintone');
  configs.put('conf_domain', 'xxxxx.kintone.com');
  configs.put('conf_appId', '123');
  configs.putObject('conf_recordId', prepareRecordIdStringDef('456'));
  const dataDefList = [];
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, `フィールドコード_${i+1}`);
    let dataDef;
    if (i < 1) { // DECIMAL
      dataDef = engine.createDataDefinition(`値を保存するデータ項目_${i+1}`, i+2, `q_value${i+1}`, 'DECIMAL');
      engine.setData(dataDef, new java.math.BigDecimal(123));
    } else if (i < 3) { // SELECT
      dataDef = engine.createDataDefinition(`値を保存するデータ項目_${i+1}`, i+2, `q_value${i+1}`, 'SELECT');
      const select = new java.util.ArrayList();
      const item = engine.createItem('元の選択肢の値', '元の選択肢のラベル');
      select.add(item);
      engine.setData(dataDef, select);
    } else if (i < 4) { // DATE
      dataDef = engine.createDataDefinition(`値を保存するデータ項目_${i+1}`, i+2, `q_value${i+1}`, 'DATE');
      engine.setData(dataDef, java.sql.Date.valueOf('2021-01-01'));
    } else if (i < 7) { // DATETIME
      dataDef = engine.createDataDefinition(`値を保存するデータ項目_${i+1}`, i+2, `q_value${i+1}`, 'DATETIME');
      engine.setData(dataDef, java.sql.Timestamp.valueOf("2021-01-01 12:12:12"));
    }
    configs.putObject(`conf_fieldValue${i+1}`, dataDef);
    dataDefList.push(dataDef);
  }

  httpClient.setRequestHandler((request) => {
    assertRequestWithoutGuestSpaceId(request, 'xxxxx.kintone.com', '123', '456');
    const responseObj = {
      "record": {
        "フィールドコード_7": {
          "type": "UPDATED_TIME",
          "value": "2022-02-02T02:27:27Z"
        },
        "フィールドコード_6": {
          "type": "CREATED_TIME",
          "value": "2022-02-02T02:26:26Z"
        },
        "フィールドコード_5": {
          "type": "DATETIME",
          "value": "2022-02-02T02:25:25Z"
        },
        "フィールドコード_4": {
          "type": "DATE",
          "value": "2024-04-04"
        },
        "フィールドコード_3": {
          "type": "RADIO_BUTTON",
          "value": "ラジオボタンの選択肢"
        },
        "フィールドコード_2": {
          "type": "DROP_DOWN",
          "value": "ドロップダウンの選択肢"
        },
        "フィールドコード_1": {
          "type": "NUMBER",
          "value": "777"
        }
      }
    };
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();
  
  // データ項目の値をチェック
  const string = new java.text.DecimalFormat('#,###.0').format(engine.findData(dataDefList[0]));
  expect(string).toEqual('777.0');
  expect(engine.findData(dataDefList[1]).get(0)).toEqual('ドロップダウンの選択肢');
  expect(engine.findData(dataDefList[2]).get(0)).toEqual('ラジオボタンの選択肢');
  expect(engine.findData(dataDefList[3]).toString()).toEqual('2024-04-04');

  const dateFormatter = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mmZ');
  dateFormatter.setTime
  const datetime = dateFormatter.format(engine.findData(dataDefList[4]));
  expect(datetime).toEqual('2022-02-02 11:25+0900');
  const createdTime = dateFormatter.format(engine.findData(dataDefList[5]));
  expect(createdTime).toEqual('2022-02-02 11:26+0900');
  const updatedTime = dateFormatter.format(engine.findData(dataDefList[6]));
  expect(updatedTime).toEqual('2022-02-02 11:27+0900');
});

]]></test>

</service-task-definition>
