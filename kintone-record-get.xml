<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Get Record</label>
<label locale="ja">kintone: レコード取得</label>
<!--
<last-modified>2020-09-15</last-modified>
-->
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Get values of a record in a Kintone App.</summary>
<summary locale="ja">kintone アプリのレコード（1件）の内容を取得します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: OAuth2 Setting Name in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した OAuth2 設定名</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C2: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C2: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C3: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C3: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C4: App ID</label>
    <label locale="ja">C4: アプリ ID</label>
  </config>
  <config name="conf_recordId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: Record ID</label>
    <label locale="ja">C5: レコード ID</label>
  </config>
  <config name="conf_fieldCode1" required="false" form-type="TEXTFIELD">
    <label>C6F: Field Code 1</label>
    <label locale="ja">C6F: フィールドコード_1</label>
  </config>
  <config name="conf_fieldValue1" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6V: Data item that will save Value 1</label>
    <label locale="ja">C6V: 値_1 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode2" required="false" form-type="TEXTFIELD">
    <label>C7F: Field Code 2</label>
    <label locale="ja">C7F: フィールドコード_2</label>
  </config>
  <config name="conf_fieldValue2" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C7V: Data item that will save Value 2</label>
    <label locale="ja">C7V: 値_2 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode3" required="false" form-type="TEXTFIELD">
    <label>C8F: Field Code 3</label>
    <label locale="ja">C8F: フィールドコード_3</label>
  </config>
  <config name="conf_fieldValue3" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C8V: Data item that will save Value 3</label>
    <label locale="ja">C8V: 値_3 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode4" required="false" form-type="TEXTFIELD">
    <label>C9F: Field Code 4</label>
    <label locale="ja">C9F: フィールドコード_4</label>
  </config>
  <config name="conf_fieldValue4" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C9V: Data item that will save Value 4</label>
    <label locale="ja">C9V: 値_4 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode5" required="false" form-type="TEXTFIELD">
    <label>C10F: Field Code 5</label>
    <label locale="ja">C10F: フィールドコード_5</label>
  </config>
  <config name="conf_fieldValue5" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C10V: Data item that will save Value 5</label>
    <label locale="ja">C10V: 値_5 を保存するデータ項目</label>
  </config>
    <config name="conf_fieldCode6" required="false" form-type="TEXTFIELD">
    <label>C11F: Field Code 6</label>
    <label locale="ja">C11F: フィールドコード_6</label>
  </config>
  <config name="conf_fieldValue6" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C11V: Data item that will save Value 6</label>
    <label locale="ja">C11V: 値_6 を保存するデータ項目</label>
  </config>
  <config name="conf_fieldCode7" required="false" form-type="TEXTFIELD">
    <label>C12F: Field Code 7</label>
    <label locale="ja">C12F: フィールドコード_7</label>
  </config>
  <config name="conf_fieldValue7" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C12V: Data item that will save Value 7</label>
    <label locale="ja">C12V: 値_7 を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/kintone-record-get/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/kintone-record-get/</help-page-url>

<script><![CDATA[

const FIELD_NUM = 7; // 扱えるフィールドの数

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const auth = configs.get("conf_auth");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const recordId = retrieveRecordId();

  const fieldCodeList = [];
  const fieldValueDefList = [];
  retrieveFieldConfigs( fieldCodeList, fieldValueDefList );

  const apiToken = httpClient.getOAuth2Token( auth );

  //// == 演算 / Calculating ==
  const apiUri = determineApiUri( domain, guestSpaceId, appId, recordId );
  const fieldValueList = [];
  const fieldTypeList = [];
  getRecord( apiUri, apiToken, fieldCodeList, fieldValueList, fieldTypeList );

  //// == ワークフローデータへの代入 / Data Updating ==
  setDataByLists( fieldValueDefList, fieldValueList, fieldTypeList );
}

/**
  * config からレコード ID を読み出す
  * @return {Stromg} recordId  レコード ID
  */
function retrieveRecordId() {
  const recordIdDef = configs.getObject( "conf_recordId" );
  let recordId = configs.get( "conf_recordId" );
  if ( recordIdDef !== null ) {
    recordId = engine.findData( recordIdDef );
  }
  return recordId;
}

/**
  * config のフィールド情報を読み出し、配列に格納する
  * 以下の場合はエラーとする
  * 1. フィールドコードが空で、値を保存するデータ項目が設定されている
  * 2. フィールドコードが設定されていて、値を保存するデータ項目が設定されていない
  * 3. 値を保存するデータ項目が重複して設定されている
  * 4. フィールドコードが一つも設定されていない
  * @param {Array<String>} fieldCodeList  フィールドコードを格納する配列
  * @param {Array<ProcessDataDefinitionView>} fieldValueDefList  フィールドの値を格納するデータ項目の ProcessDataDefinitionView を格納する配列
  */
function retrieveFieldConfigs( fieldCodeList, fieldValueDefList ) {
  const dataItemNumList = []; // データ項目の重複確認用
  for (let i = 0; i < FIELD_NUM; i++) {
    const fieldCodeConfigName = `conf_fieldCode${i+1}`;
    const fieldValueConfigName = `conf_fieldValue${i+1}`;
    const fieldCode = configs.get( fieldCodeConfigName );
    const fieldValueDef = configs.getObject( fieldValueConfigName );
    const dataItemNum = configs.get( fieldValueConfigName ); // データ項目の重複確認用
    if ( fieldCode === "" || fieldCode === null ) { // フィールドコードが空
      if ( fieldValueDef !== null ) { // 値を保存するデータ項目が設定されている
        throw `Field Code ${i+1} is empty but Data item that will save Value ${i+1} is set.`;
      } else { // 値を保存するデータ項目が設定されていない
        continue;
      }
    } else { // フィールドコードが設定されている
      if ( fieldValueDef === null ) { // 値を保存するデータ項目が設定されていない
        throw `Data item to save the value of ${fieldCode} is not set.`;
      }
    }
    if ( dataItemNumList.indexOf( dataItemNum ) !== -1 ) { // 既に指定されているデータ項目
      throw "The same data item is set multiple times.";
    }
    fieldCodeList.push( fieldCode );
    fieldValueDefList.push( fieldValueDef );
    dataItemNumList.push( dataItemNum ); // データ項目の重複確認用
  }
  if ( fieldCodeList.length === 0 ) { // フィールドコードが一つも設定されていない
    throw "No Field Code is set.";
  }
}

/**
  * kintone REST API のレコード取得の URI を決定する
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  * @return {String} apiUri  API の URI
  */
function determineApiUri( domain, guestSpaceId, appId, recordId ) {
  checkDomainAndIds( domain, appId, recordId );
  let apiUri = "";
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/record.json?app=${appId}&id=${recordId}`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/record.json?app=${appId}&id=${recordId}`;
  }
  return apiUri;
}

/**
  * ドメイン、アプリ ID、レコード ID が空または不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} appId  アプリ ID
  * @param {String} recordId  レコード ID
  */
function checkDomainAndIds( domain, appId, recordId ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const reg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !reg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
  if ( recordId === "" || recordId === null ) {
    throw "Record ID is empty.";
  }
  if ( !isValidId(recordId) ) {
    throw "Invalid Record ID.";
  }
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

/**
  * kintone REST API にレコード取得の GET リクエストを送信する
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {Array<String>} fieldCodeList  フィールドコードが格納された配列
  * @param {Array<String>} fieldValueList  フィールドの値を格納する配列
  * @param {Array<String>} fieldTypeList  フィールドの型を格納する配列
  */
function getRecord( apiUri, apiToken, fieldCodeList, fieldValueList, fieldTypeList ) {
  engine.log(`API URI: ${apiUri}`);
  const response = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken )
    .get( apiUri );
  //when error thrown
  const responseJson = response.getResponseAsString();
  const status = response.getStatusCode();
  const accessLog = `---GET request--- ${status}\n${responseJson}\n`;
  engine.log(accessLog);
  if (status >= 300) {
    throw `Failed to get record. status: ${status}`;
  }
  const json = JSON.parse(responseJson);
  extractFieldValues( json.record, fieldCodeList, fieldValueList, fieldTypeList );
}

/**
  * レコード情報の JSON オブジェクトからフィールドコードに対応する値を読み出し、配列に格納する
  * @param {Object} recordObj  レコード情報の JSON オブジェクト
  * @param {Array<String>} fieldCodeList  フィールドコードが格納された配列
  * @param {Array<String>} fieldValueList フィールドの値を格納する配列
  * @param {Array<String>} fieldTypeList  フィールドの型を格納する配列
  */
function extractFieldValues( recordObj, fieldCodeList, fieldValueList, fieldTypeList ) {
  for ( const i in fieldCodeList ) {
    if ( recordObj[fieldCodeList[i]] === undefined ) { // レコード情報に一致するフィールドコードがない場合、エラー
      throw `${fieldCodeList[i]} does not exist in the record.`;
    }
    const fieldValueObj = recordObj[fieldCodeList[i]].value;
    const fieldType = recordObj[fieldCodeList[i]].type;
    if ( fieldValueObj === null ) { // null であれば、値の配列に空文字列を push する
      fieldValueList.push( "" );
      fieldTypeList.push( fieldType );
    } else if ( typeof fieldValueObj === 'string' ) { // String であれば、値の配列に文字列を push する
      fieldValueList.push( fieldValueObj );
      fieldTypeList.push( fieldType );
    } else { // String 以外のクラス（Object）であればエラー
      throw `Unable to save the value of ${fieldCodeList[i]}. Field Type ${fieldType} is not supported.`;
    }
  }
}

/**
  * データ項目に出力する
  * @param {Array<ProcessDataDefinitionView>} dataDefList  データ項目の ProcessDataDefinitionView が格納された配列
  * @param {Array<String>} dataStringList  出力する文字列が格納された配列
  * @param {Array<String>} fieldTypeList  出力する文字列のフィールド型が格納された配列
  */
function setDataByLists( dataDefList, dataStringList, fieldTypeList ) {
  if ( (dataDefList.length !== dataStringList.length) || (dataDefList.length !== fieldTypeList.length) ) {
    throw "Array length does not match.";
  }
  for (let i in dataDefList) {
    if ( dataDefList[i] !==  null ) {
      if ( dataDefList[i].matchDataType("STRING") ) { // 保存先データ項目が文字型の場合
        // 保存先データ項目が改行に対応しておらず、保存する文字列に改行が含まれる場合のエラーは QBPMS のバリデーションに任せる
        engine.setData( dataDefList[i], dataStringList[i] );
      } else if ( dataDefList[i].matchDataType("DECIMAL") ) { // 保存先データ項目が数値型の場合
        const supportedFieldTypes = [ "_ID_", "_REVISION_", "RECORD_NUMBER", "NUMBER", "CALC" ];
        if ( supportedFieldTypes.indexOf( fieldTypeList[i] ) === -1 ) { // 数値型データ項目に保存できないフィールド型の場合
          throw `The value of Field Type ${fieldTypeList[i]} cannot be saved to Numeric type data item.`;
        }
        let decimal;
        try {
          decimal = new java.math.BigDecimal( dataStringList[i] );
        } catch (e) { // フィールド型が CALC や RECORD_NUMBER で、 BigDecimal に変換できない値の場合はエラー
          throw `Returned value "${dataStringList[i]}" cannot be saved to Numeric type data item.`;
        }
        engine.setData( dataDefList[i], decimal );
      } else if ( dataDefList[i].matchDataType("SELECT") ) { // 保存先データ項目が選択型の場合
        const supportedFieldTypes = [ "DROP_DOWN", "RADIO_BUTTON" ];
        if ( supportedFieldTypes.indexOf( fieldTypeList[i] ) === -1 ) { // 選択型データ項目に保存できないフィールド型の場合
          throw `The value of Field Type ${fieldTypeList[i]} cannot be saved to Select type data item.`;
        }
        const select = new java.util.ArrayList();
        select.add( dataStringList[i] );
        // 保存先データ項目に一致する選択肢 ID がない場合のエラーは QBPMS のバリデーションに任せる
        engine.setData( dataDefList[i], select );
      } else if ( dataDefList[i].matchDataType("DATE") ) { // 保存先データ項目が日付型の場合
        const supportedFieldTypes = [ "DATE" ];
        if ( supportedFieldTypes.indexOf( fieldTypeList[i] ) === -1 ) { // 日付型データ項目に保存できないフィールド型の場合
          throw `The value of Field Type ${fieldTypeList[i]} cannot be saved to Date type data item.`;
        }
        const date = java.sql.Date.valueOf( dataStringList[i] );
        engine.setData( dataDefList[i], date );
      } else if ( dataDefList[i].matchDataType("DATETIME") ) { // 保存先データ項目が日時型の場合
        const supportedFieldTypes = [ "DATETIME", "CREATED_TIME", "UPDATED_TIME" ];
        if ( supportedFieldTypes.indexOf( fieldTypeList[i] ) === -1 ) { // 日時型データ項目に保存できないフィールド型の場合
          throw `The value of Field Type ${fieldTypeList[i]} cannot be saved to Datetime type data item.`;
        }
        const dateFormatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        dateFormatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC"));
        const ts = new java.sql.Timestamp( dateFormatter.parse( dataStringList[i] ).getTime() );
        engine.setData( dataDefList[i], ts );
      }
    }
  }
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
