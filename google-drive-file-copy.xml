<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Google Drive: Copy File</label>
<label locale="ja">Google Drive: ファイルコピー</label>

<last-modified>2019-12-13</last-modified>

<summary>Creates a copy of a file into the Folder</summary>
<summary locale="ja">既存ファイルを複製し、指定フォルダに新規保存します</summary>

<help-page-url>https://support.questetra.com/addons/googledrive-filescopy/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googledrive-filescopy/</help-page-url>

<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2">
    <label>C1: OAuth2 Config Name</label>
    <label locale="ja">C1: OAuth2設定名</label>
  </config>
  <config name="SourceFileId" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C2: Source File ID</label>
    <label locale="ja">C2: コピー元ファイルの ID</label>
  </config>
  <config name="FolderId" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder ID to store(When empty, create in My Drive root)</label>
    <label locale="ja">C3: 保存先フォルダの ID(空白の場合マイドライブのルートに作成されます)</label>
  </config>
  <config name="NewFileName" form-type="TEXTFIELD" el-enabled="true">
    <label>C4: New File Name(When empty, name "Copy of (Source File Name)")</label>
    <label locale="ja">C4: 新しいファイルのファイル名(空白の場合「(元ファイル名) のコピー」となります)</label>
  </config>
  <config name="DataForId" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: STRING DATA for New File ID </label>
    <label locale="ja">C5: 新しいファイルの ID を保存するデータ項目</label>
  </config>
  <config name="DataForUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C6: STRING DATA for New File Viewing URL </label>
    <label locale="ja">C6: 新しいファイルの表示 URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
main();
function main(){
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.get( "OAuth2" ) + "";
  const fileId = configs.get( "SourceFileId" ) + "";
  let folderId = configs.get( "FolderId" ) + "";
  const saveIdData = configs.get( "DataForId" ) + "";
  const saveUrlData = configs.get( "DataForUrl" ) + "";
  const newFileName = configs.get( "NewFileName" ) + "";

  if(fileId === "" || fileId === null){
    throw "No Source File ID";
  }

  

  //// == Calculating / 演算 ==
  const token  = httpClient.getOAuth2Token( oauth2 );

  // preparing for API Request
  let apiRequest = httpClient.begin(); // HttpRequestWrapper
  // com.questetra.bpms.core.event.scripttask.HttpClientWrapper

  // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)

  apiRequest = apiRequest.bearer( token );

  // Request PATH (https://example.com/abc/def/)
  let apiUri = "https://www.googleapis.com/drive/v3/files/";
    apiUri += fileId;
    apiUri += "/copy";

  // Request QUERY (?a=b)
  apiRequest = apiRequest.queryParam( "supportsTeamDrives", true );
  apiRequest = apiRequest.queryParam( "fields", "id,webViewLink" );
  // Request BODY (JSON, Form Parameters, etc)
  let requestObj = {};
    requestObj.parents = [];
  
  if(folderId !== "" && folderId !== null){
    requestObj.parents[0] = folderId;
  }
    
  if ( newFileName !== "" && newFileName !== null ){ 
    requestObj.name = newFileName;
  }
  apiRequest = apiRequest.body( JSON.stringify( requestObj ), "application/json" );

  // Access to the API (POST, GET, PUT, etc)
  let response = apiRequest.post( apiUri ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode() + "";
  let accessLog = "---POST request--- " + httpStatus + "\n";
  accessLog += response.getResponseAsString() + "\n";
  if (httpStatus >= 300) {
    const error = "Failed to copy \n status:" + httpStatus + "\n" + response.getResponseAsString();
    throw error;
  }
  const responseObj = JSON.parse( response.getResponseAsString() );

  // Retrieve Properties from Response-JSON
  const newFileId = responseObj.id;
  const newFileUrl = responseObj.webViewLink;
  // Error Handling
  // (no set)

  //// == Data Updating / ワークフローデータへの代入 ==
  if ( saveIdData !== "" ){ engine.setDataByNumber( saveIdData, newFileId ); }
  if ( saveUrlData !== "" ){ engine.setDataByNumber( saveUrlData, newFileUrl ); }
  engine.log(accessLog);
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC
</icon>

</service-task-definition>
