<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Google Drive: Copy File</label>
<label locale="ja">Google Drive: ファイルコピー</label>

<last-modified>2019-11-27</last-modified>

<summary>Creates a copy of a file into the Folder (supports Team Drives)</summary>
<summary locale="ja">既存ファイルを複製し、指定フォルダに新規保存します (チームドライブ対応)</summary>

<help-page-url>https://support.questetra.com/addons/googledrive-filescopy/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googledrive-filescopy/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2">
    <label>C1: OAuth2 Config Name</label>
    <label locale="ja">C1: OAuth2設定名</label>
  </config>
  <config name="conf_DataIdB" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C2: Source File ID</label>
    <label locale="ja">C2: コピー元ファイルの ID</label>
  </config>
  <config name="conf_DataIdC" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder ID to store</label>
    <label locale="ja">C3: 保存先フォルダの ID</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C4: STRING DATA for New File ID </label>
    <label locale="ja">C4: 新しいファイルの ID を保存するデータ項目</label>
  </config>
  <config name="conf_DataIdF" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: STRING DATA for New File URL </label>
    <label locale="ja">C5: 新しいファイルの URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
// Google Drive Files Copy (ver. 20171126)
// (c) 2017, Questetra, Inc. (the MIT License)
// by Google Drive APIs Files get
// https://developers.google.com/drive/v3/reference/files/copy

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// - Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// - Scope: "https://www.googleapis.com/auth/drive" or "https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.appdata"
// - Consumer Key: (Get by Google Developers Console)
// - Consumer Secret: (Get by Google Developers Console)


//// == Config Retrieving / 工程コンフィグの参照 ==
var oauth2 = configs.get( "conf_OAuth2" ) + "";
var fileId = configs.get( "conf_DataIdB" ) + "";
var folderId = configs.get( "conf_DataIdC" ) + "";
var dataIdE = configs.get( "conf_DataIdE" ) + "";
var dataIdF = configs.get( "conf_DataIdF" ) + "";
// convert 'java.lang.String' to 'javascript string'

if(fileId === "" || fileId === null){
  throw "No Source File ID";
}

if(folderId === "" || folderId === null){
  throw "No Folder ID to store";
}

//// == Calculating / 演算 ==
//Get File Name
var token  = httpClient.getOAuth2Token( oauth2 );
var urlOne = "https://www.googleapis.com/drive/v3/files/" + fileId;
const RequestOne = httpClient.begin()
    .bearer(token)
    .queryParam("supportsTeamDrives","true")
    .get(urlOne);


var tempJson = JSON.parse(RequestOne.getResponseAsString());
var newFileName = tempJson["name"];
// preparing for API Request
var apiRequest = httpClient.begin(); // HttpRequestWrapper
// com.questetra.bpms.core.event.scripttask.HttpClientWrapper

// Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)

apiRequest = apiRequest.bearer( token );

// Request PATH (https://example.com/abc/def/)
var apiUri = "https://www.googleapis.com/drive/v3/files/";
    apiUri += fileId;
    apiUri += "/copy";

// Request QUERY (?a=b)
apiRequest = apiRequest.queryParam( "supportsTeamDrives", true );
apiRequest = apiRequest.queryParam( "fields", "id,webViewLink" );
// Request BODY (JSON, Form Parameters, etc)
var requestObj = {};
  requestObj.parents = [];
  requestObj.parents[0] = folderId;
  if ( newFileName !== "" ){ 
    requestObj.name = newFileName;
  }
apiRequest = apiRequest.body( JSON.stringify( requestObj ), "application/json" );

// Access to the API (POST, GET, PUT, etc)
var response = apiRequest.post( apiUri ); // HttpResponseWrapper
var httpStatus = response.getStatusCode() + "";
var accessLog = "---POST request--- " + httpStatus + "\n";
accessLog += response.getResponseAsString() + "\n";
if (status >= 300) {
  const error = "Failed to copy \n status:" + httpStatus + "\n" + response.getResponseAsString();
  throw error;
}
var responseObj = JSON.parse( response.getResponseAsString() );

// Retrieve Properties from Response-JSON
var newFileId = responseObj.id;
var newFileUrl = responseObj.webViewLink;
// Error Handling
// (no set)

//// == Data Updating / ワークフローデータへの代入 ==
if ( dataIdE !== "" ){ engine.setDataByNumber( dataIdE, newFileId ); }
if ( dataIdF !== "" ){ engine.setDataByNumber( dataIdF, newFileUrl ); }
engine.log(accessLog);
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC
</icon>

</service-task-definition>
