<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-06-06</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Charge Customer</label>
    <label locale="ja">Stripe: 顧客に課金</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-customer-charge/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-customer-charge/
    </help-page-url>

    <summary>This item charges the customer's card on Stripe. If the default payment method (card) fails, this item
        tries to charge another card attached to the customer. An error occurs if all the payment methods fail.
    </summary>
    <summary locale="ja">この工程は、Stripe 上で顧客のカードに課金します。デフォルトの支払方法（カード）への課金が失敗した場合には、
        顧客に紐づけられている予備のカードに対して課金します。すべてのカードへの課金に失敗した場合、エラーになります。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_CustomerId" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C2: Customer ID to charge</label>
            <label locale="ja">C2: 課金する顧客の ID</label>
        </config>
        <config name="conf_Amount" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C3: Charge Amount (positive integer)</label>
            <label locale="ja">C3: 課金する金額（正の整数）</label>
        </config>
        <config name="conf_Currency" required="true" form-type="SELECT_ITEM">
            <label>C4: Currency Code</label>
            <label locale="ja">C4: 課金通貨コード</label>
            <item value="AUD">
                <label>AUD</label>
            </item>
            <item value="CAD">
                <label>CAD</label>
            </item>
            <item value="CNY">
                <label>CNY</label>
            </item>
            <item value="EUR">
                <label>EUR</label>
            </item>
            <item value="GBP">
                <label>GBP</label>
            </item>
            <item value="HKD">
                <label>HKD</label>
            </item>
            <item value="JPY">
                <label>JPY</label>
            </item>
            <item value="KRW">
                <label>KRW</label>
            </item>
            <item value="USD">
                <label>USD</label>
            </item>
        </config>
        <config name="conf_Description" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C5: Charge Description (Registration Num, Corp Name, etc)</label>
            <label locale="ja">C5: 課金説明（会員番号・法人名など）</label>
        </config>
        <config name="conf_PaymentId" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C6: Data item to save ID of the payment created on Stripe</label>
            <label locale="ja">C6: Stripe 上に作成された支払の ID を保存するデータ項目</label>
        </config>
        <config name="conf_PaymentUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C7: Data item to save URL of the payment created on Stripe</label>
            <label locale="ja">C7: Stripe 上に作成された支払の URL を保存するデータ項目</label>
        </config>
        <config name="conf_CardBrand" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C8: Data item to save Card Brand</label>
            <label locale="ja">C8: カードブランドを保存するデータ項目</label>
        </config>
        <config name="conf_CardLast4" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C9: Data item to save Card Last4</label>
            <label locale="ja">C9: カード末尾 4 桁を保存するデータ項目</label>
        </config>
        <config name="conf_CardExp" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD|DATE_YM">
            <label>C10: Data item to save Card Exp</label>
            <label locale="ja">C10: カード有効期限を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[// GraalJS Script (engine type: 2)

main();

function main(){ 

    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');                      /// REQUIRED
    const customerId = configs.get('conf_CustomerId');          /// REQUIRED
    let amountStr = configs.get('conf_Amount');                 /// REQUIRED
    const currency = configs.get('conf_Currency');              /// REQUIRED
    const description = configs.get('conf_Description');        /// REQUIRED
    const paymentIdDef = configs.getObject('conf_PaymentId');   // NotRequired
    const paymentUrlDef = configs.getObject('conf_PaymentUrl'); // NotRequired
    const cardBrandDef = configs.getObject('conf_CardBrand');   // NotRequired
    const cardLast4Def = configs.getObject('conf_CardLast4');   // NotRequired
    const cardExpDef = configs.getObject('conf_CardExp');       // NotRequired *STRING/YMDATE

    if (customerId === '') {
        throw 'Customer ID is blank.';
    }
    if (amountStr === '') {
        throw 'Charge Amount is blank.';
    }
    if (description === '') {
        throw 'Charge Description is blank.';
    }

    amountStr = amountStr.replace(/,/g, '').replace(/\./g, '');
    // Stripe の制限で、最大8桁まで
    // https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts
    // 最小値は通貨と為替レートによって異なるため、API のバリデーションに任せる
    const regex = /^[1-9]\d{0,7}$/;
    if (!regex.test(amountStr)) {
        throw `Charge amount must be positive integer smaller than 100000000.`;
    }

    //// == Calculating / 演算 ==
    const httpCounter = makeHttpCounter(); // HTTP リクエスト数のカウンタ
    let paymentIntentObj = null;
    const defaultPaymentMethodId = getDefaultPaymentMethodId(auth, customerId, httpCounter);
    if (defaultPaymentMethodId !== null) {
        paymentIntentObj = chargeCustomer(auth, customerId, defaultPaymentMethodId, amountStr, currency, description, httpCounter);
    }
    if (paymentIntentObj === null) {
        paymentIntentObj = tryOtherCards(auth, customerId, defaultPaymentMethodId, amountStr, currency, description, httpCounter);
    }

    //// == Data Updating / ワークフローデータへの代入 ==
    if (paymentIdDef !== null) { // STRING
        engine.setData(paymentIdDef, paymentIntentObj.id);
    }
    if (paymentUrlDef !== null) { // STRING
        engine.setData(paymentUrlDef, `https://dashboard.stripe.com/payments/${paymentIntentObj.id}`);
    }
    const card = paymentIntentObj.charges.data[0].payment_method_details.card;
    if (cardBrandDef !== null) { // STRING
        engine.setData(cardBrandDef, card.brand);
    }
    if (cardLast4Def !== null) { // STRING
        engine.setData(cardLast4Def, card.last4 );
    }
    if (cardExpDef !== null) { // STRING or YMDATE
        const month = `0${card.exp_month}`.slice(-2); // 2桁に整形
        const year = (card.exp_year).toString();
        if (cardExpDef.matchDataType('STRING')) {
            engine.setData(cardExpDef, `${month}/${year}`);
            return;
        }
        // YMDATE
        const cardExpDate = java.sql.Date.valueOf(`${year}-${month}-01`);
        engine.setData(cardExpDef, cardExpDate);
    }

}

/**
  * HTTP リクエスト数のカウンタを作成する
  * @return {Closure} httpCounter HTTP リクエスト数のカウンタ
  */
function makeHttpCounter() {
    let httpCount = 0;
    return {
        increment: function() {
            httpCount++;
        },
        value: function() {
            return httpCount;
        }
    }
};

/**
  * 顧客情報を取得する GET リクエストを送信し、デフォルトの支払方法の ID を取得する
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {String} defaultPaymentMethodId デフォルトの支払方法の ID
  */
function getDefaultPaymentMethodId(auth, customerId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/customers/${encodeURIComponent(customerId)}`;
    const response = httpClient.begin()
            .authSetting(auth) // with "Authorization: Bearer XX"
            .get(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get customer: ${customerId}, status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    if (responseObj.deleted) { // 削除済みの顧客の場合
        throw `Customer ${customerId} is deleted.`;
    }
    let defaultPaymentMethodId = responseObj.invoice_settings.default_payment_method;
    if (defaultPaymentMethodId === null) {
        // Source として登録されている場合もある
        defaultPaymentMethodId = responseObj.default_source;
    }
    return defaultPaymentMethodId;
}

/**
  * 顧客のカードに課金する。課金に失敗した場合は null を返す
  * 顧客による認証が必要で支払いが完了しない場合、支払いをキャンセルして null を返す
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} paymentMethodId 支払方法の ID
  * @param {String} amountString 金額
  * @param {String} currency 通貨コード
  * @param {String} description 説明
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Object} paymentIntentObj 作成された PaymentIntent オブジェクト
  */
function chargeCustomer(auth, customerId, paymentMethodId, amountStr, currency, description, httpCounter) {
    /// Create and Confirm a PaymentIntent Object
    /// POST /v1/payment_intents
    // https://stripe.com/docs/api/payment_intents/create
    // https://stripe.com/docs/api/authentication

    const apiUri = 'https://api.stripe.com/v1/payment_intents';
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('customer', customerId)
        .formParam('payment_method', paymentMethodId)
        .formParam('amount', amountStr)
        .formParam('currency', currency)
        .formParam('description', description)
        .formParam('confirm', 'true')
        .post(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        let errorLog = `Failed to charge by the payment method: ${paymentMethodId}, status: ${status}`;
        const error = JSON.parse(responseStr).error;
        if (error !== undefined && error.message !== undefined) {
            errorLog += `, message: ${error.message}`;
        }
        engine.log(errorLog);
        return null;
    }
    const paymentIntentObj = JSON.parse(responseStr);
    if (paymentIntentObj.status === 'requires_action') {
        // PaymentIntent オブジェクトは作成できたが、顧客による認証が必要で支払いが完了しない場合、支払いをキャンセル
        engine.log(`Payment method ${paymentMethodId} requires additional action. Canceling the payment: ${paymentIntentObj.id}`);
        cancelPaymentIntent(auth, paymentIntentObj.id, httpCounter);
        return null;
    }
    engine.log(`Payment succeeded: ${paymentIntentObj.id}`);
    return paymentIntentObj;
}

/**
  * 未完了の支払いをキャンセルする POST リクエストを送信する
  * @param {String} oauth 認証設定
  * @param {String} paymentIntentId キャンセルする PaymentIntent の ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  */
function cancelPaymentIntent(auth, paymentIntentId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/payment_intents/${paymentIntentId}/cancel`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .post(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to cancel the payment intent: ${paymentIntentId}, status: ${status}`;
    }
}

/**
  * 顧客のデフォルト以外のカードに課金する。すべての課金に失敗した場合はエラー
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} defaultPaymentMethodId デフォルトの支払方法の ID
  * @param {String} amountString 金額
  * @param {String} currency 通貨コード
  * @param {String} description 説明
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Object} paymentIntentObj 作成された PaymentIntent オブジェクト
  */
function tryOtherCards(auth, customerId, defaultPaymentMethodId, amountStr, currency, description, httpCounter) {
    const otherPaymentMethodIds = getOtherPaymentMethodIds(auth, customerId, defaultPaymentMethodId, httpCounter);
    const httpLimit = httpClient.getRequestingLimit();
    for (let i = 0; i < otherPaymentMethodIds.length; i++) {
        if (httpCounter.value() + 2 > httpLimit) { // 各支払方法につき、課金とキャンセルとで最大2回のリクエストが発生する
            throw `Number of HTTP requests exceeds the limit.`;
        }
        const paymentMethodId = otherPaymentMethodIds[i];
        const paymentIntentObj = chargeCustomer(auth, customerId, paymentMethodId, amountStr, currency, description, httpCounter);
        if (paymentIntentObj !== null) {
            return paymentIntentObj;
        }
    }
    throw 'No payment method succeeded.';
}

/**
  * 顧客のデフォルト以外の支払方法（カード）の ID 一覧を取得する
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} defaultPaymentMethodId デフォルトの支払方法の ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Array<String>} paymentMethodIds デフォルト以外の支払方法（カード）の ID 一覧
  */
function getOtherPaymentMethodIds(auth, customerId, defaultPaymentMethodId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/customers/${encodeURIComponent(customerId)}/payment_methods`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .queryParam('type', 'card') // required
        .queryParam('limit', '100') // maximum limit
        .get(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get the customer's payment methods: ${customerId}, status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    const paymentMethods = responseObj.data;
    if (paymentMethods.length === 0) {
        throw `The customer ${customerId} does not have any card-type payment method.`;
    }
    const paymentMethodIds = paymentMethods.map(paymentMethod => paymentMethod.id)
        .filter(id => id !== defaultPaymentMethodId); // デフォルトの支払方法の ID を除く
    return paymentMethodIds;
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADaUlEQVRYR8WXSUwTYRTH/x9bS8tS
        KCWIbLFElkgiICQdw2I0xujB6MGo0cRojOBJEy0HLyQmJlQDnoSLXDQYLibGNUoili0sAoKGICAE
        LLKWRVpKW+YzHWiBtpQpYGau897//ea9973vDYHAD+EbP7O4TSKRLp0llBwBRToIEgCErfrPgGII
        BB2U0M9Gg+jl1+JDRj7aWwLka1qiWGotAkEBADEfUQAmUFT4EL+SWnX2mCcfjwA5JU0FhNBHAKQ8
        AzubGSgld+qKVBWb+W8KkKdpekJBC7cZeIMbASn/olbddKflFiBH01hFgAu7EdyuQYEXdWrmorOm
        C8BufrlrMNdMbABYrXn5bn65sxalpHB9TzgAuG6HtX8HDceX2+ADv0T76XAA5JY0loHgFl+VHdlR
        PNYWMbdtGhyAbchIJeZpL875juLb5oTBGCC3DSsOIOdhwyVCyTNvVRXBAYgKEaFb99dbV1BCL9fd
        PfycA8jVND4FcNWTSt5+OaQiX7zrnnCY3T+dhMz4UJR++oWanilvISq1aubaCkBJYzsI0p0VVPvC
        IAnwhb8fwY3ceOhmTahq1sHf1weWZRaRISLEhYtR3zeDYLEfDGYrWBZoH55DgjwQSoUUA5MGDE0v
        usJRdGiLmAx7BvTrLhbO+N6pRBxLicCihcX0ghmx4YEwmZfRN2FAWkwILFYWUwtmyCT+6ByZh0oZ
        BpalsCxTvP8+gaMpEfAhgMnCQvNhAM2Ds84QM1o1E24HoM5vH5xJhkop48Tr+vS4nhOHnj8LGJtf
        wvFUBapbR5EaHYTkqCDOJitBhtahWWQlhGJYb0K8PBDD04uIlolR3TaKyvoRlyxo1QzZFCAjLhTn
        s6M5wYb+Ga7WvWMLGJ1bAahq0eFAdDBS9qwBdI7M4WBsKAanjFAqJOj6PQ+90QLtTz1qe22HbOOz
        HsClBKXnUrmgS1YWr7+NIz9JjoigAK6ee2ViFwBGubIazC9a8aZrHCfTIrnyGM3LKKsZxMcfkx5K
        sEkT8m1r9QmlIyvuUu1Wx6kJtzyGnmCuMDFgEsPxtmscrzrH+XKvHcPtDiK+kdzZbRhEgo/i1WEk
        3GVkAxD8OuYupZUlVJiFxN4ogq5kdghBl9L/kQmv13JHJoT8MbFDCPprtn6CCfZzupNxy8f3Hyxn
        oTBfuPFrAAAAAElFTkSuQmCC
    </icon>

</service-task-definition>
