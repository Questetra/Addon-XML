<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-06-03</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Charge Customer</label>
    <label locale="ja">Stripe: 顧客に課金</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-customer-charge/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-customer-charge/
    </help-page-url>

    <summary>This item charges the customer's card on Stripe. If the default payment method (card) fails, this item
        tries to charge another card attached to the customer. An error occurs if all the payment methods fail.
    </summary>
    <summary locale="ja">この工程は、Stripe 上で顧客のカードに課金します。デフォルトの支払方法（カード）への課金が失敗した場合には、
        顧客に紐づけられている予備のカードに対して課金します。すべてのカードへの課金に失敗した場合、エラーになります。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_CustomerId" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C2: Customer ID to charge</label>
            <label locale="ja">C2: 課金する顧客の ID</label>
        </config>
        <config name="conf_Amount" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C3: Charge Amount (positive integer)</label>
            <label locale="ja">C3: 課金する金額（正の整数）</label>
        </config>
        <config name="conf_Currency" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C4: Currency Code</label>
            <label locale="ja">C4: 課金通貨コード</label>
        </config>
        <config name="conf_Description" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C5: Charge Description (Registration Num, Corp Name, etc)</label>
            <label locale="ja">C5: 課金説明（会員番号・法人名など）</label>
        </config>
        <config name="conf_ChargeId" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C6: Data item to save Stripe Charge ID</label>
            <label locale="ja">C6: Stripe の課金 ID を保存するデータ項目</label>
        </config>
        <config name="conf_CardBrand" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C7: Data item to save Card Brand</label>
            <label locale="ja">C7: カードブランドを保存するデータ項目</label>
        </config>
        <config name="conf_CardLast4" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C8: Data item to save Card Last4</label>
            <label locale="ja">C8: カード末尾 4 桁を保存するデータ項目</label>
        </config>
        <config name="conf_CardExp" required="false" form-type="SELECT" select-data-type="STRING|DATE">
            <label>C9: Data item to save Card Exp</label>
            <label locale="ja">C9: カード有効期限を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[// GraalJS Script (engine type: 2)

main();

function main(){ 

    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');                    /// REQUIRED
    const customerId = configs.get('conf_CustomerId');        /// REQUIRED
    let amountStr = configs.get('conf_Amount');               /// REQUIRED
    const currency = configs.get('conf_Currency');            /// REQUIRED
    const description = configs.get('conf_Description');      /// REQUIRED
    const chargeIdDef = configs.getObject('conf_ChargeId');   // NotRequired
    const cardBrandDef = configs.getObject('conf_CardBrand'); // NotRequired
    const cardLast4Def = configs.getObject('conf_CardLast4'); // NotRequired
    const cardExpDef = configs.getObject('conf_CardExp');     // NotRequired *STRING/YMDATE

    if (customerId === '') {
        throw 'Customer ID is blank.';
    }
    if (amountStr === '') {
        throw 'Charge Amount is blank.';
    }
    if (description === '') {
        throw 'Charge Description is blank.';
    }

    amountStr = amountStr.replace(/,/g, '').replace(/\./g, '');
    const amountInt = parseInt(amountStr, 10);
    if (amountInt <= 0) {
        throw 'Charge amount must be positive.';
    }
    amountStr = amountInt.toString();

    //// == Calculating / 演算 ==
    let chargeObj = null;
    const defaultPaymentMethodId = getDefaultPaymentMethodId(auth, customerId);
    if (defaultPaymentMethodId !== null) {
        chargeObj = chargeCustomer(auth, customerId, defaultPaymentMethodId, amountStr, currency, description);
    }
    if (chargeObj === null) {
        chargeObj = tryOtherCards(auth, customerId, defaultPaymentMethodId, amountStr, currency, description);
    }

    //// == Data Updating / ワークフローデータへの代入 ==
    if (chargeIdDef !== null) { // STRING
        engine.setData(chargeIdDef, chargeObj.id);
    }
    const card = chargeObj.payment_method_details.card;
    if (cardBrandDef !== null) { // STRING
        engine.setData(cardBrandDef, card.brand);
    }
    if (cardLast4Def !== null) { // STRING
        engine.setData(cardLast4Def, card.last4 );
    }
    if (cardExpDef !== null) { // STRING or YMDATE
        const month = `0${card.exp_month}`.slice(-2); // 2桁に整形
        const year = (card.exp_year).toString();
        if (cardExpDef.matchDataType('STRING')) {
            const cardExpStr = `${month}/${year}`;
            engine.setData(cardExpDef, cardExpStr);
            return;
        }
        // DATE
        const cardExpDate = java.sql.Date.valueOf(`${year}-${month}-01`);
        engine.setData(cardExpDef, cardExpDate);
    }

}

/**
  * 顧客情報を取得する GET リクエストを送信し、デフォルトの支払方法の ID を取得する
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @return {String} defaultPaymentMethodId デフォルトの支払方法の ID
  */
function getDefaultPaymentMethodId(auth, customerId) {
    const apiUri = `https://api.stripe.com/v1/customers/${encodeURIComponent(customerId)}`;
    const response = httpClient.begin()
            .authSetting(auth) // with "Authorization: Bearer XX"
            .get(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get customer: ${customerId}, status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    if (responseObj.deleted) { // 削除済みの顧客の場合
        throw `Customer ${customerId} is deleted.`;
    }
    let defaultPaymentMethodId = responseObj.invoice_settings.default_payment_method;
    if (defaultPaymentMethodId === null) {
        // Source として登録されている場合もある
        defaultPaymentMethodId = responseObj.default_source;
    }
    return defaultPaymentMethodId;
}

/**
  * 顧客のカードに課金する。課金に失敗した場合は null を返す
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} paymentMethodId 支払方法の ID
  * @param {String} amountString 金額
  * @param {String} currency 通貨コード
  * @param {String} description 説明
  * @return {Object} chargeObject 作成された課金オブジェクト
  */
function chargeCustomer(auth, customerId, paymentMethodId, amountStr, currency, description) {
    /// Create and Confirm a PaymentIntent Object
    /// POST /v1/payment_intents
    // https://stripe.com/docs/api/payment_intents/create
    // https://stripe.com/docs/api/authentication

    const apiUri = 'https://api.stripe.com/v1/payment_intents';
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('customer', customerId)
        .formParam('payment_method', paymentMethodId)
        .formParam('amount', amountStr)
        .formParam('currency', currency)
        .formParam('description', description)
        .formParam('confirm', 'true')
        .post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        let errorLog = `Failed to charge by the payment method: ${paymentMethodId}, status: ${status}`;
        const error = JSON.parse(responseStr).error;
        if (error !== undefined && error.message !== undefined) {
            errorLog += `, message: ${error.message}`;
        }
        engine.log(errorLog);
        return null;
    }
    responseObj = JSON.parse(responseStr);
    const paymentIntentId = responseObj.id;
    if (responseObj.status === 'requires_action') {
        // PaymentIntent オブジェクトは作成できたが、顧客による認証が必要で支払いが完了しない場合、支払いをキャンセル
        engine.log(`Payment method ${paymentMethodId} requires additional action by the customer. Canceling the payment: ${paymentIntentId}`);
        cancelPaymentIntent(auth, paymentIntentId);
        return null;
    }
    engine.log(`Payment succeeded: ${paymentIntentId}`);
    return responseObj.charges.data[0]; // Charge Object
}

/**
  * 未完了の支払いをキャンセルする POST リクエストを送信する
  * @param {String} oauth 認証設定
  * @param {String} paymentIntentId キャンセルする PaymentIntent の ID
  */
function cancelPaymentIntent(auth, paymentIntentId) {
    const apiUri = `https://api.stripe.com/v1/payment_intents/${paymentIntentId}/cancel`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to cancel the payment intent: ${paymentIntentId}, status: ${status}`;
    }
}

/**
  * 顧客のデフォルト以外のカードに課金する。すべての課金に失敗した場合はエラー
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} defaultPaymentMethodId デフォルトの支払方法の ID
  * @param {String} amountString 金額
  * @param {String} currency 通貨コード
  * @param {String} description 説明
  * @return {Object} chargeObject 作成された課金オブジェクト
  */
function tryOtherCards(auth, customerId, defaultPaymentMethodId, amountStr, currency, description) {
    const otherPaymentMethodIds = getOtherPaymentMethodIds(auth, customerId, defaultPaymentMethodId);
    for (let i = 0; i < otherPaymentMethodIds.length; i++) {
        const paymentMethodId = otherPaymentMethodIds[i];
        const chargeObj = chargeCustomer(auth, customerId, paymentMethodId, amountStr, currency, description);
        if (chargeObj !== null) {
            return chargeObj;
        }
    }
    throw 'No payment method succeeded.';
}

/**
  * 顧客のデフォルト以外の支払方法（カード）の ID 一覧を取得する
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {String} defaultPaymentMethodId デフォルトの支払方法の ID
  * @return {Array<String>} paymentMethodIds デフォルト以外の支払方法（カード）の ID 一覧
  */
function getOtherPaymentMethodIds(auth, customerId, defaultPaymentMethodId) {
    const apiUri = `https://api.stripe.com/v1/customers/${encodeURIComponent(customerId)}/payment_methods`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .queryParam('type', 'card') // required
        .queryParam('limit', '100') // maximum limit
        .get(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get the customer's payment methods: ${customerId}, status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    const paymentMethods = responseObj.data;
    if (paymentMethods.length === 0) {
        throw `The customer ${customerId} does not have any card-type payment method.`;
    }
    const paymentMethodIds = paymentMethods.map(paymentMethod => paymentMethod.id)
        .filter(id => id !== defaultPaymentMethodId); // デフォルトの支払方法の ID を除く
    return paymentMethodIds;
}

/*

Notes-en:
- Can include the automated step "charging process" into the workflow. (No code)
    - When the matter reaches, a charging request is automatically sent to the Stripe API.
    - https://stripe.com/docs/api/charges
- The Stripe API key "secret key" is required for HTTP_Authz Setting.
    - https://dashboard.stripe.com/apikeys
    - https://dashboard.stripe.com/test/apikeys
- If you want to test-operate the workflow app, use the "test key" of the Stripe API key.
    - Set the secret key starting with `sk_text_` to "HTTP Authorization Aetting > Token Fixed Value".
        - Name: `StripeSecretKeyForXYZ`
        - Token: `sk_test_123456789012345678901234`
    - For actual operation, set a secret key starting with `sk_live_`.
- A positive integer representing how much to charge in the smallest currency unit.
    - e.g., "`100`" (cents) to charge "1.00 USD"
    - e.g., "`100`" to charge "100 JPY" (JPY is a zero-decimal currency)
    - "`#{#q_numUsdWithoutCent}00`" is also possible if numerical data without auxiliary info
- If present, commas "`,`" and periods "`.`" are removed in advance.
    - When using numeric data, be careful of the number of digits after the decimal point.
- Multiple Customer IDs. can be listed.  __Enhanced 202107__
    - The Customer IDs (payment methods) on the second and subsequent lines are for backup.
    - The maximum number of Customer IDs that can be set is 10.

APPENDIX-en:
- Numeric parsing depends on JavaScript `parseInt(x,10)`. (The prefix gives an error)
    - See below for more information on available currency codes (JPY, USD, EUR, ...).
    - https://stripe.com/docs/currencies
- In case of USD, the minimum amount is $0.50 or equivalent.
    - The amount value supports up to eight digits (e.g., for a USD charge of $999,999.99)
- Refer to the following for the error codes (ResponseCode other than 200).
    - https://stripe.com/docs/api/errors
- The error details can also be viewed from the dashboard. (Direct URL with the Customer ID)
    - https://dashboard.stripe.com/customers/cus_12345678901234
    - https://dashboard.stripe.com/test/customers/cus_12345678901234
- Charging details can be found in the "Payment" menu on the dashboard. (Direct URL with the Charge ID)
    - https://dashboard.stripe.com/payments/ch_123456789012345678901234
    - https://dashboard.stripe.com/test/payments/ch_123456789012345678901234

Notes-ja:
- ワークフロー内に自動工程『課金処理』を組み込むことができるようになります。（ノーコード実装）
    - 案件が到達すると Stripe API に対して課金リクエストが送信されます。（カード課金フローの自動化）
    - https://stripe.com/docs/api/charges
- 通信設定には、Stripe APIキーの "シークレットキー" が必要です。
    - https://dashboard.stripe.com/apikeys
    - https://dashboard.stripe.com/test/apikeys
- ワークフローアプリをテスト運用したい場合は、テスト用のシークレットキー "テストキー" を利用します。
    - `sk_text_` で始まるテストキーを『HTTP認証設定 ＞ トークン直接指定』に設定します。
        - Name: `StripeSecretKeyForXYZ` 
        - Token: `sk_test_123456789012345678901234` 
    - 本運用する場合は `sk_live_` で始まるシークレットキーを設定します。
- 課金額の設定は、最小の通貨単位で表現します。（正の整数）
    - "1.00ドル" の場合は "100" セント (USD)
    - 小数のない円通貨の場合は "100円" は "100" 円 (JPY)
    - "1(ドル)" といったデータの場合 "`#{#q_numUsdWithoutCent}00`" のような設定も可能です。
- もしカンマ "`,`" やピリオド "`.`" が存在する場合は課金処理前に除去されます。
    - 小数の数値型データを使う場合、小数点以下の桁数設定に注意が必要です。
    - たとえば "100.00円" というデータは「１万円の課金」として処理されてしまいます。
- 複数の顧客IDを列挙することが可能です。 __Enhanced 202107__
    - ２行目以降の顧客ID（支払方法）はバックアップ用です。
    - 顧客IDの設定可能最大数は10件です。

APPENDIX-ja:
- 数値判定は JavaScript `parseInt(x,10)` に依存します （接頭辞はエラーになります）
    - 利用できる通貨コードの詳細は以下を参照してください (JPY, USD, EUR, ...)
    - https://stripe.com/docs/currencies
- 最小課金金額は、日本円の場合、50円です。
    - 課金額の最大桁数は8桁です。（日本円の場合、99,999,999円）
- エラーコード（200以外のResponseCode）の内容については以下を参照してください。
    - https://stripe.com/docs/api/errors
- エラー内容はダッシュボードからも参照可能です。（顧客IDを付与したURLでダイレクトアクセスも可）
    - https://dashboard.stripe.com/customers/cus_12345678901234
    - https://dashboard.stripe.com/test/customers/cus_12345678901234
- 課金詳細はダッシュボードの「支払い」メニューでも確認可能です。（課金IDを付与したURLが便利）
    - https://dashboard.stripe.com/payments/ch_123456789012345678901234
    - https://dashboard.stripe.com/test/payments/ch_123456789012345678901234
*/

    ]]></script>


    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADaUlEQVRYR8WXSUwTYRTH/x9bS8tS
        KCWIbLFElkgiICQdw2I0xujB6MGo0cRojOBJEy0HLyQmJlQDnoSLXDQYLibGNUoili0sAoKGICAE
        LLKWRVpKW+YzHWiBtpQpYGau897//ea9973vDYHAD+EbP7O4TSKRLp0llBwBRToIEgCErfrPgGII
        BB2U0M9Gg+jl1+JDRj7aWwLka1qiWGotAkEBADEfUQAmUFT4EL+SWnX2mCcfjwA5JU0FhNBHAKQ8
        AzubGSgld+qKVBWb+W8KkKdpekJBC7cZeIMbASn/olbddKflFiBH01hFgAu7EdyuQYEXdWrmorOm
        C8BufrlrMNdMbABYrXn5bn65sxalpHB9TzgAuG6HtX8HDceX2+ADv0T76XAA5JY0loHgFl+VHdlR
        PNYWMbdtGhyAbchIJeZpL875juLb5oTBGCC3DSsOIOdhwyVCyTNvVRXBAYgKEaFb99dbV1BCL9fd
        PfycA8jVND4FcNWTSt5+OaQiX7zrnnCY3T+dhMz4UJR++oWanilvISq1aubaCkBJYzsI0p0VVPvC
        IAnwhb8fwY3ceOhmTahq1sHf1weWZRaRISLEhYtR3zeDYLEfDGYrWBZoH55DgjwQSoUUA5MGDE0v
        usJRdGiLmAx7BvTrLhbO+N6pRBxLicCihcX0ghmx4YEwmZfRN2FAWkwILFYWUwtmyCT+6ByZh0oZ
        BpalsCxTvP8+gaMpEfAhgMnCQvNhAM2Ds84QM1o1E24HoM5vH5xJhkop48Tr+vS4nhOHnj8LGJtf
        wvFUBapbR5EaHYTkqCDOJitBhtahWWQlhGJYb0K8PBDD04uIlolR3TaKyvoRlyxo1QzZFCAjLhTn
        s6M5wYb+Ga7WvWMLGJ1bAahq0eFAdDBS9qwBdI7M4WBsKAanjFAqJOj6PQ+90QLtTz1qe22HbOOz
        HsClBKXnUrmgS1YWr7+NIz9JjoigAK6ee2ViFwBGubIazC9a8aZrHCfTIrnyGM3LKKsZxMcfkx5K
        sEkT8m1r9QmlIyvuUu1Wx6kJtzyGnmCuMDFgEsPxtmscrzrH+XKvHcPtDiK+kdzZbRhEgo/i1WEk
        3GVkAxD8OuYupZUlVJiFxN4ogq5kdghBl9L/kQmv13JHJoT8MbFDCPprtn6CCfZzupNxy8f3Hyxn
        oTBfuPFrAAAAAElFTkSuQmCC
    </icon>

</service-task-definition>
