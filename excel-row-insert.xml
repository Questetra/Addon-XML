<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2024-04-23</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Microsoft 365 Excel for Business: Insert New Row</label>
    <label locale="ja">Microsoft 365 Excel for Business: 行挿入</label>
    <summary>This item inserts a new row with data at the specified position in a sheet.</summary>
    <summary locale="ja">この工程は、シート内の指定された場所に新しい行を挿入し、データを入力します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/excel-row-insert/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/excel-row-insert/</help-page-url>

    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_Url" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
            <label>C2: Target Book URL</label>
            <label locale="ja">C2: 入力先のブックの URL</label>
        </config>
        <config name="conf_Title" required="true" form-type="TEXTFIELD" el-enabled="true">
            <label>C3: Target Sheet Title</label>
            <label locale="ja">C3: 入力先のシートのタイトル</label>
        </config>
        <config name="conf_RowNumber" form-type="SELECT" select-data-type="DECIMAL" editable="true">
            <label>C4: Row Number to insert new row(When empty, the top row)</label>
            <label locale="ja">C4: 挿入先の行番号(空の場合は一番上の行)</label>
        </config>
        <config name="conf_ValueA" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-A: Column-A Value of Inserted Row</label>
            <label locale="ja">C-A: 挿入行の A 列に追加される値</label>
        </config>
        <config name="conf_ValueB" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-B: Column-B Value of Inserted Row</label>
            <label locale="ja">C-B: 挿入行の B 列に追加される値</label>
        </config>
        <config name="conf_ValueC" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-C: Column-C Value of Inserted Row</label>
            <label locale="ja">C-C: 挿入行の C 列に追加される値</label>
        </config>
        <config name="conf_ValueD" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-D: Column-D Value of Inserted Row</label>
            <label locale="ja">C-D: 挿入行の D 列に追加される値</label>
        </config>
        <config name="conf_ValueE" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-E: Column-E Value of Inserted Row</label>
            <label locale="ja">C-E: 挿入行の E 列に追加される値</label>
        </config>
        <config name="conf_ValueF" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-F: Column-F Value of Inserted Row</label>
            <label locale="ja">C-F: 挿入行の F 列に追加される値</label>
        </config>
        <config name="conf_ValueG" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-G: Column-G Value of Inserted Row</label>
            <label locale="ja">C-G: 挿入行の G 列に追加される値</label>
        </config>
        <config name="conf_ValueH" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-H: Column-H Value of Inserted Row</label>
            <label locale="ja">C-H: 挿入行の H 列に追加される値</label>
        </config>
        <config name="conf_ValueI" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-I: Column-I Value of Inserted Row</label>
            <label locale="ja">C-I: 挿入行の I 列に追加される値</label>
        </config>
        <config name="conf_ValueJ" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C-J: Column-J Value of Inserted Row</label>
            <label locale="ja">C-J: 挿入行の J 列に追加される値</label>
        </config>
    </configs>

    <script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

function main() {
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const oauth2 = configs.getObject("conf_OAuth2");
    const bookUrl = retrieveBookUrl();
    const sheetName = configs.get("conf_Title");
    if (sheetName === "" || sheetName === null) {
        throw "Sheet Title is empty.";
    }
    const rowNumber = retrieveRowNumber();
    let values = [];
    values[0] = configs.get("conf_ValueA");
    values[1] = configs.get("conf_ValueB");
    values[2] = configs.get("conf_ValueC");
    values[3] = configs.get("conf_ValueD");
    values[4] = configs.get("conf_ValueE");
    values[5] = configs.get("conf_ValueF");
    values[6] = configs.get("conf_ValueG");
    values[7] = configs.get("conf_ValueH");
    values[8] = configs.get("conf_ValueI");
    values[9] = configs.get("conf_ValueJ");

    //// == Calculating / 演算 ==
    const patchRequestBody = makeRequestToAdd(values);

    // Access to the API 1st(Get Book Info)
    const bookInfo = getFileInfoByUrl(bookUrl, oauth2);
    const worksheetId = getWorksheetId(bookInfo, sheetName, oauth2);

    // Access to the API 2nd(Insert Row)
    insertRow(bookInfo, worksheetId, rowNumber, oauth2);

    // Access to the API 3rd(PATCH)
    patchData(bookInfo, worksheetId, rowNumber, patchRequestBody, oauth2);
}

/**
  * config からブックの URL を読み出す、空ならエラー
  * @return {String} ブックの URL
  */
function retrieveBookUrl() {
    const bookUrlDef = configs.getObject("conf_Url");
    let bookUrl;
    if (bookUrlDef === null) {
        bookUrl = configs.get("conf_Url")
    } else {
        bookUrl = engine.findData(bookUrlDef);
    }
    if (bookUrl === "" || bookUrl === null) {
        throw "Book URL is empty."
    }
    return bookUrl;
}

/**
  * config から行番号の値を読み出す、空なら1
  * 数字でない文字が入っているか、シートの範囲外である数字の場合はエラー
  * シートの範囲: 1 ~ 1048576
  * @return {Number} 行番号
  */
function retrieveRowNumber() {
    const error = "Row number must be a positive integer no greater than 1048576.";
    const rowNumberDef = configs.getObject("conf_RowNumber");
    let rowNumber;
    if (rowNumberDef === null) { // 固定値で指定
        const rowNumberStr = configs.get("conf_RowNumber");
        if (rowNumberStr === "" || rowNumberStr === null) {
            return 1;
        }
        const reg = new RegExp('^[1-9][0-9]{0,6}$');
        if (!reg.test(rowNumberStr)) {
            throw error;
        }
        rowNumber = parseInt(rowNumberStr, 10); //parse to int
    } else { // 数値型データ項目で指定
        const bigDecimal = engine.findData(rowNumberDef);
        if (bigDecimal === null) {
            return 1;
        }
        try {
            rowNumber = bigDecimal.longValueExact();
        } catch (e) { // 小数点以下が 0 でない
            throw error;
        }
    }
    if (rowNumber < 1 || rowNumber > 1048576) {
        throw error;
    }
    return rowNumber;
}

/**
  * フォルダの URL からファイル情報（ドライブ ID とファイル ID）を取得し、
  * オブジェクトで返す（URL が空の場合はエラーとする）
  * @param {String} fileUrl  フォルダの URL
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @return {Object} fileInfo  ファイル情報 {driveId, fileId}
  */
function getFileInfoByUrl(fileUrl, oauth2) {
    let fileInfo;
    if (fileUrl !== "" && fileUrl !== null) {
        // 分割代入
        const {
            id,
            parentReference: {
                driveId
            }
        } = getObjBySharingUrl(fileUrl, oauth2);
        fileInfo = { driveId: `drives/${driveId}`, fileId: id };
    }
    return fileInfo;
}

/**
  * OneDrive のドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSON オブジェクトを返す
  * API の仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有 URL
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @return {Object} responseObj  ドライブアイテムのメタデータの JSON オブジェクト
  */
function getObjBySharingUrl(sharingUrl, oauth2) {
    if (sharingUrl === "" || sharingUrl === null) {
        throw `Sharing URL is empty.`;
    }

    // encoding sharing URL
    const encodedSharingUrl = encodeSharingUrl(sharingUrl);

    // API Request
    const response = httpClient.begin()
        .authSetting(oauth2)
        .get(`${GRAPH_URI}shares/${encodedSharingUrl}/driveItem`);

    const responseStr = logAndJudgeError(response, "1st GET");

    return JSON.parse(responseStr);
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有 URL
  * @return {String} encodedSharingUrl  エンコードされた共有 URL
  */
function encodeSharingUrl(sharingUrl) {
    let encodedSharingUrl = base64.encodeToUrlSafeString(sharingUrl);
    while (encodedSharingUrl.slice(-1) === '=') {
        encodedSharingUrl = encodedSharingUrl.slice(0, -1);
    }
    return `u!${encodedSharingUrl}`;
}

/**
  * ワークシートの ID を取得する
  * @param {Object} bookInfo
  * @param {String} bookInfo.driveId  ワークブックのドライブ ID
  * @param {String} bookInfo.fileId  ワークブックのファイル ID
  * @param {String} sheetName  シートの名前
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  */
function getWorksheetId({driveId, fileId}, sheetName, oauth2) {
    const getWorksheetsUrl = `${GRAPH_URI}${driveId}/items/${fileId}/workbook/worksheets`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .get(getWorksheetsUrl);

    const responseStr = logAndJudgeError(response, "2nd GET");
    const jsonRes = JSON.parse(responseStr);
    const worksheet = jsonRes.value.find(worksheet => worksheet.name === sheetName);
    if (worksheet === undefined) {
        throw 'Worksheet not found.';
    }
    return worksheet.id;
}

/**
  * 行を指定シートの指定箇所に挿入する
  * @param {Object} bookInfo
  * @param {String} bookInfo.driveId  挿入先ワークブックのドライブ ID
  * @param {String} bookInfo.fileId  挿入先ワークブックのファイル ID
  * @param {String} worksheetId  挿入先シートの ID
  * @param {Number} rowNumber  挿入箇所の行番号
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  */
function insertRow({driveId, fileId}, worksheetId, rowNumber, oauth2) {
    const insertUrl = `${GRAPH_URI}${driveId}/items/${fileId}/workbook/worksheets/${encodeURIComponent(worksheetId)}/range(address='${rowNumber}:${rowNumber}')/insert`;
    const requestBody = {
        "Shift": "Down"
    };

    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(requestBody), "application/json")
        .post(insertUrl);

    logAndJudgeError(response, "POST");
}

/**
  * 指定シートの指定行にデータを入力する
  * @param {Object} bookInfo
  * @param {String} bookInfo.driveId  挿入先ワークブックのドライブ ID
  * @param {String} bookInfo.fileId  挿入先ワークブックのファイル ID
  * @param {String} worksheetId  挿入先シートの ID
  * @param {Number} rowNumber  挿入箇所の行番号
  * @param {Object} requestBody  入力するデータの入ったリクエストオブジェクト
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  */
function patchData({driveId, fileId}, worksheetId, rowNumber, requestBody, oauth2) {
    const patchUri = `${GRAPH_URI}${driveId}/items/${fileId}/workbook/worksheets/${encodeURIComponent(worksheetId)}/range(address='A${rowNumber}:J${rowNumber}')/`;

    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(requestBody), "application/json")
        .patch(patchUri);

    logAndJudgeError(response, "PATCH");
}

/**
  * 新しい行に追加するデータを、JSON 形式に変換する
  * @param {Array} values  データの入った配列
  * @return {JSON Object} 変換した JSON オブジェクト
  */
function makeRequestToAdd(values) {
    let request = {
        values: [[]]
    };
    for (let i = 0; i < 10; i++) {
        if (values[i] === "" || values[i] === null) {
            request.values[0].push(null);
        } else {
            if (values[i].length > 32767) {
                throw "Can't set text over 32,767 character.";
            }
            request.values[0].push(values[i]);
        }
    }
    return request;
}

/**
  * ログの出力と、エラー発生時のスローを行う
  * @param {HttpResponseWrapper} response  リクエストの応答
  * @param {String} requestType リクエストをどの形式で行ったか("GET" or "POST" or "PATCH")
  * @return {String} responseStr レスポンスの文字列
  */
function logAndJudgeError(response, requestType) {
    const responseStr = response.getResponseAsString();
    const status = response.getStatusCode();
    if (status >= 300) {
        const accessLog = `---${requestType} request--- ${status}\n${responseStr}\n`;
        engine.log(accessLog);
        throw `Failed in ${requestType} request. status: ${status}`;
    }
    return responseStr;
}

    ]]></script>

    <icon>
    iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEZklEQVRYR8WXf2xTVRTHv3evo9v6
    +/XHyuZccRMjc8QRkkFEI9MWJCHBJSgqzIjJshFxjqHGuCAh8VdcJy7DEYyiGY5/QDFElHaKmZjM
    P3AiatAprcsiLDoawlZbWXvNvesrb91r+waY3qRJ8969537uOd9zzn0EOR5E7f4ljWuLtPpIPSVk
    JQGtAYgLgCWxPgTQIAUZIpSeiE4UfPTnvqNhNbazArieXeNEbOp5QtAEoECNUQARSrEXgub14BvH
    LmRakxHA1eZuIiAdAHQqN06dNklBtwe9/r3p1qcFcG33vE0omq9x4xnLKEFPsMO3RcmWIoCrzd1H
    QB65EZtLNijowaDX/2iqzVkAak6+ofYBLHEtQrmtBA6DiG+Gh9B+uCsrr5InZgAkYt4jWVpeeSfu
    r1qGCkcZ5pvsEPUmGAv1yBc0MzY7dnoAT/W+nBWATaCgzXJNJAGY2kl86jdJcD++8gmK5qkTPQMQ
    BAE2vRlxSkETP/afEIIuXy8Gf/9BApykeZpKKTuuAmzzvEkInpFmnes4rupEbBIDWOh0odhk5dDh
    fyN8rUDyUKQtxK4jPXj/5JGkPUqxO9jpa2UPOAAvMobouDzP5woghWBwx0Es2zWt3xbPRrR4Ns0C
    YHUiellrZcWKAyzY5t4IQnrlR04HwNz7z5UotJp8CHkCX8I8wIbNYMEdpZU4MzqMqXiMe6Om/HYl
    AIDSTYFO/wEO4GrzvEuAzekA3vnqEBaXLURtxWIMX/gDHZ/tx56GdmgSYmQAI+PnuUhXVa/A8TMn
    uSmnyYZ7bluqCECB94Je35PTHmhzfweQmnQAbNPOzz9Ad0M7uvs/xH1Vy/lJpSHPAnkImuoexnNr
    Nit7AHQo4PUvSQB4LsoaC7crD0EsHseLh97C6uq78OnpAbz2UGvS/VIIWE0oNlphLjIgFL6MWDzG
    09WqN6cBQCjg9YkSAE2VfKoGvh85i/quFhzeupvHVT7SeWCr+zG0rmpIB4CA10dUATDhdfkPwKIz
    ITR5CU9zzV6tYQyAndRuFFFitmP04hivBRpBwAL7TaoAMobg3F+j2NPfh1fXt6Jx/068tK6ZG5Zr
    YHhsBKLOiLU1K3F06AR/VWopRt2iWjUhSC9CFv+dH3ejfqmbu/7rX0/hi58GsWPdFuQlvMA8MPDL
    KR7/xnvXo7u/D5ErUdzqLMcTdz+YXYSZ0pABTETD0M0r4Gk3EQljNDSGm63zk6WaAZRYHHAYRdj0
    Fvw9EeIeyBfyYTdYVKThHApRqlilLFCqhBlFKC9EN6IUsz5gN4i8H4xdGudpyDxWJjqzl2JeDa+z
    Gd3iKEOxUZzloKl4HI/vewFnzweS72Y1Iw6Q0o6b6zagqrSCx5bFlQlMpy2ckX5KlVApRCnPlNvx
    dE/gl9DkhSTVGOsHq6tX8NbrNNt47psK9fjy52+v/0IibabmSqbilIpTsl7JkhC5vJT+H56Y87Vc
    5oncfZgkIXL5aSZXUs4+Tq9V8WrX/Qc0OzY/XizhkgAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * ブックの URL, 行番号はデータ項目で指定
 * @param bookUrl
 * @param sheetTitle
 * @param rowNum
 * @param rowData
 */
const prepareConfigs = (bookUrl, sheetTitle, rowNum, rowData) => {
    const oauth2 = httpClient.createAuthSettingOAuth2(
        'OneDrive',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/token',
        'https://graph.microsoft.com/Files.ReadWrite.All offline_access',
        'client_id',
        'client_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', oauth2);

    // ブックの URL を設定した文字型データ項目（単一行）を準備
    const bookUrlDef = engine.createDataDefinition('ブックの URL', 1, 'q_BookUrl', 'STRING_TEXTFIELD');
    engine.setData(bookUrlDef, bookUrl);
    configs.putObject('conf_Url', bookUrlDef);

    // シート名を設定
    configs.put('conf_Title', sheetTitle);

    // 行番号を設定した数値型データ項目を準備
    const rowNumDef = engine.createDataDefinition('行番号', 3, 'q_RowNum', 'DECIMAL');
    if (rowNum === null) {
        engine.setData(rowNumDef, null);
    } else {
        engine.setData(rowNumDef, new java.math.BigDecimal(rowNum));
    }
    configs.putObject('conf_RowNumber', rowNumDef);

    const columns = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];
    columns.forEach((col, i) => {
        configs.put(`conf_Value${col}`, rowData[i]);
    });
};

const SAMPLE_URL_1 = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com/Documents/test.xlsx';
const SAMPLE_URL_1_ENCODED = 'u!aHR0cHM6Ly90ZXN0LW15LnNoYXJlcG9pbnQuY29tL3BlcnNvbmFsL3VzZXJfdGVzdF9vbm1pY3Jvc29mdF9jb20vRG9jdW1lbnRzL3Rlc3QueGxzeA';

// base64 エンコードした時点で / や + や末尾の = が含まれる文字列
const SAMPLE_URL_2 = 'https://test-my.sharepoint.com/:x:/g/personal/user_test_onmicrosoft_com/abc012_def456-ghi789-jkl00?e=xyz>A';
const SAMPLE_URL_2_ENCODED = 'u!aHR0cHM6Ly90ZXN0LW15LnNoYXJlcG9pbnQuY29tLzp4Oi9nL3BlcnNvbmFsL3VzZXJfdGVzdF9vbm1pY3Jvc29mdF9jb20vYWJjMDEyX2RlZjQ1Ni1naGk3ODktamtsMDA_ZT14eXo-QQ';

// スペースを含むシート名でテストする
const SAMPLE_SHEET_1 = 'シート 1';
const SAMPLE_SHEET_2 = 'シート　2;.!';

const SAMPLE_WORKSHEETS = {
    "value" : [
        {
            "id": "{worksheet-id-001}",
            "name": "シート 1"
        },
        {
            "id": "{worksheet-id-002}",
            "name": "シート　2;.!"
        }
    ]
};

const SAMPLE_ROW = ['A列の値', 'B列の値', 'C列の値', 'D列の値', 'E列の値', 'F列の値', 'G列の値', 'H列の値', 'I列の値', 'J列の値'];
const SAMPLE_ROW_BLANK = new Array(10).fill(''); // 全ての要素が空文字列

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
    }
    if (!failed) {
        fail();
    }
};

/**
 * ブックの URL をデータ項目で指定し、値が空でエラーになる場合
 */
test('Book URL is empty', () => {
    prepareConfigs(null, SAMPLE_SHEET_1, '3', SAMPLE_ROW);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Book URL is empty.');
});

/**
 * シート名が空でエラーになる場合 (EL 式による設定を想定)
 */
test('Sheet Title is empty', () => {
    prepareConfigs(SAMPLE_URL_1, '', '3', SAMPLE_ROW);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Sheet Title is empty.');
});

/**
 * 行番号が小数でエラーになる場合
 */
test('RowNumber is not an integer', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '1.5', SAMPLE_ROW);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 行番号が 0 でエラーになる場合
 */
test('RowNumber is 0', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '0', SAMPLE_ROW);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 行番号が上限値を超えていてエラーになる場合
 */
test('RowNumber exceeds the limit', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '1048577', SAMPLE_ROW);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 行番号を固定値で設定し、0 でエラーになる場合
 */
test('RowNumber is 0 (fixed value)', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, null, SAMPLE_ROW);
    configs.put('conf_RowNumber', '0');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 行番号を固定値で設定し、整数以外の文字が含まれていてエラーになる場合
 */
test('RowNumber is not an integer (fixed value)', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, null, SAMPLE_ROW);
    configs.put('conf_RowNumber', '123!');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 行番号を固定値で設定し、上限値を超えていてエラーになる場合
 */
test('RowNumber exceeds the limit (fixed value)', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, null, SAMPLE_ROW);
    configs.put('conf_RowNumber', '9999999'); // 正規表現ではエラーにならない桁数

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Row number must be a positive integer no greater than 1048576.');
});

/**
 * 32,768 文字以上の値が設定されていてエラーになる場合
 */
test('Value string is too long', () => {
    const rowData = Array.from(SAMPLE_ROW);
    // 3列目の値を 32,768 文字に
    rowData[2] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
        .repeat(315) + 'ABCDEFGH';
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '1', rowData);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Can\'t set text over 32,767 character.');
});

const SAMPLE_GET_1 = {
    "id": "testBook-id-123",
    "name": "test.xlsx",
    "parentReference": {
        "driveId": "testDrive-id-123",
        "id": "testFolder-id-123",
        "name": "Sample Folder"
    }
};

const SAMPLE_GET_2 = {
    "id": "testBook-id-456",
    "name": "test.xlsx",
    "parentReference": {
        "driveId": "testDrive-id-456",
        "id": "testFolder-id-456",
        "name": "Sample Folder"
    }
};

/**
 * GET リクエストのテスト（ファイルのメタデータを取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param encodedUrl
 */
const assertGetRequest = ({ url, method }, encodedUrl) => {
    expect(url).toEqual(`https://graph.microsoft.com/v1.0/shares/${encodedUrl}/driveItem`);
    expect(method).toEqual('GET');
};

/**
 * GET リクエストのテスト（ワークシートの一覧を取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param driveId
 * @param fileId
 */
const assertGetWorksheetsRequest = ({ url, method }, driveId, fileId) => {
    expect(url).toEqual(`https://graph.microsoft.com/v1.0/drives/${driveId}/items/${fileId}/workbook/worksheets`);
    expect(method).toEqual('GET');
};

/**
 * POST リクエストのテスト (シートに行を挿入)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param driveId
 * @param fileId
 * @param worksheetId
 * @param rowNum
 */
const assertPostRequest = ({ url, method, contentType, body }, driveId, fileId, worksheetId, rowNum) => {
    expect(url).toEqual(`https://graph.microsoft.com/v1.0/drives/${driveId}/items/${fileId}/workbook/worksheets/${encodeURIComponent(
        worksheetId
    )}/range(address='${rowNum}:${rowNum}')/insert`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.Shift).toEqual('Down');
};

/**
 * PATCH リクエストのテスト (行に値を入力)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param driveId
 * @param fileId
 * @param worksheetId
 * @param rowNum
 * @param values
 */
const assertPatchRequest = ({ url, method, contentType, body }, driveId, fileId, worksheetId, rowNum, values) => {
    expect(url).toEqual(`https://graph.microsoft.com/v1.0/drives/${driveId}/items/${fileId}/workbook/worksheets/${encodeURIComponent(
        worksheetId
    )}/range(address='A${rowNum}:J${rowNum}')/`);
    expect(method).toEqual('PATCH');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    values.forEach((value, i) => {
        expect(bodyObj.values[0][i]).toEqual(value);
    });
};

/**
 * 行挿入成功
 */
test('Success - All columns are set', () => {
    const rowNum = '3';
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, rowNum, SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum, SAMPLE_ROW);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * 行挿入成功
 * すべての列の値が空
 */
test('Success - All columns are blank', () => {
    prepareConfigs(SAMPLE_URL_2, SAMPLE_SHEET_2, '5.0', SAMPLE_ROW_BLANK);
    const values = new Array(10).fill(null);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_2_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-456', 'testBook-id-456');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '5');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '5', values);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * 行挿入成功
 * 値が設定されている列と設定されていない列が混在
 * 1,048,576 行目までは指定でき、小数点以下が 0 であればエラーにならない
 * 32,767 文字までは設定できる
 */
test('Success - Some columns are blank', () => {
    const rowData = ['', 'B列の値', '', '', 'C列の値', '', '', 'D列目の値', 'E列の\n値', ''];
    // 3列目の値を 32,767 文字に
    rowData[2] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ'
        .repeat(315) + 'ABCDEFG';
    prepareConfigs(SAMPLE_URL_2, SAMPLE_SHEET_2, '1048576.00', rowData);
    const values = rowData.map(value => {
        if (value === '') {
            return null;
        }
        return value;
    });

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_2_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-456', 'testBook-id-456');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '1048576');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '1048576', values);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * 行挿入成功
 * ブックの URL と行番号を固定値で指定
 */
test('Success - URL and RowNumber are fixed values', () => {
    const rowNum = '1048576';
    prepareConfigs(null, SAMPLE_SHEET_1, null, SAMPLE_ROW);
    configs.put('conf_Url', SAMPLE_URL_1);
    configs.put('conf_RowNumber', rowNum);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum, SAMPLE_ROW);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * 行挿入成功
 * 行番号の設定なし（データ項目で指定）
 */
test('Success - RowNumber is not set (data item)', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, null, SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', '1');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', '1', SAMPLE_ROW);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * 行挿入成功
 * 行番号の設定なし（固定値で指定）
 */
test('Success - RowNumber is not set (fixed value)', () => {
    prepareConfigs(SAMPLE_URL_2, SAMPLE_SHEET_2, '100', SAMPLE_ROW);
    configs.put('conf_RowNumber', '');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_2_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-456', 'testBook-id-456');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '1');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-456', 'testBook-id-456', '{worksheet-id-002}', '1', SAMPLE_ROW);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * ファイルの情報を取得する GET リクエストで失敗
 */
test('Fail in 1st GET request', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '1', SAMPLE_ROW);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, SAMPLE_URL_1_ENCODED);
        return httpClient.createHttpResponse(404, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed in 1st GET request. status: 404');
});

/**
 * ワークシート一覧を取得する GET リクエストで失敗
 */
test('Fail in 2nd GET request', () => {
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, '1', SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        // ワークシート一覧取得のリクエスト
        assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed in 2nd GET request. status: 400');
});

/**
 * 指定した名前のシートが存在しない
 */
test('Worksheet not found', () => {
    prepareConfigs(SAMPLE_URL_1, '存在しないシート名', '1', SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        // ワークシート一覧取得のリクエスト
        assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Worksheet not found.');
});

/**
 * POST リクエストで失敗
 */
test('Fail in POST request', () => {
    const rowNum = '1';
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, rowNum, SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        // 行挿入のリクエスト
        assertPostRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed in POST request. status: 400');
});

/**
 * PATCH リクエストで失敗
 */
test('Fail in PATCH request', () => {
    const rowNum = '1';
    prepareConfigs(SAMPLE_URL_1, SAMPLE_SHEET_1, rowNum, SAMPLE_ROW);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // ファイル情報取得のリクエスト
            assertGetRequest(request, SAMPLE_URL_1_ENCODED);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
        }
        if (reqCount === 1) { // ワークシート一覧取得のリクエスト
            assertGetWorksheetsRequest(request, 'testDrive-id-123', 'testBook-id-123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_WORKSHEETS));
        }
        if (reqCount === 2) { // 行挿入のリクエスト
            assertPostRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        // 値入力のリクエスト
        assertPatchRequest(request, 'testDrive-id-123', 'testBook-id-123', '{worksheet-id-001}', rowNum, SAMPLE_ROW);
        return httpClient.createHttpResponse(403, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed in PATCH request. status: 403');
});

    ]]></test>

</service-task-definition>
