<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2020-09-09</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Microsoft 365 Excel: Insert New Row</label>
<label locale="ja">Microsoft 365 Excel: 行挿入</label>
<summary>Insert a new row with data at the specified position in a sheet.</summary>
<summary locale="ja">シート内の指定された場所に新しい行を挿入し、データを入力します。</summary>
<help-page-url>https://support.questetra.com/addons/excel-row-insert/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/excel-row-insert/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_Url" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Target Book URL</label>
    <label locale="ja">C2: 入力先のブックの URL</label>
  </config>
  <config name="conf_Title" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_RowNumber" form-type="SELECT" select-data-type="DECIMAL" editable="true">
    <label>C4: Row Number to insert new row(When empty, the top row)</label>
    <label locale="ja">C4: 挿入先の行番号(空の場合は一番上の行)</label>
  </config>
  <config name="conf_ValueA" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-A: Column-A Value of Inserted Row</label>
    <label locale="ja">C-A: 挿入行の A 列に追加される値</label>
  </config>
  <config name="conf_ValueB" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-B: Column-B Value of Inserted Row</label>
    <label locale="ja">C-B: 挿入行の B 列に追加される値</label>
  </config>
  <config name="conf_ValueC" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-C: Column-C Value of Inserted Row</label>
    <label locale="ja">C-C: 挿入行の C 列に追加される値</label>
  </config>
  <config name="conf_ValueD" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-D: Column-D Value of Inserted Row</label>
    <label locale="ja">C-D: 挿入行の D 列に追加される値</label>
  </config>
  <config name="conf_ValueE" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-E: Column-E Value of Inserted Row</label>
    <label locale="ja">C-E: 挿入行の E 列に追加される値</label>
  </config>
  <config name="conf_ValueF" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-F: Column-F Value of Inserted Row</label>
    <label locale="ja">C-F: 挿入行の F 列に追加される値</label>
  </config>
  <config name="conf_ValueG" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-G: Column-G Value of Inserted Row</label>
    <label locale="ja">C-G: 挿入行の G 列に追加される値</label>
  </config>
  <config name="conf_ValueH" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-H: Column-H Value of Inserted Row</label>
    <label locale="ja">C-H: 挿入行の H 列に追加される値</label>
  </config>
  <config name="conf_ValueI" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-I: Column-I Value of Inserted Row</label>
    <label locale="ja">C-I: 挿入行の I 列に追加される値</label>
  </config>
  <config name="conf_ValueJ" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-J: Column-J Value of Inserted Row</label>
    <label locale="ja">C-J: 挿入行の J 列に追加される値</label>
  </config>
</configs>

<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.get( "conf_OAuth2" );
  const bookUrl = retrieveBookUrl();
  const sheetName = configs.get( "conf_Title" );
  if(sheetName === "" || sheetName === null){
    throw "Sheet Title is empty.";
  }
  const rowNumber = retrieveRowNumber();
  let values = [];
  values[0] = configs.get( "conf_ValueA" );
  values[1] = configs.get( "conf_ValueB" );
  values[2] = configs.get( "conf_ValueC" );
  values[3] = configs.get( "conf_ValueD" );
  values[4] = configs.get( "conf_ValueE" );
  values[5] = configs.get( "conf_ValueF" );
  values[6] = configs.get( "conf_ValueG" );
  values[7] = configs.get( "conf_ValueH" );
  values[8] = configs.get( "conf_ValueI" );
  values[9] = configs.get( "conf_ValueJ" );

  //// == ワークフローデータの参照 / Data Retrieving ==
  const token  = httpClient.getOAuth2Token( oauth2 );

  //// == Calculating / 演算 ==
  // Access to the API 1st(Get Book Info)
  const bookInfo = getFileInfoByUrl( bookUrl, token );
  
  // Access to the API 2nd(Insert Row)
  insertRow( bookInfo.driveId, bookInfo.fileId, sheetName, rowNumber, token);

  // Access to the API 3rd(PATCH)
  patchData( bookInfo.driveId, bookInfo.fileId, sheetName, rowNumber, values, token);
}

/**
  * config からブックの URL を読み出す、空ならエラー
  * @return {String} ブックの URL
  */
function retrieveBookUrl() {
  const bookUrlDef = configs.getObject( "conf_Url" );
  let bookUrl;
  if ( bookUrlDef === null ) {
    bookUrl = configs.get( "conf_Url" )
  }else{
    bookUrl = engine.findData( bookUrlDef );
  }
  if ( bookUrl === "" || bookUrl === null){
    throw "Book URL is empty."
  }
  return bookUrl;
}

/**
  * config から行番号の値を読み出す、空なら1
  * 数字でない文字が入っているか、シートの範囲外である数字の場合はエラー
  * シートの範囲: 1 ~ 1048576
  * @return {Number} 行番号
  */
function retrieveRowNumber() {
  const rowNumberDef = configs.getObject( "conf_RowNumber" );
  let rowNumber;
  if ( rowNumberDef === null ) {
    rowNumber = configs.get( "conf_RowNumber" )
  }else{
    rowNumber = engine.findData( rowNumberDef );
  }
  if ( rowNumber === "" || rowNumber === null){
    rowNumber = "1";
  }
  const reg = new RegExp( '^[1-9][0-9]*$' );
  if ( !reg.test( rowNumber ) ){
    throw "Row number must be a positive integer.";
  }
  rowNumber = parseInt(rowNumber, 10); //parse to int
  if ( rowNumber > 1048576 ){
    throw "Row number must be 1048576 or below.";
  }
  return rowNumber;
}

/**
  * フォルダの URL からファイル情報（ドライブ ID とファイル ID）を取得し、
  * オブジェクトで返す（URL が空の場合はエラーとする）
  * @param {String} fileUrl  フォルダの URL
  * @param {String} token  OAuth2 トークン
  * @return {Object} fileInfo  ファイル情報 {driveId, fileId}
  */
function getFileInfoByUrl( fileUrl, token ) {
  let fileInfo;
  if ( fileUrl !== "" && fileUrl !== null ) {
    // 分割代入
    const {
      id,
      parentReference: {
        driveId
      }
    } = getObjBySharingUrl( fileUrl, token );
    fileInfo = {driveId: `drives/${driveId}`, fileId: id};
  }
  return fileInfo;
}

/**
  * OneDrive のドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSON オブジェクトを返す
  * API の仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有 URL
  * @param {String} token  OAuth2 トークン
  * @return {Object} responseObj  ドライブアイテムのメタデータの JSON オブジェクト
  */
function getObjBySharingUrl( sharingUrl, token ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // preparing for API Request
  let apiRequest = httpClient.begin(); // HttpRequestWrapper
  // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
  // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
  apiRequest = apiRequest.bearer( token );
  // Access to the API (POST, GET, PUT, etc)
  let response = apiRequest.get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const accessLog = `---GET request--- ${httpStatus}\n${response.getResponseAsString()}\n`;
  engine.log(accessLog);
  if (httpStatus >= 300) {
    const error = `Failed to get drive item. status: ${httpStatus}`;
    throw error;
  }
  const responseObj = JSON.parse( response.getResponseAsString() );
  return responseObj;
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有 URL
  * @return {String} encodedSharingUrl  エンコードされた共有 URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  encodedSharingUrl = "u!" + encodedSharingUrl;
  return encodedSharingUrl;
}

/**
  * 行を指定シートの指定箇所に挿入する
  * @param {String,String} driveId, bookId  挿入先ファイルのドライブ ID、ファイル ID
  * @param {String} sheetName  挿入先シートの名前
  * @param {Number} rowNumber  挿入箇所の行番号
  * @param {String} token  OAuth2 トークン
  */
function insertRow( driveId, bookId, sheetName, rowNumber, token){
  const insertUrl = `${GRAPH_URI}${driveId}/items/${bookId}/workbook/worksheets/${sheetName}/range(address='${sheetName}!${rowNumber}:${rowNumber}')/insert`;
  const postRequest = {
    "Shift" : "Down"
  };

  let insertNewRow = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify( postRequest ), "application/json")
    .post (insertUrl);
    
  logAndJudgeError(insertNewRow, "POST");
}

/**
  * 指定シートの指定行にデータを入力する
  * @param {String,String} driveId, bookId  挿入先ファイルのドライブ ID、ファイル ID
  * @param {String} sheetName  挿入先シートの名前
  * @param {Number} rowNumber  挿入箇所の行番号
  * @param {Array} values  入力するデータの配列
  * @param {String} token  OAuth2 トークン
  */
function patchData( driveId, bookId, sheetName, rowNumber, values, token){
  const patchUri = `${GRAPH_URI}${driveId}/items/${bookId}/workbook/worksheets/${sheetName}/range(address='${sheetName}!A${rowNumber}:J${rowNumber}')/`;
  const patchRequest = makeRequestToAdd(values);

  let patchToSheet = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify( patchRequest ), "application/json")
    .patch(patchUri); 
  
  logAndJudgeError(patchToSheet, "PATCH");
}

/**
  * 新しい行に追加するデータを、JSON 形式に変換する
  * @param {Array} values  データの入った配列
  * @return {JSON Object} 変換した JSON オブジェクト
  */
function makeRequestToAdd(values){
  let request = {
    values : [[]]
  };
  for(let i = 0; i < 10; i++){
    if(values[i] === "" || values[i] === null){
      request.values[0].push(null);
    }else{
      if(values[i].length > 32767){
        throw "Can't set text over 32,767 character.";
      }
      request.values[0].push(values[i]);
    }
  }
  return request;
}

/**
  * ログの出力と、エラー発生時のスローを行う
  * @param {Object} request  リクエストの応答
  * @param {String} requestType リクエストをどの形式で行ったか("GET" or "POST" or "PATCH")
  */
function logAndJudgeError(request, requestType){
  const response = request.getResponseAsString();
  const status = request.getStatusCode();
  const accessLog = `---${requestType} request--- ${status}
  ${response}
  `;
  engine.log(accessLog);
  if(status >= 300){
    throw `status: ${status}`;
  }
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEZklEQVRYR8WXf2xTVRTHv3evo9v6
+/XHyuZccRMjc8QRkkFEI9MWJCHBJSgqzIjJshFxjqHGuCAh8VdcJy7DEYyiGY5/QDFElHaKmZjM
P3AiatAprcsiLDoawlZbWXvNvesrb91r+waY3qRJ8969537uOd9zzn0EOR5E7f4ljWuLtPpIPSVk
JQGtAYgLgCWxPgTQIAUZIpSeiE4UfPTnvqNhNbazArieXeNEbOp5QtAEoECNUQARSrEXgub14BvH
LmRakxHA1eZuIiAdAHQqN06dNklBtwe9/r3p1qcFcG33vE0omq9x4xnLKEFPsMO3RcmWIoCrzd1H
QB65EZtLNijowaDX/2iqzVkAak6+ofYBLHEtQrmtBA6DiG+Gh9B+uCsrr5InZgAkYt4jWVpeeSfu
r1qGCkcZ5pvsEPUmGAv1yBc0MzY7dnoAT/W+nBWATaCgzXJNJAGY2kl86jdJcD++8gmK5qkTPQMQ
BAE2vRlxSkETP/afEIIuXy8Gf/9BApykeZpKKTuuAmzzvEkInpFmnes4rupEbBIDWOh0odhk5dDh
fyN8rUDyUKQtxK4jPXj/5JGkPUqxO9jpa2UPOAAvMobouDzP5woghWBwx0Es2zWt3xbPRrR4Ns0C
YHUiellrZcWKAyzY5t4IQnrlR04HwNz7z5UotJp8CHkCX8I8wIbNYMEdpZU4MzqMqXiMe6Om/HYl
AIDSTYFO/wEO4GrzvEuAzekA3vnqEBaXLURtxWIMX/gDHZ/tx56GdmgSYmQAI+PnuUhXVa/A8TMn
uSmnyYZ7bluqCECB94Je35PTHmhzfweQmnQAbNPOzz9Ad0M7uvs/xH1Vy/lJpSHPAnkImuoexnNr
Nit7AHQo4PUvSQB4LsoaC7crD0EsHseLh97C6uq78OnpAbz2UGvS/VIIWE0oNlphLjIgFL6MWDzG
09WqN6cBQCjg9YkSAE2VfKoGvh85i/quFhzeupvHVT7SeWCr+zG0rmpIB4CA10dUATDhdfkPwKIz
ITR5CU9zzV6tYQyAndRuFFFitmP04hivBRpBwAL7TaoAMobg3F+j2NPfh1fXt6Jx/068tK6ZG5Zr
YHhsBKLOiLU1K3F06AR/VWopRt2iWjUhSC9CFv+dH3ejfqmbu/7rX0/hi58GsWPdFuQlvMA8MPDL
KR7/xnvXo7u/D5ErUdzqLMcTdz+YXYSZ0pABTETD0M0r4Gk3EQljNDSGm63zk6WaAZRYHHAYRdj0
Fvw9EeIeyBfyYTdYVKThHApRqlilLFCqhBlFKC9EN6IUsz5gN4i8H4xdGudpyDxWJjqzl2JeDa+z
Gd3iKEOxUZzloKl4HI/vewFnzweS72Y1Iw6Q0o6b6zagqrSCx5bFlQlMpy2ckX5KlVApRCnPlNvx
dE/gl9DkhSTVGOsHq6tX8NbrNNt47psK9fjy52+v/0IibabmSqbilIpTsl7JkhC5vJT+H56Y87Vc
5oncfZgkIXL5aSZXUs4+Tq9V8WrX/Qc0OzY/XizhkgAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
