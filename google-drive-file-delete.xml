<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2024-03-05</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Google Drive: Delete File / Folder</label>
    <label locale="ja">Google ドライブ: ファイル / フォルダ削除</label>
    <summary>
        This item deletes files or folders on Google Drive.
    </summary>
    <summary locale="ja">
        この工程は、Google ドライブ上のファイルやフォルダを削除します。
        一度に複数の削除が可能です。
    </summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/googledrive-folderdelete/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-folderdelete/</help-page-url>
    <configs>
        <config name="UserID" form-type="QUSER" required="true">
            <label>C1: User connects to Google Drive (must be App Administrator)</label>
            <label locale="ja">C1: Google ドライブ に接続するユーザ（要アプリ管理権限）</label>
        </config>
        <config name="FileIdsItem" form-type="SELECT" select-data-type="STRING" required="true">
            <label>C2: File / Folder IDs to delete (Write one per line)</label>
            <label locale="ja">C2: 削除するファイル・フォルダ ID (1 行 1 ID)</label>
        </config>
    </configs>

    <script><![CDATA[

function main() {
    const filesIdArray = getFileIds();
    const quser = getQuser();
    for (let i = 0; i < filesIdArray.length; i++) {
        deleteFile(quser, filesIdArray[i]);
    }
}

/**
 * データ項目からファイル / フォルダ ID を取得し、配列に入れて返す
 * ID の数が通信制限を超えていればエラー
 * @return {Array<String>}  ファイル ID の配列
 */
function getFileIds() {
    const fileIds = engine.findDataByNumber(configs.get("FileIdsItem"));
    if (fileIds === null) {
        throw "File / Folder IDs aren't set.";
    }
    let fileIdsArray = fileIds.split("\n");
    fileIdsArray = fileIdsArray.filter(lines => lines !== ""); // 空文字列を削除
    if (fileIdsArray.length === 0) {
        throw "File / Folder IDs aren't set.";
    }
    if (fileIdsArray.length > httpClient.getRequestingLimit()) {
        //check number of files
        throw "Number of File IDs is over the limit.";
    }
    return fileIdsArray;
}

/**
 * 実行ユーザを取得する
 * @return {QuserView} 実行ユーザ
 */
function getQuser() {
    const quser = configs.getObject("UserID");
    if (quser === null) {
        throw "User not found.";
    }
    engine.log(`User Name: ${quser.getName()}`);
    return quser;
}

/**
 * ファイルを削除する
 * メタデータの "trashed" パラメータを true にすることでファイルをゴミ箱に入れる
 * 削除の結果をログ出力し、失敗した場合はエラーとする
 * @param {QuserView} quser  実行ユーザ
 * @param {String} fileId  削除するファイルの ID
 */
function deleteFile(quser, fileId) {
    const url = `https://www.googleapis.com/drive/v3/files/${fileId}`;
    const body = {
        trashed: true
    };
    let response = httpClient.begin()
        .googleOAuth2(quser, "Drive")
        .queryParam("supportsAllDrives", "true")
        .body(JSON.stringify(body), "application/json; charset=UTF-8")
        .patch(url);

    const status = response.getStatusCode();
    if (status >= 300) {
        engine.log(response.getResponseAsString());
        throw `Failed to delete. ID: ${fileId}, status: ${status}`;
    } else {
        engine.log(`Succeed to delete. ID: ${fileId}`);
    }
}
]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
        hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
        IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
        d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
        idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
        7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
        g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
        rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
        LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
        f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
        JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
        K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
        93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
        75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
        rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
        6/Q2AAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[
/**
 * 設定の準備
 * @param configs
 * @param ids
 * @return {Object}
 */
const prepareIdsConfig = (configs, ids) => {
    const idDef = engine.createDataDefinition('フォルダ ID', 3, 'q_folderId', 'STRING_TEXTAREA');
    configs.putObject('FileIdsItem', idDef);
    engine.setData(idDef, ids);

    return idDef;
};

/**
 * 設定の準備
 * @param configs
 * @param ids
 * @return {Object}
 */
const prepareConfigs = (configs, ids) => {
    const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
    configs.putObject('UserID', quser);

    return prepareIdsConfig(configs, ids);
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
        try {
        main();
        } catch (e) {
    failed=true;
    }
    if (!failed) {
        fail();
    }
};

test('IDs is null', () => {
    prepareConfigs(configs, null);
    assertError(main, 'File / Folder IDs aren\'t set.');
});

test('IDs is blank', () => {
    prepareConfigs(configs, '\n\n\n'); //空行が複数行あるだけ
    assertError(main, 'File / Folder IDs aren\'t set.');
});

test('Number of IDs are over the limit', () => {
    let ids = '';
    for (let i = 0; i <= httpClient.getRequestingLimit(); i++) {
        ids += 'aaaaa\n';
    }
    prepareConfigs(configs, ids);
    assertError(main, 'Number of File IDs is over the limit.');
});

test('User not found', () => {
    configs.put('UserID', '3'); // UserID は空ではないが、対応する QuserView がない状態
    prepareIdsConfig(configs, '12345');
    assertError(main, 'User not found.');
});

/**
 * リクエストのテスト
 * @param method
 * @param contentType
 * @param body
 * @param name
 * @param parentId
 */
const assertRequest = ({url, method, contentType, body}, id) => {
    expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/${id}?supportsAllDrives=true`)
    expect(method).toEqual('PATCH');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.trashed).toEqual(true);
};

test('Succeed to delete multiple files folders', () => {
    let ids = '';
    for (let i = 0; i < httpClient.getRequestingLimit(); i++) {
        ids += `f${i}\n`;
    }
    prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        assertRequest(request, `f${requestCount++}`);
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });

    main();
    expect(requestCount).toEqual(httpClient.getRequestingLimit());
});

test('Failed to delete file folder', () => {
    let ids = '';
    for (let i = 0; i < 2; i++) {
        ids += `000${i}\n`;
    }
    prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        try {
            assertRequest(request, `000${requestCount}`);
            if (requestCount === 1) {
                return httpClient.createHttpResponse(400, 'application/json', '{}');
            } else {
                return httpClient.createHttpResponse(200, 'application/json', '{}');
            }
        } finally {
            requestCount++;
        }
    });

    assertError(main, 'Failed to delete. ID: 0001, status: 400');
});
]]></test>
</service-task-definition>
