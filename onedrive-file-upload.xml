<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>OneDrive for Business: Upload File</label>
<label locale="ja">OneDrive for Business: ファイルアップロード</label>
<last-modified>2020-06-08</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Upload files to the specified folder on OneDrive.</summary>
<summary locale="ja">OneDrive の指定フォルダにファイルをアップロードします。</summary>
<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C2: File type data item whose attached files will be uploaded</label>
    <label locale="ja">C2: アップロードするファイルが保存されているファイル型データ項目</label>
  </config>
  <config name="uploadedFolderUrl" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder URL files will be uploaded (Root folder if blank)</label>
    <label locale="ja">C3: ファイルをアップロードするフォルダの URL (指定がない場合は、ルートフォルダ)</label>
  </config>
  <config name="fileUrl" form-type="SELECT" select-data-type="STRING">
    <label>C4: String type data item to save uploaded file URLs</label>
    <label locale="ja">C4: ファイル URL を保存する文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/onedrive-file-upload/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/onedrive-file-upload/</help-page-url>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const limitSize = 4194304; //File size border of Microsoft Graph
const packetMaxSize = 10485760; //size of each packet,must be a multiple of 327680(320KiB): 10485760=10MiB
const graphUri = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("OAuth2");
  const folderUrl  = configs.get("uploadedFolderUrl");
  const urlDataDef = configs.getObject("fileUrl");
  //// == ワークフローデータの参照 / Data Retrieving ==
  const token = httpClient.getOAuth2Token( oauth2 );
  const files = engine.findData( configs.getObject("uploadedFile") );
  if (files === null) {
    setData(urlDataDef,[""]);
    return;
  }

  //// == 演算 / Calculating ==

  fileCheck(files, urlDataDef, folderUrl);
  const folderInfo = getFolderInfoByUrl( folderUrl, token );
  let uploadedFileUrl = [];

  for(let i = 0; i< files.size(); i++){
    engine.log(files.get(i).getName());
    if(files.get(i).getLength() > limitSize){
      //over 4MB
      processLargeFile(token,files.get(i),folderInfo,uploadedFileUrl);
    }else{
      //under 4MB
      upload(token,files.get(i),folderInfo,uploadedFileUrl);
    }
  }
  //// == ワークフローデータへの代入 / Data Updating ==
  setData(urlDataDef,uploadedFileUrl);
}

/**
  * アップロードしようとするファイルの数・サイズが適切かどうかチェックする
  * ファイル数、通信制限をチェック
  * 通信数=4MB以下のファイルの数 + <4MBを超えるファイルそれぞれについて>(ceil(ファイルサイズ/パケットの最大サイズ) + 1)
  * @param {Array<File>} files  アップロードしようとするファイル
  * @param {ProcessDataDefinitionView} urlDataDef  URL を保存するデータ項目の ProcessDataDefinitionView
  * @param {String} folderUrl  アップロード先フォルダの URL
  */
function fileCheck(files,urlDataDef,folderUrl){
  const fileNum = files.size(); //number of files
  fileNumCheck(urlDataDef,fileNum);

  let requestNum = 0;
  for (let i = 0; i < fileNum; i++){
    let size = files.get(i).getLength();
    if(size > limitSize){
      requestNum += (Math.ceil(size / packetMaxSize) + 1);
    }else{
      requestNum++;
    }
  }
  if(folderUrl !== "" || folderUrl !== null){
    requestNum++;
  }
  if(requestNum > httpClient.getRequestingLimit()){
    throw "Necessary HTTP requests exceeds the limit.";
  }
}

/**
  * アップロードするデータが複数で URL 出力先のデータ項目が単一行ならエラーにする
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Number} fileNum  アップロードしようとしているファイルの個数
  */
function fileNumCheck(dataDef,fileNum){
  if(dataDef !==  null){
    //Multiple Judge
    if(dataDef.matchDataType("STRING_TEXTFIELD") && fileNum > 1){
      throw "Multiple files are set though the Data Item to save the output is Single-line String."
    }
  }
}

/**
  * フォルダのURLからフォルダ情報（ドライブIDとフォルダID）を取得し、
  * オブジェクトで返す（URLが空の場合はドライブIDをme/drive、フォルダIDをrootにする）
  * @param {String} folderUrl  フォルダのURL
  * @param {String} token  OAuth2 トークン
  * @return {Object} folderInfo  フォルダ情報 {driveId, folderId}
  */
function getFolderInfoByUrl( folderUrl, token ) {
  let folderInfo = {driveId: "me/drive", folderId: "root"};
  if ( folderUrl !== "" && folderUrl !== null ) {
    // 分割代入
    const {
      id,
      parentReference: {
        driveId
      }
    } = getObjBySharingUrl( folderUrl, token );
    folderInfo = {driveId: `drives/${driveId}`, folderId: id};
  }
  return folderInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {String} token  OAuth2 トークン
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, token ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // preparing for API Request
  let apiRequest = httpClient.begin(); // HttpRequestWrapper
  // com.questetra.bpms.core.event.scripttask.HttpClientWrapper
  // Request HEADER (OAuth2 Token, HTTP Basic Auth, etc)
  apiRequest = apiRequest.bearer( token );
  // Access to the API (POST, GET, PUT, etc)
  let response = apiRequest.get( `${graphUri}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode() + "";
  const accessLog = `---GET request--- ${httpStatus}\n${response.getResponseAsString()}\n`;
  engine.log(accessLog);
  if (httpStatus >= 300) {
    const error = `Failed to get drive item. status: ${httpStatus}`;
    throw error;
  }
  const responseObj = JSON.parse( response.getResponseAsString() );
  return responseObj;
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  encodedSharingUrl = "u!" + encodedSharingUrl;
  return encodedSharingUrl;
}

/**
  * ファイルをアップロードする。一回につき一つのみ。
  * @param {String} token  OAuth2 トークン
  * @param {File} file  アップロードするファイル
  * @param {String,String} driveId,folderId  アップロード先ドライブ、フォルダのID
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function upload(token,file,{
  driveId,
  folderId
},uploadedFileUrl){
  const url = `${graphUri}${driveId}/items/${folderId}:/${encodeURIComponent(file.getName())}:/content`;
  let response = httpClient.begin()
    .bearer(token)
    .body(file)
    .put(url);
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  const accessLog = `---PUT request--- ${status}\n${responseStr}\n`;
  if (status >= 300) {
    engine.log(accessLog);
    throw `Failed to upload. status: ${status}`;
  }
  outputDataSet(status,responseStr,uploadedFileUrl);
}

/**
  * 4MBを超えるファイルのアップロード処理を行う
  * @param {String} token  OAuth2 のトークン
  * @param {File} file  アップロードするファイル
  * @param {String,String} driveId,folderId  アップロード先ドライブ、フォルダのID
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function processLargeFile(token,file,{
  driveId,
  folderId
},uploadedFileUrl){
  const upUrl = createSession(token,file.getName(),{
    driveId,
    folderId
  });
  let range = 0;
  const fileSize = file.getLength();

  fileRepository.readFile(file, packetMaxSize, function(packet){
    //upload each fragment of file
    range = uploadLarge(upUrl,range,packet,fileSize,uploadedFileUrl);
  });
}

/**
  * アップロード用のセッションを作成する
  * @param {String} token  OAuth2 のトークン
  * @param {String} fileName  アップロードするファイルのファイル名
  * @param {String,String} driveId,folderId  アップロード先ドライブ、フォルダのID
  * @return {String}  アップロード先 URL
  */
function createSession(token,fileName,{
  driveId,
  folderId
}){
  const url = `${graphUri}${driveId}/items/${folderId}:/${encodeURIComponent(fileName)}:/createUploadSession`;
  const body = {
    "item": {
      "@microsoft.graph.conflictBehavior": "replace",
      "name" : fileName
    }
  };
  let response = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const jsonStr = response.getResponseAsString();
  const accessLog = `---POST request--- ${status}\n${jsonStr}\n`;
  engine.log(accessLog);
  if(status >= 300){
    throw `Failed to create upload session. status: ${status}`;
  }
  return JSON.parse(jsonStr).uploadUrl;
}

/**
  * 4MBを超えるファイルについて、各部分のアップロードを実行する
  * @param {String} upUrl  アップロードするファイルのファイル名
  * @param {Number} range  これまでにアップロードしたサイズ
  * @param {ByteArrayWrapper} packet  アップロードするバイナリ
  * @param {Number} fileSize  アップロードするファイルのサイズ
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  * @return {Number}  新しい range
  */
function uploadLarge(upUrl,range,packet,fileSize,uploadedFileUrl){
  const packetSize = packet.getLength();
  const rangetxt = `bytes ${range}-${range + packetSize - 1}/${fileSize}`;
  let sending = httpClient.begin()
    .header("Content-Range", rangetxt )
    .body(packet,"application/octet-stream")
    .put(upUrl);

  const status = sending.getStatusCode();
  const responseStr = sending.getResponseAsString();
  const accessLog = `---PUT request--- ${status}\n${responseStr}\n`;
  if(status >= 300){
    engine.log(accessLog);
    throw `Failed to upload. status: ${status}`;
  }else if(status === 202){
    range += packetSize;
    return range;
  }else{
    outputDataSet(status,responseStr,uploadedFileUrl);
    return range;
  }
}

/**
  * ログを出力し、アップロードしたデータのURLを配列にセットする。
  * @param {Number} status  送信時のステータスコード
  * @param {String} responseStr  送信時のレスポンスをテキスト出力したもの
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function outputDataSet(status,responseStr,uploadedFileUrl){
  const accessLog = `---PUT request--- ${status}\n${responseStr}\n`;
  engine.log(accessLog);
  const json = JSON.parse(responseStr);
  uploadedFileUrl.push(json.webUrl);
}
/**
  * アップロードしたデータのURLをデータ項目に出力する。
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function setData(dataDef,uploadedFileUrl){
  if(dataDef !==  null){
    engine.setData(dataDef,uploadedFileUrl.join('\n'));
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
