<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>OneDrive: Upload File</label>
<label locale="ja">OneDrive: ファイルアップロード</label>
<last-modified>2020-05-19</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<summary>Upload files to the specified folder on OneDrive.</summary>
<summary locale="ja">OneDrive の指定フォルダにファイルをアップロードします。</summary>
<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C2: File type data item whose attached files will be uploaded</label>
    <label locale="ja">C2: アップロードするファイルが保存されているファイル型データ項目</label>
  </config>
  <config name="uploadedFolderPath" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder Path files will be uploaded (Root folder if blank)</label>
    <label locale="ja">C3: ファイルをアップロードするフォルダのパス (指定がない場合は、ルートフォルダ)</label>
  </config>
  <config name="filePath" form-type="SELECT" select-data-type="STRING">
    <label>C4: String type data item that will save uploaded file paths</label>
    <label locale="ja">C4: ファイルパス を保存する文字型データ項目</label>
  </config>
  <config name="fileUrl" form-type="SELECT" select-data-type="STRING">
    <label>C5: String type data item that will save uploaded file urls</label>
    <label locale="ja">C5: ファイル URL を保存する文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/onedrive-file-upload/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/onedrive-file-upload/</help-page-url>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const limitSize = 4194304; //File size border of Microsoft Graph
const packetMaxSize = 10485760; //size of each packet,must be a multiple of 327680(320KiB): 10485760=10MiB

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("OAuth2");
  const pathDataDef = configs.getObject("filePath");
  const urlDataDef = configs.getObject("fileUrl");
  //// == ワークフローデータの参照 / Data Retrieving ==
  const token = httpClient.getOAuth2Token( oauth2 );
  const folderPath = folderPathDecision();
  const files = engine.findData(configs.getObject("uploadedFile")  );
  if (files === null) {
    setData(pathDataDef,[""]);
    setData(urlDataDef,[""]);
    return;
  } 
  
  //// == 演算 / Calculating ==

  fileCheck(files,pathDataDef,urlDataDef);
  let uploadedFileData = [[],[]]; //0:Path,1:URL

  for(let i = 0; i< files.size(); i++){
    engine.log(files.get(i).getName());
    if(files.get(i).getLength() > limitSize){
      //over 4MB
      processLargeFile(token,files.get(i),folderPath,uploadedFileData);
    }else{
      //under 4MB
      upload(token,files.get(i),folderPath,uploadedFileData);
    }
  }
  //// == ワークフローデータへの代入 / Data Updating ==
  setData(pathDataDef,uploadedFileData[0]);
  setData(urlDataDef,uploadedFileData[1]);
}

/**
  * フォルダのフルパスをconfigから読み出して出力する。空の場合は"root:/"とする。
  * パスは/始まり、root:は省略すること
  * @return {String}  フォルダのパス(先頭に"root:/")
  */
function folderPathDecision(){
  let folderPath  = configs.get("uploadedFolderPath");

  if(folderPath === "" || folderPath === null){
    //when folder path isn't set, set ""
    folderPath = "drive/root:";
  }else{
    //add "drive/root:" before path
    folderPath = "drive/root:" + folderPath;
  }
  return folderPath;
}

/**
  * アップロードしようとするファイルの数・サイズが適切かどうかチェックする
  * ファイル数、通信制限をチェック
  * 通信数=4MB以下のファイルの数 + <4MBを超えるファイルそれぞれについて>(ceil(ファイルサイズ/パケットの最大サイズ) + 1)
  * @param {Array<File>}  アップロードしようとするファイル
  * @param {ProcessDataDefinitionView} pathDataDef  パスを保存するデータ項目の ProcessDataDefinitionView
  * @param {ProcessDataDefinitionView} urlDataDef  URL を保存するデータ項目の ProcessDataDefinitionView
  */
function fileCheck(files,pathDataDef,urlDataDef){
  const fileNum = files.size(); //number of files
  fileNumCheck(pathDataDef,fileNum);
  fileNumCheck(urlDataDef,fileNum);

  let requestNum = 0;
  for (let i = 0; i < fileNum; i++){
    let size = files.get(i).getLength();
    if(size > limitSize){
      requestNum += (Math.ceil(size / packetMaxSize) + 1);
    }else{
      requestNum++;
    }
  }
  if(requestNum > httpClient.getRequestingLimit()){
    throw "Number of requests is over the limit";
  }
}

/**
  * アップロードするデータが複数で パス・URL 出力先のデータ項目が単一行ならエラーにする
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Number} fileNum  アップロードしようとしているファイルの個数
  */
function fileNumCheck(dataDef,fileNum){
  if(dataDef !== "" && dataDef !==  null){
    //Multiple Judge
    if(dataDef.matchDataType("STRING_TEXTFIELD") && fileNum > 1){
      throw "Multiple files are uploaded.Can't set data to single-line string Data Item."
    }
  }
}

/**
  * ファイルをアップロードする。一回につき一つのみ。
  * @param {String} token  OAuth2 トークン
  * @param {File} file  アップロードするファイル
  * @param {String} folderPath  アップロード先フォルダのパス
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  */
function upload(token,file,folderPath,uploadedFileData){
  const url = `https://graph.microsoft.com/v1.0/me/${encodeURIComponent(folderPath)}/${encodeURIComponent(file.getName())}:/content`;
  let response = httpClient.begin()
    .bearer(token)
    .body(file)
    .put(url);
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    throw `failed to upload
    status: ${status}
    ${responseStr}`;
  }
  outputDataSet(status,responseStr,uploadedFileData);
}

/**
  * 4MBを超えるファイルのアップロード処理を行う
  * @param {String} token  OAuth2 のトークン
  * @param {File} file  アップロードするファイル
  * @param {String} folderPath  アップロード先のフォルダのパス
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  */
function processLargeFile(token,file,folderPath,uploadedFileData){
  const upUrl = createSession(token,file.getName(),folderPath);
  let range = 0;
  const fileSize = file.getLength();

  fileRepository.readFile(file, packetMaxSize, function(packet){
    //upload each fragment of file
    range = uploadLarge(upUrl,range,packet,fileSize,uploadedFileData);
  });
}

/**
  * アップロード用のセッションを作成する
  * @param {String} token  OAuth2 のトークン
  * @param {String} fileName  アップロードするファイルのファイル名
  * @param {String} folderPath  アップロード先のフォルダのパス
  * @return {String}  アップロード先 URL
  */
function createSession(token,fileName,folderPath){
  const url = `https://graph.microsoft.com/v1.0/me/${encodeURIComponent(folderPath)}/${encodeURIComponent(fileName)}:/createUploadSession`;
  const body = {
    "item": {
      "@microsoft.graph.conflictBehavior": "replace",
      "name" : fileName
    }
  };
  let response = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const jsonStr = response.getResponseAsString();
  if(status >= 300){
    throw `failed to create upload session 
    status: ${status}
    ${jsonStr}`;
  }
  return JSON.parse(jsonStr).uploadUrl;
}

/**
  * 4MBを超えるファイルについて、各部分のアップロードを実行する
  * @param {String} upUrl  アップロードするファイルのファイル名
  * @param {Number} range  これまでにアップロードしたサイズ
  * @param {ByteArrayWrapper} packet  アップロードするバイナリ
  * @param {Number} fileSize  アップロードするファイルのサイズ
  * @param {Array<Array<String>>} uploadedFileData  アップロードしたファイルの情報を格納する二次元配列
  * @return {Number}  新しい range
  */
function uploadLarge(upUrl,range,packet,fileSize,uploadedFileData){
  const packetSize = packet.getLength();
  const rangetxt = `bytes ${range}-${range + packetSize - 1}/${fileSize}`;
  let sending = httpClient.begin()
    .header("Content-Range", rangetxt )
    .body(packet,"application/octet-stream")
    .put(upUrl);
    
  const status = sending.getStatusCode();
  const responseStr = sending.getResponseAsString();
  if(status >= 300){
    throw `failed to upload
    status: ${status}
    ${responseStr}`;
  }else if(status === 202){
    range += packetSize;
    return range;
  }else{
    outputDataSet(status,responseStr,uploadedFileData);
    return range;
  }
}

/**
  * ログを出力し、アップロードしたデータのPathとURLを配列にセットする。
  * @param {Number} status  送信時のステータスコード
  * @param {String} responseStr  送信時のレスポンスをテキスト出力したもの
  * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納される配列
  */
function outputDataSet(status,responseStr,uploadedFileData){
  engine.log(`status: ${status}`);
  engine.log(responseStr + "\n");
  const json = JSON.parse(responseStr);

  const path = json.parentReference.path + "/" + json.name;
  //removing "drive/root:" from path
  uploadedFileData[0].push(path.slice(12));
  uploadedFileData[1].push(json.webUrl);
}
/**
  * アップロードしたデータのパスとURLをデータ項目に出力する。
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納されている配列
  */
function setData(dataDef,uploadedFileData){
  if(dataDef !== "" && dataDef !==  null){
    engine.setData(dataDef,uploadedFileData.join('\n'));
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
