<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Microsoft 365 OneDrive for Business: Upload File</label>
    <label locale="ja">Microsoft 365 OneDrive for Business: ファイルアップロード</label>
    <last-modified>2023-02-27</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <summary>This item uploads files to the specified folder on OneDrive.</summary>
    <summary locale="ja">この工程は、OneDrive の指定フォルダにファイルをアップロードします。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C2: Data item whose attached files will be uploaded</label>
            <label locale="ja">C2: アップロードするファイルが保存されているデータ項目</label>
        </config>
        <config name="conf_folderUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C3: Folder URL files will be uploaded (Root folder if blank)</label>
            <label locale="ja">C3: ファイルをアップロードするフォルダの URL (指定がない場合は、ルートフォルダ)</label>
        </config>
        <config name="conf_shouldReplace" form-type="TOGGLE">
            <label>C4: Replace if the file with the same name already exists</label>
            <label locale="ja">C4: 同名のファイルがある場合、上書きする</label>
        </config>
        <config name="conf_fileUrl" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5: Data item to save uploaded file URLs</label>
            <label locale="ja">C5: ファイル URL を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/onedrive-file-upload/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/onedrive-file-upload/</help-page-url>


    <script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const PACKET_MAX_SIZE = 10485760; //size of each packet,must be a multiple of 327680(320KiB): 10485760=10MiB
const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const folderUrl = retrieveFolderUrl();
  const urlDataDef = configs.getObject("conf_fileUrl");
  const shouldReplace = configs.getObject("conf_shouldReplace");

  //// == ワークフローデータの参照 / Data Retrieving ==
  const files = engine.findData( configs.getObject("conf_uploadedFile") );
  if (files === null) {
    setData(urlDataDef,[""]);
    return;
  }

  //// == 演算 / Calculating ==
  fileCheck(files, urlDataDef, folderUrl);
  const folderInfo = getFolderInfoByUrl( folderUrl, oauth2 );
  let uploadedFileUrl = [];

  for(let i = 0; i< files.size(); i++){
    engine.log(`Uploading: ${files.get(i).getName()}`);
    uploadFile(oauth2,files.get(i),folderInfo,shouldReplace,uploadedFileUrl);
  }

  //// == ワークフローデータへの代入 / Data Updating ==
  setData(urlDataDef,uploadedFileUrl);
}

/**
  * configからフォルダURLの値を読み出す
  * @return {String} configの値
  */
function retrieveFolderUrl() {
  const folderUrlDef = configs.getObject( "conf_folderUrl" );
  let folderUrl = "";
  if ( folderUrlDef === null ) {
    folderUrl = configs.get( "conf_folderUrl" );
  }else{
    folderUrl = engine.findData( folderUrlDef );
  }
  return folderUrl;
}

/**
  * アップロードしようとするファイルの名前・数・サイズが適切かどうかチェックする
  * サイズ 0 のファイルが含まれている場合はエラー
  * 各ファイルのアップロードに必要な通信数 = ceil(ファイルサイズ/パケットの最大サイズ) + 1
  * その後ファイル名をチェック
  * @param {Array<File>} files  アップロードしようとするファイル
  * @param {ProcessDataDefinitionView} urlDataDef  URL を保存するデータ項目の ProcessDataDefinitionView
  * @param {String} folderUrl  アップロード先フォルダの URL
  */
function fileCheck(files,urlDataDef,folderUrl){
  const fileNum = files.size(); //number of files
  fileNumCheck(urlDataDef,fileNum);
  let requestNum = 0;
  files.forEach(file => {
    const size = file.getLength();
    if (size === 0) {
      throw `Unable to upload "${file.getName()}" as its size is 0.`;
    }
    const packetUploadingTimes = Math.max(1, Math.ceil(size / PACKET_MAX_SIZE));
    requestNum += packetUploadingTimes + 1;
  });
  if(folderUrl !== "" && folderUrl !== null){
    requestNum++;
  }
  if(requestNum > httpClient.getRequestingLimit()){
    throw "Necessary HTTP requests exceeds the limit.";
  }
  checkFileNameOverlap(files);
}

/**
  * アップロードするデータが複数で URL 出力先のデータ項目が単一行ならエラーにする
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Number} fileNum  アップロードしようとしているファイルの個数
  */
function fileNumCheck(dataDef,fileNum){
  if(dataDef !==  null){
    //Multiple Judge
    if(dataDef.matchDataType("STRING_TEXTFIELD") && fileNum > 1){
      throw "Multiple files are set though the Data Item to save the output is Single-line String."
    }
  }
}

/**
 * アップロードするファイルの中に同じファイル名のものが2つ以上あればエラー
 * @param {Array<File>}  アップロードしようとするファイルの配列
 */
function checkFileNameOverlap(files) {
  const fileNames = [];
  const fileNum = files.size();
  for (let i = 0; i < fileNum; i++) {
    if (fileNames.includes(files[i].getName())) {
      throw "Two or more files to upload have the same name.";
    }
    fileNames[i] = files[i].getName();
  }
}

/**
  * フォルダのURLからフォルダ情報（ドライブIDとフォルダID）を取得し、
  * オブジェクトで返す（URLが空の場合はドライブIDをme/drive、フォルダIDをrootにする）
  * @param {String} folderUrl  フォルダのURL
  * @param {String} oauth2  OAuth2 設定情報
  * @return {Object} folderInfo  フォルダ情報 {driveId, folderId}
  */
function getFolderInfoByUrl( folderUrl, oauth2 ) {
  let folderInfo = {driveId: "me/drive", folderId: "root"};
  if ( folderUrl !== "" && folderUrl !== null ) {
    // 分割代入
    const {
      id,
      parentReference: {
        driveId
      }
    } = getObjBySharingUrl( folderUrl, oauth2 );
    folderInfo = {driveId: `drives/${driveId}`, folderId: id};
  }
  return folderInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {String} oauth2  OAuth2 設定情報
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, oauth2 ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw "Sharing URL is empty.";
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // preparing for API Request
  const response = httpClient.begin()
    .authSetting(oauth2)
    .get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem`);
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status >= 300) {
    engine.log(`status: ${status}`);
    engine.log(responseStr);
    throw "Failed to get drive item.";
  }
  const responseObj = JSON.parse(responseStr);
  return responseObj;
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  encodedSharingUrl = "u!" + encodedSharingUrl;
  return encodedSharingUrl;
}

/**
  * ファイルのアップロード処理を行う
  * @param {String} oauth2  OAuth2 設定情報
  * @param {File} file  アップロードするファイル
  * @param {String,String} driveId,folderId  アップロード先ドライブ、フォルダのID
  * @param {boolean} shouldReplace  上書きするかどうか
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function uploadFile(oauth2,file,{
  driveId,
  folderId
},shouldReplace,uploadedFileUrl){
  const upUrl = createSession(oauth2,file.getName(),{
    driveId,
    folderId
  },shouldReplace);
  let range = 0;
  const fileSize = file.getLength();

  fileRepository.readFile(file, PACKET_MAX_SIZE, function(packet){
    //upload each fragment of file
    range = uploadPacket(upUrl,range,packet,fileSize,uploadedFileUrl);
  });
}

/**
  * アップロード用のセッションを作成する
  * @param {String} oauth2  OAuth2 設定情報
  * @param {String} fileName  アップロードするファイルのファイル名
  * @param {String,String} driveId,folderId  アップロード先ドライブ、フォルダのID
  * @param {boolean} shouldReplace  上書きするかどうか
  * @return {String}  アップロード先 URL
  */
function createSession(oauth2,fileName,{
  driveId,
  folderId
},shouldReplace){
  const url = `${GRAPH_URI}${driveId}/items/${folderId}:/${encodeURIComponent(fileName)}:/createUploadSession`;
  let request = httpClient.begin()
    .authSetting(oauth2);
  if (!shouldReplace) { // デフォルトは replace
    const body = {
      "item": {
        "@microsoft.graph.conflictBehavior": "fail"
      }
    }
    request = request.body(JSON.stringify(body), "application/json; charset=UTF-8");
  }
  const response = request.post(url);

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  
  if(status >= 300){
    engine.log(`Status: ${status}`);
    engine.log(responseStr);
    throw "Failed to create upload session";
  }
  return JSON.parse(responseStr).uploadUrl;
}

/**
  * ファイルの各部分のアップロードを実行する
  * @param {String} upUrl  アップロード先 URL
  * @param {Number} range  これまでにアップロードしたサイズ
  * @param {ByteArrayWrapper} packet  アップロードするバイナリ
  * @param {Number} fileSize  アップロードするファイルのサイズ
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  * @return {Number}  新しい range
  */
function uploadPacket(upUrl,range,packet,fileSize,uploadedFileUrl){
  const packetSize = packet.getLength();
  const rangetxt = `bytes ${range}-${range + packetSize - 1}/${fileSize}`;
  let sending = httpClient.begin()
    .header("Content-Range", rangetxt )
    .body(packet,"application/octet-stream")
    .put(upUrl);

  const status = sending.getStatusCode();
  const responseStr = sending.getResponseAsString();
  
  if(status >= 300){
    engine.log(`Status: ${status}`);
    engine.log(responseStr);
    throw "Failed to upload";
  }else if(status === 202){
    range += packetSize;
    return range;
  }else{
    engine.log("Succeeded to upload.");
    outputDataSet(responseStr,uploadedFileUrl);
    return range;
  }
}

/**
  * アップロードしたデータのURLを配列にセットする。
  * @param {String} responseStr  送信時のレスポンスをテキスト出力したもの
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function outputDataSet(responseStr,uploadedFileUrl){
  const json = JSON.parse(responseStr);
  uploadedFileUrl.push(json.webUrl);
}
/**
  * アップロードしたデータのURLをデータ項目に出力する。
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Array<String>} uploadedFileUrl  アップロードしたファイルのURLを格納する配列
  */
function setData(dataDef,uploadedFileUrl){
  if(dataDef !==  null){
    engine.setData(dataDef,uploadedFileUrl.join('\n'));
  }
}
  ]]>
    </script>


    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
        8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
        aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
        IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
        i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
        cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
        htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
        QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
        zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
        kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
        l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
        WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
        Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
        ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
        ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
        FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
        TkSuQmCC
    </icon>

    <test><![CDATA[

const PACKET_SIZE_LIMIT = 10485760;

/**
 * 設定の準備
 * @param files
 * @param folderUrl
 * @param shouldReplace
 * @return fileUrlDef
 */
const prepareConfigs = (files, folderUrl, shouldReplace) => {
    configs.put('conf_OAuth2', 'OneDrive');

    const fileDef = engine.createDataDefinition('ファイル', 1, 'q_files', 'FILE');
    configs.putObject('conf_uploadedFile', fileDef);
    engine.setData(fileDef, files);

    // アップロード先フォルダの URL が保存されている文字型データ項目（単一行）を準備
    const folderUrlDef = engine.createDataDefinition('フォルダ URL', 2, 'q_folderUrl', 'STRING_TEXTFIELD');
    engine.setData(folderUrlDef, folderUrl);
    configs.putObject('conf_folderUrl', folderUrlDef);

    configs.putObject('conf_shouldReplace', shouldReplace);

    // アップロードしたファイルの URL を保存する文字型データ項目（複数行）を準備
    const fileUrlDef = engine.createDataDefinition('ファイル URL', 3, 'q_fileUrl', 'STRING_TEXTAREA');
    engine.setData(fileUrlDef, '事前文字列');
    configs.putObject('conf_fileUrl', fileUrlDef);

    return fileUrlDef;
};

/**
 * 指定サイズのテキストファイルを作成
 * @param name
 * @param size
 * @return qfile
 */
const createQfile = (name, size) => {
    let text = '';
    if (size >= 4000) {
      text = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(100); // 40 * 100 = 4000
    }
    while (text.length < size) {
        if (text.length !== 0 && text.length * 2 <= size) {
            text += text;
        } else if (text.length + 1000 <= size) {
            text += 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'.repeat(25); // 40 * 25 = 1000
        } else {
            text += 'a';
        }
    }
    return engine.createQfile(name, 'text/plain; charset=US-ASCII', text);
};

/**
 * ファイルが添付されていない
 */
test('File is null', () => {
    const fileUrlDef = prepareConfigs(null, null, false);
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileUrlDef)).toEqual('');
});

/**
 * ファイルが複数添付されていて、URL を保存するデータ項目が単一行
 */
test('Multiple files, Single-line data item', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile('ファイル1', 0));
    files.add(createQfile('ファイル2', 0));
    prepareConfigs(files, null, false);

    // アップロードしたファイルの URL を保存する文字型データ項目（単一行）を準備
    const fileUrlDef = engine.createDataDefinition('ファイル URL (単一行)', 4, 'q_fileUrl_single', 'STRING_TEXTFIELD');
    engine.setData(fileUrlDef, '事前文字列');
    configs.putObject('conf_fileUrl', fileUrlDef);

    expect(execute).toThrow('Multiple files are set though the Data Item to save the output is Single-line String.');
});

/**
 * ファイル数 * 2 が HTTP リクエスト数制限を超える
 */
test('File Count * 2 > requestingLimit', () => {
    const files = new java.util.ArrayList();
    for (let i = 0; i * 2 < httpClient.getRequestingLimit() + 2; i++) {
        files.add(createQfile(`ファイル${i}`, 0));
    }
    prepareConfigs(files, null, false);

    expect(execute).toThrow('Necessary HTTP requests exceeds the limit.');
});

/**
 * ファイル数 * 2 が HTTP リクエスト数制限と同じ
 * アップロード先フォルダの URL が設定されている場合、1回多くリクエストが必要なためエラー
 */
test('File Count * 2 = requestingLimit, with Folder URL', () => {
    const files = new java.util.ArrayList();
    for (let i = 0; i * 2 < httpClient.getRequestingLimit(); i++) {
        files.add(createQfile(`ファイル${i}`, 0));
    }
    prepareConfigs(files, 'https://sample.com', false);

    expect(execute).toThrow('Necessary HTTP requests exceeds the limit.');
});

/**
 * ファイル数 * 2 は HTTP リクエスト数制限を超えないが、
 * サイズが大きくパケット分割が必要なファイルがあり、リクエスト回数の合計が制限を超える
 */
test('Exceeds requestingLimit due to a large file', () => {
    const files = new java.util.ArrayList();
    for (let i = 0; i * 2 < httpClient.getRequestingLimit() - 2; i++) {
        files.add(createQfile(`ファイル${i}`, 0));
    }
    // パケットアップロードに 3 回かかるファイルを追加
    files.add(createQfile('ファイル', PACKET_SIZE_LIMIT * 2 + 1));
    prepareConfigs(files, null, false);

    expect(execute).toThrow('Necessary HTTP requests exceeds the limit.');
});

/**
 * 同じ名前のファイルが2つ以上
 */
test('Two or more files have the same name', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile('ファイル1', 0));
    files.add(createQfile('ファイル2', 0));
    files.add(createQfile('ファイル1', 0)); // 名前が重複
    prepareConfigs(files, null, false);

    expect(execute).toThrow('Two or more files to upload have the same name.');
});

/**
 * フォルダ情報取得の API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param encodedFolderUrl
 */
const assertGetFolderInfoRequest = ({url, method}, encodedFolderUrl) => {
    expect(url).toEqual(`https://graph.microsoft.com/v1.0/shares/${encodedFolderUrl}/driveItem`);
    expect(method).toEqual('GET');
};

const FOLDER_URL_1 = 'https://sample.com/:f:/g/personal/test_user/abcd1234?e=efgh';
const ENCODED_FOLDER_URL_1 = 'u!aHR0cHM6Ly9zYW1wbGUuY29tLzpmOi9nL3BlcnNvbmFsL3Rlc3RfdXNlci9hYmNkMTIzND9lPWVmZ2g';

const FOLDER_URL_2 = 'https://sample.com/personal/test_user/Documents/test_folder';
const ENCODED_FOLDER_URL_2 = 'u!aHR0cHM6Ly9zYW1wbGUuY29tL3BlcnNvbmFsL3Rlc3RfdXNlci9Eb2N1bWVudHMvdGVzdF9mb2xkZXI';

const FOLDER_INFO_1 = {
    'id': 'folder-id-1',
    'parentReference': {
        'driveId': 'drive-id-1'
    }
};

const FOLDER_INFO_2 = {
    'id': 'folder-id-2',
    'parentReference': {
        'driveId': 'drive-id-2'
    }
};

/**
 * フォルダ情報の取得に失敗
 */
test('Fail to get folder info', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile('ファイル', 0));
    prepareConfigs(files, FOLDER_URL_1, false);

    httpClient.setRequestHandler((request) => {
        assertGetFolderInfoRequest(request, ENCODED_FOLDER_URL_1);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to get drive item.');
});

/**
 * ファイルをアップロードするためのセッションを作成する API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param file
 * @param driveId
 * @param folderId
 * @param shouldReplace
 */
const assertCreateSessionRequest = ({url, method, contentType, body}, file, driveId, folderId, shouldReplace) => {
    const expectedUrl = `https://graph.microsoft.com/v1.0/${driveId}/items/${folderId}:/${encodeURIComponent(file.getName())}:/createUploadSession`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('POST');
    if (!shouldReplace) {
        const bodyObj = JSON.parse(body);
        expect(bodyObj.item['@microsoft.graph.conflictBehavior']).toEqual('fail');
        expect(contentType).toEqual('application/json; charset=UTF-8');
    }
};

/**
 * ファイルのアップロードに失敗
 * セッション作成のリクエストでエラー
 */
test('Fail to upload a large file - fail in creating session', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile('ファイル', 0));
    prepareConfigs(files, null, false);

    httpClient.setRequestHandler((request) => {
        assertCreateSessionRequest(request, files.get(0), 'me/drive', 'root', false);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to create upload session');
});

/**
 * ファイルの各部分をアップロードする API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.contentType
 * @param uploadUrl
 * @param rangeFrom
 * @param rangeTo
 * @param fileSize
 */
const assertUploadPacketRequest = ({url, method, headers, contentType}, uploadUrl, rangeFrom, rangeTo, fileSize) => {
    expect(url).toEqual(uploadUrl);
    expect(method).toEqual('PUT');
    expect(headers.get('Content-Range')).toEqual(`bytes ${rangeFrom}-${rangeTo}/${fileSize}`);
    expect(contentType).toEqual('application/octet-stream');
};

const SESSION_1 = {
    'uploadUrl': 'https://sample.com/up/abc123'
};

const SESSION_2 = {
    'uploadUrl': 'https://sample.com/up/def789'
};

/**
 * ファイルのアップロードに失敗
 * パケットアップロードのリクエストでエラー
 */
test('Fail to upload a large file - fail in uploading a packet', () => {
    const files = new java.util.ArrayList();
    const fileSize = 1;
    files.add(createQfile('ファイル', fileSize));
    prepareConfigs(files, null, false);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // セッション作成
            assertCreateSessionRequest(request, files.get(0), 'me/drive', 'root', false);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SESSION_1));
        }
        assertUploadPacketRequest(request, SESSION_1.uploadUrl, 0, fileSize - 1, fileSize);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to upload');
});

/**
 * アップロード完了時のレスポンス文字列を作成する
 * @param index アップロードファイルの区別をつけるためのインデックス
 * @return response
 */
const createUploadedResponse = (index) => {
    const json = {
        'webUrl': `https://sample.com/:f:/g/personal/test_user/uploaded_file_${index}`
    };
    return JSON.stringify(json);
};

/**
 * ファイルのアップロードに成功
 * フォルダ指定なし
 * 上書きしない
 * パケットアップロードは1回のみ
 * ファイルが1個であれば、保存先データ項目が単一行でもエラーにならない
 */
test('Succeed to upload a file', () => {
    const files = new java.util.ArrayList();
    const fileSize = PACKET_SIZE_LIMIT;
    files.add(createQfile('ファイル', fileSize));
    prepareConfigs(files, null, false);

    // アップロードしたファイルの URL を保存する文字型データ項目（単一行）を準備
    const fileUrlDef = engine.createDataDefinition('ファイル URL (単一行)', 4, 'q_fileUrl_single', 'STRING_TEXTFIELD');
    engine.setData(fileUrlDef, '事前文字列');
    configs.putObject('conf_fileUrl', fileUrlDef);

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // セッション作成
            assertCreateSessionRequest(request, files.get(0), 'me/drive', 'root', false);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SESSION_1));
        }
        // パケットのアップロード
        assertUploadPacketRequest(request, SESSION_1.uploadUrl, 0, fileSize - 1, fileSize);
        return httpClient.createHttpResponse(200, 'application/json', createUploadedResponse(1));
    });

    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileUrlDef)).toEqual('https://sample.com/:f:/g/personal/test_user/uploaded_file_1');
});

/**
 * ファイルのアップロードに成功
 * フォルダ指定あり (データ項目)
 * 上書きする
 * パケットアップロード複数回
 * 保存先データ項目を指定しない場合
 */
test('Succeed to upload a large file - several upload requests required', () => {
    const files = new java.util.ArrayList();
    const fileSize = PACKET_SIZE_LIMIT * 2 + 1; // パケットアップロード3回
    files.add(createQfile('ファイル', fileSize));
    prepareConfigs(files, FOLDER_URL_1, true);
    configs.put('conf_fileUrl', ''); // データ項目の選択を解除

    let reqCount = 0;
    let rangeFrom = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // フォルダ情報取得
            assertGetFolderInfoRequest(request, ENCODED_FOLDER_URL_1);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(FOLDER_INFO_1));
        }
        if (reqCount === 1) { // セッション作成
            assertCreateSessionRequest(request, files.get(0), 'drives/drive-id-1', 'folder-id-1', true);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SESSION_2));
        }
        // パケットのアップロード
        if (reqCount < 4) {
            assertUploadPacketRequest(request, SESSION_2.uploadUrl, rangeFrom, rangeFrom + PACKET_SIZE_LIMIT - 1, fileSize);
            reqCount++;
            rangeFrom += PACKET_SIZE_LIMIT;
            return httpClient.createHttpResponse(202, 'application/json', '{}');
        }
        assertUploadPacketRequest(request, SESSION_2.uploadUrl, rangeFrom, fileSize - 1, fileSize);
        return httpClient.createHttpResponse(200, 'application/json', createUploadedResponse(1));
    });

    execute();
});

/**
 * アップロード成功
 * リクエスト上限ぎりぎりのファイル数
 */
test('Succeed to upload files - maximum number of files', () => {
    const files = new java.util.ArrayList();
    const reqLimit = httpClient.getRequestingLimit();
    // リクエストが計4回必要なファイル (セッション作成1回、パケットアップロード3回) を1つ追加
    const fileSize1 = PACKET_SIZE_LIMIT * 2 + 1;
    files.add(createQfile('ファイル0', fileSize1));
    // リクエストが計2回必要なファイル (セッション作成1回、パケットアップロード1回) をリクエスト回数上限に達するまで追加
    const fileSize2 = 1;
    for (let i = 0; i * 2 + 5 < reqLimit - 2; i++) { // 5 = (1つ目のファイルのリクエスト数  = 4) + (フォルダの情報取得のリクエスト数 = 1)
        files.add(createQfile(`ファイル${i+1}`, fileSize2));
    }
    const fileUrlDef = prepareConfigs(files, FOLDER_URL_2, false);

    let reqCount = 0;
    let fileCount = 0;
    let rangeFrom = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // フォルダ情報取得
            assertGetFolderInfoRequest(request, ENCODED_FOLDER_URL_2);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(FOLDER_INFO_2));
        }
        if (reqCount === 1) { // セッション作成
            assertCreateSessionRequest(request, files.get(fileCount), 'drives/drive-id-2', 'folder-id-2', false);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SESSION_1));
        }
        if (reqCount < 4) { // パケットのアップロード
            assertUploadPacketRequest(request, SESSION_1.uploadUrl, rangeFrom, rangeFrom + PACKET_SIZE_LIMIT - 1, fileSize1);
            reqCount++;
            rangeFrom += PACKET_SIZE_LIMIT;
            return httpClient.createHttpResponse(202, 'application/json', '{}');
        }
        if (reqCount === 4) { // パケットのアップロード（アップロード完了）
            assertUploadPacketRequest(request, SESSION_1.uploadUrl, rangeFrom, fileSize1 - 1, fileSize1);
            reqCount++;
            fileCount++;
            rangeFrom = 0;
            return httpClient.createHttpResponse(200, 'application/json', createUploadedResponse(fileCount));
        }
        if (reqCount > 4) {
            if (reqCount === (fileCount - 1) * 2 + 5) { // セッション作成
                assertCreateSessionRequest(request, files.get(fileCount), 'drives/drive-id-2', 'folder-id-2', false);
                reqCount++;
                return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SESSION_2));
            }
            // パケットのアップロード（アップロード完了）
            if (reqCount === (fileCount - 1) * 2 + 6) {
                assertUploadPacketRequest(request, SESSION_2.uploadUrl, rangeFrom, fileSize2 - 1, fileSize2);
                reqCount++;
                fileCount++;
                return httpClient.createHttpResponse(200, 'application/json', createUploadedResponse(fileCount));
            }
        }
    });

    execute();

    // 文字型データ項目の値をチェック
    const fileUrls = [];
    for (let i = 0; i < files.size(); i++) {
        fileUrls.push(`https://sample.com/:f:/g/personal/test_user/uploaded_file_${i+1}`);
    }
    expect(engine.findData(fileUrlDef)).toEqual(fileUrls.join('\n'));
});

]]></test>

</service-task-definition>
