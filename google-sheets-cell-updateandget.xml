<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Google Sheets: Update &amp; Get Cells</label>
    <label locale="ja">Google スプレッドシート: セル更新＆取得</label>
    <!--
    <last-modified>2024-01-16</last-modified>
    -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item updates values of cells and gets updated values of other cells.</summary>
    <summary locale="ja">この工程は、Google スプレッドシートのセルの値を更新し、別のセルの更新後の値を取得します。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_SheetId" required="true" form-type="TEXTFIELD">
            <label>C2: Spreadsheet ID</label>
            <label locale="ja">C2: スプレッドシート ID</label>
        </config>
        <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
            <label>C3: Sheet Title</label>
            <label locale="ja">C3: シートタイトル</label>
        </config>
        <config name="conf_CellToUpdate1" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C4-1R: Cell 1 to update (e.g. "A1")</label>
            <label locale="ja">C4-1R: 更新するセル_1（例 "A1"）</label>
        </config>
        <config name="conf_ValueToUpdate1" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C4-1V: New value for Cell 1</label>
            <label locale="ja">C4-1V: 更新後の値_1</label>
        </config>
        <config name="conf_CellToUpdate2" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C4-2R: Cell 2 to update (e.g. "A1")</label>
            <label locale="ja">C4-2R: 更新するセル_2（例 "A1"）</label>
        </config>
        <config name="conf_ValueToUpdate2" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C4-2V: New value for Cell 2</label>
            <label locale="ja">C4-2V: 更新後の値_2</label>
        </config>
        <config name="conf_CellToUpdate3" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C4-3R: Cell 3 to update (e.g. "A1")</label>
            <label locale="ja">C4-3R: 更新するセル_3（例 "A1"）</label>
        </config>
        <config name="conf_ValueToUpdate3" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C4-3V: New value for Cell 3</label>
            <label locale="ja">C4-3V: 更新後の値_3</label>
        </config>
        <config name="conf_CellToUpdate4" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C4-4R: Cell 4 to update (e.g. "A1")</label>
            <label locale="ja">C4-4R: 更新するセル_4（例 "A1"）</label>
        </config>
        <config name="conf_ValueToUpdate4" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C4-4V: New value for Cell 4</label>
            <label locale="ja">C4-4V: 更新後の値_4</label>
        </config>
        <config name="conf_CellToGet1" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C5-1R: Cell 1 to get (e.g. "A1")</label>
            <label locale="ja">C5-1R: 取得するセル_1（例 "A1"）</label>
        </config>
        <config name="conf_ValueDef1" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5-1V: Data item to save value of Cell 1</label>
            <label locale="ja">C5-1V: 取得した値_1 を保存するデータ項目</label>
        </config>
        <config name="conf_CellToGet2" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C5-2R: Cell 2 to get (e.g. "A1")</label>
            <label locale="ja">C5-2R: 取得するセル_2（例 "A1"）</label>
        </config>
        <config name="conf_ValueDef2" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5-2V: Data item to save value of Cell 2</label>
            <label locale="ja">C5-2V: 取得した値_2 を保存するデータ項目</label>
        </config>
        <config name="conf_CellToGet3" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C5-3R: Cell 3 to get (e.g. "A1")</label>
            <label locale="ja">C5-3R: 取得するセル_3（例 "A1"）</label>
        </config>
        <config name="conf_ValueDef3" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5-3V: Data item to save value of Cell 3</label>
            <label locale="ja">C5-3V: 取得した値_3 を保存するデータ項目</label>
        </config>
        <config name="conf_CellToGet4" required="false" form-type="TEXTFIELD" el-enabled="true">
            <label>C5-4R: Cell 4 to get (e.g. "A1")</label>
            <label locale="ja">C5-4R: 取得するセル_4（例 "A1"）</label>
        </config>
        <config name="conf_ValueDef4" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5-4V: Data item to save value of Cell 4</label>
            <label locale="ja">C5-4V: 取得した値_4 を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-cell-updateandget/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-cell-updateandget/</help-page-url>


    <script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const GOOGLE_API_URI = 'https://sheets.googleapis.com/v4/';

const CELL_NUM = 4; // 扱えるセルの数

const main = () => {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const sheetId = configs.get('conf_SheetId');
    const sheetTitle = configs.get('conf_SheetTitle');

    const {cellsToUpdate, valuesToUpdate} = retrieveCellsAndValuesToUpdate();
    const {cellsToGet, valueDefs} = retrieveCellsToGetAndValueDefs();

    //// == 演算・ワークフローデータへの代入 / Calculating & Data Updating ==
    if (cellsToUpdate.length > 0) {
        updateCells(oauth2, sheetId, sheetTitle, cellsToUpdate, valuesToUpdate);
    }
    if (cellsToGet.length > 0) {
        const values = getCells(oauth2, sheetId, sheetTitle, cellsToGet);
        valueDefs.forEach((def, i) => {
            engine.setData(def, values[i]);
        });
    }
};

/**
  * セル指定のバリデーション
  * @param {String} cell  セル指定の文字列
  * @param {String} label  エラー出力用ラベル
  */
const validateCell = (cell, label) => {
    const regExp = new RegExp('^[A-Z]+[1-9][0-9]*$');
    if (!regExp.test(cell)) {
        throw new Error(`${label} is invalid.`);
    }
};

/**
 * 工程コンフィグから更新するセルと更新後の値を取得する
 * セルが指定されておらず、値だけ指定されている組がある場合はエラー
 * @returns {Object} result
 * @returns {Array<String>} result.cellsToUpdate  更新するセル
 * @returns {Array<String>} result.valuesToUpdate  更新後の値
 */
const retrieveCellsAndValuesToUpdate = () => {
    const cellsToUpdate = [];
    const valuesToUpdate = [];
    for (let i = 0; i < CELL_NUM; i++) {
        const cellToUpdate = configs.get(`conf_CellToUpdate${i + 1}`);
        validateCell(cellToUpdate, `Cell ${i + 1} to update`);
        const valueToUpdate = configs.get(`conf_ValueToUpdate${i + 1}`);
        if (cellToUpdate === '') {
            if (valueToUpdate !== '') {
                throw new Error(`Cell ${i + 1} to update is empty while its new value is specified.`);
            }
            // セルも値も指定されていない場合はスキップ
            continue;
        }
        cellsToUpdate.push(cellToUpdate);
        valuesToUpdate.push(valueToUpdate);
    }
    return {cellsToUpdate, valuesToUpdate};
};

/**
 * 工程コンフィグから取得するセルと保存先データ項目を取得する
 * セルと保存先データ項目の片方だけ指定されている組がある場合はエラー
 * @returns {Object} result
 * @returns {Array<String>} result.cellsToGet  取得するセル
 * @returns {Array<DataDefinitionView>} result.valueDefs  値を保存するデータ項目
 */
const retrieveCellsToGetAndValueDefs = () => {
    const cellsToGet = [];
    const valueDefs = [];
    for (let i = 0; i < CELL_NUM; i++) {
        const cellToGet = configs.get(`conf_CellToGet${i + 1}`);
        validateCell(cellToGet, `Cell ${i + 1} to get`);
        const valueDef = configs.getObject(`conf_ValueDef${i + 1}`);
        if (cellToGet === '' && valueDef === null) {
            continue;
        } else if (cellToGet !== '' && valueDef !== null) {
            cellsToGet.push(cellToGet);
            valueDefs.push(valueDef);
        } else {
            throw new Error(`Cell ${i + 1} to get and data item to save its value must be specified at the same time.`);
        }
    }
    return {cellsToGet, valueDefs};
};

/**
 * セルを更新する
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} sheetId  スプレッドシートの ID
 * @param {String} sheetTitle  シートタイトル
 * @param {Array<String>} cellsToUpdate  更新するセル
 * @param {Array<String>} valuesToUpdate  更新後の値
 */
const updateCells = (oauth2, sheetId, sheetTitle, cellsToUpdate, valuesToUpdate) => {
    // Method: spreadsheets.values.batchUpdate
    const url = `${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(sheetId)}/values:batchUpdate`;
    const jsonBody = buildBatchUpdateBody(sheetTitle, cellsToUpdate, valuesToUpdate);
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(jsonBody), 'application/json')
        .post(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to update cells. status: ${status}`);
    }
};

/**
 * セル更新のリクエストボディを作成する
 * @param {String} sheetTitle  シートタイトル
 * @param {Array<String>} cellsToUpdate  更新するセル
 * @param {Array<String>} valuesToUpdate  更新後の値
 * @returns {Object} requestBody  リクエストボディ
 */
const buildBatchUpdateBody = (sheetTitle, cellsToUpdate, valuesToUpdate) => {
    const data = [];
    cellsToUpdate.forEach((cell, i) => {
        data.push({
            'range': `${sheetTitle}!${cell}`,
            'values': [[valuesToUpdate[i]]]
        });
    });
    return {
        'valueInputOption': 'RAW',
        data
    };
};

/**
 * セルを取得する
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} sheetId  スプレッドシートの ID
 * @param {String} sheetTitle  シートタイトル
 * @param {Array<String>} cellsToGet  取得するセル
 * @returns {Array<String>} values  取得した値
 */
const getCells = (oauth2, sheetId, sheetTitle, cellsToGet) => {
    // Method: spreadsheets.values.batchGet
    const url = `${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(sheetId)}/values:batchGet`;
    let request = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('valueRenderOption', 'UNFORMATTED_VALUE')
        .queryParam('dateTimeRenderOption', 'FORMATTED_STRING');
    cellsToGet.forEach((cell) => {
        request = request.queryParam('ranges', `${sheetTitle}!${cell}`);
    });
    const response = request.get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to get cells. status: ${status}`);
    }
    return JSON.parse(responseStr).valueRanges.map((valueRange) => {
        return valueRange.values[0][0].toString();
    });
};

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
        lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
        +H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
        71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
        3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
        /4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
        HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
        jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
        yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
        LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
        us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
        z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
        58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
        RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
        j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
        kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
        AEwJzTC2ALrNAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[

]]></test>

</service-task-definition>
