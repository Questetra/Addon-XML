<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Google Sheets: Update &amp; Get Cells</label>
    <label locale="ja">Google スプレッドシート: セル更新＆取得</label>
    <last-modified>2024-01-26</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item updates values of cells and gets updated values of other cells on Google Sheets.</summary>
    <summary locale="ja">この工程は、Google スプレッドシートのセルの値を更新し、別のセルの更新後の値を取得します。</summary>
    <tabs>
        <tab>
            <label>OAuth2 and Spreadsheet Settings</label>
            <label locale="ja">OAuth2 とスプレッドシートの設定</label>
            <configs>
                <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                        oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
                    <label>C1: OAuth2 Setting</label>
                    <label locale="ja">C1: OAuth2 設定</label>
                </config>
                <config name="conf_SheetId" required="true" form-type="TEXTFIELD">
                    <label>C2: Spreadsheet ID</label>
                    <label locale="ja">C2: スプレッドシート ID</label>
                </config>
                <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
                    <label>C3: Sheet Title</label>
                    <label locale="ja">C3: シートタイトル</label>
                </config>
            </configs>
        </tab>
        <tab>
            <label>Update Cells</label>
            <label locale="ja">セル更新</label>
            <configs>
                <config name="conf_ValueInputOption" required="false" form-type="SELECT_ITEM">
                    <label>C4: How values should be interpreted when updating cells</label>
                    <label locale="ja">C4: セル更新時の値の解釈方法</label>
                    <item value="RAW">
                        <label>as RAW values (default)</label>
                        <label locale="ja">RAW 方式（デフォルト）</label>
                    </item>
                    <item value="USER_ENTERED">
                        <label>as USER_ENTERED values</label>
                        <label locale="ja">USER_ENTERED 方式</label>
                    </item>
                </config>
                <config name="conf_CellToUpdate1" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C5-1R: Cell 1 to update (e.g. "A1")</label>
                    <label locale="ja">C5-1R: 更新するセル_1（例 "A1"）</label>
                </config>
                <config name="conf_ValueToUpdate1" required="false" form-type="TEXTAREA" el-enabled="true">
                    <label>C5-1V: New value for Cell 1</label>
                    <label locale="ja">C5-1V: 更新後の値_1</label>
                </config>
                <config name="conf_CellToUpdate2" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C5-2R: Cell 2 to update (e.g. "A1")</label>
                    <label locale="ja">C5-2R: 更新するセル_2（例 "A1"）</label>
                </config>
                <config name="conf_ValueToUpdate2" required="false" form-type="TEXTAREA" el-enabled="true">
                    <label>C5-2V: New value for Cell 2</label>
                    <label locale="ja">C5-2V: 更新後の値_2</label>
                </config>
                <config name="conf_CellToUpdate3" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C5-3R: Cell 3 to update (e.g. "A1")</label>
                    <label locale="ja">C5-3R: 更新するセル_3（例 "A1"）</label>
                </config>
                <config name="conf_ValueToUpdate3" required="false" form-type="TEXTAREA" el-enabled="true">
                    <label>C5-3V: New value for Cell 3</label>
                    <label locale="ja">C5-3V: 更新後の値_3</label>
                </config>
                <config name="conf_CellToUpdate4" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C5-4R: Cell 4 to update (e.g. "A1")</label>
                    <label locale="ja">C5-4R: 更新するセル_4（例 "A1"）</label>
                </config>
                <config name="conf_ValueToUpdate4" required="false" form-type="TEXTAREA" el-enabled="true">
                    <label>C5-4V: New value for Cell 4</label>
                    <label locale="ja">C5-4V: 更新後の値_4</label>
                </config>
            </configs>
        </tab>
        <tab>
            <label>Get Cells</label>
            <label locale="ja">セル取得</label>
            <configs>
                <config name="conf_CellToGet1" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C6-1R: Cell 1 to get (e.g. "A1")</label>
                    <label locale="ja">C6-1R: 取得するセル_1（例 "A1"）</label>
                </config>
                <config name="conf_ValueDef1" required="false" form-type="SELECT" select-data-type="STRING">
                    <label>C6-1V: Data item to save value of Cell 1</label>
                    <label locale="ja">C6-1V: 取得した値_1 を保存するデータ項目</label>
                </config>
                <config name="conf_CellToGet2" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C6-2R: Cell 2 to get (e.g. "A1")</label>
                    <label locale="ja">C6-2R: 取得するセル_2（例 "A1"）</label>
                </config>
                <config name="conf_ValueDef2" required="false" form-type="SELECT" select-data-type="STRING">
                    <label>C6-2V: Data item to save value of Cell 2</label>
                    <label locale="ja">C6-2V: 取得した値_2 を保存するデータ項目</label>
                </config>
                <config name="conf_CellToGet3" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C6-3R: Cell 3 to get (e.g. "A1")</label>
                    <label locale="ja">C6-3R: 取得するセル_3（例 "A1"）</label>
                </config>
                <config name="conf_ValueDef3" required="false" form-type="SELECT" select-data-type="STRING">
                    <label>C6-3V: Data item to save value of Cell 3</label>
                    <label locale="ja">C6-3V: 取得した値_3 を保存するデータ項目</label>
                </config>
                <config name="conf_CellToGet4" required="false" form-type="TEXTFIELD" el-enabled="true">
                    <label>C6-4R: Cell 4 to get (e.g. "A1")</label>
                    <label locale="ja">C6-4R: 取得するセル_4（例 "A1"）</label>
                </config>
                <config name="conf_ValueDef4" required="false" form-type="SELECT" select-data-type="STRING">
                    <label>C6-4V: Data item to save value of Cell 4</label>
                    <label locale="ja">C6-4V: 取得した値_4 を保存するデータ項目</label>
                </config>
            </configs>
        </tab>
    </tabs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-cell-updateandget/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-cell-updateandget/</help-page-url>


    <script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const GOOGLE_API_URI = 'https://sheets.googleapis.com/v4/';

const CELL_NUM = 4; // 扱えるセルの数
const VALUE_MAX_LENGTH = 50000; // セルの値の最大文字数

const main = () => {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const sheetId = configs.get('conf_SheetId');
    const sheetTitle = configs.get('conf_SheetTitle');

    let valueInputOption = configs.get('conf_ValueInputOption');
    if (valueInputOption === '') {
        valueInputOption = 'RAW';
    }
    const {cellsToUpdate, valuesToUpdate} = retrieveCellsAndValuesToUpdate();
    const {cellsToGet, valueDefs} = retrieveCellsToGetAndValueDefs();

    //// == 演算・ワークフローデータへの代入 / Calculating & Data Updating ==
    if (cellsToUpdate.length === 0 && cellsToGet.length === 0) {
        throw new Error('No cells to update or get.');
    }
    if (cellsToUpdate.length > 0) {
        updateCells(oauth2, sheetId, sheetTitle, valueInputOption, cellsToUpdate, valuesToUpdate);
    }
    if (cellsToGet.length > 0) {
        const values = getCells(oauth2, sheetId, sheetTitle, cellsToGet);
        valueDefs.forEach((def, i) => {
            engine.setData(def, values[i]);
        });
    }
};

/**
  * セル指定のバリデーション
  * @param {String} cell  セル指定の文字列
  * @param {String} label  エラー出力用ラベル
  */
const validateCell = (cell, label) => {
    const regExp = new RegExp('^[A-Z]+[1-9][0-9]*$');
    if (!regExp.test(cell)) {
        throw new Error(`${label} is invalid.`);
    }
};

/**
 * 工程コンフィグから更新するセルと更新後の値を取得する
 * セルが指定されておらず、値だけ指定されている組がある場合はエラー
 * @returns {Object} result
 * @returns {Array<String>} result.cellsToUpdate  更新するセル
 * @returns {Array<String>} result.valuesToUpdate  更新後の値
 */
const retrieveCellsAndValuesToUpdate = () => {
    const cellsToUpdate = [];
    const valuesToUpdate = [];
    for (let i = 0; i < CELL_NUM; i++) {
        const cellToUpdate = configs.get(`conf_CellToUpdate${i + 1}`);
        const valueToUpdate = configs.get(`conf_ValueToUpdate${i + 1}`);
        if (cellToUpdate === '') {
            if (valueToUpdate !== '') {
                throw new Error(`Cell ${i + 1} to update is empty while its new value is specified.`);
            }
            // セルも値も指定されていない場合はスキップ
            continue;
        }
        validateCell(cellToUpdate, `Cell ${i + 1} to update`);
        if (valueToUpdate.length > VALUE_MAX_LENGTH) {
            throw new Error(`New value for Cell ${i + 1} exceeds ${VALUE_MAX_LENGTH} characters.`);
        }
        cellsToUpdate.push(cellToUpdate);
        valuesToUpdate.push(valueToUpdate);
    }
    return {cellsToUpdate, valuesToUpdate};
};

/**
 * 工程コンフィグから取得するセルと保存先データ項目を取得する
 * セルと保存先データ項目の片方だけ指定されている組がある場合はエラー
 * @returns {Object} result
 * @returns {Array<String>} result.cellsToGet  取得するセル
 * @returns {Array<DataDefinitionView>} result.valueDefs  値を保存するデータ項目
 */
const retrieveCellsToGetAndValueDefs = () => {
    const cellsToGet = [];
    const valueDefs = [];
    for (let i = 0; i < CELL_NUM; i++) {
        const cellToGet = configs.get(`conf_CellToGet${i + 1}`);
        const valueDef = configs.getObject(`conf_ValueDef${i + 1}`);
        if (cellToGet === '' && valueDef === null) {
            continue;
        } else if (cellToGet !== '' && valueDef !== null) {
            validateCell(cellToGet, `Cell ${i + 1} to get`);
            cellsToGet.push(cellToGet);
            valueDefs.push(valueDef);
        } else {
            throw new Error(`Cell ${i + 1} to get and data item to save its value must be specified at the same time.`);
        }
    }
    return {cellsToGet, valueDefs};
};

/**
 * セルを更新する
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} sheetId  スプレッドシートの ID
 * @param {String} sheetTitle  シートタイトル
 * @param {String} valueInputOption  セル更新時の値の解釈方法
 * @param {Array<String>} cellsToUpdate  更新するセル
 * @param {Array<String>} valuesToUpdate  更新後の値
 */
const updateCells = (oauth2, sheetId, sheetTitle, valueInputOption, cellsToUpdate, valuesToUpdate) => {
    // Method: spreadsheets.values.batchUpdate
    const url = `${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(sheetId)}/values:batchUpdate`;
    const jsonBody = buildBatchUpdateBody(sheetTitle, valueInputOption, cellsToUpdate, valuesToUpdate);
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(jsonBody), 'application/json')
        .post(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to update cells. status: ${status}`);
    }
};

/**
 * セル更新のリクエストボディを作成する
 * @param {String} sheetTitle  シートタイトル
 * @param {String} valueInputOption  セル更新時の値の解釈方法
 * @param {Array<String>} cellsToUpdate  更新するセル
 * @param {Array<String>} valuesToUpdate  更新後の値
 * @returns {Object} requestBody  リクエストボディ
 */
const buildBatchUpdateBody = (sheetTitle, valueInputOption, cellsToUpdate, valuesToUpdate) => {
    const data = [];
    cellsToUpdate.forEach((cell, i) => {
        data.push({
            'range': `${sheetTitle}!${cell}`,
            'values': [[valuesToUpdate[i]]]
        });
    });
    return {
        'valueInputOption': valueInputOption,
        data
    };
};

/**
 * セルを取得する
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} sheetId  スプレッドシートの ID
 * @param {String} sheetTitle  シートタイトル
 * @param {Array<String>} cellsToGet  取得するセル
 * @returns {Array<String>} values  取得した値
 */
const getCells = (oauth2, sheetId, sheetTitle, cellsToGet) => {
    // Method: spreadsheets.values.batchGet
    const url = `${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(sheetId)}/values:batchGet`;
    let request = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('valueRenderOption', 'UNFORMATTED_VALUE')
        .queryParam('dateTimeRenderOption', 'FORMATTED_STRING');
    cellsToGet.forEach((cell) => {
        request = request.queryParam('ranges', `${sheetTitle}!${cell}`);
    });
    const response = request.get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to get cells. status: ${status}`);
    }
    return JSON.parse(responseStr).valueRanges.map((valueRange) => {
        const values = valueRange.values;
        if (values === undefined) {
            return '';
        }
        return valueRange.values[0][0].toString();
    });
};

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
        lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
        +H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
        71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
        3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
        /4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
        HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
        jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
        yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
        LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
        us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
        z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
        58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
        RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
        j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
        kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
        AEwJzTC2ALrNAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param {String} sheetId
 * @param {String} sheetTitle
 * @param {Array<String>} cellsToUpdate
 * @param {Array<String>} valuesToUpdate
 * @param {Array<String>} cellsToGet
 * @param {Array<String>} valueDefTypes
 * @return {Array<DataDefinitionView>} valueDefs
 */
const prepareConfigs = (sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, cellsToGet, valueDefTypes) => {
    const oauth2 = httpClient.createAuthSettingOAuth2(
        'Google Sheets',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'https://www.googleapis.com/auth/spreadsheets',
        'client_id',
        'client_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', oauth2);
    configs.put('conf_SheetId', sheetId);
    configs.put('conf_SheetTitle', sheetTitle);
    configs.put('conf_ValueInputOption', ''); // テスト時に値が null にならないように空文字を設定
    const valueDefs = [];
    for (let i = 0; i < CELL_NUM; i++) {
        configs.put(`conf_CellToUpdate${i + 1}`, cellsToUpdate[i]);
        configs.put(`conf_ValueToUpdate${i + 1}`, valuesToUpdate[i]);
        configs.put(`conf_CellToGet${i + 1}`, cellsToGet[i]);
        const valueDefType = valueDefTypes[i];
        if (valueDefType === '') {
            valueDefs.push(null);
            continue;
        } else {
            const valueDef = engine.createDataDefinition(`Value of Cell ${i + 1}`, i + 1, `q_value${i + 1}`, `STRING_${valueDefType}`);
            engine.setData(valueDef, '事前文字列');
            configs.putObject(`conf_ValueDef${i + 1}`, valueDef);
            valueDefs.push(valueDef);
        }
    }
    return valueDefs;
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    try {
        main();
        fail();
    } catch (e) {
        expect(e.message).toEqual(errorMsg);
    }
};

const BLANKS = ['', '', '', ''];

/**
 * 更新するセルも取得するセルも設定されていない
 */
test('No cells to update or get', () => {
    prepareConfigs('12345abcde', 'シート 1', BLANKS, BLANKS, BLANKS, BLANKS);
    assertError('No cells to update or get.');
});

/**
 * 更新後の値だけ設定されていて、更新するセルが設定されていない
 */
test('Cell to update is empty while its new value is specified', () => {
    prepareConfigs('12345abcde', 'シート 1', BLANKS, ['新しい値', '', '', ''], BLANKS, BLANKS);
    assertError('Cell 1 to update is empty while its new value is specified.');
});

/**
 * 更新するセルの書式が不正
 */
test('Cell to update is invalid', () => {
    prepareConfigs('12345abcde', 'シート 1', ['', '1A', '', ''], BLANKS, BLANKS, BLANKS);
    assertError('Cell 2 to update is invalid.');
});

/**
 * 指定の長さの文字列を作成
 * @param length
 * @return string
 */
const createString = (length) => {
    const sourceStr = 'あいうえおかきくけこ';
    const string = sourceStr.repeat(Math.floor(length / sourceStr.length))
        + sourceStr.slice(0, length % sourceStr.length);
    return string;
}

/**
 * 更新後の値が最大文字数を超えている
 */
test('New value exceeds maximum length', () => {
    const newValue = createString(VALUE_MAX_LENGTH + 1);
    prepareConfigs('12345abcde', 'シート 1', ['', 'A1', '', ''], ['', newValue, '', ''], BLANKS, BLANKS);
    assertError(`New value for Cell 2 exceeds ${VALUE_MAX_LENGTH} characters.`);
});

/**
 * 値を保存するデータ項目だけ設定されていて、取得するセルが設定されていない
 */
test('Cell to get is empty while data item to save its value is specified', () => {
    prepareConfigs('12345abcde', 'シート 1', BLANKS, BLANKS, BLANKS, ['', '', 'TEXTFIELD', '']);
    assertError('Cell 3 to get and data item to save its value must be specified at the same time.');
});

/**
 * 取得するセルだけ設定されていて、値を保存するデータ項目が設定されていない
 */
test('Cell to get is specified while data item to save the value is blank', () => {
    prepareConfigs('12345abcde', 'シート 1', BLANKS, BLANKS, ['', '', '', 'A1'], BLANKS);
    assertError('Cell 4 to get and data item to save its value must be specified at the same time.');
});

/**
 * 取得するセルの書式が不正
 */
test('Cell to get is invalid', () => {
    prepareConfigs('12345abcde', 'シート 1', BLANKS, BLANKS, ['A:A', '', '', ''], ['TEXTFIELD', '', '', '']);
    assertError('Cell 1 to get is invalid.');
});

/**
 * セル更新の POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.contentType
 * @param request.body
 * @param sheetId
 * @param sheetTitle
 * @param cellsToUpdate
 * @param valuesToUpdate
 */
const assertPostRequest = ({url, method, headers, contentType, body}, sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, valueInputOption = 'RAW') => {
    expect(url).toEqual(`${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(
        sheetId
    )}/values:batchUpdate`);
    expect(method).toEqual('POST');
    expect(headers.Authorization).toEqual('Bearer access_token');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.valueInputOption).toEqual(valueInputOption);
    expect(bodyObj.data.length).toEqual(cellsToUpdate.length);
    cellsToUpdate.forEach((cell, i) => {
        expect(bodyObj.data[i].range).toEqual(`${sheetTitle}!${cell}`);
        expect(bodyObj.data[i].values[0][0]).toEqual(valuesToUpdate[i]);
    });
};

/**
 * セル更新の POST リクエストでエラー
 */
test('Fail in POST request', () => {
    const sheetId = '12345abcde';
    const sheetTitle = 'シート 1';
    const cellsToUpdate = ['A1', 'B2', 'C3', 'D4'];
    const valuesToUpdate = ['新しい値1', '新しい値2', '新しい値3', '新しい値4'];
    prepareConfigs(sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, BLANKS, BLANKS);

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, sheetId, sheetTitle, cellsToUpdate, valuesToUpdate);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to update cells. status: 400');
});

/**
 * セル取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.body
 * @param sheetId
 * @param sheetTitle
 * @param cellsToGet
 */
const assertGetRequest = ({url, method, headers}, sheetId, sheetTitle, cellsToGet) => {
    let expectedUrl = `${GOOGLE_API_URI}spreadsheets/${encodeURIComponent(sheetId)}/values:batchGet`
        + '?valueRenderOption=UNFORMATTED_VALUE'
        + '&dateTimeRenderOption=FORMATTED_STRING';
    cellsToGet.forEach((cell) => {
        expectedUrl += `&ranges=${encodeURIComponent(sheetTitle)}!${cell}`;
    });
    expectedUrl = expectedUrl
        .replace(/%20/g, '+') // HttpRequestWrapper#queryParam() はスペースを + に置き換える
        .replace(/\!/g, '%21') // encodeURIComponent() でエンコードされない文字をエンコード
        .replace(/'/g, '%27')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers.Authorization).toEqual('Bearer access_token');
};

/**
 * セル取得の GET リクエストでエラー
 */
test('Fail in GET request', () => {
    const sheetId = '12345abcde';
    const sheetTitle = 'シート 1';
    const cellsToGet = ['A1', 'B2', 'C3', 'D4'];
    const valueDefTypes = ['TEXTFIELD', 'TEXTFIELD', 'TEXTFIELD', 'TEXTFIELD'];
    prepareConfigs(sheetId, sheetTitle, BLANKS, BLANKS, cellsToGet, valueDefTypes);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, sheetId, sheetTitle, cellsToGet);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to get cells. status: 400');
});

/**
 * セル取得のレスポンスを準備
 * @param sheetTitle
 * @param cells
 * @param cellValues
 * @returns {String}
 */
const prepareGetResponse = (sheetTitle, cells, cellValues) => {
    const valueRanges = [];
    cells.forEach((cell, i) => {
        const valueRange = {
            range: `${sheetTitle}!${cell}`,
            majorDimension: 'ROWS'
        };
        const cellValue = cellValues[i];
        if (cellValue !== null) {
            valueRange.values = [[cellValue]];
        }
        valueRanges.push(valueRange);
    });
    return JSON.stringify({valueRanges});
};

/**
 * 単一行データ項目に複数行の文字列を保存しようとしてエラーになる場合
 */
test('Validation Error - Unable to save multi-line string to STRING_TEXTFIELD', () => {
    const sheetId = '12345abcde';
    const sheetTitle = 'シート 1';
    const cellsToGet = ['', '', '', 'A1'];
    const valueDefTypes = ['', '', '', 'TEXTFIELD'];
    prepareConfigs(sheetId, sheetTitle, BLANKS, BLANKS, cellsToGet, valueDefTypes);

    const trimmedCellsToGet = ['A1'];
    const cellValues = ['複数行の\n文字列'];
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, sheetId, sheetTitle, trimmedCellsToGet);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareGetResponse(sheetTitle, trimmedCellsToGet, cellValues));
    });

    try {
        main();
        fail();
    } catch (e) {
        // エラーになるのが正しい
    }
});

/**
 * 成功 - すべてのセルを指定。valueInputOption 指定なし
 */
test('Succeed - all cells specified, valueInputOption not specified', () => {
    const sheetId = '12345abcde';
    const sheetTitle = 'シート 1';
    const cellsToUpdate = ['A1', 'B1', 'C1', 'D1'];
    const valuesToUpdate = ['新しい値1', '新しい値2', '新しい値3', '新しい値4'];
    const cellsToGet = ['AA100', 'BB200', 'CC300', 'XD400'];
    const valueDefTypes = ['TEXTFIELD', 'TEXTAREA', 'TEXTFIELD', 'TEXTAREA'];
    const valueDefs = prepareConfigs(sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, cellsToGet, valueDefTypes);

    let reqCount = 0;
    const cellValues = ['文字列', '改行を含む\n文字列', 123.56, true];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, sheetId, sheetTitle, cellsToUpdate, valuesToUpdate);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', '{}');
        }
        assertGetRequest(request, sheetId, sheetTitle, cellsToGet);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareGetResponse(sheetTitle, cellsToGet, cellValues));
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(valueDefs[0])).toEqual('文字列');
    expect(engine.findData(valueDefs[1])).toEqual('改行を含む\n文字列');
    expect(engine.findData(valueDefs[2])).toEqual('123.56');
    expect(engine.findData(valueDefs[3])).toEqual('true');
});

/**
 * 成功 - 更新のみ。valueInputOption に RAW を指定
 */
test('Succeed - update some cells, select RAW', () => {
    const sheetId = '6789hijfk';
    const sheetTitle = 'シート (2)';
    const cellsToUpdate = ['XA999', '', 'ZB1000', ''];
    const valuesToUpdate = ['', '', '新しい値', ''];
    prepareConfigs(sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, BLANKS, BLANKS);
    configs.put('conf_ValueInputOption', 'RAW');

    const trimmedCellsToUpdate = ['XA999', 'ZB1000'];
    const trimmedValuesToUpdate = ['', '新しい値'];
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, sheetId, sheetTitle, trimmedCellsToUpdate, trimmedValuesToUpdate, 'RAW');
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });
    expect(main()).toEqual(undefined);
});

/**
 * 成功 - 更新のみ。valueInputOption に USER_ENTERED を指定
 */
test('Succeed - update some cells, select USER_ENTERED', () => {
    const sheetId = '6789hijfk';
    const sheetTitle = 'シート (2)';
    const cellsToUpdate = ['A1', '', '', ''];
    const valuesToUpdate = ['123.45', '', '', ''];
    prepareConfigs(sheetId, sheetTitle, cellsToUpdate, valuesToUpdate, BLANKS, BLANKS);
    configs.put('conf_ValueInputOption', 'USER_ENTERED');

    const trimmedCellsToUpdate = ['A1'];
    const trimmedValuesToUpdate = ['123.45'];
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, sheetId, sheetTitle, trimmedCellsToUpdate, trimmedValuesToUpdate, 'USER_ENTERED');
        return httpClient.createHttpResponse(200, 'application/json', '{}');
    });
    expect(main()).toEqual(undefined);
});

/**
 * 成功 - 取得のみ
 */
test('Succeed - get some cells', () => {
    const sheetId = '12345abcde';
    const sheetTitle = 'シート_1';
    const cellsToGet = ['', 'XXA1', 'ZZB2', ''];
    const valueDefTypes = ['', 'TEXTFIELD', 'TEXTFIELD', ''];
    const valueDefs = prepareConfigs(sheetId, sheetTitle, BLANKS, BLANKS, cellsToGet, valueDefTypes);

    const trimmedCellsToGet = ['XXA1', 'ZZB2'];
    const cellValues = [null, '文字列'];
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, sheetId, sheetTitle, trimmedCellsToGet);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareGetResponse(sheetTitle, trimmedCellsToGet, cellValues));
    });
    expect(main()).toEqual(undefined);
    expect(valueDefs[0]).toEqual(null);
    expect(engine.findData(valueDefs[1])).toEqual('');
    expect(engine.findData(valueDefs[2])).toEqual('文字列');
    expect(valueDefs[3]).toEqual(null);
});

]]></test>

</service-task-definition>
