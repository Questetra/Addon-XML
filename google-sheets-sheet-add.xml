<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2024-02-01</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Google Sheets: Add New Sheet</label>
<label locale="ja">Google スプレッドシート: シート追加</label>
<summary>This item adds a new sheet to a Google Sheet.</summary>
<summary locale="ja">この工程は、Google スプレッドシートに新しいシートを追加します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-sheet-add/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-sheet-add/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SheetId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: スプレッドシートの ID</label>
  </config>
  <config name="conf_SheetTitle" required="false" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: New Sheet Title (if blank, set automatically)</label>
    <label locale="ja">C3: 新しいシートのタイトル (空白の場合、自動設定されます)</label>
  </config>
  <config name="conf_AddedSheetTitle" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C4: Data item to save Added Sheet Title</label>
    <label locale="ja">C4: 追加したシートのタイトルを保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const oauth2 = configs.getObject("conf_OAuth2");
    const spreadSheetId = retrieveSpreadSheetId();
    const sheetTitle = configs.get("conf_SheetTitle");
    const addedSheetTitleDef = configs.getObject("conf_AddedSheetTitle");

    //// == Calculating / 演算 ==
    const addedSheetTitle = addSheet(oauth2, spreadSheetId, sheetTitle);

    //// == ワークフローデータへの代入 / Data Updating ==
    if (addedSheetTitleDef !== null) {
        engine.setData(addedSheetTitleDef, addedSheetTitle);
    }
}

/**
 * config からスプレッドシートの ID を読み出す
 * @return {String} spreadSheetId スプレッドシートの ID
 */
function retrieveSpreadSheetId() {
    let spreadSheetId = configs.get("conf_SheetId");
    const spreadSheetIdDef = configs.getObject("conf_SheetId");
    if (spreadSheetIdDef !== null) {
        spreadSheetId = engine.findData(spreadSheetIdDef);
    }
    if (spreadSheetId === null || spreadSheetId === "") {
        throw "Target Spreadsheet ID isn't set.";
    }
    return spreadSheetId;
}

/**
 * Google スプレッドシートに新しいシートを追加
 * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetTitle シートのタイトル
 * @return {String} addedSheetTitle 追加したシートのタイトル
 */
function addSheet(oauth2, spreadSheetId, sheetTitle) {
    // Method: spreadsheets.batchUpdate
    const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadSheetId)}:batchUpdate`;

    const requestObj = {
        requests: [
            { "addSheet": {} }
        ]
    };
    if (sheetTitle !== "" && sheetTitle !== null) {
        requestObj.requests[0].addSheet["properties"] = {
            "title": sheetTitle
        };
    }

    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(requestObj), "application/json")
        .post(uri);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(responseStr);
        throw `Failed to add a new sheet. status: ${status}`;
    }

    // レスポンスから追加したシートのタイトルを取得して返す
    const { replies } = JSON.parse(responseStr);
    return replies[0].addSheet.properties.title;
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[


/**
 * 設定の準備
 * スプレッドシートの ID はデータ項目で指定
 * @param configs
 * @param spreadSheetId
 * @param sheetTitle
 * @return addedSheetTitleDef
 */
const prepareConfigs = (spreadSheetId, sheetTitle) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Google',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'spreadsheets',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
	
    configs.put('conf_SheetTitle', sheetTitle);

    // スプレッドシートの ID を設定した文字型データ項目（単一行）を準備
    const spreadSheetIdDef = engine.createDataDefinition('スプレッドシートの ID', 1, 'q_SpreadSheetId', 'STRING_TEXTFIELD');
    engine.setData(spreadSheetIdDef, spreadSheetId);
    configs.putObject('conf_SheetId', spreadSheetIdDef);

    // 追加したシートのタイトルを保存する文字型データ項目（単一行）を準備
    const addedSheetTitleDef = engine.createDataDefinition('追加したシートのタイトル', 2, 'q_AddedSheetTitle', 'STRING_TEXTFIELD');
    engine.setData(addedSheetTitleDef, '事前文字列');
    configs.putObject('conf_AddedSheetTitle', addedSheetTitleDef);

    return addedSheetTitleDef;
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * conf_SheetId でデータ項目を選択し、値が空でエラーになる場合
 */
test('Spreadsheet ID is blank', () => {
    prepareConfigs('', '新しいシート');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Target Spreadsheet ID isn\'t set.');
  });

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetTitle
 */
const assertPostRequest = ({ url, method, contentType, body }, spreadSheetId, sheetTitle) => {
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
        spreadSheetId
    )}:batchUpdate`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    if (sheetTitle === '') {
        expect(bodyObj.requests[0].addSheet).toEqual({});
    } else {
        expect(bodyObj.requests[0].addSheet.properties.title).toEqual(sheetTitle);
    }
};

/**
 * POST リクエストのレスポンスを準備
 * @param sheetTitle
 * @return responseObj
 */
const preparePostResponse = (sheetTitle) => {
    return {
        "spreadsheetId": "abc123",
        "replies": [
            {
                "addSheet": {
                    "properties": {
                        "sheetId": 1112052210,
                        "title": sheetTitle,
                        "index": 2,
                        "sheetType": "GRID",
                        "gridProperties": {
                            "rowCount": 1000,
                            "columnCount": 26
                        }
                    }
                }
            }
        ]
    };
};

/**
 * シート追加成功の場合 - 新しいシートのタイトルを指定
 */
test('Success - with New Sheet Title', () => {
    const addedSheetTitleDef = prepareConfigs('abc123', '新しいシート / 1');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', '新しいシート / 1');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('新しいシート / 1')));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(addedSheetTitleDef)).toEqual('新しいシート / 1');
});

/**
 * シート追加成功の場合 - 新しいシートのタイトルは自動設定
 */
test('Success - without New Sheet Title', () => {
    const addedSheetTitleDef = prepareConfigs('abc123', '');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', '');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('シート2')));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(addedSheetTitleDef)).toEqual('シート2');
});

/**
 * シート追加成功の場合 - スプレッドシートの ID を固定値で指定
 */
test('Success - Set the Spreadsheet ID as a fixed value', () => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Google',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'spreadsheets',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('conf_SheetId', 'abc123');
    configs.put('conf_SheetTitle', '新しいシート');

    // 追加したシートのタイトルを保存する文字型データ項目（単一行）を準備
    const addedSheetTitleDef = engine.createDataDefinition('追加したシートのタイトル', 1, 'q_AddedSheetTitle', 'STRING_TEXTFIELD');
    engine.setData(addedSheetTitleDef, '事前文字列');
    configs.putObject('conf_AddedSheetTitle', addedSheetTitleDef);

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', '新しいシート');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('新しいシート')));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(addedSheetTitleDef)).toEqual('新しいシート');
});

/**
 * シート追加成功の場合 - 追加したシートのタイトルを保存しない
 */
test('Success - Added Sheet Title not saved', () => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Google',
        'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
        'https://accounts.google.com/o/oauth2/token',
        'spreadsheets',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('conf_SheetId', 'abc123');
    configs.put('conf_SheetTitle', '新しいシート');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', '新しいシート');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(preparePostResponse('新しいシート')));
    });

    // <script> のスクリプトを実行
    main();
});

/**
 * POST API リクエストでエラー
 */
test('POST Failed', () => {
    prepareConfigs('abc123', '新しいシート');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', '新しいシート');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed to add a new sheet. status: 400');
});


]]></test>

</service-task-definition>
