<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Generate Text File</label>
<label locale="ja">テキストファイル生成</label>

<help-page-url>https://support.questetra.com/bpmn-icons/generator-textfile/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/generator-textfile/</help-page-url>

<summary>Stores the values in a Any text type data item into a File type data item as a Text. It does not affect existing files. Just add. </summary> 
<summary locale="ja">任意のテキストファイルを生成し、ファイルデータ項目に格納します。ファイルは追加され、既存のファイルには影響を与えません。</summary>
    
<license>(C) Questetra, Inc. (MIT License)</license>
<last-modified>2021-10-11</last-modified>

<configs>
    <config name="File_DataId" required="true" form-type="SELECT" select-data-type="FILE">
    <label>A: File type data item to save text file </label>
    <label locale="ja">A: テキストファイルを保存するファイル型データ項目 </label>
   </config>
   <config name="File_Name" form-type="TEXTFIELD" required="true" el-enabled="true">
    <label>B: Saving file name</label>
    <label locale="ja">B: 保存ファイル名</label>
   </config>
   <config name="Text_Data" required="true" form-type="TEXTAREA" el-enabled="true">
    <label>C: Contents of text file</label>
    <label locale="ja">C: テキストファイルの内容</label>
   </config>
   
</configs>

<engine-type>2</engine-type>

<script><![CDATA[

//////// START "main()" ////////
main();
function main(){ 

  //// == Config Retrieving & Caluculating / 工程コンフィグの参照 & 演算 ==
  const textdata = configs.get( "Text_Data" );
  const filename = configs.get( "File_Name" );
  const filedataId = configs.get( "File_DataId" );


  if(filename === "" ||filename === null) {
      throw new Error( "File Name is blank" );
    }

  myFiles = retrieveData( textdata, filename, filedataId );
  updateData( filedataId, myFiles );
}


/**
  * テキストデータをファイル型データに変換する
  * @param {String} textdata テキストファイルの内容
  * @param {String} filename 保存ファイル名
  * @param {String} filedataId テキストファイルを保存するファイル型データ項目のデータ定義番号
  * @return {java.util.ArrayList<QfileView>} myFiles テキストデータをファイル型データとして追加した配列
  */
function retrieveData( textdata, filename, filedataId ) {
  // ワークフローデータからファイル型データの配列を取得
  let myFiles  = engine.findDataByNumber( filedataId );// java.util.ArrayList
  if( myFiles === null ){ myFiles = new java.util.ArrayList(); }
  if(textdata === null) { textdata = "";}

  // テキストデータをファイル型データに変換して追加した配列を返す
  myFiles.add(
    new com.questetra.bpms.core.event.scripttask.NewQfile(
      filename,
      "text/plain; charset=UTF-8",
      textdata
    )
  );
  return myFiles;
}

//// == Data Updating / ワークフローデータへの代入 ==
function updateData( filedataId, myFiles ){
  engine.setDataByNumber( filedataId, myFiles );
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADQ0lEQVRYR8WXS0gUYRzAf7O4i7ql
lGSaFxHrFImRiRixgV286clHStZh1w5RoHXwoicJEruYK2YJRWEsFXQIH1GepMIEEQ/aQ1slo1Lz
VW6PiW+30XFmdnemgv2OM//Hb/7PbyRifCTT/jtIRKYUiWPI5CKRCez4o7+AzBQSI8g8QeIebtbM
2I4OcIM0AlwEPEC8GaPAN8CLg0vUMBdJJzKAFw8SlwGnScdasVVk6vDgDacfHqCDq0DtXzrWqrXj
5oyRLWMAL7eRKP9PzkNmZO7goUJrUw8Q4cvtNjudRzvJScmJyJZ/P5/Ar4CRjC4SWwFCOW830hTO
e4p6KMks4cKzC4x+HtWJbbNvw3fcR3xXPOs/140hZWrVNbEJEKr2V0YFp3YurLoeuhh8P6hzkOxI
ZvHkIgUPCshPzWd8cZz+mX59YTrIVrpjE6CDVuCcVlrrXAF4/vE5hbsLg+JzX+cYmx9DASjtK6Xp
UBPDn4apeVpjFIkruDkvXoQAxJCBz9o+j7PFcbfobjDs6iMiMLs6y2TZZPBxz+seyh6XbQCIFNQd
qCM7OTscgJgTKWJYhQC8nEDiphY1w5mBv9JPy2jLllft4+3YsP0LgOiKKjzcUiLQBZwyApgqn8J+
zW6Y76q9VcHnE18m6JvpsxIBoXYdN6eVCLxEIjcaQJIjCYfNoYMRFb/8fdkagMwIHg4qEZhXLZYN
ByIF6gi0FrSStytPBzAwO0DjcKM1AFjAzU4FQDYqVS2AcWNvPlW6wEQRhpTcSJYA2o60Bftbe3r9
vTS8aLAagS0AplLgjHMi5oL2iLG79mPNKoAqBV5MFWH1vmqytmfpAMYWxvC98VkD0BShqTZ07XGR
lpCmA5hemWbow5A1AE0bhh1E4eaAUUFaKkLNIDIcxaIL3lW8o/hRcbQGCL5Xb0Nro1hoGyyj1IRU
eot7TTlXC4n7QH1OfaRdoFlGQjvCOhavK7Mrgx3QPdFtCqghtyEcwCqG61iYjXAhaT7czNn9Z1kK
LJkCCKbjrU+/DcNeSBSzYa5k6YnpiJRYOfPr8/hX/GqVKFcyRTSml9IokbASAZWsxWv5ZiRi+GOi
QMT010wd75j9nP5l0s2q/Qa8EHkw8/O47gAAAABJRU5ErkJggg==
</icon>
    
<test><![CDATA[

/**
 * テキストファイル作成に成功した場合
 * ファイル型データに中身のあるファイルが１つ添付されている
 */
test('success1', () => {

    // テキストを config に指定
    const textdata = 'test\ntest\ntest'
    configs.put('Text_Data', textdata);

    // ファイル名 config に指定
    const filename = 'テスト.txt'
    configs.put('File_Name', filename);

    // ファイル型データ項目を準備して、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain', '事前ファイル'));
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
　　// ファイルが上書きではなく追加されていることを確認
    expect(files.size()).toEqual(2);

    const file0 = files.get(0);
    expect(file0.getName()).toEqual('事前ファイル.txt');
    expect(file0.getContentType()).toEqual('text/plain');

    const file1 = files.get(1);
    expect(file1.getName()).toEqual('テスト.txt');
    expect(file1.getContentType()).toEqual('text/plain');
    let text = '';
    fileRepository.readFile(file1, 'UTF-8', (line) => {
        text += line + '\n';
    });
    //作成されたファイルの中身がテキストと合っていることを確認
    expect(text).toEqual('test\ntest\ntest\n');    
});


/**
 * テキストファイル作成に成功した場合
 * ファイル型データに中身の無いファイルが１つ添付されている
 */
test('success2', () => {

    // テキストを config に指定
    const textdata = 'test\ntest\ntest'
    configs.put('Text_Data', textdata);

    // ファイル名 config に指定
    const filename = 'テスト.txt'
    configs.put('File_Name', filename);

    // ファイル型データ項目を準備して、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    // ファイル型データ項目の値を指定（ファイル型データに中身の無いファイルが1つ添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前中身無しファイル.txt', 'text/plain', ''));
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
　　// ファイルが上書きではなく追加されていることを確認
    expect(files.size()).toEqual(2);

    const file0 = files.get(0);
    expect(file0.getName()).toEqual('事前中身無しファイル.txt');
    expect(file0.getContentType()).toEqual('text/plain');

    const file1 = files.get(1);
    expect(file1.getName()).toEqual('テスト.txt');
    expect(file1.getContentType()).toEqual('text/plain');
    let text = '';
    fileRepository.readFile(file1, 'UTF-8', (line) => {
        text += line + '\n';
    });
    //作成されたファイルの中身がテキストと合っていることを確認
    expect(text).toEqual('test\ntest\ntest\n');    
});


/**
 * テキストファイル作成に成功した場合
 * ファイル型データにはファイルは添付されていない
 */
test('success3', () => {

    // テキストを config に指定
    const textdata = 'test\ntest\ntest'
    configs.put('Text_Data', textdata);

    // ファイル名 config に指定
    const filename = 'テスト.txt'
    configs.put('File_Name', filename);

    // ファイル型データ項目を準備して、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);
    engine.setData(fileDef, null);


    // <script> のスクリプトを実行
    execute();

    const files = engine.findData(fileDef);
　　// ファイルが追加されていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    expect(file.getName()).toEqual('テスト.txt');
    expect(file.getContentType()).toEqual('text/plain');
    let text = '';
    fileRepository.readFile(file, 'UTF-8', (line) => {
        text += line + '\n';
    });
    //作成されたファイルの中身がテキストと合っていることを確認
    expect(text).toEqual('test\ntest\ntest\n');  
});



/**
 * ファイル名が設定されておらずエラーになる場合
 */
test('File Name is blank', () => {

    // テキストを config に指定
    const textdata = 'test\ntest\ntest'
    configs.put('Text_Data', textdata);

    // ファイル名（空）を config に指定
    configs.put('File_Name', '');

    const fileDef = engine.createDataDefinition('ファイル', 5, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);
    engine.setData(fileDef, null);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File Name is blank');
    }
});

]]></test>

</service-task-definition>
