<?xml version="1.0" encoding="UTF-8"?><service-task-definition>

<label>Generate Text File</label>
<label locale="ja">テキストファイル生成</label>

<help-page-url>https://support.questetra.com/bpmn-icons/generator-textfile/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/generator-textfile/</help-page-url>

<summary>This item converts any text into a file and adds it to a File type data item.</summary> 
<summary locale="ja">この工程は、任意のテキストファイルを生成し、ファイルデータ項目に格納します。</summary>

<license>(C) Questetra, Inc. (MIT License)</license>
<last-modified>2023-05-22</last-modified>
<engine-type>3</engine-type>

<configs>
  <config name="File_DataId" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C1: File type data item to save text file </label>
    <label locale="ja">C1: テキストファイルを保存するファイル型データ項目 </label>
  </config>
  <config name="conf_DeleteOtherFiles" form-type="TOGGLE">
    <label>C2: Delete other files when saving</label>
    <label locale="ja">C2: 保存時に他のファイルを削除する</label>
  </config>
  <config name="File_Name" form-type="TEXTFIELD" required="true" el-enabled="true">
    <label>C3: Saving file name</label>
    <label locale="ja">C3: 保存ファイル名</label>
  </config>
  <config name="Text_Data" required="true" form-type="TEXTAREA" el-enabled="true">
    <label>C4: Contents of text file</label>
    <label locale="ja">C4: テキストファイルの内容</label>
  </config>
  <config name="conf_CharacterEncoding" required="false" form-type="SELECT_ITEM">
    <label>C5: Character encoding when saving(UTF-8 if not selected)</label>
    <label locale="ja">C5: 保存する際の文字コード（未設定の場合、UTF-8）</label>
    <item value="UTF-8">
    　　<label>UTF-8</label>
    </item>
    <item value="UTF-16">
      <label>UTF-16BE with BOM</label>
      <label locale="ja">UTF-16BE (BOM あり)</label>
    </item>
    <item value="x-UTF-16LE-BOM">
      <label>UTF-16LE with BOM</label>
      <label locale="ja">UTF-16LE (BOM あり)</label>
    </item>
    <item value="UTF-16BE">
      <label>UTF-16BE without BOM</label>
      <label locale="ja">UTF-16BE (BOM なし)</label>
    </item>
    <item value="UTF-16LE">
      <label>UTF-16LE without BOM</label>
      <label locale="ja">UTF-16LE (BOM なし)</label>
    </item>
  </config>
  <config name="conf_ContentType" required="false" form-type="SELECT_ITEM">
    <label>C6: File type when saving(Not-selected text/plain)</label>
    <label locale="ja">C6: 保存する際のファイルタイプ（未設定の場合、text/plain）</label>
    <item value="text/plain">
      <label>text/plain</label>
    </item>
    <item value="text/html">
      <label>text/html</label>
    </item>
    <item value="text/xml">
      <label>text/xml</label>
    </item>
    <item value="application/json">
      <label>application/json</label>
    </item>
  </config>
</configs>

<script><![CDATA[

//////// START "main()" ////////
main();
function main() {

    //// == Config Retrieving & Caluculating / 工程コンフィグの参照 & 演算 ==
    const textdata = configs.get("Text_Data");
    const filename = configs.get("File_Name");
    const filedataId = configs.get("File_DataId");
    const deleteOtherFiles = configs.getObject("conf_DeleteOtherFiles");
    let characterEncoding = configs.get("conf_CharacterEncoding");
    let contentType = configs.get("conf_ContentType");

    if (filename === "" || filename === null) {
        throw new Error("File Name is blank");
    }

    if (textdata === null) {
        textdata = "";
    }

    if (characterEncoding === "" || characterEncoding === null) {
        characterEncoding = 'UTF-8';
    }

    if (contentType === "" || contentType === null) {
        contentType = 'text/plain';
    }

    myFiles = retrieveData(textdata, filename, filedataId, deleteOtherFiles, characterEncoding, contentType);
    updateData(filedataId, myFiles);
}

/**
  * テキストデータをファイル型データに変換する
  * @param {String} textdata テキストファイルの内容
  * @param {String} filename 保存ファイル名
  * @param {String} filedataId テキストファイルを保存するファイル型データ項目のデータ定義番号
  * @param {boolean} deleteOtherFiles 保存時に他のファイルを削除するかどうか
  * @param {String} characterEncoding 保存する際の文字コード
  * @param {String} contentType 保存する際のファイルタイプ
  * @return {java.util.ArrayList<QfileView>} myFiles テキストデータをファイル型データとして追加した配列
  */
function retrieveData(textdata, filename, filedataId, deleteOtherFiles, characterEncoding, contentType) {
    let myFiles;
    if (deleteOtherFiles === true) {
        myFiles = new java.util.ArrayList();
    } else {
        // ワークフローデータからファイル型データの配列を取得
        myFiles = engine.findDataByNumber(filedataId);// java.util.ArrayList
        if (myFiles === null) {
            myFiles = new java.util.ArrayList();
        }
    }

    let fileType;
    //x-UTF-16LE-BOM について   QBPMS では contentType の charset は UTF-16 として扱われる
    if (characterEncoding === 'x-UTF-16LE-BOM') {
        fileType = `${contentType}; charset=UTF-16`;
    //application/json で UTF-8 の場合は、charset 無しで application/json のみ
    } else if (characterEncoding === "UTF-8" && contentType === "application/json") {
        fileType = "application/json";
    } else {
        fileType = `${contentType}; charset=${characterEncoding}`;
    }

    // テキストデータをファイル型データに変換して追加した配列を返す
    myFiles.add(
        new com.questetra.bpms.core.event.scripttask.NewQfile(
            filename,
            fileType,
            characterEncoding,
            textdata
        )
    );
    return myFiles;
}

//// == Data Updating / ワークフローデータへの代入 ==
function updateData(filedataId, myFiles) {
    engine.setDataByNumber(filedataId, myFiles);
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADQ0lEQVRYR8WXS0gUYRzAf7O4i7ql
lGSaFxHrFImRiRixgV286clHStZh1w5RoHXwoicJEruYK2YJRWEsFXQIH1GepMIEEQ/aQ1slo1Lz
VW6PiW+30XFmdnemgv2OM//Hb/7PbyRifCTT/jtIRKYUiWPI5CKRCez4o7+AzBQSI8g8QeIebtbM
2I4OcIM0AlwEPEC8GaPAN8CLg0vUMBdJJzKAFw8SlwGnScdasVVk6vDgDacfHqCDq0DtXzrWqrXj
5oyRLWMAL7eRKP9PzkNmZO7goUJrUw8Q4cvtNjudRzvJScmJyJZ/P5/Ar4CRjC4SWwFCOW830hTO
e4p6KMks4cKzC4x+HtWJbbNvw3fcR3xXPOs/140hZWrVNbEJEKr2V0YFp3YurLoeuhh8P6hzkOxI
ZvHkIgUPCshPzWd8cZz+mX59YTrIVrpjE6CDVuCcVlrrXAF4/vE5hbsLg+JzX+cYmx9DASjtK6Xp
UBPDn4apeVpjFIkruDkvXoQAxJCBz9o+j7PFcbfobjDs6iMiMLs6y2TZZPBxz+seyh6XbQCIFNQd
qCM7OTscgJgTKWJYhQC8nEDiphY1w5mBv9JPy2jLllft4+3YsP0LgOiKKjzcUiLQBZwyApgqn8J+
zW6Y76q9VcHnE18m6JvpsxIBoXYdN6eVCLxEIjcaQJIjCYfNoYMRFb/8fdkagMwIHg4qEZhXLZYN
ByIF6gi0FrSStytPBzAwO0DjcKM1AFjAzU4FQDYqVS2AcWNvPlW6wEQRhpTcSJYA2o60Bftbe3r9
vTS8aLAagS0AplLgjHMi5oL2iLG79mPNKoAqBV5MFWH1vmqytmfpAMYWxvC98VkD0BShqTZ07XGR
lpCmA5hemWbow5A1AE0bhh1E4eaAUUFaKkLNIDIcxaIL3lW8o/hRcbQGCL5Xb0Nro1hoGyyj1IRU
eot7TTlXC4n7QH1OfaRdoFlGQjvCOhavK7Mrgx3QPdFtCqghtyEcwCqG61iYjXAhaT7czNn9Z1kK
LJkCCKbjrU+/DcNeSBSzYa5k6YnpiJRYOfPr8/hX/GqVKFcyRTSml9IokbASAZWsxWv5ZiRi+GOi
QMT010wd75j9nP5l0s2q/Qa8EHkw8/O47gAAAABJRU5ErkJggg==
</icon>
    
<test><![CDATA[

/**
 * 設定の準備
 * @param deleteOtherFiles
 * @param fileName
 * @param textData
 * @param characterEncoding
 * @param contentType
 * @return fileDef: {Object}
 */
const prepareConfigs = (deleteOtherFiles, fileName, textData, characterEncoding, contentType) => {
    configs.putObject('conf_DeleteOtherFiles', deleteOtherFiles);

    // ファイル名を config に指定
    configs.put('File_Name', fileName);

    // テキストファイルの内容を config に指定
    configs.put('Text_Data', textData);

    configs.put('conf_CharacterEncoding', characterEncoding);
    configs.put('conf_ContentType', contentType);

    // ファイル型データ項目を準備して、config に指定
    const fileDef = engine.createDataDefinition('ファイル', 1, 'q_file', 'FILE');
    configs.putObject('File_DataId', fileDef);

    return fileDef;
};

/**
 * ファイル名が設定されておらずエラーになる場合
 */
test('File Name is blank', () => {
    const fileDef = prepareConfigs(true, '', 'test\ntest\ntest', 'UTF-8', 'text/html');

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, null);

    expect(execute).toThrow('File Name is blank');
});

/**
 * ファイルのテスト
 * @param file
 * @param name
 * @param characterEncoding
 * @param contentType
 * @param content
 */
const assertFile = (file, name, characterEncoding, contentType, content) => {
    expect(file.getName()).toEqual(name);

    expect(file.getContentType()).toEqual(contentType);

    const text = fileRepository.readFile(file, characterEncoding);
    expect(text).toEqual(content);
};



/**
 * テキストファイル作成に成功した場合
 * ファイル型データにファイルが１つ添付されている
 * 他のファイルを削除しない
 * text/html
 * UTF-8
 */
test('success - 1file attached, not delete other files, text/html, UTF-8', () => {
    const fileDef = prepareConfigs(false, 'テスト1.txt', 'test\ntest\ntest1', 'UTF-8', 'text/html');

    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain; charset=UTF-8', '事前ファイル\n'));

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが上書きではなく追加されていることを確認
    expect(files.size()).toEqual(2);

    const file0 = files.get(0);
    assertFile(file0, '事前ファイル.txt', 'UTF-8', 'text/plain; charset=UTF-8', '事前ファイル\n');

    const file1 = files.get(1);
    assertFile(file1, 'テスト1.txt', 'UTF-8', 'text/html; charset=UTF-8', 'test\ntest\ntest1');
});

/**
 * テキストファイル作成に成功した場合
 * 指定されているファイルの中身が空（テキストが空文字列）
 * ファイル型データにはファイルは添付されていない
 * 他のファイルを削除しない
 * text/plain
 * UTF-16
 */
test('success - no file attached and no text, not delete other files, text/plain, UTF-16', () => {
    const fileDef = prepareConfigs(false, 'テスト2.txt', '', 'UTF-16', 'text/plain');

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, null);

    // <script> のスクリプトを実行
    execute();

    const files = engine.findData(fileDef);
    // ファイルが追加されていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    assertFile(file, 'テスト2.txt', 'UTF-16', 'text/plain; charset=UTF-16', '');
});

/**
 * HTML ファイル作成に成功した場合
 * ファイル型データにファイルが１つ添付されている
 * 他のファイルを削除する
 * text/html
 * x-UTF-16LE-BOM
 */
test('success - 1file attached, delete other files, text/html, x-UTF-16LE-BOM', () => {
    const fileDef = prepareConfigs(true, 'テスト3.txt', 'test\ntest\ntest3', 'x-UTF-16LE-BOM', 'text/html');

    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain', '事前ファイル\n'));

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが上書きされていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    //x-UTF-16LE-BOM について   QBPMS では contentType の charset は UTF-16 として扱われる
    assertFile(file, 'テスト3.txt', 'x-UTF-16LE-BOM', 'text/html; charset=UTF-16', 'test\ntest\ntest3');
});

/**
 * XML ファイル作成に成功した場合
 * ファイル型データにファイルが添付されていない
 * 他のファイルを削除する
 * text/xml
 * UTF-16BE
 */
test('success - no file attached, delete other files, text/xml, UTF-16BE', () => {
    const fileDef = prepareConfigs(true, 'テスト4.txt', 'test\ntest\ntest4', 'UTF-16BE', 'text/xml');

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, null);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが追加されていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    assertFile(file, 'テスト4.txt', 'UTF-16BE', 'text/xml; charset=UTF-16BE', 'test\ntest\ntest4');
});

/**
 * JSON ファイル作成に成功した場合
 * 指定されているファイルの中身が空（テキストが空文字列）
 * ファイル型データにファイルが１つ添付されている
 * 他のファイルを削除しない
 * application/json
 * UTF-16LE
 */
test('success - 1file attached and no text, delete other files, application/json, UTF-16LE', () => {
    const fileDef = prepareConfigs(false, 'テスト5.txt', '', 'UTF-16LE', 'application/json');

    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain; charset=UTF-8', '事前ファイル\n'));

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが上書きではなく追加されていることを確認
    expect(files.size()).toEqual(2);

    const file0 = files.get(0);
    assertFile(file0, '事前ファイル.txt', 'UTF-8', 'text/plain; charset=UTF-8', '事前ファイル\n');

    const file1 = files.get(1);
    assertFile(file1, 'テスト5.txt', 'UTF-16LE', 'application/json; charset=UTF-16LE', '');
});

/**
 * テキストファイル作成に成功した場合
 * ファイル型データにファイルが１つ添付されている
 * 他のファイルを削除する
 * 文字コード、ファイルタイプが未設定
 */
test('success - 1file attached, delete other files, contentType and charset are blank', () => {
    const fileDef = prepareConfigs(true, 'テスト6.txt', 'test\ntest\ntest6', '', '');

    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain', '事前ファイル\n'));

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが上書きされていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    assertFile(file, 'テスト6.txt', 'UTF-8', 'text/plain; charset=UTF-8', 'test\ntest\ntest6');
});

/**
 * JSON ファイル作成に成功した場合
 * ファイル型データにファイルが１つ添付されている
 * 他のファイルを削除する
 * application/json
 * UTF-8
 */
test('success - 1file attached, delete other files, UTF-8 & application/json, UTF-8', () => {
    const fileDef = prepareConfigs(true, 'テスト7.txt', 'test\ntest\ntest7', 'UTF-8', 'application/json');
    // ファイル型データ項目の値を指定（ファイル型データに1ファイル添付されている状態を作成）
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('事前ファイル.txt', 'text/plain', '事前ファイル\n'));

    // ファイル型データ項目の値を指定
    engine.setData(fileDef, files);

    // <script> のスクリプトを実行
    execute();

    files = engine.findData(fileDef);
    // ファイルが上書きされていることを確認
    expect(files.size()).toEqual(1);

    const file = files.get(0);
    assertFile(file, 'テスト7.txt', 'UTF-8', 'application/json', 'test\ntest\ntest7');
});


]]></test>

</service-task-definition>
