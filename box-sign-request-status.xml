<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-07-03</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Box Sign: Check Status of Sign Request</label>
    <label locale="ja">Box Sign: 署名リクエストのステータス確認</label>
    <summary>This item checks the status of a Sign Request on Box Sign.</summary>
    <summary locale="ja">この工程は、Box Sign の署名リクエストのステータスを確認します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-sign-request-status/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-sign-request-status/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/sign_requests.readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_RequestId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Sign Request ID</label>
            <label locale="ja">C2: 署名リクエスト ID</label>
        </config>
        <config name="conf_Status" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C3: Data item to save the status of the sign request</label>
            <label locale="ja">C3: 署名リクエストのステータスを保存するデータ項目</label>
        </config>
        <config name="conf_NotSigned" form-type="SELECT" select-data-type="STRING_TEXTAREA">
            <label>C4-A: Data item to save the signers who have not signed yet</label>
            <label locale="ja">C4-A: 未署名者一覧を保存するデータ項目</label>
        </config>
        <config name="conf_Signed" form-type="SELECT" select-data-type="STRING_TEXTAREA">
            <label>C4-B: Data item to save the signers who have signed</label>
            <label locale="ja">C4-B: 署名済みの署名者一覧を保存するデータ項目</label>
        </config>
        <config name="conf_Declined" form-type="SELECT" select-data-type="STRING_TEXTAREA">
            <label>C4-C: Data item to save the signers who have declined</label>
            <label locale="ja">C4-C: 署名を拒否した署名者一覧を保存するデータ項目</label>
        </config>
        <config name="conf_SignedFileIds" form-type="SELECT" select-data-type="STRING">
            <label>C5: Data item to save the File IDs of the signed documents</label>
            <label locale="ja">C5: 署名済みドキュメントのファイル ID を保存するデータ項目</label>
        </config>
        <config name="conf_LogFileId" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C6: Data item to save the File ID of the signing log</label>
            <label locale="ja">C6: 署名ログのファイル ID を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://account.box.com/api/oauth2/authorize
// - Token Endpoint URL: https://api.box.com/oauth2/token
// - Scope: sign_requests.readwrite root_readwrite
// - Consumer Key: (Get by Box Developer Console)
// - Consumer Secret: (Get by Box Developer Console)

const ENDED_STATUSES = [
    'signed',
    'declined'
];
const ABORTED_STATUSES = [
    'error_converting',
    'error_sending',
    'cancelled',
    'expired'
];

function main(){
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauth2 = configs.get('conf_OAuth2');
    const requestId = decideEditable('conf_RequestId', 'Sign Request ID'); // 要修正。editable じゃなくて良さそう
    
    const statusDef = configs.getObject('conf_Status');
    const notSignedDef = configs.getObject('conf_NotSigned');
    const signedDef = configs.getObject('conf_Signed');
    const declinedDef = configs.getObject('conf_Declined');
    const signedFileIdsDef = configs.getObject('conf_SignedFileIds');
    const logFileIdDef = configs.getObject('conf_LogFileId');
    // TODO 保存先が何も設定されていない場合はエラーにする

    //// == 演算 / Calculating ==
    const signRequest = getSignRequest(oauth2, requestId);
    const status = signRequest.status;
    const {notSigned, signed, declined} = classifySigners(signRequest.signers);

    //// == Data Updating / ワークフローデータへの代入 ==
    setData(statusDef, status);
    setData(notSignedDef, notSigned.join('\n'));
    setData(signedDef, signed.join('\n'));
    setData(declinedDef, declined.join('\n'));

    if (ENDED_STATUSES.includes(status)) {
        const signedFileIds = signRequest.sign_files.files.map(file => file.id).join('\n');
        setData(signedFileIdsDef, signedFileIds);
        setData(logFileIdDef, signRequest.signing_log.id);
    }
}

/**
  * editable な config から設定値を読み出す
  * 設定値が空の場合はエラー
  * @param {String} confName 設定名
  * @param {String} label エラー出力用ラベル
  * @return {String} value 設定値
  */
function decideEditable(confName, label) {
    let value = '';
    const dataDef = configs.getObject(confName);
    if (dataDef === null) {
        value = configs.get(confName);
    } else {
        value = engine.findData(dataDef);
    }
    if (value === '' || value === null) {
        throw `${label} is blank.`;
    }
    return value;
}

/**
  * 署名リクエストを取得
  * @param {String} oauth OAuth2 設定
  * @param {String} requestId 署名リクエストの ID
  * @return {Object} signRequest 署名リクエスト
  */
function getSignRequest(oauth2, requestId) {
    const url = `https://api.box.com/2.0/sign_requests/${requestId}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseTxt);
        throw `Failed to get Sign Request. status:${status}`;
    }
    engine.log(responseTxt); // テスト用
    return JSON.parse(responseTxt);
}

/**
  * 署名者を未署名、署名済み、拒否の各グループに分類する
  * @param {Array<Object>} signers 署名者のリスト
  * @return {Object} classified 分類結果
  * @return {Array<String>} classified.notSigned 未署名の署名者のメールアドレスのリスト
  * @return {Array<String>} classified.signed 署名済みの署名者のメールアドレスのリスト
  * @return {Array<String>} classified.declined 署名を拒否した署名者のメールアドレスのリスト
  */
function classifySigners(signers) {
    const notSigned = [];
    const signed = [];
    const declined = [];
    signers.forEach(signer => {
        if (signer.role === 'final_copy_reader') {
            return;
        }
        const decision = signer.signer_decision;
        if (decision === null) {
            notSigned.push(signer.email);
            return;
        }
        if (decision.type === 'signed') {
            signed.push(signer.email);
            return;
        }
        // declined
        declined.push(signer.email);
    });
    return {notSigned, signed, declined};
}

/**
  * データ項目にデータを保存する
  * @param {DataDefinitionView} dataDef データ項目の DataDefinitionView
  * @param {Object} value 保存する値
  */
function setData(dataDef, value) {
    if (dataDef !== null) {
        engine.setData(dataDef, value);
    }
}

]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

</service-task-definition>
