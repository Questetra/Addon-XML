<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-01-24</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Drive: Create Folder</label>
<label locale="ja">Google ドライブ: フォルダ作成</label>
<summary>Create a new folder in the specified folder on Google Drive</summary>
<summary locale="ja">Google ドライブ の指定フォルダ内に新しいフォルダを作成します</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googledrive-foldercreate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-foldercreate/</help-page-url>
<configs>
  <config name="UserID" required="true" form-type="QUSER">
    <label>C1: User who connects to Google Drive</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ</label>
  </config>
  <config name="ParentFolderId" el-enabled="true">
    <label>C2: Parent Folder ID(When empty,create in My Drive root)</label>
    <label locale="ja">C2: 作成するフォルダの親フォルダの ID (空白の場合マイドライブのルートに作成されます)</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>C3: Folder Name to create</label>
    <label locale="ja">C3: 作成するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data Item that will save Folder ID</label>
    <label locale="ja">C4: 作成したフォルダの ID を保存するデータ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: Data Item that will save web view url of Folder</label>
    <label locale="ja">C5: 作成したフォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main() {
  let parentFolderId = configs.get("ParentFolderId");
  const folderName = configs.get("FolderName");
  if (folderName === "" || folderName === null) {
    throw "Folder Name is blank";
  }

  const quser = configs.getObject("UserID");
  checkUser(quser);

  const json = createFolder(quser, parentFolderId, folderName);

  setData("FolderIdItem", json, "id");
  setData("WebViewUrlItem", json, "webViewLink");
}

/**
 * ユーザーIDをチェックする
 * @param {QuserView} quser ユーザ
 */
function checkUser(quser) {
  if (quser === null) {
    throw "User not found";
  }
}

/**
 * プロセスにデータを保存する
 * @param {String} configName 保存先データ項目の config 名
 * @param {Object} json 保存するデータをメンバに持つ JSON オブジェクト
 * @param {String} property 保存するデータのプロパティ名
 */
function setData(configName, json, property) {
  const item = configs.get(configName);
  if (item === null || item === "") {
    return;
  }
  const data = json[property];
  engine.setDataByNumber(item, data);
}

/**
 * Google ドライブにフォルダを作成する
 * @param {QuserView} quser ユーザ
 * @param {String} parentFolderId 親フォルダのID
 * @param {String} name フォルダ名
 * @return {Object} jsonRes レスポンス本文の JSON オブジェクト
 */
function createFolder(quser, parentFolderId, name) {
  let reqBody = {};
  //mime type of google drive folder
  reqBody["mimeType"] = "application/vnd.google-apps.folder";
  if (parentFolderId !== "" && parentFolderId !== null) {
    reqBody["parents"] = [parentFolderId];
  }
  reqBody["name"] = name;

  const url = "https://www.googleapis.com/drive/v3/files/";

  const response = httpClient
    .begin()
    .googleOAuth2(quser, "Drive")
    .queryParam("fields", "id, webViewLink")
    .queryParam("supportsAllDrives", "true")
    .body(JSON.stringify(reqBody), "application/json; charset=UTF-8")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status >= 300) {
    const error = `Failed to create\nstatus:${status}`;
    engine.log(responseTxt);
    throw error;
  }
  engine.log(`status:${status}`);

  const jsonRes = JSON.parse(responseTxt);
  return jsonRes;
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADLUlEQVRYR2NkYGBgZBhAALJ81AFE
hUBmYabNj19/dglzM7ERirGerpkshNTA5ImOgvTClGu/fjEq5AfeYdeX+YrT0cv2S3y69kjgVGv7
IjdiHEGUAzKK0nKf8X9peyz5ntv5jty/7qTzTPgML51n+O/rbyaH6f3TjxByBFEOSMxO/XZB/wnH
d6k/DGpnRb82WT/nwhcKF59w/5++VfnmzP45WhQ7IL0wdfZzga8Rt4xfc4MM43zGwkBMKICi4vBt
idoZfbMm43ME3hAAJbx/DL9nHXR+qAEzBOQA2eeCBEMBpD5psv6P+VNnc5HtgOrKuF2XOf5YwnyP
7oiN4XfAoYILEJMgcYYAyPdPBT5uR7ccFg2gUAgX+/I3yvEFHyUJEqcDQNnulOZTDVDCQwegaAAB
g4syPwhlS1CCXL1Xdi+ubInVAbBsh833yNEAcgAb2/8HM9IvwdMIttDAlyAxHIAt4WEzFJQdJT9w
rwDJ2am9DMUXFfiyJYYD0LMdNstBUQDyPSyFg8qJebkXOQglyEO3xFfP7J+diqwOxQGk+F7qI08V
LI+DosxW9UUzoQQJypYcbCxuyCUkigPwJTzkuDe7Ln0DvZQD6c30vqtOqIRET5BwBxCT8ECOsN8r
f4OJgTUNvZyHhR6pCRLuAOTyHldcwhIeejzC1IPSDyhBBuvu42MXwV4NoGdLsAOISXj4fA9zACwU
JgavwJktQQ4DZUtYgoQ6AHehAzMc5HvhV9zM/xkl/uFL7SA5xv8vmAg1XD7//nsLlI7ADiAm/i23
K/y48ywQnNXY9S0ZePlx1zGfP37D60aZN33fONheVoJyETwN4MsBIN+/vxADrngIWU4odDjeH/vP
93kpvK0AdwCszXfc8wFKgQKyXOi1MuPdp5ZclFoOchz/3ZZvnKxvPGC5CK0cwGx8gEo8UNBTw3KI
75fNQ85FGEUxLDvCajtqWQ5KF8ofSzEKMAwHwBIkyAGgoH8iUsSFL8ERinOYPCjoYQkPZ12AKFBS
rj0X+Cb77f9UbmpYjp7wCDoAlCC//xbZQazviFGHnPAIOoAYA6mlhqh+AbUsw2bOgDsAAHEO2FDM
6/Q2AAAAAElFTkSuQmCC</icon>

<test><![CDATA[


/**
 * 設定の準備
 * @param parentFolderId
 * @param folderName
 * @return {
     folderIdItemDef: {Object},
     webViewUrlItemDef: {Object}
   }
 */
const prepareConfigs = (parentFolderId, folderName) => {
  const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
  configs.putObject('UserID', quser);
  configs.put('ParentFolderId', parentFolderId);
  configs.put('FolderName', folderName);
  
  // 作成したフォルダの ID を保存するデータ項目を準備
  const folderIdItemDef = engine.createDataDefinition('作成したフォルダの ID', 1, 'q_folderIdItem', 'STRING_TEXTFIELD');
  engine.setData(folderIdItemDef, '事前文字列');
  configs.putObject('FolderIdItem', folderIdItemDef);
  
  // 作成したフォルダの表示 URL を保存するデータ項目を準備
  const webViewUrlItemDef = engine.createDataDefinition('作成したフォルダの表示 URL', 2, 'q_AddedSheetTitle', 'STRING_TEXTFIELD');
  engine.setData(webViewUrlItemDef, '事前文字列');
  configs.putObject('WebViewUrlItem', webViewUrlItemDef);
  
  return {
    folderIdItemDef,
    webViewUrlItemDef
  };
};

/**
 * FolderName でEL式を指定し、値が空でエラーになる場合
 */
test('FolderName is blank', () => {
  prepareConfigs('abc123', '');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith("Folder Name is blank");
  }
});

/**
 * UserID は空ではないが、対応する QuserView がない状態
 */
test('User not found', () => {
  prepareConfigs('def456', 'フォルダ0');
  configs.put('UserID', '3');
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith("User not found");
  }
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param parentFolderId
 * @param folderName
 */
const assertPostRequest = ({url, method, contentType, body}, parentFolderId, folderName) => {
    expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/?fields=id%2C+webViewLink&supportsAllDrives=true`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.name).toEqual(folderName);
    if (parentFolderId === '') {
        expect(bodyObj.parents === undefined).toEqual(true);
    } else {
        expect(bodyObj.parents[0]).toEqual(parentFolderId);
    }
};

/**
 * 指定した親フォルダIDにフォルダ作成 - FolderIdItemが未設定の場合
 */
test('Success - Specified parent folder', () => {
  const {
    folderIdItemDef,
    webViewUrlItemDef
  } = prepareConfigs('abc123', 'フォルダ1');
  configs.put('FolderIdItem', ''); //未設定にする
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'abc123', 'フォルダ1');
    const responseObj = {
      "id": "efg456",
      "webViewLink": "https://drive.google.com/drive/folders/efg456"
    };
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });
  
  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(webViewUrlItemDef)).toEqual('https://drive.google.com/drive/folders/efg456');
});

/**
 * 親フォルダIDが空 - WebViewUrlItemが空の場合
 */
test('Success - parent folder ID is null', () => {
  const {
    folderIdItemDef,
    webViewUrlItemDef
  } = prepareConfigs('', 'フォルダ2');
  configs.put('WebViewUrlItem', ''); //未設定にする
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, '', 'フォルダ2');
    const responseObj = {
      "id": "hij789",
      "webViewLink": "https://drive.google.com/drive/folders/hij789"
    };
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });
  
  // <script> のスクリプトを実行
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(folderIdItemDef)).toEqual('hij789');
});

/**
 * POST API リクエストでエラー
 */
test('POST Failed', () => {
  prepareConfigs('klm012', 'フォルダ3');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'klm012', 'フォルダ3');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith(`Failed to create\nstatus:400`);
  }
});

]]></test>

</service-task-definition>