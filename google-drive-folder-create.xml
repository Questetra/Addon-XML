<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2024-11-21</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Google Drive: Create Folder</label>
<label locale="ja">Google ドライブ: フォルダ作成</label>
<summary>This item creates a new folder in the specified folder on Google Drive.</summary>
<summary locale="ja">この工程は、Google ドライブ の指定フォルダ内に新しいフォルダを作成します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/googledrive-foldercreate/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googledrive-foldercreate/</help-page-url>
<configs>
  <config name="UserID" required="true" form-type="QUSER">
    <label>C1: User connects to Google Drive (must be App Administrator)</label>
    <label locale="ja">C1: Google ドライブ に接続するユーザ（要アプリ管理権限）</label>
  </config>
  <config name="ParentFolderId" el-enabled="true">
    <label>C2: Parent Folder ID(When empty,create in My Drive root)</label>
    <label locale="ja">C2: 作成するフォルダの親フォルダの ID (空白の場合マイドライブのルートに作成されます)</label>
  </config>
  <config name="FolderName" required="true" el-enabled="true">
    <label>C3: Folder Name to create</label>
    <label locale="ja">C3: 作成するフォルダの名称</label>
  </config>
  <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data Item that will save Folder ID</label>
    <label locale="ja">C4: 作成したフォルダの ID を保存するデータ項目</label>
  </config>
  <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
    <label>C5: Data Item that will save web view url of Folder</label>
    <label locale="ja">C5: 作成したフォルダの表示 URL を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
function main() {
    let parentFolderId = configs.get("ParentFolderId");
    const folderName = configs.get("FolderName");
    if (folderName === "" || folderName === null) {
        throw "Folder Name is blank";
    }

    const quser = configs.getObject("UserID");
    checkUser(quser);

    const json = createFolder(quser, parentFolderId, folderName);

    setData("FolderIdItem", json, "id");
    setData("WebViewUrlItem", json, "webViewLink");
}

/**
 * ユーザーIDをチェックする
 * @param {QuserView} quser ユーザ
 */
function checkUser(quser) {
    if (quser === null) {
        throw "User not found";
    }
}

/**
 * プロセスにデータを保存する
 * @param {String} configName 保存先データ項目の config 名
 * @param {Object} json 保存するデータをメンバに持つ JSON オブジェクト
 * @param {String} property 保存するデータのプロパティ名
 */
function setData(configName, json, property) {
    const item = configs.get(configName);
    if (item === null || item === "") {
        return;
    }
    const data = json[property];
    engine.setDataByNumber(item, data);
}

/**
 * Google ドライブにフォルダを作成する
 * @param {QuserView} quser ユーザ
 * @param {String} parentFolderId 親フォルダのID
 * @param {String} name フォルダ名
 * @return {Object} jsonRes レスポンス本文の JSON オブジェクト
 */
function createFolder(quser, parentFolderId, name) {
    let reqBody = {};
    //mime type of google drive folder
    reqBody["mimeType"] = "application/vnd.google-apps.folder";
    if (parentFolderId !== "" && parentFolderId !== null) {
        reqBody["parents"] = [parentFolderId];
    }
    reqBody["name"] = name;

    const url = "https://www.googleapis.com/drive/v3/files/";

    const response = httpClient
        .begin()
        .googleOAuth2(quser, "Drive")
        .queryParam("fields", "id, webViewLink")
        .queryParam("supportsAllDrives", "true")
        .body(JSON.stringify(reqBody), "application/json; charset=UTF-8")
        .post(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status >= 300) {
        const error = `Failed to create. status:${status}`;
        engine.log(responseTxt);
        throw error;
    }
    const jsonRes = JSON.parse(responseTxt);
    return jsonRes;
}
]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAA71JREFUWEfF
V11oFFcU/s7M7K6TRs1vK1VUSGmbCK2SB6VFgpLWlYC2omIDLaUlCBGfimwWgw9Fu9mW0ocSoUhE
aKmlgUgUyShiEUWSh4AW7L9CS5PGZhuTJmTi7swcmUn3d+ZOdtGy87Ts3HvOd77zfefeIZT5oVLy
h2MP3wTMViJqZqABQM1/+6cIuMvMo4B8RYuGzhUbd0kArT1TK2VWj5CEg2DUFRWYkGALX5ikf3Kl
q2bGb48vgJ0x/T2WEC86cWEmQoIsRIai6mkRCCGAcHy+F0ydRVW81CLik1qk4pDXMk8A4bj+NRhv
LRW3pPeEs1pEbXeTVPDPE63clc3NRB4DTs8JfX6V7d2soKVRgizlk5cyGBdvmbj8velLDDHez9VE
JoqtdoXU3/wE19Io452tCtQgUP2Uu3u/TliInE1CT/pgICQM1p9LuyMTZUdMP06Eo37wYweC2LhO
wsQ0o245QZHzVxsm8O2IgS+vG74sMOPEpajabS/KAAjH9Um/6vdvUdD+qoKQAiykgFmdUb/CzcLE
DCN+PoWfxi0xCEJCi6j1GQDOhCNrQLRjdQ2h+40g1tdnE/4zy6gIkdOO3Mdi4OodE59eTPmbhKU9
9sR0IoZj870gsec7tivY1axAkbIxDQuY/JexaiWBCoiYnmd8fsnAzV98BMl8UotWHHK27uzRhxnY
7AX55XUSjrQFULvcTbdNs92G2kr3u1u/W4h+I1YjASNDXeqWRQZ69EnAe85Hdwew9QXZVeXsAqP3
soENayS0bZJR4EpHJ2eupTA4KmQhoXWpi00N9+j2qhyCF7l4/SUZHdsUVC7Lr9Du87UfTXx8IYW1
dYRje4JYXe1m4d7fjI8GkxibYi9yLa1LlYUAbHEd3xdE0xoXLhQqPdchuZlsnZwfNXDqqqct8wC4
WlBK0FLA5gDMtsBLhJ+9HcSLz7qrH3/AmFtgBJR8ym0uQwG4tGJawNBtE/3D+Szki9DDhrubZbzb
EsCyQBaz3wASmX7sAePDgST+SBToINeGokF0Yn8Qm9ZLTlXMwF/TjKdXuEewKHnSAPpHDHx1w0MD
uYPIcYLHKH7leRmHdyioqiCHdltU9u9inx/+tNDd73E4FY5iO6DoMPqgLYBtTTLuzzBWVZHL7yIw
cw8Zfd8Z0G6754DnYSQ6jm2fd74WQMMzhMpQcdXb7br+s4nYoMd5IDqOnZFcxIWkWPpF64QXkvSG
sl7JsiDKeCn9X5go9VqeBlHWD5M0iLJ+mhUquSwfp49ru6X2PwLQFL0wM02BagAAAABJRU5ErkJg
gg==</icon>

<test><![CDATA[
/**
 * 設定の準備
 * @param parentFolderId
 * @param folderName
 * @return {
     folderIdItemDef: {Object},
     webViewUrlItemDef: {Object}
   }
 */
const prepareConfigs = (parentFolderId, folderName) => {
    const quser = engine.createQuser(3, 'サウスポール', 'SouthPole@questetra.com');
    configs.putObject('UserID', quser);
    configs.put('ParentFolderId', parentFolderId);
    configs.put('FolderName', folderName);

    // 作成したフォルダの ID を保存するデータ項目を準備
    const folderIdItemDef = engine.createDataDefinition('作成したフォルダの ID', 1, 'q_folderIdItem', 'STRING_TEXTFIELD');
    engine.setData(folderIdItemDef, '事前文字列');
    configs.putObject('FolderIdItem', folderIdItemDef);

    // 作成したフォルダの表示 URL を保存するデータ項目を準備
    const webViewUrlItemDef = engine.createDataDefinition('作成したフォルダの表示 URL', 2, 'q_AddedSheetTitle', 'STRING_TEXTFIELD');
    engine.setData(webViewUrlItemDef, '事前文字列');
    configs.putObject('WebViewUrlItem', webViewUrlItemDef);

    return {
        folderIdItemDef,
        webViewUrlItemDef
    };
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
        expect(e.toString()).toEqual(errorMsg);
    }
    if (!failed) {
        fail('No error was thrown.');
    }
};

/**
 * FolderName でEL式を指定し、値が空でエラーになる場合
 */
test('FolderName is blank', () => {
    prepareConfigs('abc123', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Folder Name is blank');
});

/**
 * UserID に対応する QuserView がない場合
 */
test('User not found', () => {
    prepareConfigs('def456', 'フォルダ0');
    configs.put('UserID', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('User not found');
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param parentFolderId
 * @param folderName
 */
const assertPostRequest = ({ url, method, contentType, body }, parentFolderId, folderName) => {
    expect(url).toEqual(`https://www.googleapis.com/drive/v3/files/?fields=id%2C+webViewLink&supportsAllDrives=true`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.name).toEqual(folderName);
    if (parentFolderId === '') {
        expect(bodyObj.parents === undefined).toEqual(true);
    } else {
        expect(bodyObj.parents[0]).toEqual(parentFolderId);
    }
};

/**
 * 指定した親フォルダIDにフォルダ作成 - FolderIdItemが未設定の場合
 */
test('Success - Specified parent folder', () => {
    const {
        webViewUrlItemDef
    } = prepareConfigs('abc123', 'フォルダ1');
    configs.put('FolderIdItem', ''); //未設定にする

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'abc123', 'フォルダ1');
        const responseObj = {
            "id": "efg456",
            "webViewLink": "https://drive.google.com/drive/folders/efg456"
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(webViewUrlItemDef)).toEqual('https://drive.google.com/drive/folders/efg456');
});

/**
 * 親フォルダIDが空 - WebViewUrlItemが未設定の場合
 */
test('Success - parent folder ID is null', () => {
    const {
        folderIdItemDef
    } = prepareConfigs('', 'フォルダ2');
    configs.put('WebViewUrlItem', ''); //未設定にする

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, '', 'フォルダ2');
        const responseObj = {
            "id": "hij789",
            "webViewLink": "https://drive.google.com/drive/folders/hij789"
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(folderIdItemDef)).toEqual('hij789');
});

/**
 * POST API リクエストでエラー
 */
test('POST Failed', () => {
    prepareConfigs('klm012', 'フォルダ3');

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'klm012', 'フォルダ3');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError('Failed to create. status:400');
});
]]></test>

</service-task-definition>
