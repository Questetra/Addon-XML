<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Add New Record</label>
<label locale="ja">kintone: レコード追加</label>
<last-modified>2022-06-28</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>This item adds a new record to a Kintone App.</summary>
<summary locale="ja">この工程は、kintone アプリにレコードを１件追加します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: Authorization Setting in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した認証設定</label>
  </config>
  <config name="conf_basic" required="false" form-type="OAUTH2">
    <label>C2: Basic Auth Setting (required if enabled on Kintone)</label>
    <label locale="ja">C2: Basic 認証設定（kintone で設定されている場合のみ）</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C3: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C3: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C4: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C4: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C5: App ID</label>
    <label locale="ja">C5: アプリ ID</label>
  </config>
  <config name="conf_recordId" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C6: String type data item that will save Record ID</label>
    <label locale="ja">C6: レコード ID を保存する文字型データ項目</label>
  </config>
  <config name="conf_fieldCode1" required="false" form-type="TEXTFIELD">
    <label>C7F: Field Code 1</label>
    <label locale="ja">C7F: フィールドコード_1</label>
  </config>
  <config name="conf_fieldValue1" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7V: Value 1</label>
    <label locale="ja">C7V: 値_1</label>
  </config>
    <config name="conf_fieldCode2" required="false" form-type="TEXTFIELD">
    <label>C8F: Field Code 2</label>
    <label locale="ja">C8F: フィールドコード_2</label>
  </config>
  <config name="conf_fieldValue2" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C8V: Value 2</label>
    <label locale="ja">C8V: 値_2</label>
  </config>
    <config name="conf_fieldCode3" required="false" form-type="TEXTFIELD">
    <label>C9F: Field Code 3</label>
    <label locale="ja">C9F: フィールドコード_3</label>
  </config>
  <config name="conf_fieldValue3" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C9V: Value 3</label>
    <label locale="ja">C9V: 値_3</label>
  </config>
    <config name="conf_fieldCode4" required="false" form-type="TEXTFIELD">
    <label>C10F: Field Code 4</label>
    <label locale="ja">C10F: フィールドコード_4</label>
  </config>
  <config name="conf_fieldValue4" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C10V: Value 4</label>
    <label locale="ja">C10V: 値_4</label>
  </config>
    <config name="conf_fieldCode5" required="false" form-type="TEXTFIELD">
    <label>C11F: Field Code 5</label>
    <label locale="ja">C11F: フィールドコード_5</label>
  </config>
  <config name="conf_fieldValue5" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C11V: Value 5</label>
    <label locale="ja">C11V: 値_5</label>
  </config>
    <config name="conf_fieldCode6" required="false" form-type="TEXTFIELD">
    <label>C12F: Field Code 6</label>
    <label locale="ja">C12F: フィールドコード_6</label>
  </config>
  <config name="conf_fieldValue6" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C12V: Value 6</label>
    <label locale="ja">C12V: 値_6</label>
  </config>
  <config name="conf_fieldCode7" required="false" form-type="TEXTFIELD">
    <label>C13F: Field Code 7</label>
    <label locale="ja">C13F: フィールドコード_7</label>
  </config>
  <config name="conf_fieldValue7" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C13V: Value 7</label>
    <label locale="ja">C13V: 値_7</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/kintone-record-add/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/kintone-record-add/</help-page-url>

<script><![CDATA[

const FIELD_NUM = 7; // 扱えるフィールドの数

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const auth = configs.get("conf_auth");
  const basic = configs.get("conf_basic");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const recordIdDef = configs.getObject("conf_recordId");
  const apiToken = httpClient.getOAuth2Token( auth );
  const recordObj = retrieveRecordContent();

  //// == 演算 / Calculating ==
  const apiUri = determineApiUri( domain, guestSpaceId );
  const recordId = addRecord( apiUri, apiToken, basic, appId, recordObj );

  //// == ワークフローデータへの代入 / Data Updating ==
  setData( recordIdDef, recordId );
}

/**
  * configからレコード情報（フィールドコードとフィールドの値）を読み出し、JSON オブジェクトを返す
  * @return {Object} recordObj  レコード情報の JSON オブジェクト
  */
function retrieveRecordContent() {
  const recordObj = {};
  for (let i = 0; i < FIELD_NUM; i++) {
    const fieldCodeConfigName = `conf_fieldCode${i+1}`;
    const fieldValueConfigName = `conf_fieldValue${i+1}`;

    const fieldCode = configs.get( fieldCodeConfigName );
    if ( fieldCode === "" || fieldCode === null ) { // フィールドコードが空
      continue;
    }
    if ( recordObj[fieldCode] !== undefined ) { // フィールドコードの指定が重複
      throw "The same Field Code is set multiple times.";
    }
    
    let fieldValue = configs.get( fieldValueConfigName );
    if ( fieldValue === "" || fieldValue === null ) { // 値が空
      fieldValue = null;
    }
    recordObj[fieldCode] = {
      "value": fieldValue
    };
  }
  return recordObj;
}

/**
  * kintone REST API のレコード追加の URI を決定する
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * ゲストスペース ID が不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @return {String} apiUri  API の URI
  */
function determineApiUri( domain, guestSpaceId ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const domainReg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !domainReg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
  let apiUri = "";
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/record.json`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/record.json`;
  }
  return apiUri;
}

/**
  * kintone REST API にレコード追加の POST リクエストを送信する
  * アプリ ID が空、または不正な文字列であればエラーとする
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {String} appId  アプリ ID
  * @param {Object} recordObj  レコード情報の JSON オブジェクト
  * @return {String} recordId  レコード ID
  */
function addRecord( apiUri, apiToken, basic, appId, recordObj ) {
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
  const body = {
    "app": appId,
    "record": recordObj
  };
  engine.log(`API URI: ${apiUri}`);
  engine.log(`Request Body: ${JSON.stringify(body)}`);
  let request = httpClient.begin()
    .header( "X-Cybozu-API-Token", apiToken )
    .body(JSON.stringify(body), "application/json; charset=UTF-8");
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  const response = request.post( apiUri );
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) { // when error thrown
    engine.log(`---POST request--- ${status}\n${responseStr}`);
    throw `Failed to add record. status: ${status}`;
  }
  const json = JSON.parse(responseStr);
  return json.id;
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

/**
  * データ項目に出力する
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力する文字列
  */
function setData( dataDef, dataString ){
  if(dataDef !==  null){
    engine.setData( dataDef, dataString );
  }
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

<test><![CDATA[

const FIELD_SIZE = 7;

/**
 * 設定の準備
 * @param basic
 * @param domain
 * @param guestSpaceId
 * @param appId
 */
const prepareConfigs = (configs, basic, domain, guestSpaceId, appId) => {
  configs.put('conf_auth', 'kintone');  
  configs.put('conf_basic', basic);
  configs.put('conf_domain', domain);
  configs.put('conf_guestSpaceId', guestSpaceId);
  configs.put('conf_appId', appId);
  
  // 文字型データ項目を準備して、config に指定
  const recordIdDef = engine.createDataDefinition('レコードの ID', 1, 'q_record_id', 'STRING_TEXTAREA');
  configs.putObject('conf_recordId', recordIdDef);
  // 文字型データ項目の値（レコード ID を保存するデータ項目）を指定
  engine.setData(recordIdDef, '事前文字列');

  
  return recordIdDef;
};



/**
 * ドメインが不正な文字列でエラーになる場合
 */
test('Invalid Kintone domain', () => {
  const data = ['test1', '', '', '', '', '', ''];
  prepareConfigs(configs, '', 'invalidDomain', '', '1' );

  configs.put(`conf_fieldCode1`, `フィールドコード_1`);
  configs.put(`conf_fieldValue1`, data[0]);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  expect(execute).toThrow('Invalid Kintone domain.');
});


/**
 * ゲストスペース ID が不正な文字列でエラーになる場合
 */
test('Invalid Guest Space ID', () => {
  const data = ['test1', '', '', '', '', '', ''];
  prepareConfigs(configs, '', 'test.cybozu.com', '-1', '2');

  configs.put(`conf_fieldCode1`, `フィールドコード_1`);
  configs.put(`conf_fieldValue1`, data[0]);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  expect(execute).toThrow('Invalid Guest Space ID.');
});


/**
 * アプリ ID が不正な文字列でエラーになる場合
 */
test('Invalid App ID', () => {
  const data = ['test1', '', '', '', '', '', ''];
  prepareConfigs(configs, '', 'test.kintone.com', '1', '2.3');

  configs.put(`conf_fieldCode1`, `フィールドコード_1`);
  configs.put(`conf_fieldValue1`, data[0]);
  
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  expect(execute).toThrow('Invalid App ID.');
});


/**
 * フィールドコードが重複して指定されていて、エラーになる場合
 */
test('The same Field Code is set multiple times', () => {
  const data = ['test1', 'test2', 'test3', 'test4', 'test5', 'test6', 'test7'];
  prepareConfigs(configs, '', 'test.cybozu.com', '1', '1');
 
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, `フィールドコード_${i+1}`);
    configs.put(`conf_fieldValue${i+1}`, data[i]);	
  }; 

  // 2 番目のフィールドコードを 1 番目と同様に
  configs.put('conf_fieldCode2', 'フィールドコード_1'); 

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  expect(execute).toThrow('The same Field Code is set multiple times.');
});



/**
 * リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param domain
 * @param guestSpaceId
 * @param appId
 * @param recordIdsParameter
 */
const assertRequest = ({url, method, body}, domain, guestSpaceId, appId, recordObj) => {
  expect(method).toEqual('POST');

  if ( guestSpaceId === "" || guestSpaceId === null ) {
    expect(url).toEqual(`https://${domain}/k/v1/record.json`);
  } else {
    expect(url).toEqual(`https://${domain}/k/guest/${guestSpaceId}/v1/record.json`);
  }
  
  const bodyObj = JSON.parse(body);
  expect(bodyObj.app).toEqual(appId);
  expect(bodyObj.record).toEqual(recordObj);

};


/**
 * POST リクエスト失敗
 */
test('POST Failed', () => {
  const data = ['test1', '', '', '', '', '', ''];
  prepareConfigs(configs, '', 'test.cybozu.com', '', '1');

  const recordObj = {};  
  
  configs.put(`conf_fieldCode1`, `フィールドコード_1`);
  configs.put(`conf_fieldValue1`, data[0]);

  recordObj[`フィールドコード_1`] = {
    "value": data[0]
  };

  httpClient.setRequestHandler((request) => {        
    assertRequest(request, 'test.cybozu.com', '', '1', recordObj);       
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  expect(execute).toThrow('Failed to add record. status: 400');
});



/**
 * レコード追加成功
 * 正しいフィールドコードを７つの項目全てに指定
 */
test('Sucsess - 7fieldCodes', () => {
  const data = ['test1', 'test2', 'test3', 'test4', 'test5', 'test6', 'test7'];
  const recordIdDef = prepareConfigs(configs, '', 'test.cybozu.com', '', '1');

  const recordObj = {};  
  
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, `フィールドコード_${i+1}`);
    configs.put(`conf_fieldValue${i+1}`, data[i]);
	
    recordObj[`フィールドコード_${i+1}`] = {
      "value": data[i]
    };
  };
  
  httpClient.setRequestHandler((request) => {        
    assertRequest(request, 'test.cybozu.com', '', '1', recordObj);
    const responseObj = {
      "id": "2"
    };        
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(recordIdDef)).toEqual('2');
});



/**
 * レコード追加成功（指定したフィールドコードに空値のレコードが設定される）
 * 正しいフィールドコードを１つ指定
 * ゲストスペースのアプリ
 * basic 認証設定
 * C8V: 値_2 が空白
 */
test('Sucsess - fieldValue is empty', () => {
  const recordIdDef = prepareConfigs(configs, 'basic', 'test.cybozu.com', '1', '1');

  const recordObj = {};  
  
  configs.put(`conf_fieldCode2`, `フィールドコード_2`);
  configs.put(`conf_fieldValue2`, '');
	
  recordObj[`フィールドコード_2`] = {
    "value": null
  };
  
  httpClient.setRequestHandler((request) => {        
    assertRequest(request, 'test.cybozu.com', '1', '1', recordObj);
    const responseObj = {
      "id": "3"
    };        
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(recordIdDef)).toEqual('3');
});



/**
 * レコード追加成功
 * 全てのフィールドコードが空白（値の設定はするが、対応するフィールドコードの設定が空）
 */
test('Sucsess - 7fieldCodes are empty', () => {
  const data = ['test1', 'test2', 'test3', 'test4', 'test5', 'test6', 'test7'];
  const recordIdDef = prepareConfigs(configs, '', 'test.cybozu.com', '', '1');

  
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_fieldCode${i+1}`, ``); //全てのフィールドコードが空白
    configs.put(`conf_fieldValue${i+1}`, data[i]);	
  };
  const recordObj = {}; //フィールドコードの設定が空の場合、値の設定が無視される
  
  httpClient.setRequestHandler((request) => {        
    assertRequest(request, 'test.cybozu.com', '', '1', recordObj);
    const responseObj = {
      "id": "4"
    };        
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
  });

  // <script> のスクリプトを実行
  execute();

  // 文字型データ項目の値をチェック
  expect(engine.findData(recordIdDef)).toEqual('4');
});


]]></test>


</service-task-definition>
