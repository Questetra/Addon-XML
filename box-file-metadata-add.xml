<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-05-13</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Add Metadata to File</label>
    <label locale="ja">Box: ファイルにメタデータ追加</label>
    <summary>This item adds metadata to the specified file on Box, using a metadata template defined within your enterprise.</summary>
    <summary locale="ja">この工程は、会社内で定義されたメタデータテンプレートを利用して、Box 上のファイルにメタデータを追加します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-metadata-add/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-metadata-add/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: File ID to add metadata to</label>
            <label locale="ja">C2: メタデータを追加するファイル ID</label>
        </config>
        <config name="conf_TemplateName" required="true" form-type="TEXTFIELD">
            <label>C3: Display Name of Metadata Template</label>
            <label locale="ja">C3: メタデータテンプレートの表示名</label>
        </config>
        <config name="conf_FieldName1" form-type="TEXTFIELD">
            <label>C-K1: Display Name of Field 1</label>
            <label locale="ja">C-K1: フィールド 1 の表示名</label>
        </config>
        <config name="conf_FieldValue1" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V1: Value for Field 1</label>
            <label locale="ja">C-V1: フィールド 1 の値</label>
        </config>
        <config name="conf_FieldName2" form-type="TEXTFIELD">
            <label>C-K2: Display Name of Field 2</label>
            <label locale="ja">C-K2: フィールド 2 の表示名</label>
        </config>
        <config name="conf_FieldValue2" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V2: Value for Field 2</label>
            <label locale="ja">C-V2: フィールド 2 の値</label>
        </config>
        <config name="conf_FieldName3" form-type="TEXTFIELD">
            <label>C-K3: Display Name of Field 3</label>
            <label locale="ja">C-K3: フィールド 3 の表示名</label>
        </config>
        <config name="conf_FieldValue3" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V3: Value for Field 3</label>
            <label locale="ja">C-V3: フィールド 3 の値</label>
        </config>
        <config name="conf_FieldName4" form-type="TEXTFIELD">
            <label>C-K4: Display Name of Field 4</label>
            <label locale="ja">C-K4: フィールド 4 の表示名</label>
        </config>
        <config name="conf_FieldValue4" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V4: Value for Field 4</label>
            <label locale="ja">C-V4: フィールド 4 の値</label>
        </config>
        <config name="conf_FieldName5" form-type="TEXTFIELD">
            <label>C-K5: Display Name of Field 5</label>
            <label locale="ja">C-K5: フィールド 5 の表示名</label>
        </config>
        <config name="conf_FieldValue5" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V5: Value for Field 5</label>
            <label locale="ja">C-V5: フィールド 5 の値</label>
        </config>
        <config name="conf_FieldName6" form-type="TEXTFIELD">
            <label>C-K6: Display Name of Field 6</label>
            <label locale="ja">C-K6: フィールド 6 の表示名</label>
        </config>
        <config name="conf_FieldValue6" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V6: Value for Field 6</label>
            <label locale="ja">C-V6: フィールド 6 の値</label>
        </config>
        <config name="conf_FieldName7" form-type="TEXTFIELD">
            <label>C-K7: Display Name of Field 7</label>
            <label locale="ja">C-K7: フィールド 7 の表示名</label>
        </config>
        <config name="conf_FieldValue7" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V7: Value for Field 7</label>
            <label locale="ja">C-V7: フィールド 7 の値</label>
        </config>
        <config name="conf_FieldName8" form-type="TEXTFIELD">
            <label>C-K8: Display Name of Field 8</label>
            <label locale="ja">C-K8: フィールド 8 の表示名</label>
        </config>
        <config name="conf_FieldValue8" form-type="SELECT" select-data-type="STRING|DECIMAL|DATE|SELECT">
            <label>C-V8: Value for Field 8</label>
            <label locale="ja">C-V8: フィールド 8 の値</label>
        </config>
    </configs>

    <script><![CDATA[

const FIELD_NUM = 8; // 扱えるフィールドの数

main();
function main(){
    const oauth2 = configs.get('conf_OAuth2');
    const fileId = decideFileId();
    const templateName = configs.get('conf_TemplateName');
    const metadataDataDefMap = retrieveMetadataDataDefMap();

    const {templateKey, fields} = searchTemplate(oauth2, templateName);
    const metadataObj = buildMetadataObj(metadataDataDefMap, fields);
    addMetadata(oauth2, fileId, templateKey, metadataObj);
}

/**
  * ファイル ID を config から読み出す
  * @return {String} fileId ファイル ID
  */
function decideFileId(){
    const fileId = engine.findData(configs.getObject('conf_FileId'));
    if (fileId === '' || fileId === null) {
        throw 'File ID is blank.';
    }
    return fileId;
}

/**
  * メタデータの情報を config から読み出し、Map に格納する
  * @return {Map<String, ProcessDataDefinitionView>} metadataDataDefMap フィールド名とデータ項目の Map
  */
function retrieveMetadataDataDefMap(){
    const metadataDataDefMap = new Map();
    for (let i = 0; i < FIELD_NUM; i++) {
        const fieldName = configs.get(`conf_FieldName${i+1}`);
        const fieldValueDataDef = configs.getObject(`conf_FieldValue${i+1}`);
        if (fieldName === '' || fieldName === null) { // フィールド名が空
            continue;
        }
        if (fieldValueDataDef === null) { // データ項目が指定されていない
            continue;
        }
        if (metadataDataDefMap.has(fieldName)) { // フィールド名の指定が重複
            throw `The Field Name "${fieldName}" is set multiple times.`;
        }
        metadataDataDefMap.set(fieldName, fieldValueDataDef);
    }
    return metadataDataDefMap;
}

/**
  * テンプレートを表示名で検索し、最初に一致した非表示でないテンプレートを返す
  * @param {String} oauth OAuth2 設定
  * @param {String} templateName テンプレートの表示名
  * @return {Object} template テンプレートオブジェクト
  */
function searchTemplate(oauth2, templateName) {
    const url = 'https://api.box.com/2.0/metadata_templates/enterprise';
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('limit', '500') // 現時点で企業内に登録できるテンプレート数は 500 まで
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to search template. status:${status}`;
    }
    const {entries} = JSON.parse(responseStr);
    // 名前が一致し、かつ hidden パラメータが false のものを検索
    const template = entries.find(template => {
        return (template.displayName === templateName) && !template.hidden;
    });
    if (template === undefined) {
        throw `Template with display name "${templateName}" not found.`;
    }
    return template;
}

/**
  * メタデータオブジェクトを生成する
  * フィールド一覧から該当するフィールドを表示名で検索し、最初に一致した非表示でないフィールドのキーを使用する
  * データ項目の型とフィールドの型が一致しない場合はエラー
  * @param {Map<String, ProcessDataDefinitionView>} metadataDataDefMap フィールド名とデータ項目の Map
  * @param {Array<Object>} fields フィールド一覧
  * @return {Object} metadataObj メタデータオブジェクト
  */
function buildMetadataObj(metadataDataDefMap, fields) {
    const metadataObj = {};
    metadataDataDefMap.forEach((dataDef, fieldName) => {
        // 名前が一致し、かつ hidden パラメータが false のものを検索
        const field = fields.find(field => {
            return (field.displayName === fieldName) && !field.hidden;
        });
        if (field === undefined) {
            throw `Field with display name "${fieldName}" not found.`;
        }
        let value = engine.findData(dataDef);
        // フィールドの型とデータ項目の型の一致を確認し、値を整形する
        switch (field.type) {
            case 'string':
                if (!dataDef.matchDataType('STRING')) {
                    throw 'The type of "${fieldName}" is string, but the data item is not STRING.';
                }
                break;
            case 'float':
                if (!dataDef.matchDataType('DECIMAL')) {
                    throw 'The type of "${fieldName}" is float, but the data item is not DECIMAL.';
                }
                if (value !== null) {
                    value = value.floatValue(); // BigDecimal から float に変換。要修正
                }
                break;
            case 'date':
                if (!dataDef.matchDataType('DATE')) {
                    throw 'The type of "${fieldName}" is date, but the data item is not DATE.';
                }
                if (value !== null) {
                    // AddableDate から指定形式の文字列に変換
                    value = dateFormatter.format("yyyy-MM-dd'T'00:00:00", value) + 'Z';
                }
                break;
            case 'enum':
                if (!dataDef.matchDataType('SELECT_SINGLE')) {
                    throw 'The type of "${fieldName}" is enum, but the data item is not SELECT_SINGLE.';
                }
                if (value.size() === 0) { // 未選択の場合、null をセット
                    value = null;
                } else { // 選択されている場合、選択肢の表示名をセット
                    value = value.get(0).getDisplay();
                }
                break;
            case 'multiSelect':
                if (!dataDef.matchDataType('SELECT_CHECKBOX')) {
                    throw 'The type of "${fieldName}" is multiSelect, but the data item is not SELECT_CHECKBOX.';
                }
                if (value.size() === 0) { // 未選択の場合、null をセット
                    value = null;
                } else { // 選択されている場合、選択肢の表示名をセット
                    const displayNames = [];
                    value.forEach(item => {
                        displayNames.push(item.getDisplay());
                    });
                    value = displayNames;
                }
                break;
             default: // 現状はありえないが、Box のメタデータのフィールド型が追加された場合に発生
                throw `The type of "${fieldName}" is unknown: ${field.type}`;
        }
        if (value !== null) { // 値が null でない場合にのみ、オブジェクトに追加
            metadataObj[field.key] = value;
        }
    });
    return metadataObj;
}

/**
  * メタデータを追加
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId ファイル ID
  * @param {String} templateKey テンプレートキー
  * @param {Object} metadataObj 追加するメタデータ
  */
function addMetadata(oauth2, fileId, templateKey, metadataObj) {
    const url = `https://api.box.com/2.0/files/${encodeURIComponent(fileId)}/metadata/enterprise/${encodeURIComponent(templateKey)}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(metadataObj), 'application/json; charset=UTF-8')
        .post(url);
    const status = response.getStatusCode();
    if (status !== 201) {
        engine.log(response.getResponseAsString());
        throw `Failed to add metadata. status:${status}`;
    }
}

    ]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

</service-task-definition>