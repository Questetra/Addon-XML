<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-05-26</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Add Metadata to File</label>
    <label locale="ja">Box: ファイルにメタデータ追加</label>
    <summary>This item adds metadata to the specified file on Box, using a metadata template defined within your
        enterprise. An error occurs if the specified metadata template is already added to the file.
    </summary>
    <summary locale="ja">この工程は、会社内で定義されたメタデータテンプレートを利用して、Box 上のファイルにメタデータを追加します。
        指定したメタデータテンプレートがすでにファイルに追加済みの場合は、エラーになります。
    </summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-metadata-add/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-metadata-add/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: File ID to add metadata to</label>
            <label locale="ja">C2: メタデータを追加するファイル ID</label>
        </config>
        <config name="conf_TemplateName" required="true" form-type="TEXTFIELD">
            <label>C3: Display Name of Metadata Template</label>
            <label locale="ja">C3: メタデータテンプレートの表示名</label>
        </config>
        <config name="conf_FieldName1" form-type="TEXTFIELD">
            <label>C-K1: Display Name of Field 1</label>
            <label locale="ja">C-K1: フィールド 1 の表示名</label>
        </config>
        <config name="conf_FieldValue1" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V1: Value for Field 1</label>
            <label locale="ja">C-V1: フィールド 1 の値</label>
        </config>
        <config name="conf_FieldName2" form-type="TEXTFIELD">
            <label>C-K2: Display Name of Field 2</label>
            <label locale="ja">C-K2: フィールド 2 の表示名</label>
        </config>
        <config name="conf_FieldValue2" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V2: Value for Field 2</label>
            <label locale="ja">C-V2: フィールド 2 の値</label>
        </config>
        <config name="conf_FieldName3" form-type="TEXTFIELD">
            <label>C-K3: Display Name of Field 3</label>
            <label locale="ja">C-K3: フィールド 3 の表示名</label>
        </config>
        <config name="conf_FieldValue3" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V3: Value for Field 3</label>
            <label locale="ja">C-V3: フィールド 3 の値</label>
        </config>
        <config name="conf_FieldName4" form-type="TEXTFIELD">
            <label>C-K4: Display Name of Field 4</label>
            <label locale="ja">C-K4: フィールド 4 の表示名</label>
        </config>
        <config name="conf_FieldValue4" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V4: Value for Field 4</label>
            <label locale="ja">C-V4: フィールド 4 の値</label>
        </config>
        <config name="conf_FieldName5" form-type="TEXTFIELD">
            <label>C-K5: Display Name of Field 5</label>
            <label locale="ja">C-K5: フィールド 5 の表示名</label>
        </config>
        <config name="conf_FieldValue5" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V5: Value for Field 5</label>
            <label locale="ja">C-V5: フィールド 5 の値</label>
        </config>
        <config name="conf_FieldName6" form-type="TEXTFIELD">
            <label>C-K6: Display Name of Field 6</label>
            <label locale="ja">C-K6: フィールド 6 の表示名</label>
        </config>
        <config name="conf_FieldValue6" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V6: Value for Field 6</label>
            <label locale="ja">C-V6: フィールド 6 の値</label>
        </config>
        <config name="conf_FieldName7" form-type="TEXTFIELD">
            <label>C-K7: Display Name of Field 7</label>
            <label locale="ja">C-K7: フィールド 7 の表示名</label>
        </config>
        <config name="conf_FieldValue7" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V7: Value for Field 7</label>
            <label locale="ja">C-V7: フィールド 7 の値</label>
        </config>
        <config name="conf_FieldName8" form-type="TEXTFIELD">
            <label>C-K8: Display Name of Field 8</label>
            <label locale="ja">C-K8: フィールド 8 の表示名</label>
        </config>
        <config name="conf_FieldValue8" form-type="TEXTFIELD" el-enabled="true">
            <label>C-V8: Value for Field 8</label>
            <label locale="ja">C-V8: フィールド 8 の値</label>
        </config>
    </configs>

    <script><![CDATA[

const FIELD_NUM = 8; // 扱えるフィールドの数

main();
function main(){
    const oauth2 = configs.get('conf_OAuth2');
    const fileId = decideFileId();
    const templateName = configs.get('conf_TemplateName');
    const metadataMap = retrieveMetadataMap();

    const {templateKey, fields} = searchTemplate(oauth2, templateName);
    const metadataObj = buildMetadataObj(metadataMap, fields);
    addMetadata(oauth2, fileId, templateKey, metadataObj);
}

/**
  * ファイル ID を config から読み出す
  * @return {String} fileId ファイル ID
  */
function decideFileId() {
    const fileId = engine.findData(configs.getObject('conf_FileId'));
    if (fileId === '' || fileId === null) {
        throw 'File ID is blank.';
    }
    return fileId;
}

/**
  * メタデータの情報を config から読み出し、Map に格納する
  * @return {Map<String, String>} metadataMap フィールド名と値の Map
  */
function retrieveMetadataMap() {
    const metadataMap = new Map();
    for (let i = 0; i < FIELD_NUM; i++) {
        const fieldName = configs.get(`conf_FieldName${i+1}`);
        const fieldValue = configs.get(`conf_FieldValue${i+1}`);
        if (fieldName === '' || fieldName === null) { // フィールド名が空
            continue;
        }
        if (fieldValue === '' || fieldValue === null) { // 値が空
            continue;
        }
        if (metadataMap.has(fieldName)) { // フィールド名の指定が重複
            throw `The Field Name "${fieldName}" is set multiple times.`;
        }
        metadataMap.set(fieldName, fieldValue);
    }
    return metadataMap;
}

/**
  * テンプレートを表示名で検索し、一致した非表示でないテンプレートを返す
  * 同名のテンプレートが複数ある場合はエラー
  * @param {String} oauth OAuth2 設定
  * @param {String} templateName テンプレートの表示名
  * @return {Object} template テンプレートオブジェクト
  */
function searchTemplate(oauth2, templateName) {
    const url = 'https://api.box.com/2.0/metadata_templates/enterprise';
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('limit', '500') // 現時点で企業内に登録できるテンプレート数は 500 まで
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to search template. status:${status}`;
    }
    const {entries} = JSON.parse(responseStr);
    // 名前が一致し、かつ hidden パラメータが false のものを検索
    const result = entries.filter(template => {
        return (template.displayName === templateName) && !template.hidden;
    });
    if (result.length === 0) {
        throw `Template with display name "${templateName}" not found.`;
    }
    if (result.length > 1) {
        throw `Multiple templates with display name "${templateName}" found.`;
    }
    return result[0];
}

/**
  * メタデータオブジェクトを生成する
  * フィールド一覧を表示名で検索し、一致した非表示でないフィールドのキーを使用する
  * 同名のフィールドが複数ある場合はエラー
  * フィールドの型と値の書式が一致しない場合はエラー
  * @param {Map<String, String>} metadataMap フィールド名と値の Map
  * @param {Array<Object>} fields フィールド一覧
  * @return {Object} metadataObj メタデータオブジェクト
  */
function buildMetadataObj(metadataMap, fields) {
    const metadataObj = {};
    metadataMap.forEach((fieldValue, fieldName) => {
        // 名前が一致し、かつ hidden パラメータが false のものを検索
        const result = fields.filter(field => {
            return (field.displayName === fieldName) && !field.hidden;
        });
        if (result.length === 0) {
            throw `Field with display name "${fieldName}" not found.`;
        }
        if (result.length > 1) {
            throw `Multiple fields with display name "${fieldName}" found.`;
        }
        const field = result[0];
        let value = fieldValue;
        // フィールドの型とデータ項目の型の一致を確認し、値を整形する
        switch (field.type) {
            case 'string':
                break;
            case 'float':
                value = checkAndParseFloat(fieldName, value);
                break;
            case 'date':
                value = checkAndParseDate(fieldName, value);
                break;
            case 'enum':
                checkOptions(fieldName, value, field.options);
                break;
            case 'multiSelect': // 1 つだけ選択する場合にのみ対応
                checkOptions(fieldName, value, field.options);
                value = Array.of(value);
                break;
             default: // 現状はありえないが、Box のメタデータのフィールド型が追加された場合に発生
                throw `The type of "${fieldName}" is unknown: ${field.type}`;
        }
        // オブジェクトに追加
        metadataObj[field.key] = value;
    });
    return metadataObj;
}

/**
  * 文字列を数値に変換
  * 小数点以外の文字が含まれる場合はエラー
  * @param {String} fieldName フィールド名（エラー出力用）
  * @param {String} value 入力文字列
  * @return {Number} parsedValue 数値
  */
function checkAndParseFloat(fieldName, value) {
    const regex = /^\d+(\.\d+)?$/;
    if (!regex.test(value)) {
        throw `The type of "${fieldName}" is float, but the value "${value}" is invalid as float.`;
    }
    // 文字列を float にパース
    return parseFloat(value);
}

/**
  * 文字列を yyyy-MM-dd'T'HH:mm:ssZ 形式の文字列に変換
  * 入力が yyyy-MM-dd 形式の日付でない場合はエラー
  * @param {String} fieldName フィールド名（エラー出力用）
  * @param {String} value 入力文字列
  * @return {String} parsedValue 指定形式の文字列
  */
function checkAndParseDate(fieldName, value) {
    const regex = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    const matched = value.match(regex);
    if (matched === null) { // yyyy-MM-dd 形式でない
        throw `The type of "${fieldName}" is date, but the value "${value}" is not in the format of "yyyy-MM-dd".`;
    }
    // 日付として不正でないかをチェック
    // Date にパースするだけでは6月31日なども許可されてしまうので、年月日それぞれをチェック
    const y = parseInt(matched[1]);
    const m = parseInt(matched[2]) -1;
    const d  = parseInt(matched[3]);
    const date = new Date(y, m, d);
    if (y !== date.getFullYear() || m !== date.getMonth() || d !== date.getDate()) {
        throw `The type of "${fieldName}" is date, but the value "${value}" is invalid as date.`;
    }
    return `${value}T00:00:00Z`;
}

/**
  * 入力文字列が選択肢として存在するかチェックし、存在しない場合はエラー
  * 選択肢の表示名(キー)が重複することは、Box の仕様としてありえない
  * @param {String} fieldName フィールド名（エラー出力用）
  * @param {String} value 入力文字列
  * @param {Array<Object>} options 選択肢一覧
  */
function checkOptions(fieldName, value, options) {
    const result = options.find(option => option.key === value);
    if (result === undefined) {
        throw `The value "${value}" is not in the options of the field "${fieldName}".`;
    }
}

/**
  * メタデータを追加
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId ファイル ID
  * @param {String} templateKey テンプレートキー
  * @param {Object} metadataObj 追加するメタデータ
  */
function addMetadata(oauth2, fileId, templateKey, metadataObj) {
    const url = `https://api.box.com/2.0/files/${encodeURIComponent(fileId)}/metadata/enterprise/${encodeURIComponent(templateKey)}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(metadataObj), 'application/json; charset=UTF-8')
        .post(url);
    const status = response.getStatusCode();
    if (status !== 201) {
        engine.log(response.getResponseAsString());
        throw `Failed to add metadata. status:${status}`;
    }
}

    ]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[

/** 扱えるフィールドの数 */
const FIELD_SIZE = 8;

/**
 * 設定の準備
 * @param fileId
 * @param templateName
 * @param fieldNames
 * @param fieldValues
 */
const prepareConfigs = (fileId, templateName, fieldNames, fieldValues) => {
    configs.put('conf_OAuth2', 'Box');

    // ファイル ID を保存した文字型データ項目（単一行）を準備し、設定
    const fileIdDef = engine.createDataDefinition('ファイル ID', 1, 'q_FileId', 'STRING_TEXTFIELD');
    engine.setData(fileIdDef, fileId);
    configs.putObject('conf_FileId', fileIdDef);

    configs.put('conf_TemplateName', templateName);

    for (let i = 0; i < FIELD_SIZE; i++) {
        configs.put(`conf_FieldName${i+1}`, fieldNames[i]);
        configs.put(`conf_FieldValue${i+1}`, fieldValues[i]);
    }
}

/** フィールド名一覧のサンプル */
const SAMPLE_FIELD_NAMES = ['文字列1', '文字列2', '文字列3', '文字列4', '数値', '日付', '単一選択', '複数選択'];

/** フィールドの値一覧のサンプル */
const SAMPLE_FIELD_VALUES = ['文字列1の値', '文字列2の値', '文字列3の値', '文字列4の値', '1000', '2020-01-01', '単一選択の選択肢A', '複数選択の選択肢C'];

/** テンプレートのサンプル */
const SAMPLE_TEMPLATE = {
    "templateKey": "template1",
    "displayName": "テンプレート1",
    "hidden": false,
    "fields": [
        {
            "type": "string",
            "key": "field1",
            "displayName": "使用しないフィールド",
            "hidden": false
        },
        {
            "type": "string",
            "key": "field2",
            "displayName": "文字列1",
            "hidden": false
        },
        {
            "type": "string",
            "key": "field3",
            "displayName": "文字列2",
            "hidden": false
        },
        {
            "type": "string",
            "key": "field4",
            "displayName": "文字列3",
            "hidden": false
        },
        {
            "type": "string",
            "key": "field5",
            "displayName": "文字列4",
            "hidden": false
        },
        {
            "type": "float",
            "key": "field6",
            "displayName": "数値",
            "hidden": false
        },
        {
            "type": "date",
            "key": "field7",
            "displayName": "日付",
            "hidden": false
        },
        {
            "type": "enum",
            "key": "field8",
            "displayName": "単一選択",
            "hidden": false,
            "options": [
                {
                  "key": "単一選択の選択肢A"
                },
                {
                  "key": "単一選択の選択肢B"
                }
            ]
        },
        {
            "type": "multiSelect",
            "key": "field9",
            "displayName": "複数選択",
            "hidden": false,
            "options": [
                {
                    "key": "複数選択の選択肢A"
                },
                {
                    "key": "複数選択の選択肢B"
                },
                {
                    "key": "複数選択の選択肢C"
                }
            ]
        }
    ]
};

/** サンプルのフィールド名、値、テンプレートを指定した場合のメタデータオブジェクト */
const SAMPLE_METADATA_OBJ = {
    'field2': '文字列1の値',
    'field3': '文字列2の値',
    'field4': '文字列3の値',
    'field5': '文字列4の値',
    'field6': 1000,
    'field7': '2020-01-01T00:00:00Z',
    'field8': '単一選択の選択肢A',
    'field9': [
        '複数選択の選択肢C'
    ]
};

/**
 * ファイル ID の値が空でエラー
 */
test('File ID is blank', () => {
    prepareConfigs(null, 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);
    expect(execute).toThrow('File ID is blank.');
});

/**
 * フィールド名が重複していてエラー（1番目と3番目が重複）
 */
test('Same field name set multiple times - 1st and 3rd', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);
    configs.put('conf_FieldName3', '文字列1');
    expect(execute).toThrow('The Field Name "文字列1" is set multiple times.');
});

/**
 * フィールド名が重複していてエラー（5番目と8番目が重複）
 */
test('Same field name set multiple times - 5th and 8th', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);
    configs.put('conf_FieldName5', '複数選択');
    expect(execute).toThrow('The Field Name "複数選択" is set multiple times.');
});

/**
 * テンプレート一覧を取得する API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 */
const assertGetTemplatesRequest = ({url, method}) => {
    expect(url).toEqual(`https://api.box.com/2.0/metadata_templates/enterprise?limit=500`);
    expect(method).toEqual('GET');
};

/**
 * テンプレート一覧を取得する API リクエストのレスポンスを作成する
 * @param templates
 * @return Object
 */
const buildGetTemplatesRes = (...templates) => {
    const responseObj = {
        "entries": []
    };
    templates.forEach(template => responseObj.entries.push(template));
    return responseObj;
};

/**
 * テンプレート一覧を取得する API リクエストで失敗
 */
test('Fail in API Request to get metadata templates', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    httpClient.setRequestHandler((request) => {
        assertGetTemplatesRequest(request);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to search template. status:400');
});

/**
 * 企業内で定義されたテンプレートが 1 つも存在しない
 */
test('No templates found', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes();
    httpClient.setRequestHandler((request) => {
        assertGetTemplatesRequest(request);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    expect(execute).toThrow('Template with display name "テンプレート1" not found.');
});

/**
 * 指定した表示名のテンプレートが存在しない
 */
test('Template not found', () => {
    prepareConfigs('fileId-1', 'テンプレート2', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE);
    httpClient.setRequestHandler((request) => {
        assertGetTemplatesRequest(request);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    expect(execute).toThrow('Template with display name "テンプレート2" not found.');
});

/**
 * 指定した表示名のテンプレートは存在するが、非表示に設定されている
 */
test('Template is hidden', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);


    const template = JSON.parse(JSON.stringify(SAMPLE_TEMPLATE)); // ディープコピー
    template.hidden = true;
    const responseObj = buildGetTemplatesRes(template);
    httpClient.setRequestHandler((request) => {
        assertGetTemplatesRequest(request);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    expect(execute).toThrow('Template with display name "テンプレート1" not found.');
});

/**
 * 指定した表示名のテンプレートが複数存在する
 */
test('Multiple templates found', () => {
    prepareConfigs('fileId-1', 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE, SAMPLE_TEMPLATE);
    httpClient.setRequestHandler((request) => {
        assertGetTemplatesRequest(request);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    expect(execute).toThrow('Multiple templates with display name "テンプレート1" found.');
});

/**
 * メタデータを追加する API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param templateKey
 * @param metadataObj
 */
const assertPostMetadataRequest = ({url, method, contentType, body}, fileId, templateKey, metadataObj) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${encodeURIComponent(fileId)}/metadata/enterprise/${encodeURIComponent(templateKey)}`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    expect(body).toEqual(JSON.stringify(metadataObj));
};

/**
 * メタデータを追加する API リクエストで失敗
 */
test('Fail in API Request to add metadata', () => {
    const fileId = 'fileId-1';
    prepareConfigs(fileId, 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE);
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetTemplatesRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
        }
        assertPostMetadataRequest(request, fileId, SAMPLE_TEMPLATE.templateKey, SAMPLE_METADATA_OBJ);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    expect(execute).toThrow('Failed to add metadata. status:400');
});

/**
 * メタデータの追加に成功
 */
test('Succeed to add metadata', () => {
    const fileId = 'fileId-1';
    prepareConfigs(fileId, 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE);
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetTemplatesRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
        }
        assertPostMetadataRequest(request, fileId, SAMPLE_TEMPLATE.templateKey, SAMPLE_METADATA_OBJ);
        return httpClient.createHttpResponse(201, 'application/json', '{}');
    });

    execute();
});

/**
 * メタデータの追加に成功
 * 指定した表示名のテンプレートは複数存在するが、1 つを除き非表示の場合
 */
test('Succeed to add metadata - multiple templates found but only one visible', () => {
    const fileId = 'fileId-2';
    prepareConfigs(fileId, 'テンプレート1', SAMPLE_FIELD_NAMES, SAMPLE_FIELD_VALUES);

    const hiddenTemplate = JSON.parse(JSON.stringify(SAMPLE_TEMPLATE)); // ディープコピー
    hiddenTemplate.hidden = true;
    const responseObj = buildGetTemplatesRes(hiddenTemplate, SAMPLE_TEMPLATE, hiddenTemplate);
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetTemplatesRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
        }
        assertPostMetadataRequest(request, fileId, SAMPLE_TEMPLATE.templateKey, SAMPLE_METADATA_OBJ);
        return httpClient.createHttpResponse(201, 'application/json', '{}');
    });

    execute();
});

/** フィールド名、値に設定するための、すべて空文字列の配列 */
const ALL_BLANK = new Array(FIELD_SIZE).fill('');

/**
 * メタデータの追加に成功
 * フィールド名がすべて空の場合
 */
test('Succeed to add metadata - no field names set', () => {
    const fileId = 'fileId-3';
    prepareConfigs(fileId, 'テンプレート1', ALL_BLANK, SAMPLE_FIELD_VALUES);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE);
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetTemplatesRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
        }
        assertPostMetadataRequest(request, fileId, SAMPLE_TEMPLATE.templateKey, {}); // メタデータオブジェクトは空
        return httpClient.createHttpResponse(201, 'application/json', '{}');
    });

    execute();
});

/**
 * メタデータの追加に成功
 * フィールドの値がすべて空の場合
 */
test('Succeed to add metadata - no field values set', () => {
    const fileId = 'fileId-3';
    prepareConfigs(fileId, 'テンプレート1', SAMPLE_FIELD_NAMES, ALL_BLANK);

    const responseObj = buildGetTemplatesRes(SAMPLE_TEMPLATE);
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetTemplatesRequest(request);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
        }
        assertPostMetadataRequest(request, fileId, SAMPLE_TEMPLATE.templateKey, {}); // メタデータオブジェクトは空
        return httpClient.createHttpResponse(201, 'application/json', '{}');
    });

    execute();
});

    ]]></test>

</service-task-definition>