<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2023-12-22</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Box: Delete Collaboration</label>
<label locale="ja">Box: コラボレーション削除</label>
<summary>This item deletes a collaboration with the specified user from the specified file or folder on Box. The user is specified by the email address. If all the information does not match, it cannot be deleted.</summary>
<summary locale="ja">この工程は、Box の指定ファイルもしくはフォルダから、指定ユーザとのコラボレーションを削除します。ユーザはメールアドレスで指定します。全ての情報が一致しない場合は削除できません。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-collaboration-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-collaboration-delete/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_EmailAddress" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Email address of the Box user to delete a collaboration with</label>
    <label locale="ja">C2: コラボレーションを削除する Box ユーザのメールアドレス</label>
  </config>
  <config name="conf_Role" required="true" form-type="SELECT_ITEM">
    <label>C3: Role</label>
    <label locale="ja">C3: ロール</label>
      <item value="editor">
        <label>Editor</label>
        <label locale="ja">編集者</label>
        </item>
      <item value="viewer">
        <label>Viewer</label>
        <label locale="ja">ビューア</label>
        </item>
  </config>
  <config name="conf_ItemType" required="true" form-type="SELECT_ITEM">
    <label>C4: Item type (file or folder)</label>
    <label locale="ja">C4: 項目の種類（ファイルまたはフォルダ）</label>
      <item value="files">
        <label>File</label>
        <label locale="ja">ファイル</label>
      </item>
      <item value="folders">
        <label>Folder</label>
        <label locale="ja">フォルダ</label>
      </item>
  </config>
  <config name="conf_ItemId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C5: File/Folder ID to delete a collaboration from</label>
    <label locale="ja">C5: コラボレーションを削除するファイル/フォルダの ID</label>
  </config>
</configs>

<script><![CDATA[
function main(){

  const oauth2 = configs.get("conf_OAuth2");
  const itemType = configs.get("conf_ItemType");
  const fileOrFolderId = decideFileOrFolderId(itemType);
  const emailAddress = decideEmailAddress();
  const role = configs.get("conf_Role");
  
  // コラボレーションのリストを取得
  const collaborationList = getCollaborationList(oauth2, itemType, fileOrFolderId);
  // コラボレーションIDを探す
  const collaborationId = findCollaborationId(collaborationList, emailAddress, role);
  // コラボレーション削除
  deleteCollaboration(oauth2, collaborationId);
}

/**
  * 指定するメールアドレスをconfigから読み出して出力する
  * @return {String}  emailAddress メールアドレス
  */
function decideEmailAddress(){
  let emailAddress = "";
  const emailAddressDef = configs.getObject("conf_EmailAddress");
  if(emailAddressDef === null){
    emailAddress = configs.get("conf_EmailAddress");
  }else{
    emailAddress = engine.findData(emailAddressDef);
  }
  
  if(emailAddress === "" || emailAddress === null) {
    throw "Email address is blank";
  }
  return emailAddress;
}

/**
  * コラボレーションを削除するファイルもしくはフォルダのIDをconfigから読み出して出力する
  * @param {String}  itemType アクセス権限が付与される項目の種類 ファイル/フォルダ
  * @return {String} id ファイル もしくは フォルダの ID
  */
function decideFileOrFolderId(itemType){
  let id = "";
  const idDef = configs.getObject("conf_ItemId");
  if(idDef === null){
    id = configs.get("conf_ItemId");
  }else{
    id = engine.findData(idDef);
  }
  
  if(id === "" || id === null) {
    throw "File ID or Folder ID is blank";
  }
  
  if(itemType === "folders" && id === "0") {
    throw "Collaborations not available on root folder";
  }
  return id;
}

/**
  * ファイルまたはフォルダのコラボレーションのリストを取得する
  * @param {String} oauth OAuth2 設定
  * @param {String} itemType  項目の種類 ファイル/フォルダ
  * @param {String} fileOrFolderId ファイル/フォルダの ID
  * @return {Object} collaborationList コラボレーションのリストを格納した JSON オブジェクト
  */
function getCollaborationList(oauth2, itemType, fileOrFolderId) {
  const url = `https://api.box.com/2.0/${itemType}/${fileOrFolderId}/collaborations/`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam("fields", "id,accessible_by,invite_email,role")
    .get(url);
  
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  
  if (status !== 200) {
    engine.log(responseTxt);
    throw `Failed to get information. status: ${status}`;
  }
  
  const jsonRes = JSON.parse(responseTxt);
  if (jsonRes.entries.length === 0) {
    throw `No collaborations in ID: ${fileOrFolderId}`;
  }
  return jsonRes.entries;
}

/**
  * コラボレーションのリストからコラボレーション ID を探す
  * @param {Object} collaborationList コラボレーションのリストを格納した JSON オブジェクト
  * @param {String} emailAddress メールアドレス
  * @param {String} role ロール
  * @return {String} collaborationId コラボレーション ID
  */
function findCollaborationId(collaborationList, emailAddress, role) {
  for (let i = 0; i < collaborationList.length; i++){
    if(collaborationList[i].role !== role){
      continue;
    }
    if(collaborationList[i].accessible_by === null){
      // 未承認ユーザの場合、招待メールアドレスをチェック
      if(collaborationList[i].invite_email === emailAddress){
        return collaborationList[i].id;
      }
      continue;
    }
    if(collaborationList[i].accessible_by.login === emailAddress){
      return collaborationList[i].id;
    }
  }
  
  throw `Could not find the collaboration`;
}

/**
  * コラボレーションを削除する
  * @param {String} oauth2 Oauth2設定
  * @param {String} collaborationId コラボレーション ID
  */
function deleteCollaboration(oauth2, collaborationId) {
  const url = `https://api.box.com/2.0/collaborations/${collaborationId}`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .delete(url);
  
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  
  if (status !== 204) {
    engine.log(responseTxt);
    throw `Failed to delete the collaboration. status: ${status}`;
  }
  
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>

<test><![CDATA[

const SAMPLE_GET = {
  "total_count": 3,
  "entries": [
    {
      "type": "collaboration",
      "id": "34466849899",
      "accessible_by": {
        "type": "user",
        "id": "12988300477",
        "name": "user1",
        "login": "testuser1@questetra.com"
      },
      "role": "editor"
    },
    {
      "type": "collaboration",
      "id": "34510243080",
      "accessible_by": {
        "type": "user",
        "id": "13222077221",
        "name": "user2",
        "login": "testuser2@questetra.com"
      },
      "role": "viewer"
    },
    {
      "type": "collaboration",
      "id": "34629870555",
      "accessible_by": null,
      "invite_email": "testuser3@questetra.com",
      "role": "viewer"
    }
  ]
};

const FILES = 'files';
const FOLDERS = 'folders';

const EDITOR = 'editor';
const VIEWER = 'viewer';

/**
 * 設定の準備
 * conf_EmailAddress, conf_ItemId は、文字型データ項目で指定
 * @param configs
 * @param itemType
 * @param emailAddress
 * @param id
 * @param role
 * @return {{
 *     emailAddressDef: {Object},
 *     idDef: {Object}
 * }}
 */
const prepareConfigs = (configs, itemType, emailAddress, id, role) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('conf_ItemType', itemType);

    // 文字型データ項目を準備して、config に指定
    const emailAddressDef = engine.createDataDefinition('メールアドレス', 3, 'q_emailAddress', 'STRING_TEXTFIELD');
    configs.putObject('conf_EmailAddress', emailAddressDef);
    // 文字型データ項目の値（メールアドレス）を指定
    engine.setData(emailAddressDef, emailAddress);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ID', 5, 'q_itemId', 'STRING_TEXTFIELD');
    configs.putObject('conf_ItemId', idDef);
    // 文字型データ項目の値（file/folder ID）を指定
    engine.setData(idDef, id);

    configs.put('conf_Role', role);

    return {
        emailAddressDef,
        idDef
    };
};

/**
 * GET リクエストのテスト（コラボレーションのリストを取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param itemType
 * @param fileOrFolderId
 */
const assertGetRequest = ({url, method}, itemType, fileOrFolderId) => {
    expect(url).toEqual(`https://api.box.com/2.0/${itemType}/${fileOrFolderId}/collaborations/?fields=id%2Caccessible_by%2Cinvite_email%2Crole`);
    expect(method).toEqual('GET');
};

/**
 * DELETE リクエストのテスト (コラボレーションを削除)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param collaborationId
 */
const assertDeleteRequest = ({url, method}, collaborationId) => {
    expect(url).toEqual(`https://api.box.com/2.0/collaborations/${collaborationId}`);
    expect(method).toEqual('DELETE');
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * conf_EmailAddress にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('Email address is null', () => {
    prepareConfigs(configs, FOLDERS, null, '12345', EDITOR);
    
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Email address is blank');
});

/**
 * conf_EmailAddress に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('Email address is blank', () => {
    prepareConfigs(configs, FOLDERS, 'testuser@questetra.com', '12345', VIEWER);
    configs.put('conf_EmailAddress', '');
    
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Email address is blank');
});

/**
 * conf_ItemId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('File ID or Folder ID is null', () => {
    prepareConfigs(configs, FILES, 'testuser@questetra.com', null, VIEWER);
    
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'File ID or Folder ID is blank');
});

/**
 * conf_ItemId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('File ID or Folder ID is blank', () => {
    prepareConfigs(configs, FILES, 'testuser@questetra.com', '12345', EDITOR);
    configs.put('conf_ItemId', '');
    
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'File ID or Folder ID is blank');
});

/**
 * conf_ItemType が 'folders' で、 conf_ItemId がルートフォルダ（"0"）でエラーになる場合
 */
test('Collaborations not available on root folder', () => {
    prepareConfigs(configs, FOLDERS, 'testuser@questetra.com', '0', EDITOR);
    
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Collaborations not available on root folder');
});

/**
 * フォルダ/編集者を指定、コラボレーション削除成功の場合
 */
test('Success 204 - Folder/Editor', () => {
    const {
        emailAddressDef,
        idDef
    } = prepareConfigs(configs, FOLDERS, 'testuser1@questetra.com', '12345', EDITOR);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, FOLDERS, '12345');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertDeleteRequest(request, '34466849899');
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });
    
    main();
    
    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('12345');
    expect(engine.findData(emailAddressDef)).toEqual('testuser1@questetra.com');
});

/**
 * ファイル/ビューアを指定、コラボレーション削除成功の場合
 */
test('Success 204 - File/Viewer', () => {
    const {
        emailAddressDef,
        idDef
    } = prepareConfigs(configs, FILES, 'testuser2@questetra.com', '12345', VIEWER);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, FILES, '12345');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertDeleteRequest(request, '34510243080');
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });
    
    main();
    
    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('12345');
    expect(engine.findData(emailAddressDef)).toEqual('testuser2@questetra.com');
});

/**
 * 招待済み・未承認のユーザを指定、コラボレーション削除成功の場合
 */
test('Success 204 - Newly Invited User', () => {
    prepareConfigs(configs, FILES, 'testuser3@questetra.com', '12345', VIEWER);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, FILES, '12345');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertDeleteRequest(request, '34629870555');
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });
    
    main();
});

/**
 * Box への GET API リクエストでエラー 
 */
test('GET Failed', () => {
    prepareConfigs(configs, FILES, 'testuser@questetra.com', '12345', VIEWER);
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, FILES, '12345')
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    
    assertError(main, 'Failed to get information. status: 400');
});

/**
 * 指定したファイルにコラボレーションがひとつもない
 */
test('No collaborations in the file', () => {
    prepareConfigs(configs, FILES, 'testuser3@questetra.com', '54321', EDITOR);
    
    const SAMPLE_GET_FILE_NO_COLLABORATION = {
      "next_marker":"",
      "previous_marker":"",
      "entries":[]
    };
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, FILES, '54321')
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_FILE_NO_COLLABORATION));
    });
    
    assertError(main, 'No collaborations in ID: 54321');
});

/**
 * 指定したフォルダにコラボレーションがひとつもない
 */
test('No collaborations in the folder', () => {
    prepareConfigs(configs, FOLDERS, 'testuser3@questetra.com', '67890', VIEWER);
    
    const SAMPLE_GET_FOLDER_NO_COLLABORATION = {
      "total_count":0,
      "entries":[]
    };
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, FOLDERS, '67890')
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_FOLDER_NO_COLLABORATION));
    });
    
    assertError(main, 'No collaborations in ID: 67890');
});

/**
 * コラボレーションのリストにコラボレーションがない(実際はeditorなのにviewerを指定)
 */
test('No Collaboration - wrong role', () => {
    prepareConfigs(configs, FOLDERS, 'testuser1@questetra.com', '12345', VIEWER);
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, FOLDERS, '12345');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
    });

    assertError(main, 'Could not find the collaboration');
});

/**
 * コラボレーションのリストにコラボレーションがない(指定したユーザに関するコラボレーションがない)
 */
test('No Collaboration - wrong emailAddress', () => {
    prepareConfigs(configs, FOLDERS, 'testuser@questetra.com', '12345', EDITOR);
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, FOLDERS, '12345');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
    });

    assertError(main, 'Could not find the collaboration');
});

/**
 * Box への DELETE API リクエストでエラー 
 */
test('DELETE Failed', () => {
    prepareConfigs(configs, FOLDERS, 'testuser1@questetra.com', '12345', EDITOR);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, FOLDERS, '12345');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertDeleteRequest(request, '34466849899');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    
    assertError(main, 'Failed to delete the collaboration. status: 400');
});

]]></test>
</service-task-definition>
