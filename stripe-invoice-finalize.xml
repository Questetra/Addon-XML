<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-06-21</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Finalize Draft Invoice</label>
    <label locale="ja">Stripe: 請求書ドラフト確定</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-invoice-finalize/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-invoice-finalize/
    </help-page-url>

    <summary>This item finalizes a draft invoice on Stripe, which allows you to send the invoice or charge the customer.
    </summary>
    <summary locale="ja">この工程は、Stripe 上の請求書のドラフト（下書き）を確定します。請求書が確定すると、顧客に請求書の送付や課金が
        できるようになります。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_InvoiceId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Draft Invoice ID</label>
            <label locale="ja">C2: 請求書ドラフトの ID</label>
        </config>
        <config name="conf_DueDate" required="true" form-type="SELECT" select-data-type="DATE_YMD" editable="true">
            <label>C4: Number of days until due date (fixed value) or due date</label>
            <label locale="ja">C4: 支払い期日までの日数（固定値）または支払い期日</label>
        </config>
    </configs>

    <script><![CDATA[// GraalJS Script (engine type: 2)

main();

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const invoiceId = retrieveInvoiceId();
    const dueDateObj = retrieveDueDate();

    //// == Calculating / 演算 ==
    updateInvoice(auth, invoiceId, dueDateObj);
    finalizeInvoice(auth, invoiceId);
}

/**
  * config から請求書ドラフトの ID を読み出す。空文字列の場合はエラー
  * @return {String} invoiceId 請求書ドラフトの ID
  */
function retrieveInvoiceId() {
    const invoiceId = engine.findData(configs.getObject('conf_InvoiceId'));
    if (invoiceId === null) {
        throw 'Invoice ID is blank.';
    }
    return invoiceId;
}

/**
  * config から請求期日を読み出す。以下の場合はエラー
  * - 未設定
  * - 固定値で、値が不正
  * - データ項目を設定し、値が空
  * - データ項目を設定し、過去の日付
  * @return {Object} dueDateObj 以下いずれかのフィールドのみ値をもつ
  * @return {String} dueDateObj.dueDateTimestamp 支払い期日の23時59分59秒のタイムスタンプ
  * @return {String} dueDateObj.daysUntilDue 支払い期日までの日数
  */
function retrieveDueDate() {
    const dueDateDef = configs.getObject('conf_DueDate');
    if (dueDateDef === null) {
        const daysUntilDue = configs.get('conf_DueDate');
        if (daysUntilDue === '') {
            throw 'Due date is not set.';
        }
        const regex = /^(\d|[1-9]\d+)$/;
        if (!regex.test(daysUntilDue)) {
            throw 'Number of days until due date must be non-negative integer.';
        }
        return {daysUntilDue};
    }
    const dueDate = engine.findData(dueDateDef);
    if (dueDate === null) {
        throw 'Due date is not set.';
    }
    // QBPMS のタイムゾーンにおける「その日の 23:59:99」のタイムスタンプを取得
    const datetimeFormatter = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss');
    const timestamp = Math.floor(datetimeFormatter.parse(`${dueDate.toString()} 23:59:59`).getTime() / 1000);
    const now = Math.floor(Date.now() / 1000);
    if (timestamp < now) {
        throw 'Due date must be a future date.';
    }
    const dueDateTimestamp = timestamp.toString();
    return {dueDateTimestamp};
}

/**
  * 請求書のドラフトを更新する
  * - collection_method を send_invoice に（メール送付、登録済み支払い方法への課金の両方をできるように）
  * - 支払い期日を設定（send_invoice の場合は必須）
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書ドラフトの ID
  * @param {Object} dueDateObj 以下いずれかのフィールドのみ値をもつ
  * @param {String} dueDateObj.dueDateTimestamp 支払い期日の23時59分59秒のタイムスタンプ
  * @param {String} dueDateObj.daysUntilDue 支払い期日までの日数
  */
function updateInvoice(auth, invoiceId, {dueDateTimestamp, daysUntilDue}) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}`;
    const request = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('collection_method', 'send_invoice');
    if (dueDateTimestamp) { // dueDateTimestamp が設定されている場合
        request.formParam('due_date', dueDateTimestamp);
    } else { // dueDateTimestamp が設定されていない場合、daysUntilDue を使用
        request.formParam('days_until_due', daysUntilDue);
    }
    const response = request.post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to update invoice. status: ${status}`;
    }
}

/**
  * 請求書のドラフトを確定する
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書ドラフトの ID
  */
function finalizeInvoice(auth, invoiceId) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}/finalize`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('auto_advance', 'false') // 確定後の処理が自動で進まないよう false に
        .post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to finalize invoice. status: ${status}`;
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADaUlEQVRYR8WXSUwTYRTH/x9bS8tS
        KCWIbLFElkgiICQdw2I0xujB6MGo0cRojOBJEy0HLyQmJlQDnoSLXDQYLibGNUoili0sAoKGICAE
        LLKWRVpKW+YzHWiBtpQpYGau897//ea9973vDYHAD+EbP7O4TSKRLp0llBwBRToIEgCErfrPgGII
        BB2U0M9Gg+jl1+JDRj7aWwLka1qiWGotAkEBADEfUQAmUFT4EL+SWnX2mCcfjwA5JU0FhNBHAKQ8
        AzubGSgld+qKVBWb+W8KkKdpekJBC7cZeIMbASn/olbddKflFiBH01hFgAu7EdyuQYEXdWrmorOm
        C8BufrlrMNdMbABYrXn5bn65sxalpHB9TzgAuG6HtX8HDceX2+ADv0T76XAA5JY0loHgFl+VHdlR
        PNYWMbdtGhyAbchIJeZpL875juLb5oTBGCC3DSsOIOdhwyVCyTNvVRXBAYgKEaFb99dbV1BCL9fd
        PfycA8jVND4FcNWTSt5+OaQiX7zrnnCY3T+dhMz4UJR++oWanilvISq1aubaCkBJYzsI0p0VVPvC
        IAnwhb8fwY3ceOhmTahq1sHf1weWZRaRISLEhYtR3zeDYLEfDGYrWBZoH55DgjwQSoUUA5MGDE0v
        usJRdGiLmAx7BvTrLhbO+N6pRBxLicCihcX0ghmx4YEwmZfRN2FAWkwILFYWUwtmyCT+6ByZh0oZ
        BpalsCxTvP8+gaMpEfAhgMnCQvNhAM2Ds84QM1o1E24HoM5vH5xJhkop48Tr+vS4nhOHnj8LGJtf
        wvFUBapbR5EaHYTkqCDOJitBhtahWWQlhGJYb0K8PBDD04uIlolR3TaKyvoRlyxo1QzZFCAjLhTn
        s6M5wYb+Ga7WvWMLGJ1bAahq0eFAdDBS9qwBdI7M4WBsKAanjFAqJOj6PQ+90QLtTz1qe22HbOOz
        HsClBKXnUrmgS1YWr7+NIz9JjoigAK6ee2ViFwBGubIazC9a8aZrHCfTIrnyGM3LKKsZxMcfkx5K
        sEkT8m1r9QmlIyvuUu1Wx6kJtzyGnmCuMDFgEsPxtmscrzrH+XKvHcPtDiK+kdzZbRhEgo/i1WEk
        3GVkAxD8OuYupZUlVJiFxN4ogq5kdghBl9L/kQmv13JHJoT8MbFDCPprtn6CCfZzupNxy8f3Hyxn
        oTBfuPFrAAAAAElFTkSuQmCC
    </icon>

</service-task-definition>
