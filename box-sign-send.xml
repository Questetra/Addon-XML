<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-02-14</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box  Sign: Create Sign Request</label>
<label locale="ja">Box Sign: 署名リクエスト作成</label>
<summary>Create a URL to access the specified file on Box. Created with no expiration and/or no password requests if you leave them blank.</summary>
<summary locale="ja">(要編集)Box 上のファイルにアクセスできる URL を作成します。有効期限の指定が無い場合は無期限で、パスワードの指定が無い場合はパスワード要求無しで作成します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-link-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-link-create/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Document File ID to sign</label>
    <label locale="ja">C2: 署名するドキュメントのファイル ID</label>
  </config>
  <config name="conf_MailAddress" required="true" form-type="TEXTAREA" el-enabled="true">
    <label>C3: Mail Address to send Request</label>
    <label locale="ja">C3: 送信先のメールアドレス</label>
  </config>
  <config name="conf_MailTitle" form-type="TEXTFIELD" el-enabled="true">
    <label>C4: Sending Mail Title</label>
    <label locale="ja">C4: 送信されるメールのタイトル</label>
  </config>
  <config name="conf_FolderId" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C5: Folder ID to save the Signed Document</label>
    <label locale="ja">C5: 署名済みドキュメントを保存するフォルダID</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  // get OAuth2 Setting
  const oauth2 = configs.get("conf_OAuth2");
  const fileId = decideFileId();
  const folderId = decideFolderId();
  const mailAddress = configs.get('conf_MailAddress').split('\n');
  const mailTitle = configs.get('conf_MailTitle');

  createRequest(oauth2, fileId, mailAddress, mailTitle, folderId);
}

/**
  * ファイルのIDをconfigから読み出して出力する。
  * @return {String} fileId ファイルの ID
  */
function decideFileId(){
  let fileId = "";
  const fileIdDef = configs.getObject("conf_FileId");
  if(fileIdDef === null){
    fileId = configs.get("conf_FileId");
  }else{
    fileId = engine.findData(fileIdDef);
  }
  if (fileId === "" || fileId === null) {
    throw "File ID is blank";
  }
  return fileId;
}

/**
  * フォルダのIDをconfigから読み出して出力する。
  * @return {String}  フォルダの ID
  */
function decideFolderId(){
  let folderId = "";
  const folderIdDef = configs.getObject("conf_FolderId");
  if(folderIdDef === null){
    folderId = configs.get("conf_FolderId");
  }else{
    folderId = engine.findData(folderIdDef);
  }
  return folderId;
}

/**
  * Create Sign Request  署名リクエスト作成
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId ファイルの ID
  * @param {Array} mailAddress 送信先メールアドレス
  * @param {String} mailTitle 送信メールのタイトル
  * @param {String} folderId 保存先フォルダの ID
  */
function createRequest(oauth2, fileId, mailAddress, mailTitle, folderId) {

  const jsonBody = {};

  jsonBody["source_files"] = [{
    'id': fileId,
    'type': 'file'
  }];
  jsonBody["signers"] = mailAddress.map(element => ({'email': element}));
  //jsonBody["email_subject"] = mailTitle;
  jsonBody["parent_folder"] = {
    'id': folderId,
    'type': 'folder'
  };

  engine.log(JSON.stringify(jsonBody))

  const url = 'https://api.box.com/2.0/sign_requests';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonBody), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status >= 300) {
    engine.log(responseTxt);
    throw `Failed to create Sign Request. status:${status}`;
  }
}
]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>
</service-task-definition>
