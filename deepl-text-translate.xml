<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <!-- <last-modified>2021-03-16</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>DeepL: Translate Text</label>
    <label locale="ja">DeepL: テキスト翻訳</label>
    <!--
    <help-page-url>https://support.questetra.com/addons/deepl-text-translate/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/addons/deepl-text-translate/</help-page-url>
    -->
    <summary>
        This item translates text using DeepL API v2. Specifying the target language is mandatory, but specifying the source language is optional (Detected).
        It is also possible to translate into more formal or broken sentences (Formality).
    </summary>
    <summary locale="ja">この工程は、DeepL API（v2）を用いて機械翻訳します。翻訳先言語（ターゲット言語）の指定は必須ですが、翻訳元言語（ソース言語）の指定は任意です（自動検出されます）。フォーマルな文章や砕けた文章に翻訳することも可能です。</summary>
    <configs>
        <config name="StrConfU" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>U: Set Authentication Key</label>
            <label locale="ja">U: 認証キー（Authentication Key）をセットしてください</label>
        </config>
        <config name="StrConfA1" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>A1: Set Source Lang Code (eg "EN")</label>
            <label locale="ja">A1: 翻訳元の言語コードをセットしてください （例 "JA"）</label>
        </config>
        <config name="StrConfA2" required="true" el-enabled="true" form-type="TEXTAREA">
            <label>A2: Set Source Text</label>
            <label locale="ja">A2: 翻訳元ソーステキストをセットしてください</label>
        </config>
        <config name="StrConfA3" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>A3: Set Source Text Format "text" (default) or "xml"</label>
            <label locale="ja">A3: 翻訳元ソースのフォーマットをセットしてください （デフォルト "text" or "xml"）</label>
        </config>
        <config name="StrConfB1" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>B1: Set Target Lang Code (eg "JA", "DE")</label>
            <label locale="ja">B1: 翻訳先の言語コードをセットしてください (例 "EN-US", "DE")</label>
        </config>
        <config name="SelectConfB2" required="true" form-type="SELECT" select-data-type="STRING">
            <label>B2: Select STRING that stores Translated Text (update)</label>
            <label locale="ja">B2: 翻訳されたテキストが格納される文字列型データ項目を選択してください (更新)</label>
        </config>
        <config name="StrConfB3" required="false" el-enabled="true" form-type="TEXTFIELD">
            <label>B3: Set Formality Option (Formal: "more", Informal: "less")</label>
            <label locale="ja">B3: フォーマル化オプションをセットしてください (よりフォーマルに: "more", より砕けて: "less")</label>
        </config>
    </configs>

    <script><![CDATA[

main();
function main() {

    //// == Config Retrieving / 工程コンフィグの参照 ==
    const strAuthKey = configs.get("StrConfU");     /// REQUIRED
    const strSourceLang = configs.get("StrConfA1");    // NotRequired
    if (strSourceLang === "") {
        engine.log(" AutomatedTask ConfigWarning:" +
            " Config {A1:SourceLang} is empty");
    } else {
        engine.log(" AutomatedTask Config: SourceLang: " + strSourceLang);
    }
    const strSourceText = configs.get("StrConfA2");    /// REQUIRED
    if (strSourceText === "") {
        throw new Error("\n AutomatedTask ConfigError:" +
            " Config {A2:SourceText} is empty \n");
    }
    let strSourceFormat = "text";
    let strSourceFormatTmp = configs.get("StrConfA3");    // NotRequired
    if (strSourceFormatTmp === "xml") {
        strSourceFormat = "xml";
    } else if (strSourceFormatTmp === "html") { // regarded as "xml" for versatility
        strSourceFormat = "xml";
    }
    const strTargetLang = configs.get("StrConfB1");    /// REQUIRED
    if (strTargetLang === "") {
        throw new Error("\n AutomatedTask ConfigError:" +
            " Config {B1:TargetLang} is empty \n");
    }
    const strPocketTargetText = configs.getObject("SelectConfB2"); /// REQUIRED
    let strFormality = configs.get("StrConfB3");    // NotRequired

    //// == Calculating / 演算 ==
    /// (DeepL > Translating text)
    /// https://www.deepl.com/docs-api/translating-text/request/
    // request1, prepare
    let postUri1 = "https://api.deepl.com/v2/translate";
    let request1 = httpClient.begin(); // HttpRequestWrapper
    request1 = request1.queryParam("auth_key", strAuthKey);
    request1 = request1.queryParam("text", strSourceText);
    if (strSourceFormat === "xml") {
        request1 = request1.queryParam("tag_handling", strSourceFormat);
    }
    if (strSourceLang !== "") {
        request1 = request1.queryParam("source_lang", strSourceLang);
    }
    request1 = request1.queryParam("target_lang", strTargetLang);
    // request1, try
    const response1 = request1.post(postUri1); // HttpResponseWrapper
    engine.log(" AutomatedTask ApiRequest1 Start: " + postUri1);
    const response1Code = response1.getStatusCode() + "";
    const response1Body = response1.getResponseAsString() + "";
    engine.log(" AutomatedTask ApiResponse Status: " + response1Code);
    if (response1Code !== "200") {
        throw new Error("\n AutomatedTask UnexpectedResponseError: " +
            response1Code + "\n" + response1Body + "\n");
    }
    // response1, parse
    engine.log(response1Body); // debug

    const response1Obj = JSON.parse(response1Body);
    let strTargetLangDetected = response1Obj.translations[0].detected_source_language;
    engine.log(" AutomatedTask ApiResponce1: Detected Lang: " + strTargetLangDetected);
    let strTargetText = response1Obj.translations[0].text;

    //// == Data Updating / ワークフローデータへの代入 ==
    engine.setData(strPocketTargetText, strTargetText);
}

    ]]></script>


    <icon>
    iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADwklEQVRYR8WXe0hTURzHv8dHTrdm
    9sBIKKH+qEll+aisDDVXVBYoab4qX+GjUisweksGBVJWUoHZm8yw/tCo2BKLigIrKdgMShAps4fa
    VtZ8ntjd7trmvXdXKXb/Gju/3+98zvk9D4GTPyJ2/ylBMV4/fxtiCUgEJXQeQPwB+Jj1uwHaSihp
    oqANMk/J7faXdb/E2HYIIFWsmuxKBooAZAOQiDEKwADg3CB1O9ajvdshpCMI4K2IzqaElAKQitzY
    XqyHULpLp1Wf49PnBZAHKM8AyBnlxvZqZ/UaVS6XLU4AeUD0dYAk/qPNzWZolV6jTrK3OQxA7Mk3
    xq5ESuwKfOvS4URlNRpfN4vhHXYTNgBmn58VsrQkZA6KspMRFjwbbq6ujKj+Zw+q6+px/Hw12j9/
    EwQhlOZYx4QFwBzt7/kCborvRJTsysLqyDBIPMZwbvK16zvKL99CWeVNIYieQeo2g80OC4A8QHkC
    QAGXZkFGPLZuisOk8eMcXjOlFG+aW1B88iLqn77gky/Ta1SFxkUGgCkyht5Orjwv3ZuH9IQ1cHVx
    YYwZevugfdeKaX6+mODjzQvUrfuBnSXluHXvIZeMQSbxmGAsVgyAXBGdAkKucknWnj+KZQvnWZbu
    NjxD4rZDKMpJxs6sRHiMceeE6OsfQFllNY6UX+GGpDRVr1VfYwC8FcpKSpAuBuBtSxvyD5VhrMwL
    K8JDkRATBblseJ1yBEAoLui0qgzTDQREvwLI32NakdjfALtk9HXrhw5UVNUifEEg87dihj+m+vky
    vx0BALRJr1HPNwMou6wai81F8AGwQoNDQ7jz4Ck27ijBlqS1KC7MgJenRAQAuvUa1XgWgPJFkxCA
    MSBb2j5CLpXi9OUaRIYFQbk0FC4uRAwA9BoVGTGAMbobnr2Cu7sb1I8bkRG/BnNmTQcxmbJ8jl0A
    GwDRLqhVP0Fq4WGmLuzJS4XUy3N0WQAbF/AHoX0d+PSlExVVdVCGh2BBoGLYyVkaB3UANkEolIYy
    qScObE9D4rrlnOlmf3w2O45X3MCV2/d5C5VtGgoUItbCzOlTUZSTglURi3h7QWe3Dqcu1TjqBSaT
    1oVIqBTbHyFqcTAO5qdxBt6j501Ym7mb99RWC7al2FSM+JsRl8Vtm+OQuSEG0/wmW+JgBAC2zci4
    gaN2zAVhHx8iAbjbsaknMEOo4EDCBRIydxb2bd2Evv5+rM/dL+gC3oGE1RI7kolxNIeM8Ej2F8KJ
    Q+l/uomRjeUshFMfJiyEU59m1kHktMfpKKNdtNofFmLMMLzOuicAAAAASUVORK5CYII=
    </icon>

</service-task-definition>
