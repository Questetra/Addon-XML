<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-01-06</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box: Create Shared Link to File</label>
<label locale="ja">Box: ファイル共有リンク作成</label>
<summary>Create a URL to access the specified file on Box. Created with no expiration and/or no password requests if you leave them blank.</summary>
<summary locale="ja">Box 上のファイルにアクセスできる URL を作成します。有効期限の指定が無い場合は無期限で、パスワードの指定が無い場合はパスワード要求無しで作成します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-link-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-link-create/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: File ID to share</label>
    <label locale="ja">C2: 共有するファイル ID</label>
  </config>
  <config name="conf_UnsharedAt" form-type="SELECT" select-data-type="DATETIME">
    <label>C3: Expiration of the Link</label>
    <label locale="ja">C3: リンクに設定する有効期限</label>
  </config>
  <config name="conf_Password" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C4: Password of the Link</label>
    <label locale="ja">C4: リンクに設定するパスワード</label>
  </config>
  <config name="conf_SharedLink" form-type="SELECT" select-data-type="STRING_TEXTFIELD" required="true">
    <label>C5: Data item that will save the Shared Link</label>
    <label locale="ja">C5: 共有リンクを保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){
  // get OAuth2 Setting
  const oauth2 = configs.get("conf_OAuth2");
  const fileId = decideFileId();
  const unsharedDateDef = configs.getObject("conf_UnsharedAt");
  const passwordDef = configs.getObject("conf_Password");
  
  let unsharedDate = null;
  if (unsharedDateDef !== null){
    unsharedDate = engine.findData(unsharedDateDef);
  }

  let password = "";
  if (passwordDef !== null){
    password = engine.findData(passwordDef);
  }

  checkExistingSharedLink(oauth2, fileId);
  const sharedlinkUrl = createSharedLink(oauth2, fileId, unsharedDate, password);

  const urlDef = configs.getObject( "conf_SharedLink" );
  if (urlDef !== null) {
    engine.setData(urlDef,sharedlinkUrl);
  }
}


/**
  * ファイルのIDをconfigから読み出して出力する。
  * @return {String} fileId ファイルの ID
  */
function decideFileId(){
  let fileId = "";
  const fileIdDef = configs.getObject("conf_FileId");
  if(fileIdDef === null){
    fileId = configs.get( "conf_FileId");
  }else{
    fileId = engine.findData(fileIdDef);
  }
  if (fileId === "" || fileId === null) {
    throw "File ID is blank";
  }
  return fileId;
}


/**
  * ファイルが既に共有リンク作成されているか調べ、既に共有リンクがある場合はエラーにする
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId ファイルの ID
  */
function checkExistingSharedLink(oauth2, fileId) {
  const url = `https://api.box.com/2.0/files/${fileId}?fields=shared_link`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .get(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 200) {
    engine.log(responseTxt);
    throw `Failed to get file information. status:${status}`;
  }
  const jsonRes = JSON.parse(responseTxt);

  if (jsonRes.shared_link !== null){
    throw `Shared link(${jsonRes.shared_link.url}) was already created.`;
  }
}


/**
  * Create Shared Link to File on Box  共有リンク作成
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId ファイルの ID
  * @param {AddableTimestamp} unsharedDate 有効期限
  * @param {String} password パスワード
  * @return {String}  ファイルの共有リンクURL
  */
function createSharedLink(oauth2, fileId, unsharedDate, password) {
  let timezone = engine.getTimeZoneId();
  if (timezone === "GMT"){
    timezone += "+00:00";
  }

  const jsonBody = {};

  jsonBody["shared_link"] = {"access": "open"};
  if(unsharedDate !== null){
    jsonBody["shared_link"]["unshared_at"] = unsharedDate.toString() + timezone.slice(3);
  }
  if(password !== "" && password !== null){
    jsonBody["shared_link"]["password"] = password;
  }
  
  jsonBody["shared_link"]["permissions"] = {"can_download": true };
  
  const url = `https://api.box.com/2.0/files/${fileId}?fields=shared_link`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonBody), "application/json; charset=UTF-8")
    .put(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 200) {
    engine.log(responseTxt);
    throw `Failed to create Shared Link. status:${status}`;
  }
  const jsonRes = JSON.parse(responseTxt);
  return jsonRes.shared_link.url;
}
]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>
    
<test><![CDATA[

/**
 * 設定の準備
 * conf_FileId  conf_Password  は、文字型データ項目で指定
 * conf_UnsharedAt は、日時型データ項目で指定
 * @param configs
 * @param fileId
 * @param unsharedDate
 * @param password
 * @return {{
 *     fileIdDef: {Object},
 *     unsharedDateDef: {Object},
 *     passwordDef: {Object},
 *     urlDef: {Object}
 * }}
 */
const prepareConfigs = (configs, fileId, unsharedDate, password) => {
    configs.put('conf_OAuth2', 'Box');

    // 文字型データ項目を準備して、config に指定
    const fileIdDef = engine.createDataDefinition('共有するファイルID', 1, 'q_fileId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FileId', fileIdDef);
    // 文字型データ項目の値（共有するファイルID）を指定
    engine.setData(fileIdDef, fileId);

    // 日時型データ項目を準備して、config に指定
    const unsharedDateDef = engine.createDataDefinition('有効期限', 2, 'q_dateTime', 'DATETIME');
    configs.putObject('conf_UnsharedAt', unsharedDateDef);
    // 日時型データ項目の値（有効期限）を指定
    if ( unsharedDate !== null ){ 
        const datetime = java.sql.Timestamp.valueOf(unsharedDate); 
        engine.setData(unsharedDateDef, datetime);
    }else{
        engine.setData(unsharedDateDef, null);
    }

    // 文字型データ項目を準備して、config に指定
    const passwordDef = engine.createDataDefinition('パスワード', 3, 'q_password', 'STRING_TEXTFIELD');
    configs.putObject('conf_Password', passwordDef);
    // 文字型データ項目の値（パスワード）を指定
    engine.setData(passwordDef, password);

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('リンクURL', 4, 'q_urls', 'STRING_TEXTFIELD');
    configs.putObject('conf_SharedLink', urlDef);
    // 文字型データ項目の値（リンク URL を保存するデータ項目）を指定
    engine.setData(urlDef, '事前文字列');

    return {
        fileIdDef,
        unsharedDateDef,
        passwordDef,
        urlDef
    };
};


/**
 * リクエストのテスト（対象ファイルの共有リンク情報を取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param fileId
 */
const assertGetRequest = ({url, method}, fileId) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}?fields=shared_link`);
    expect(method).toEqual('GET');
};


/**
 * リクエストのテスト（ファイル共有リンク作成）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param unsharedDate
 * @param password
 * @param offsetInMinutes
 */
const assertPutRequest = ({url, method, contentType, body}, fileId, unsharedDate, password, offsetInMinutes) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}?fields=shared_link`);
    expect(method).toEqual('PUT');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);

    engine.setTimeZoneOffsetInMinutes(offsetInMinutes); // テストスクリプトではタイムゾーンの値をコントロール可能
    let timezone = engine.getTimeZoneId(); // offsetInMinutes:540 → timezone = 'GMT+09:00' , 0 → 'GMT', -330 → 'GMT-05:30'

        if (timezone === "GMT"){
        // GMT+00:00  →　2023-01-02 20:15:00 は、タイムゾーンが"GMT"の場合、2023-01-02 20:15:00.0+00:00 となる
        timezone += "+00:00 ";
        }

    if ( unsharedDate !== null ){ 
        expect(bodyObj.shared_link.unshared_at).toEqual(`${unsharedDate.toString()}.0${timezone.slice(3)}`); 
    }else{
        //unsharedDate が空の場合、bodyObj に time の指定がないことを確認
        expect(bodyObj.shared_link.unshared_at === undefined).toEqual(true);
    }
    if ( password !== null ){ 
        expect(bodyObj.shared_link.password).toEqual(password);
    }else{
        //password が空の場合、bodyObj に password の指定がないことを確認
        expect(bodyObj.shared_link.password === undefined).toEqual(true);
    }
};


/**
 * conf_FileId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('File ID is blank - FileId specified by String Data', () => {
    prepareConfigs(configs, null, '2020-03-14 23:45:00', 'word1');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File ID is blank');
    }
});

/**
 * conf_FileId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('File ID is blank - FileId specified with fixed value ' , () => {
    prepareConfigs(configs, null, '2021-04-15 10:00:00', 'word2');
    //conf_SourceFileId の設定値を固定値で上書き
    configs.put('conf_FileId', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File ID is blank');
    }
});


/**
 * Box への API リクエストでエラー 
 * 対象ファイルの共有リンク情報の取得失敗
 */
test('GET Failed', () => {
    prepareConfigs(configs, '12345678', '2022-01-01 00:00:00', 'word3');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '12345678');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to get file information. status:400');
    }
});


/**
 * 対象ファイルに共有リンクが既に有り、エラー
 */
test('Shared link was already created.', () => {
    prepareConfigs(configs, '87654321', '2023-01-02 20:15:00', 'word4');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '87654321');
            //レスポンスは、簡易版レプリゼンテーション＋ field で指定した属性
            const responseGetObj = {
                "type": "file",
                "id": "87654321",
                "etag": "0",
                "shared_link": {
                    "access": "open",
                    "download_count": 3,
                    "download_url": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg",
                    "effective_access": "company",
                    "effective_permission": "can_download",
                    "is_password_enabled": true,
                    "permissions": {
                        "can_download": true,
                        "can_preview": true
                    },
                    "preview_count": 3,
                    "unshared_at": "2023-01-02T20:15:00-07:00",
                    "url": "https://www.box.com/s/vspke7y05sb214wjokpk",
                    "vanity_name": "my_url",
                    "vanity_url": "https://acme.app.box.com/v/my_url/"
                }
            };
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }
   　});

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Shared link(https://www.box.com/s/vspke7y05sb214wjokpk) was already created.');
    }
});



/**
 * Box への API リクエストでエラー 
 * ファイル共有リンク作成失敗
 */
test('PUT Failed', () => {
    prepareConfigs(configs, '11111111', '2020-03-14 23:45:00', 'word5');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '11111111');
            //レスポンスは、簡易版レプリゼンテーション＋ field で指定した属性
            const responseGetObj = {
                "type": "file",
                "id": "87654321",
                "etag": "0",
                "shared_link": null
            };
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }
        assertPutRequest(request, '11111111', '2020-03-14 23:45:00', 'word5', 540);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to create Shared Link. status:400');
    }
});


/**
 * ファイル共有リンク作成成功
 */
test('200 Success', () => {
    const {
        fileIdDef,
        unsharedDateDef,
        passwordDef,
        urlDef
    } = prepareConfigs(configs, '87654321', '2020-03-14 23:45:00', 'word6');
	
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '87654321');
            //レスポンスは、簡易版レプリゼンテーション
            const responseGetObj = {
                "type": "file",
                "id": "87654321",
                "etag": "0",
                "shared_link": null
            };
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }

        assertPutRequest(request, '87654321', '2020-03-14 23:45:00', 'word6', 540);
        //レスポンスは、簡易版レプリゼンテーション
        const responsePutObj = {
            "type": "file",
            "id": "87654321",
            "etag": "0",
            "shared_link": {
                "access": "open",
                "download_count": 3,
                "download_url": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg",
                "effective_access": "company",
                "effective_permission": "can_download",
                "is_password_enabled": true,
                "permissions": {
                    "can_download": true,
                    "can_preview": true
                },
                "preview_count": 3,
                "unshared_at": "2020-03-14T23:45:00-07:00",
                "url": "https://www.box.com/s/vspke7y05sb214123456",
                "vanity_name": "my_url",
                "vanity_url": "https://acme.app.box.com/v/my_url/"
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responsePutObj));
    })

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual('87654321');
    expect(engine.findData(unsharedDateDef).toString()).toEqual('2020-03-14 23:45:00.0');
    expect(engine.findData(passwordDef)).toEqual('word6');
    expect(engine.findData(urlDef)).toEqual('https://www.box.com/s/vspke7y05sb214123456');
});


/**
 * ファイル共有リンク作成成功
 * 有効期限、パスワード　共に空　
 */
test('200 Success - no unsharedDate and no password', () => {
    const {
        fileIdDef,
        unsharedDateDef,
        passwordDef,
        urlDef
    } = prepareConfigs(configs, '12345678', null, null);
		
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '12345678');
            //レスポンスは、簡易版レプリゼンテーション
            const responseGetObj = {
                "type": "file",
                "id": "12345678",
                "etag": "0",
                "shared_link": null
            };
            reqCount++;        
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }

        assertPutRequest(request, '12345678', null , null, -330);
        //レスポンスは、簡易版レプリゼンテーション
        const responsePutObj = {
            "type": "file",
            "id": "12345678",
            "etag": "0",
            "shared_link": {
                "access": "open",
                "download_count": 3,
                "download_url": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.txt",
                "effective_access": "company",
                "effective_permission": "can_download",
                "is_password_enabled": true,
                "permissions": {
                    "can_download": true,
                    "can_preview": true
                },
                "preview_count": 3,
                "unshared_at": null,
                "url": "https://www.box.com/s/vspke7y05sb987654321",
                "vanity_name": "my_url",
                "vanity_url": "https://acme.app.box.com/v/my_url/"
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responsePutObj));
    })

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual('12345678');
    expect(engine.findData(unsharedDateDef)).toEqual(null);
    expect(engine.findData(passwordDef)).toEqual(null);
    expect(engine.findData(urlDef)).toEqual('https://www.box.com/s/vspke7y05sb987654321');
});


/**
 * ファイル共有リンク作成成功
 * 有効期限、パスワード　共に指定しない　
 */
test('200 Success - Not specified both unsharedDate and password', () => {

    configs.put('conf_OAuth2', 'Box');

    // 文字型データ項目を準備して、config に指定
    const fileIdDef = engine.createDataDefinition('共有するファイルID', 1, 'q_fileId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FileId', fileIdDef);
    // 文字型データ項目の値（共有するファイルID）を指定
    engine.setData(fileIdDef, '22222222')

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('リンクURL', 2, 'q_urls', 'STRING_TEXTFIELD');
    configs.putObject('conf_SharedLink', urlDef);
    // 文字型データ項目の値（リンク URL を保存するデータ項目）を指定
    engine.setData(urlDef, '事前文字列');
		
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '22222222');
            //レスポンスは、簡易版レプリゼンテーション
            const responseGetObj = {
                "type": "file",
                "id": "22222222",
                "etag": "0",
                "shared_link": null
            };
            reqCount++;        
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }
   
        assertPutRequest(request, '22222222', null , null, 540);
        //レスポンスは、簡易版レプリゼンテーション
        const responsePutObj = {
            "type": "file",
            "id": "22222222",
            "etag": "0",
            "shared_link": {
                "access": "open",
                "download_count": 3,
                "download_url": "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.txt",
                "effective_access": "company",
                "effective_permission": "can_download",
                "is_password_enabled": true,
                "permissions": {
                    "can_download": true,
                    "can_preview": true
                },
                "preview_count": 3,
                "unshared_at": null,
                "url": "https://www.box.com/s/vspke7y05sb922222222",
                "vanity_name": "my_url",
                "vanity_url": "https://acme.app.box.com/v/my_url/"
            }
        };
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responsePutObj));
    })

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual('22222222');
    expect(engine.findData(urlDef)).toEqual('https://www.box.com/s/vspke7y05sb922222222');
});

]]></test>    
    

</service-task-definition>
