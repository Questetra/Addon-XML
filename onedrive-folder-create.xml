<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>Microsoft 365 OneDrive for Business: Create Folder</label>
<label locale="ja">Microsoft 365 OneDrive for Business: フォルダ作成</label>
<last-modified>2021-05-28</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Create a folder in the specified folder on OneDrive.</summary>
<summary locale="ja">OneDrive の指定フォルダ内にフォルダを作成します。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
    <config name="conf_parentFolderUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Parent Folder URL (Root Folder if blank)</label>
    <label locale="ja">C2: 作成するフォルダの親フォルダの URL (空白の場合、ルートフォルダ)</label>
  </config>
  <config name="conf_folderName" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder Name to create</label>
    <label locale="ja">C3: 作成するフォルダの名称</label>
  </config>
  <config name="conf_folderUrl" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data item to save Folder URL</label>
    <label locale="ja">C4: フォルダ URL を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/onedrive-folder-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/onedrive-folder-create/</help-page-url>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const parentFolderUrl = retrieveParentFolderUrl();
  const folderName = retrieveFolderName();
  const urlDataDef = configs.getObject("conf_folderUrl");

  //// == 演算 / Calculating ==
  const parentFolderInfo = getFolderInfoByUrl( parentFolderUrl, oauth2 );
  const createdFolderUrl = createFolder( parentFolderInfo, folderName, oauth2 );

  //// == ワークフローデータへの代入 / Data Updating ==
  setData( urlDataDef, createdFolderUrl );
}

/**
  * configから値を読み出し、必要に応じて値チェックを行った後、値を返す
  * @return {String} configの値
  */
function retrieveParentFolderUrl() {
  const folderUrlDef = configs.getObject( "conf_parentFolderUrl" );
  let folderUrl = configs.get( "conf_parentFolderUrl" );
  if ( folderUrlDef !== null ) {
    folderUrl = engine.findData( folderUrlDef );
  }
  return folderUrl;
}

function retrieveFolderName() {
  const folderName = configs.get( "conf_folderName" );
  if ( folderName === "" || folderName === null ) {
    throw `Folder name is empty.`;
  }
  return folderName;
}

/**
  * フォルダのURLからフォルダ情報（ドライブIDとフォルダID）を取得し、
  * オブジェクトで返す（URLが空の場合はドライブIDをme/drive、フォルダIDをrootにする）
  * @param {String} folderUrl  フォルダのURL
  * @param {String} oauth2  OAuth2 設定名
  * @return {Object} folderInfo  フォルダ情報 {driveId, folderId}
  */
function getFolderInfoByUrl( folderUrl, oauth2 ) {
  let folderInfo = {driveId: "me/drive", folderId: "root"};
  if ( folderUrl !== "" && folderUrl !== null ) {
    // 分割代入
    const {
      id,
      parentReference: {
        driveId
      }
    } = getObjBySharingUrl( folderUrl, oauth2 );
    folderInfo = {driveId: `drives/${driveId}`, folderId: id};
  }
  return folderInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {String} oauth2  OAuth2 設定名
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, oauth2 ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // API Request
  const response = httpClient.begin() // HttpRequestWrapper
    .authSetting(oauth2)
    .get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (httpStatus >= 300) {
    engine.log(`---GET request--- ${httpStatus}\n${responseStr}\n`);
    throw `Failed to get drive item. status: ${httpStatus}`;
  }
  return JSON.parse( responseStr );
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  return `u!${encodedSharingUrl}`;
}

/**
  * フォルダを作成する
  * @param {String,String} driveId,folderId  親フォルダのドライブID、フォルダID
  * @param {String} folderName  作成するフォルダの名前
  * @param {String} oauth2  OAuth2 設定名
  * @return {String}  作成したフォルダの URL
  */
function createFolder( {
  driveId,
  folderId
}, folderName, oauth2 ){
  const url = `${GRAPH_URI}${driveId}/items/${folderId}/children`;
  const body = {
    "name": folderName,
    "folder":{},
    "@microsoft.graph.conflictBehavior": "fail" // 重複時はエラーになるように
  }
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    engine.log(`---POST request--- ${status}\n${responseStr}\n`);
    throw `Failed to create: ${folderName}. status: ${status}`;
  }
  const json = JSON.parse(responseStr);
  return json.webUrl;
}

/**
  * データ項目に出力する
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力する文字列
  */
function setData( dataDef, dataString ){
  if(dataDef !==  null){
    engine.setData( dataDef, dataString );
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
