<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>Microsoft 365 OneDrive for Business: Create Folder</label>
<label locale="ja">Microsoft 365 OneDrive for Business: フォルダ作成</label>
<last-modified>2023-12-18</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<summary>This item creates a folder in the specified folder on OneDrive.</summary>
<summary locale="ja">この工程は、OneDrive の指定フォルダ内にフォルダを作成します。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
    <config name="conf_parentFolderUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Parent Folder URL (Root Folder if blank)</label>
    <label locale="ja">C2: 作成するフォルダの親フォルダの URL (空白の場合、ルートフォルダ)</label>
  </config>
  <config name="conf_folderName" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Folder Name to create</label>
    <label locale="ja">C3: 作成するフォルダの名称</label>
  </config>
  <config name="conf_folderUrl" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C4: Data item to save Folder URL</label>
    <label locale="ja">C4: フォルダ URL を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/onedrive-folder-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/onedrive-folder-create/</help-page-url>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = "https://graph.microsoft.com/v1.0/";

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.getObject("conf_OAuth2");
  const parentFolderUrl = retrieveParentFolderUrl();
  const folderName = retrieveFolderName();
  const urlDataDef = configs.getObject("conf_folderUrl");

  //// == 演算 / Calculating ==
  const parentFolderInfo = getFolderInfoByUrl( parentFolderUrl, oauth2 );
  const createdFolderUrl = createFolder( parentFolderInfo, folderName, oauth2 );

  //// == ワークフローデータへの代入 / Data Updating ==
  setData( urlDataDef, createdFolderUrl );
}

/**
  * configから値を読み出し、必要に応じて値チェックを行った後、値を返す
  * @return {String} configの値
  */
function retrieveParentFolderUrl() {
  const folderUrlDef = configs.getObject( "conf_parentFolderUrl" );
  let folderUrl = configs.get( "conf_parentFolderUrl" );
  if ( folderUrlDef !== null ) {
    folderUrl = engine.findData( folderUrlDef );
  }
  return folderUrl;
}

function retrieveFolderName() {
  const folderName = configs.get( "conf_folderName" );
  if ( folderName === "" || folderName === null ) {
    throw `Folder name is empty.`;
  }
  return folderName;
}

/**
  * フォルダのURLからフォルダ情報（ドライブIDとフォルダID）を取得し、
  * オブジェクトで返す（URLが空の場合はドライブIDをme/drive、フォルダIDをrootにする）
  * @param {String} folderUrl  フォルダのURL
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @return {Object} folderInfo  フォルダ情報 {driveId, folderId}
  */
function getFolderInfoByUrl( folderUrl, oauth2 ) {
  let folderInfo = {driveId: "me/drive", folderId: "root"};
  if ( folderUrl !== "" && folderUrl !== null ) {
    // 分割代入
    const {
      id,
      parentReference: {
        driveId
      }
    } = getObjBySharingUrl( folderUrl, oauth2 );
    folderInfo = {driveId: `drives/${driveId}`, folderId: id};
  }
  return folderInfo;
}

/**
  * OneDriveのドライブアイテム（ファイル、フォルダ）のメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様：https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {String} sharingUrl  ファイルの共有URL
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @return {Object} responseObj  ドライブアイテムのメタデータのJSONオブジェクト
  */
function getObjBySharingUrl( sharingUrl, oauth2 ) {
  if (sharingUrl === "" || sharingUrl === null) {
    throw `Sharing URL is empty.`;
  }

  // encoding sharing URL
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);

  // API Request
  const response = httpClient.begin() // HttpRequestWrapper
    .authSetting(oauth2)
    .get( `${GRAPH_URI}shares/${encodedSharingUrl}/driveItem` ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (httpStatus >= 300) {
    engine.log(`---GET request--- ${httpStatus}\n${responseStr}\n`);
    throw `Failed to get drive item. status: ${httpStatus}`;
  }
  return JSON.parse( responseStr );
}

/**
  * 共有URLをunpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @return {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl( sharingUrl ) {
  let encodedSharingUrl = base64.encodeToUrlSafeString( sharingUrl );
  while ( encodedSharingUrl.slice(-1) === '=' ) {
    encodedSharingUrl = encodedSharingUrl.slice(0,-1);
  }
  return `u!${encodedSharingUrl}`;
}

/**
  * フォルダを作成する
  * @param {String,String} driveId,folderId  親フォルダのドライブID、フォルダID
  * @param {String} folderName  作成するフォルダの名前
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @return {String}  作成したフォルダの URL
  */
function createFolder( {
  driveId,
  folderId
}, folderName, oauth2 ){
  const url = `${GRAPH_URI}${driveId}/items/${folderId}/children`;
  const body = {
    "name": folderName,
    "folder":{},
    "@microsoft.graph.conflictBehavior": "fail" // 重複時はエラーになるように
  }
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    engine.log(`---POST request--- ${status}\n${responseStr}\n`);
    throw `Failed to create: ${folderName}. status: ${status}`;
  }
  const json = JSON.parse(responseStr);
  return json.webUrl;
}

/**
  * データ項目に出力する
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力する文字列
  */
function setData( dataDef, dataString ){
  if(dataDef !==  null){
    engine.setData( dataDef, dataString );
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

<test><![CDATA[

/**
 * 設定の準備
 * @param parentFolderUrl
 * @param folderName
 * @return folderUrlDef
 */
const prepareConfigs = (parentFolderUrl, folderName) => {
  const oauth2 = httpClient.createAuthSettingOAuth2(
    'OneDrive',
    'https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize',
    'https://login.microsoftonline.com/organizations/oauth2/v2.0/token',
    'https://graph.microsoft.com/Files.ReadWrite.All offline_access',
    'client_id',
    'client_secret',
    'access_token'
  );
  configs.putObject('conf_OAuth2', oauth2);
  configs.put('conf_folderName', folderName);
  
  // 作成するフォルダの親フォルダの URL を保存する文字型データ項目（単数行）を準備
  const parentFolderUrlDef = engine.createDataDefinition('親フォルダの URL', 1, 'q_parent_folder_url', 'STRING_TEXTFIELD');
  engine.setData(parentFolderUrlDef, parentFolderUrl);
  configs.putObject('conf_parentFolderUrl', parentFolderUrlDef);
  
  // フォルダ URL を保存する文字型データ項目（単数行）を準備
  const folderUrlDef = engine.createDataDefinition('フォルダ URL', 2, 'q_folder_url', 'STRING_TEXTFIELD');
  engine.setData(folderUrlDef, '事前文字列');
  configs.putObject('conf_folderUrl', folderUrlDef);
  
  return folderUrlDef;
};

/**
 * フォルダ名が空でエラー
 */
test('Folder name is empty.', () => {
  prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/parent1', '');
  
  expect(execute).toThrow('Folder name is empty.');

});

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param sharingUrl
 */
const assertGetRequest = ({url, method}, sharingUrl) => {
  const encodedSharingUrl = encodeSharingUrl(sharingUrl);
  expect(url).toEqual(`${GRAPH_URI}shares/${encodedSharingUrl}/driveItem`);
  expect(method).toEqual('GET');
};

/**
 * GET リクエストでエラー - 親フォルダURLをデータ項目で指定
 */
test('GET Failed - Specify Parent Folder URL as a data item', () => {
  prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/parent2', 'folder2');
  
  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/parent2');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to get drive item. status: 400');
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param driveId
 * @param folderId
 * @param folderName
 */
const assertPostRequest = ({url, method, contentType, body}, driveId, folderId, folderName) => {
  expect(url).toEqual(`${GRAPH_URI}${driveId}/items/${folderId}/children`);
  expect(method).toEqual('POST');
  expect(contentType).toEqual("application/json; charset=UTF-8");
  const bodyObj = JSON.parse(body);
  expect(bodyObj.name).toEqual(folderName);
};

const SAMPLE_GET1 = {
  "id":"Id001",
  "parentReference":{
    "driveId":"Drive001"
  }
};

/**
 * フォルダ作成成功 - 親フォルダURLをデータ項目で指定
 */
test('201 Success - Specify Parent Folder URL as a data item', () => {
  const folderUrlDef = prepareConfigs('https://test-my.sharepoint.com/personal/aaa/Documents/parent3', 'folder3');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/parent3');
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET1));
    }
    assertPostRequest(request, 'drives/Drive001', 'Id001', 'folder3');
    return httpClient.createHttpResponse(201, 'application/json', `{"webUrl":"https://test-my.sharepoint.com/personal/aaa/Documents/parent3/folder3"}`);
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(folderUrlDef)).toEqual('https://test-my.sharepoint.com/personal/aaa/Documents/parent3/folder3');
});

const SAMPLE_GET2 = {
  "id":"Id002",
  "parentReference":{
    "driveId":"Drive002"
  }
};

/**
 * フォルダ作成成功 - 親フォルダURLを固定値で指定
 */
test('201 Success - Specify Parent Folder URL with a fixed value', () => {
  const folderUrlDef = prepareConfigs(null, 'folder4');
  
  configs.put('conf_parentFolderUrl', 'https://test-my.sharepoint.com/personal/aaa/Documents/parent4');
  
  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, 'https://test-my.sharepoint.com/personal/aaa/Documents/parent4');
      reqCount++;
      return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(SAMPLE_GET2));
    }
    assertPostRequest(request, 'drives/Drive002', 'Id002', 'folder4');
    return httpClient.createHttpResponse(201, 'application/json', `{"webUrl":"https://test-my.sharepoint.com/personal/aaa/Documents/parent4/folder4"}`);
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(folderUrlDef)).toEqual('https://test-my.sharepoint.com/personal/aaa/Documents/parent4/folder4');
});

/**
 * フォルダ作成成功 - 親フォルダURLをデータ項目で指定し、その値が空
 */
test('201 Success - Specify Parent Folder URL as a data item and its value is blank', () => {
  const folderUrlDef = prepareConfigs(null, 'folder5');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'me/drive', 'root', 'folder5');
    return httpClient.createHttpResponse(201, 'application/json', `{"webUrl":"https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/folder5"}`);
    
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(folderUrlDef)).toEqual('https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/folder5');
});

/**
 * POST リクエストでエラー - 親フォルダURLを固定値で指定し、その値が空
 */
test('POST Failed - Specify the parent folder URL with a fixed value, and that value is blank', () => {
  const folderUrlDef = prepareConfigs(null, 'folder6');
  
  configs.put('conf_parentFolderUrl', '');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'me/drive', 'root', 'folder6');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });
  
  expect(execute).toThrow('Failed to create: folder6. status: 400');
});

/**
 * フォルダ作成成功 - 親フォルダURLを固定値で指定し、その値が空
 */
test('201 Success - Specify the parent folder URL with a fixed value, and that value is blank', () => {
  const folderUrlDef = prepareConfigs(null, 'folder7');
  
  configs.put('conf_parentFolderUrl', '');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'me/drive', 'root', 'folder7');
    return httpClient.createHttpResponse(201, 'application/json', `{"webUrl":"https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/folder7"}`);
    
  });
  
  execute();
  
  // 文字型データ項目の値をチェック
  expect(engine.findData(folderUrlDef)).toEqual('https://test-my.sharepoint.com/personal/staff_questetra365_onmicrosoft_com/Documents/folder7');
});

]]></test>

</service-task-definition>
