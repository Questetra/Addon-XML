<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2024-04-16</last-modified>

    <label>(Any Website): Download File</label>
    <label locale="ja">(任意Webサイト): ファイル ダウンロード</label>

    <summary>This item downloads a file and adds to file-type data. The GET request to the URL is thrown and the response is saved
        as a file.
    </summary>
    <summary locale="ja">この工程は、ファイルをダウンロードし、ファイル型データに追加します。指定したURLへGETリクエストが投げられ、そのレスポンスがファイルとして保存されます。</summary>

    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>

    <help-page-url>https://support.questetra.com/bpmn-icons/any-website-file-download/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/any-website-file-download/</help-page-url>

    <configs>
        <config name="conf_DataIdA" required="true" form-type="TEXTFIELD" el-enabled="true">
            <label>C1: File URL</label>
            <label locale="ja">C1: ダウンロードファイルの URL</label>
        </config>
		<config name="conf_OAuth2" form-type="OAUTH2">
            <label>C2: Basic Auth Setting / OAuth2 Setting</label>
            <label locale="ja">C2: Basic 認証設定 / OAuth2 設定</label>
        </config>
        <config name="conf_DataIdB" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C3: Data Item to add the file (File)</label>
            <label locale="ja">C3: ダウンロードファイルを追加保存するデータ項目 (ファイル)</label>
        </config>
        <config name="conf_SaveAs" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C4: Downloaded File Name</label>
            <label locale="ja">C4: 保存する際のファイル名</label>
        </config>
    </configs>

    <script><![CDATA[
function main() {
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.getObject("conf_OAuth2");
  
  const fileUrl = configs.get( "conf_DataIdA" );
  const dataIdB = configs.get( "conf_DataIdB" );
  const saveAs  = configs.get( "conf_SaveAs" );

  //// == Data Retrieving / ワークフローデータの参照 == 
  let processFiles = engine.findDataByNumber( dataIdB );
  // java.util.ArrayList <com.questetra.bpms.core.event.scripttask.QfileView>
  if (processFiles === null) {
    processFiles = new java.util.ArrayList();
  }

  //// == Calculating / 演算 ==
  if( saveAs === "" ){
    throw "Downloaded File Name isn't set";
  }
  if ( ! fileUrl.startsWith('http') ) {
    throw "Invalid URL. URL must start with either http or https.";
  }

  const response = accessToTheUrl( oauth2, fileUrl );

  const qfile = saveFile( saveAs, response );

  //// == Data Retrieving / ワークフローデータへの代入 == 
  updateData( processFiles, dataIdB, qfile )
}

/**
  * ダウンロードファイルの URL に GET リクエストを送信し、ファイルを取得する
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @param {String} fileUrl  ダウンロードファイルの URL
  * @return {HttpResponseWrapper} response  レスポンス
  */
function accessToTheUrl( oauth2, fileUrl ) {
  let response;
  
  try {
    let httpRequest = httpClient.begin()
    if ( oauth2 !== "" && oauth2 !== null ) {
      httpRequest = httpRequest.authSetting(oauth2);
    }
    response = httpRequest.get( fileUrl );
  } catch (e) {
      throw `Unable to access ${fileUrl}.`;
  } 

  const httpStatus  = response.getStatusCode();
  engine.log( `STATUS: ${httpStatus}` );
  if (httpStatus >= 300) {
    engine.log( response.getResponseAsString() );
    throw `Failed to download. STATUS: ${httpStatus}`;
  }

  return response;
}


/**
  * ダウンロードしたファイルを名前を付けて保存する
  * @param {String} saveAs  保存する際のファイル名
  * @param {HttpResponseWrapper} response  レスポンス
  * @return {Qfile} qfile  ファイル
  */
function saveFile( saveAs, response ) {
  const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
    saveAs, response.getContentType(), response.getResponse()
  );
  return qfile;
}

/**
  * ダウンロードしたファイルをデータ項目に出力する
  * @param {Array<Qfile>} processFiles  ファイルの配列
  * @param {String} dataIdB  ダウンロードファイルを追加保存するデータ項目のデータ定義番号
  * @param {Qfile} qfile  ファイル
  */
function updateData( processFiles, dataIdB, qfile ) {
  processFiles.add( qfile );
  engine.setDataByNumber( dataIdB, processFiles );
}
]]></script>

<test><![CDATA[
/**
 * 設定の準備
 * @param configs
 * @param url
 * @param files
 * @param fileName
 * @return {Object}
 */
const prepareConfigs = (configs, url, files, fileName, authType) => {
    let auth;
    if (authType !== "") {
        if (authType === "Box") {
            auth = httpClient.createAuthSettingOAuth2(
                'Box',
                'https://account.box.com/api/oauth2/authorize',
                'https://api.box.com/oauth2/token',
                'root_readwrite',
                'consumer_key',
                'consumer_secret',
                'access_token'
            );
        }
        if (authType === "Basic") {
            auth = httpClient.createAuthSettingBasic('Basic Auth', 'user', 'pass');
        }
        configs.putObject('conf_OAuth2', auth);
    }

    configs.put('conf_DataIdA', url);
    const fileDef = engine.createDataDefinition('ファイル', 1, 'q_file', 'FILE');
    configs.putObject('conf_DataIdB', fileDef);
    engine.setData(fileDef, files);

    configs.put('conf_SaveAs', fileName);

    return fileDef;
};



/**
 * リクエストのテスト
 * @param expectedUrl
 * @param method
 */
const assertRequest = ({url, method}, expectedUrl) => {
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
};



/**
 * ファイルのテスト
 * @param file
 * @param name
 * @param contentType
 * @param body
 */
const assertFile = (file, name, contentType, encoding, body) => {
    expect(file.getName()).toEqual(name);
    expect(file.getContentType()).toEqual(contentType);
    let text = '';
    fileRepository.readFile(file, encoding, line => text += line + '\n');
    expect(text).toEqual(body);
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
    }
    if (!failed) {
        fail();
    }
};

/**
 * ファイル名が空でエラーになる場合
 */
test('FileName is blank', () => {
    prepareConfigs(configs, 'https://example.com/test.pdf', null, '', '');


    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Downloaded File Name isn\'t set');
});



/**
 * 不正な URL でエラーになる場合
 */
test('URL is invalid', () => {
    prepareConfigs(configs, 'ftp://example.com', null, 'test.txt', 'Box');
	
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Invalid URL. URL must start with either http or https.');
});



/**
 * ダウンロード成功
 * HTTP 認証設定無し　 
 * HTTP 認証設定 が不要な URL
 */
test('Success / not Auth - URL that does not require HTTP authentication settings', () => {
    const fileDef = prepareConfigs(configs, 'https://example.com/test.pdf', null, 'test.pdf', '');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'https://example.com/test.pdf');
        return httpClient.createHttpResponse(200, 'text/plain; charset=UTF-8', 'こんにちは');
    });

    main();

    const files = engine.findData(fileDef);
    expect(files.size()).toEqual(1);
    assertFile(files.get(0), 'test.pdf', 'text/plain', 'UTF-8', 'こんにちは\n');
});



/**
 * ダウンロード成功
 * HTTP 認証設定を指定  
 * OAuth2 が必要な URL  
 * 添付ファイル有
 */
test('Success / set OAuth2 - URL that requires HTTP authentication settings', () => {
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('test.html', 'text/html; charset=UTF-8', '<html lang="ja"></html>'));
    files.add(engine.createQfile('test.xml', 'text/xml; charset=UTF-16', '<xml>さようなら</xml>'));
    const fileDef = prepareConfigs(configs, 'https://api.box.com/2.0/files/12345/content', files, ' ', 'Box');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'https://api.box.com/2.0/files/12345/content');
        return httpClient.createHttpResponse(200, 'text/plain; charset=EUC-JP', 'さようなら');
    });

    main();

    files = engine.findData(fileDef);
    expect(files.size()).toEqual(3);
    assertFile(files.get(2), ' ', 'text/plain', 'EUC-JP', 'さようなら\n');
});


/**
 * ダウンロード成功
 * HTTP 認証設定を指定  
 * Basic 認証が必要な URL  
 * 添付ファイル有
 */
test('Success / set Basic - URL that requires HTTP authentication settings', () => {
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('test.html', 'text/html; charset=UTF-8', '<html lang="ja"></html>'));
    files.add(engine.createQfile('test.xml', 'text/xml; charset=UTF-16', '<xml>さようなら</xml>'));
    const fileDef = prepareConfigs(configs, 'https://test.questetra.net/API/Feed/File/downloadThumbnail?id=11111', files, ' ', 'Basic');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'https://test.questetra.net/API/Feed/File/downloadThumbnail?id=11111');
        return httpClient.createHttpResponse(200, 'text/plain; charset=EUC-JP', 'さようなら');
    });

    main();

    files = engine.findData(fileDef);
    expect(files.size()).toEqual(3);
    assertFile(files.get(2), ' ', 'text/plain', 'EUC-JP', 'さようなら\n');
});



/**
 * ダウンロード失敗
 * HTTP 認証設定無し　 
 * Basic 認証や OAuth2 が必要な URL
 */
test('Success / not Auth - URL that requires HTTP authentication settings', () => {
    const fileDef = prepareConfigs(configs, 'https://api.box.com/2.0/files/12345/content', null, 'test.pdf', '');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'https://api.box.com/2.0/files/12345/content');
        return httpClient.createHttpResponse(401, 'text/plain; charset=UTF-8', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed to download. STATUS: 401');
});



/**
 * ダウンロード失敗
 * HTTP 認証設定を指定　 
 * Basic 認証やOAuth2 が不要な URL
 */
test('Success / set Auth - URL that does not require HTTP authentication settings', () => {
    const fileDef = prepareConfigs(configs, 'https://raw.githubusercontent.com/Questetra/Addon-XML/release-2021-08-17/kintone-file-download.xml', null, 'kintone-file-download.xml', 'Box');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'https://raw.githubusercontent.com/Questetra/Addon-XML/release-2021-08-17/kintone-file-download.xml');
        return httpClient.createHttpResponse(404, 'text/plain; charset=UTF-8', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed to download. STATUS: 404');
});

]]></test>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADi0lEQVRYR8WXTUgUURzAf7NLq1GQ
        Vhb0ZUGfErZZkIcoCSk6FCV0KXDdCmcPQXUp6rB+XCIttNNmJBYhQZfyEEEQbUXQIWEtsqAoKRSz
        DruYGmZOvJlGd2ferLO51YNhF97//f+/997/6yn856FkZL+FfcB2NPwo5AH+3+tjaMRREL9RQnS4
        1Ts1QBt5jHIcOAG6UTcjDjTj4xJBxH/HkR4gQhUemjIwbDUkjAdRueNE4AxwmWYUfefZGM2onJQp
        kgO0cA0IZMPyhA6Na4QIWnXaAbK781R7GpcI6b40MVIBjDtvy+rO7cr2J/vEJIDh7R+m4XBuueP4
        WGFGxyRAC7VAjZOWxi2NVK6upGBmgS7SM9hDY1cjke6IW8PJcnWouj2SAUTIzJFpa93eSmB1AK/i
        TZkeGhuivrOehq6GTCHiqORPAhgZ7rZMy+6lu2kra2PhzIVSI33DfXwZ+cKy2cv4+O0jN97e4OKL
        i26AdF8wTiCN54dLwpzdeJYcb44bpYyNj9H+rp2qaFV6+d8RYQC0ENVzvGTUb67ntP80Po/PFYAQ
        +jzymWA0yL1P99KteYRKmQnQAxRapUsXlFK7uZYdi3YwwzMjZbp/uJ9zsXOULy5nT+GelLnR8VHO
        x84Tfh5OBxBDZaMJoFkli/KKuFl+k+K5xVIlvUO9VD6s5ODKgxxZeyRFRkOjb6iPW+9vUfO8hsEf
        g3IQFcURILI1QvW6ajyKJ2MAc4EAedD7gIr7FXKIJADbFXRWdFIyv0Rq/NnAM3be3Tmh9Iz/DOFN
        YXK9uTb54bFh/SpskaHRRQi/oxO+OvCKovwiKcBP7Sftb9sJRAOIML2y7QpLZi1xvO/WN60cfXzU
        Op/khJIw7NjVwd7CvY5KzSR0aNUhRz8Ri8e1cT1bHnt6LFWXJQxtiejwmsNcKL1Afo6esKRDxLzX
        40VJSqhWwYGRAUJPQtzuseW5pERk5AJbKj614RTim5c7z3UOSBZMjCZoetlEXWeddX0C1WjvpixG
        4m5FqK2fuz4jiK/fv3L19VW6492ydZJiZJRjEQ3SgpSR9fTCCXwst5djsei/NiQm9d9syWDi6E1z
        /64pheuo2Erkv2rLbTtPfwLmrNGoiBb9Tx0zAVT92cPEhDCiQ7TS4nMLIgyLp1nz9J5m1nASJ6JR
        hoIfjTwUNugiorAoxNGIoRBNt2Oryqkfp1lMADJVvwC8Hiswkyz4FwAAAABJRU5ErkJggg==
    </icon>

</service-task-definition>
