<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>Google BigQuery: Insert New Data</label>
<label locale="ja">Google BigQuery: データ追加</label>
<last-modified>2022-03-08</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Insert a new data row to a table on BigQuery.</summary>
<summary locale="ja">BigQuery のテーブルにデータを１行追加します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/bigquery">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_projectId" required="true" form-type="TEXTFIELD">
    <label>C2: Project ID</label>
    <label locale="ja">C2: プロジェクト ID</label>
  </config>
  <config name="conf_datasetId" required="true" form-type="TEXTFIELD">
    <label>C3: Dataset ID</label>
    <label locale="ja">C3: データセット ID</label>
  </config>
  <config name="conf_tableId" required="true" form-type="TEXTFIELD">
    <label>C4: Table ID</label>
    <label locale="ja">C4: テーブル ID</label>
  </config>
  <config name="conf_templateSuffix" required="false" form-type="TEXTFIELD" el-enabled="true">
    <label>C5: Template Suffix (required if the table is a base template)</label>
    <label locale="ja">C5: テンプレートサフィックス（テンプレートテーブルの場合のみ）</label>
  </config>
  <config name="conf_field1" required="false" form-type="TEXTFIELD">
    <label>C6F: Field 1</label>
    <label locale="ja">C6F: フィールド_1</label>
  </config>
  <config name="conf_value1" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6V: Value 1</label>
    <label locale="ja">C6V: 値_1</label>
  </config>
  <config name="conf_field2" required="false" form-type="TEXTFIELD">
    <label>C7F: Field 2</label>
    <label locale="ja">C7F: フィールド_2</label>
  </config>
  <config name="conf_value2" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7V: Value 2</label>
    <label locale="ja">C7V: 値_2</label>
  </config>
  <config name="conf_field3" required="false" form-type="TEXTFIELD">
    <label>C8F: Field 3</label>
    <label locale="ja">C8F: フィールド_3</label>
  </config>
  <config name="conf_value3" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C8V: Value 3</label>
    <label locale="ja">C8V: 値_3</label>
  </config>
  <config name="conf_field4" required="false" form-type="TEXTFIELD">
    <label>C9F: Field 4</label>
    <label locale="ja">C9F: フィールド_4</label>
  </config>
  <config name="conf_value4" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C9V: Value 4</label>
    <label locale="ja">C9V: 値_4</label>
  </config>
  <config name="conf_field5" required="false" form-type="TEXTFIELD">
    <label>C10F: Field 5</label>
    <label locale="ja">C10F: フィールド_5</label>
  </config>
  <config name="conf_value5" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C10V: Value 5</label>
    <label locale="ja">C10V: 値_5</label>
  </config>
  <config name="conf_field6" required="false" form-type="TEXTFIELD">
    <label>C11F: Field 6</label>
    <label locale="ja">C11F: フィールド_6</label>
  </config>
  <config name="conf_value6" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C11V: Value 6</label>
    <label locale="ja">C11V: 値_6</label>
  </config>
  <config name="conf_field7" required="false" form-type="TEXTFIELD">
    <label>C12F: Field 7</label>
    <label locale="ja">C12F: フィールド_7</label>
  </config>
  <config name="conf_value7" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C12V: Value 7</label>
    <label locale="ja">C12V: 値_7</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-bigquery-data-insert/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-bigquery-data-insert/</help-page-url>

<script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// - Token Endpoint URL: https://oauth2.googleapis.com/token
// - Scope: https://www.googleapis.com/auth/bigquery
// - Consumer Key: (Get by Google Developer Console)
// - Consumer Secret: (Get by Google Developer Console)

const FIELD_NUM = 7; // 扱えるフィールドの数

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const oauth2 = configs.get("conf_auth");
  const projectId = configs.get("conf_projectId");
  const datasetId = configs.get("conf_datasetId");
  const tableId = configs.get("conf_tableId");
  const templateSuffix = configs.get("conf_templateSuffix");

  isValidProjectId( projectId );
  isValidDatasetId( datasetId );
  isValidTableId( `${tableId}${templateSuffix}` );

  const dataObj = retrieveDataObj();

  //// == 演算 / Calculating ==
  insertData( oauth2, projectId, datasetId, tableId, templateSuffix, dataObj );
}

/**
  * プロジェクト ID が不正な文字列であればエラー
  * @param {String} projectId  プロジェクト ID
  */
function isValidProjectId( projectId ) {
  const reg = new RegExp( '^[a-zA-Z][0-9a-zA-Z-]{4,28}[0-9a-zA-Z]$' );
  if ( !reg.test(projectId) ) {
    throw "Invalid Project ID.";
  }
}

/**
  * データセット ID が不正な文字列であればエラー
  * @param {String} datasetId  データセット ID
  */
function isValidDatasetId( datasetId ) {
  const reg = new RegExp( '^\\w{1,1024}$' );
  if ( !reg.test(datasetId) ) {
    throw "Invalid Dataset ID.";
  }
}

/**
  * テーブル ID （サフィックスを含む）が不正な文字列であればエラー
  * @param {String} tableId  テーブル ID
  */
function isValidTableId( tableId ) {
  if( encodeURIComponent(tableId).replace(/%../g,"x").length > 1024 ) {
    throw "Invalid Table ID and/or Template Suffix. Too long.";
  }
  const reg = new RegExp( '^[\\p{L}\\p{M}\\p{N}\\p{Pc}\\p{Pd}\\p{Zs}]+$' , 'u');
  if ( !reg.test(tableId) ) {
    throw "Invalid Table ID and/or Template Suffix. Includes an invalid character.";
  }
}

/**
  * フィールドが不正な文字列であればエラー
  * @param {String} field  フィールド
  */
function isValidField( field ) {
  const reg = new RegExp( '^(?!_TABLE_|_FILE_|_PARTITION)[a-zA-Z_]\\w{0,299}$' );
  if ( !reg.test(field) ) {
    throw `Invalid Field Name: ${field}.`;
  }
}

/**
  * config からフィールドと値の組を読み出し、JSON オブジェクトを返す
  * @return {Object} dataObj  データオブジェクト
  */
function retrieveDataObj() {
  const dataObj = {};
  for (let i = 0; i < FIELD_NUM; i++) {
    const field = configs.get(`conf_field${i+1}`);
    let value = configs.get(`conf_value${i+1}`);
    if ( field === "" || field === null ) { // フィールドが空
      continue;
    }
    isValidField( field );
    if ( dataObj[field] !== undefined ) { // フィールドコードの指定が重複
      throw `The same field ${field} is set multiple times.`;
    }
    if ( value === "" || value === null ) { // 値が空
      value = null;
    }
    dataObj[field] = value;
  }
  return dataObj;
}

/**
  * データ追加の POST リクエストを送信する
  * @param {String} oauth  OAuth2 認証設定
  * @param {String} projectId  プロジェクト ID
  * @param {String} datasetId  データセット ID
  * @param {String} tableId  テーブル ID
  * @param {String} templateSuffix  テンプレートサフィックス
  * @param {Object} dataObj  データオブジェクト
  */
function insertData( oauth2, projectId, datasetId, tableId, templateSuffix, dataObj ) {
  const uri = `https://bigquery.googleapis.com/bigquery/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/insertAll`;

  const body = {};
  body["kind"] = "bigquery#tableDataInsertAllRequest";
  body["rows"] = [{ "json": dataObj }];
  if ( templateSuffix !== "" && templateSuffix !== null ) {
    body["templateSuffix"] = templateSuffix;
  }

  const response = httpClient.begin()
    .authSetting( oauth2 )
    .body( JSON.stringify(body), "application/json; charset=UTF-8" )
    .post(encodeURI(uri));

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if ( status >= 300 ) { // when error thrown
    engine.log(responseStr);
    throw `Failed to insert data. status: ${status}`;
  }
  const errors = JSON.parse(responseStr)["insertErrors"];
  if ( errors !== undefined ) {
    engine.log(JSON.stringify(errors));
    throw "Failed to insert data.";
  }
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAERUlEQVRYR8WXfWyTVRSHn9uvdW1X
4lgIwShTTDRo1KEGExMC3R/zI6goCNvUIEbd0BHRRWAbkeCmwCBOcY4QnBEF2YygosmMrMyoCUgC
xiBqAqImED/Ama1f69c19+3add3bt0UxvX++Ofec55x7fufeV1DgJfKNP3/dWUfA6r4PmCclFQhZ
DuKSxH45iBQ/C8Ex4KAjMrR3/7ppgXx85wSYu8k31RRlFZI6wJ6PUyCEYFvcwsaB51y/Ge0xBPC0
DtchxGbAmWfgTDM/UjZ6W0q2ZdufFcDT5n8dZP2/DJyxTXR5m53L9XzpAnhah3cjRPXFCT7qRcp3
vS0lNZk+JwBc3MwnhJtQiXEAo2feZZT5FLeg6noLl5aakBJ+PRen79sog36ZX8GkrE/viRSA1u0R
TmZruKmTBOsX2ZkxxaQb6MSZOGvfC/F3ICeIP27lqqQ6UgCeF30vI3laz/t1l5nZUmvHMho7GoPf
h+KYhaDMLVLfw1FY/maQ03/Gjash6PA2uVYqIw1ADRm/1X1eT+eTHILeBgcWM8TisONgmN7DkVQA
IWDpHBu1t1k1Z8Gw5P5XAoyMmejBhJyRoclqWGkAlW2+ByW8rWfZXmNnVrlZO++n3gryw1n97G6+
wsyGarsGceB4lJc+GjGsgoCH+ptd7yQB3pCwLHOHKnnfKicqy71HInR+FtZMTAKeqLQxFJTs+mos
1ZZ7i5g300IkBrdv9OcC6O5vdj2qAXhafUcRVGTuuOVKMxuWJKbvne3+VFmLbYKPGx2oXqhKC1RW
IuhpcGj2D3cFOTNo0AuSY94W16wEQNvwX2MXyxjGPTdZWVFl0wIrACW/2TPMdPSF2bdyIoDa+elq
p9aUTT0hDp+KGVRBDnqbS0pHAXy62rnjBguNdxWlMlVKuHG6mSVbA+xpSAAs6AjQ9Yid/u+i7Pwi
woEmp9YHz+4K8c0vRgDgbXap01UV0AeYXmai+/FiLYv67qB27pkANZ0Belc4OHQyxv6jEdoeSBzZ
/C0BAiPGMyENQP8IlKMPn3HgsgtO/xGn/ZMROpcWU/3aWAUUwO4nHSzbHmRzrR01Kc8NSxZvzfUc
SD+CLE2oABbNtlJXadOy6j8eZcdAmOEQWg/4Q5KFrwZwFwvW3F2Ealq1XvhghIETUUMVkN6ElW0+
XRkmPaisr5mWGIPnfZKeQxE+/z6qydFzrYXFt1o1iOQ68lOM1XtC+cvQaBAldb+p2k5FeSLDfNbX
p2Ks6ckOMW4QGY3i9GBKgo95bFw+2YQ5eS/E0fpDDalSl2DtgqLEfAe+/DHG8+/rQowfxZoSDC4j
vYxV+VWPqxGdvubOtKAmooJQMlRynLAyLyNlkOs6zqfsSRsFMedqM+v36d4H+texVoXEI9TwQXIh
ILq22R4kSeOCPslSEIV8lP4/lbjAZ3laJQr3Y5Lq6EL+mqV3ccF+Tv+z7HI4+AfnY90wO/4PaAAA
AABJRU5ErkJggg==
</icon>

<test><![CDATA[

const FIELD_SIZE = 7; // 扱えるフィールドの数

/**
 * 設定の準備
 * @param projectId
 * @param datasetId
 * @param tableId
 * @param templateSuffix
 * @return dataObj
 */
const prepareConfigs = (projectId, datasetId, tableId, templateSuffix) => {
  configs.put('conf_auth', 'Google');
  configs.put('conf_projectId', projectId);
  configs.put('conf_datasetId', datasetId);
  configs.put('conf_tableId', tableId);
  configs.put('conf_templateSuffix', templateSuffix);

  const dataObj = {};
  for (let i = 0; i < FIELD_SIZE; i++) {
    const field = `Field_${i+1}`;
    const value = `値\n${i+1}`;
    configs.put(`conf_field${i+1}`, field);
    configs.put(`conf_value${i+1}`, value);
    dataObj[field] = value;
  }
  return dataObj;
};

/**
 * プロジェクト ID が不正な文字列でエラーになる場合
 * 最初の文字が数字
 */
test('Invalid Project ID - Starts with a number', () => {
  prepareConfigs('123456', 'Dataset_1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Project ID.');
  }
});

/**
 * プロジェクト ID が不正な文字列でエラーになる場合
 * 最後の文字がハイフン
 */
test('Invalid Project ID - Ends with a hyphen', () => {
  prepareConfigs('project-', 'Dataset_1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Project ID.');
  }
});

/**
 * プロジェクト ID が不正な文字列でエラーになる場合
 * 英字、数字、ハイフン以外の文字を含む
 */
test('Invalid Project ID - Includes an invalid character', () => {
  prepareConfigs('project_1', 'Dataset_1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Project ID.');
  }
});

/**
 * プロジェクト ID が不正な文字列でエラーになる場合
 * 5 文字以下
 */
test('Invalid Project ID - Too short', () => {
  prepareConfigs('p-123', 'Dataset_1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Project ID.');
  }
});

/**
 * プロジェクト ID が不正な文字列でエラーになる場合
 * 31 文字以上
 */
test('Invalid Project ID - Too long', () => {
  prepareConfigs('p012345678901234567890123456789', 'Dataset_1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Project ID.');
  }
});

/**
 * データセット ID が不正な文字列でエラーになる場合
 * 英字、数字、アンダースコア以外の文字を含む
 */
test('Invalid Dataset ID - Includes an invalid character', () => {
  prepareConfigs('project-1', 'Dataset-1', 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Dataset ID.');
  }
});

/**
 * データセット ID が不正な文字列でエラーになる場合
 * 1,025 文字以上
 */
test('Invalid Dataset ID - Too long', () => {
  const datasetId = 'Data-' + '0123456789'.repeat(102);
  prepareConfigs('project-1', datasetId, 'テーブル 1', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Dataset ID.');
  }
});

/**
 * テーブル ID が不正な文字列でエラーになる場合
 * 非対応の文字を含む
 */
test('Invalid Table ID - Includes an invalid character', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル(1)', '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Table ID and/or Template Suffix. Includes an invalid character.');
  }
});

/**
 * テーブル ID が不正な文字列でエラーになる場合
 * 1,025 バイト以上
 */
test('Invalid Table ID - Too long', () => {
  const tableId = 'テーブル12345' + 'ああああああああ'.repeat(42);
  prepareConfigs('project-1', 'Dataset_1', tableId, '');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Table ID and/or Template Suffix. Too long.');
  }
});

/**
 * テンプレートサフィックスが不正な文字列でエラーになる場合
 * 非対応の文字を含む
 */
test('Invalid Template Suffix - Includes an invalid character', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '>サフィックス');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Table ID and/or Template Suffix. Includes an invalid character.');
  }
});

/**
 * テンプレートサフィックスが不正な文字列でエラーになる場合
 * テーブル ID と合わせて 1,025 バイト以上
 */
test('Invalid Template Suffix - Too long', () => {
  const tableId = 'テーブル'; // 12 バイト
  const templateSuffix = 'テンプレートサフィックス'.repeat(28) + '12345'; // 1,013 バイト
  prepareConfigs('project-1', 'Dataset_1', tableId, templateSuffix);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Table ID and/or Template Suffix. Too long.');
  }
});

/**
 * フィールド名が不正な文字列でエラーになる場合
 * 英字、数字、アンダースコア以外の文字を含む
 */
test('Invalid Field Name - Includes an invalid character', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_field3', 'Field-3');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Field Name: Field-3.');
  }
});

/**
 * フィールド名が不正な文字列でエラーになる場合
 * 最初の文字が数字
 */
test('Invalid Field Name - Starts with a number', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_field1', '111111');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Field Name: 111111.');
  }
});

/**
 * フィールド名が不正な文字列でエラーになる場合
 * 予約語で始まる
 */
test('Invalid Field Name - Invalid Prefix', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_field4', '_FILE_4');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Invalid Field Name: _FILE_4.');
  }
});

/**
 * フィールド名が不正な文字列でエラーになる場合
 * 301 文字以上
 */
test('Invalid Field Name - Too long', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  const fieldName = 'F' + '0123456789'.repeat(30);
  configs.put('conf_field5', fieldName);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith(`Invalid Field Name: ${fieldName}.`);
  }
});

/**
 * 複数の組で同じフィールドを指定しエラーになる場合
 */
test('The same field is set multiple times', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_field2', 'Field_6');

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('The same field Field_6 is set multiple times.');
  }
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param projectId
 * @param datasetId
 * @param tableId
 * @param templateSuffix
 * @param dataObj
 */
const assertRequest = ({url, method, contentType, body}, projectId, datasetId, tableId, templateSuffix, dataObj) => {
  const expectedUrl = `https://bigquery.googleapis.com/bigquery/v2/projects/${projectId}/datasets/${datasetId}/tables/${tableId}/insertAll`;
  expect(url).toEqual(encodeURI(expectedUrl));
  expect(method).toEqual('POST');
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  expect(bodyObj.kind).toEqual('bigquery#tableDataInsertAllRequest');
  expect(bodyObj.rows[0].json).toEqual(dataObj);
  if (templateSuffix === '') {
    expect(bodyObj.templateSuffix).toEqual(undefined);
  } else {
    expect(bodyObj.templateSuffix).toEqual(templateSuffix);
  }
};

/**
 * POST リクエストで失敗
 * ステータスコードが 300 以上
 */
test('POST Failed - Status code is greater than 300', () => {
  const dataObj = prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to insert data. status: 400');
  }
});

/**
 * POST リクエストで失敗
 * レスポンスにエラーを含む
 */
test('POST Failed - Response has insert errors', () => {
  const dataObj = prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  const response = {
    "kind": "bigquery#tableDataInsertAllResponse",
    "insertErrors": [
      {
        "errors": [
          {
            "message": "Something went wrong."
          }
        ]
      }
    ]
  };

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(response));
  });

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to insert data.');
  }
});

/**
 * データ追加成功
 * 全てのフィールドと値が設定されている場合
 */
test('Success - All fields are set', () => {
  const dataObj = prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * フィールドが1つも設定されていない
 */
test('Success - No fields are set', () => {
  prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  for (let i = 0; i < FIELD_SIZE; i++) {
    configs.put(`conf_field${i+1}`, '');
  }

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', {}); // 空データが送信される
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * 設定されていないフィールドがある
 */
test('Success - Some fields are empty', () => {
  const dataObj = prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_field2', '');
  configs.put('conf_field5', '');
  delete dataObj.Field_2;
  delete dataObj.Field_5;

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * 空の値を含む
 */
test('Success - Some values are empty', () => {
  const dataObj = prepareConfigs('project-1', 'Dataset_1', 'テーブル 1', '');
  configs.put('conf_value1', '');
  configs.put('conf_value3', '');
  configs.put('conf_value7', '');
  dataObj.Field_1 = null;
  dataObj.Field_3 = null;
  dataObj.Field_7 = null;

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * プロジェクト ID, データセット ID, テーブル ID, フィールド名が最大文字数
 * フィールド名はアンダースコア始まりでもよい
 */
test('Success - Project ID, Dataset ID, Table ID, Field Name are at maximum length', () => {
  const projectId = 'projectid-01234567890123456789'; // 30 文字
  const datasetId = 'Dset' + '0123456789'.repeat(102); // 1,024 文字
  const tableId = 'テーブル 001' + 'ああああああああああああ'.repeat(28); // 1,024 バイト
  const dataObj = prepareConfigs(projectId, datasetId, tableId, '');

  const fieldName = '_FieldName' + '0123456789'.repeat(29); // 300 文字
  configs.put('conf_field3', fieldName);
  dataObj[fieldName] = configs.get('conf_value3');
  delete dataObj.Field_3;

  httpClient.setRequestHandler((request) => {
    assertRequest(request, projectId, datasetId, tableId, '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * プロジェクト ID が最小文字数
 */
test('Success - Project ID is at minimum length', () => {
  const dataObj = prepareConfigs('proj-1', 'Dataset_1', 'テーブル 1', '');

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'proj-1', 'Dataset_1', 'テーブル 1', '', dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * データ追加成功
 * テンプレートサフィックスが設定されている場合
 */
test('Success - With Template Suffix', () => {
  const tableId = 'テーブル'; // 12 バイト
  const templateSuffix = 'テンプレートサフィックス'.repeat(28) + '1234'; // 1,012 バイト
  const dataObj = prepareConfigs('project-1', 'Dataset_1', tableId, templateSuffix);

  httpClient.setRequestHandler((request) => {
    assertRequest(request, 'project-1', 'Dataset_1', tableId, templateSuffix, dataObj);
    return httpClient.createHttpResponse(200, 'application/json', `{"kind": "bigquery#tableDataInsertAllResponse"}`);
  });

  // <script> のスクリプトを実行
  execute();
});

]]></test>

</service-task-definition>
