<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Amazon S3: Upload File</label>
    <label locale="ja">Amazon S3: ファイルアップロード</label>
    <!-- <last-modified>2023-11-20</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <summary>This item uploads files to the specified folder on Amazon S3.</summary>
    <summary locale="ja">この工程は、Amazon S3 の指定フォルダにファイルをアップロードします。</summary>
    <configs>
        <config name="conf_AccessKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Access Key</label>
            <label locale="ja">C1: アクセスキー</label>
        </config>
        <config name="conf_SecretKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Secret Access Key</label>
            <label locale="ja">C2: シークレットアクセスキー</label>
        </config>
        <config name="conf_Region" required="true" form-type="TEXTFIELD">
            <label>C3: Region Code</label>
            <label locale="ja">C3: リージョンコード</label>
        </config>
        <config name="conf_Bucket" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C4: Bucket Name</label>
            <label locale="ja">C4: バケット名</label>
        </config>
        <config name="conf_Folder" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C5: Target Folder Path (Root if blank)</label>
            <label locale="ja">C5: アップロード先フォルダのパス（指定がない場合は、ルートフォルダ）</label>
        </config>
        <config name="conf_Files" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C6: Data item whose attached files will be uploaded</label>
            <label locale="ja">C6: アップロードするファイルが保存されているデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-aws-s3-file-upload/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-aws-s3-file-upload/</help-page-url>

    <script><![CDATA[

function main() {
    const awsKey = configs.getObject("conf_AccessKey").getToken();
    const awsSecret = configs.getObject("conf_SecretKey").getToken();
    const region = retrieveRegion();
    const bucket = retrieveBucket();
    const folder = retrieveFolder();

    const fileDef = configs.getObject("conf_Files");
    const files = engine.findData(fileDef);
    if (files === null) {
        return;
    }
    if (files.size() > httpClient.getRequestingLimit()) {
        throw new Error("The number of files exceeds the limit.");
    }
    for (let i = 0; i < files.size(); i++) {
        const file = files.get(i);
        uploadFile(awsKey, awsSecret, region, bucket, folder, file);
    }
}

/**
 * config からリージョンコードを読み出す
 * リージョンコードの形式として不正な場合はエラー
 * @return {String}
 */
function retrieveRegion() {
    const region = configs.get("conf_Region");
    // 今後リージョンが増えることも考えて、中央の最大文字数には余裕をみている
    const reg = new RegExp("^[a-z]{2}-[a-z]{4,16}-[1-9]$");
    if (!reg.test(region)) {
        throw new Error("Region Code is invalid.");
    }
    return region;
}

/**
 * form-type="SELECT" editable="true"
 * の設定値を読み出す
 * @return {String}
 */
function getConfSelectValue(configName) {
    const def = configs.getObject(configName);
    if (def === null) {
        return configs.get(configName);
    }
    return engine.findData(def) ?? "";
}

/**
 * config からバケット名を読み出す
 * バケット名の形式として不正な場合はエラー
 * @return {String}
 */
function retrieveBucket() {
    const bucket = getConfSelectValue("conf_Bucket");
    if (bucket === "") {
        throw new Error("Bucket Name is blank.");
    }
    const reg = new RegExp("^[0-9a-z][0-9a-z-.]{1,61}[0-9a-z]$");
    if (!reg.test(bucket) || bucket.includes("..")) {
        throw new Error("Bucket Name is invalid.");
    }
    return bucket;
}

/**
 * config からフォルダパスを読み出す
 * 連続するスラッシュを含む場合はエラー
 * 先頭、末尾のスラッシュは削除
 * @return {String}
 */
function retrieveFolder() {
    let folder = getConfSelectValue("conf_Folder");
    if (folder.includes("//")) { // 連続するスラッシュがある場合、エラー
        throw new Error("Folder Path is invalid.");
    }
    if (folder.startsWith("/")) { // 先頭にスラッシュがある場合、削除
        folder = folder.slice(1);
    }
    if (folder.endsWith("/")) { // 末尾にスラッシュがある場合、削除
        folder = folder.slice(0, -1);
    }
    return folder;
}

/**
 * ファイルアップロード
 * @param key アクセスキー
 * @param secret シークレットアクセスキー
 * @param region リージョン
 * @param bucket バケット
 * @param folder フォルダ
 * @param file ファイル
 */
function uploadFile(key, secret, region, bucket, folder, file) {
    let path = folder.split("/")
        .map(p => encodeURIComponent(p))
        .join("/");
    path += (path.length > 0 ? "/" : "") + encodeURIComponent(file.getName());
    const url = `https://${bucket}.s3.${region}.amazonaws.com/${path}`;

    const response = httpClient.begin()
        .awsSignV4(key, secret, region, "s3")
        .body(file)
        .put(url);

    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw new Error(`Failed to upload "${file.getName()}" to S3. status:${status}`);
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABE9JREFUWEfN
        l3tMlWUcxz/v4SCXA38gtyPTiXo2m8YdEp3cUzGxOdw0E5tRNqlsMDGlRRE5kFJjqUDLKEJsYuCN
        xD8qA5oMGeBhXpIdbiuRrORSkOKBt71vHuIcDnRU2un5893v8nl/z/f3e55HwMpLsDS/V1CQo6Pe
        MR6EKBECAG/A5b5/D9AhQBOI5weVg+VdDQ2DlsT+VwDvBZFqpXJkpyiwFbC3JChwRxAp0OsVOR1X
        v+uezGdSgLl+YVtB2CuAysLERmYiDICY2qatKZjIf0IAjX9EniiKSQ+T2NRHEIR83aWql83FMgug
        8Q8vEUWenYrkhhiCwFHdpeqN4+BMP0zln1tSCaMKSHsuIORP5Z+bxhIRk8ZqYhRAUrvCdkT3sIKz
        FFoS5sg9hcbQHaMAGt/wD0SBZEsDPYqdIJKra65OkWLIANKQcdCrfjPt85zMXcTGRGCjtGFo6B6f
        lRwnfMkibv58i2073ubwwRw8Pdx4bUcGcbHRrIlbQfnpc2xcvwZnJxV37w6Rd7iYwuJSU947fyoH
        XKVhJQNo/MISRIRiU6uQQF96evvRtXXw8YE9eKk9adG147NwPum79/Hum9txUqnI2nuQVSuiUXu6
        09f/OwqFgoQtycya6SWH/PGnrnEFExA36bQ1R+4DhH8iQqKp1aJgf57bsJaZXmpEUcTe3o6S0lO8
        tHkDpScqeGp5FPrhYWrrGglbEkJ9YzNKpZLVK2PQtXVypvJrjpVXMDAwfioLUKjTVr8gA8zzC2/k
        7/k+uubMnkVBbha9fX18efIsq2JjUHu48Xp6Nvuz07n1y69Ms53GjZvduLtNZ4bak4MfFVF2upLl
        0WGsfXoli58I5JuqC6SkZZqTTFOrtjrQAHB7zMEiG0vO72Wmcb6mls+/KCd3z1s4ONjz4qs72ZWS
        xJLQICrOfUvXzW6eT1jHja5unkncxrKopVy+2iLrpCh/H38MDLA5KdUcQE+rtnq6AUA0Z7E7PZWV
        yyLR6/VcbNDi4e5Kbl4hPgvmy1tTeKSU1vZOMtJSqG/UytU58P47LF0cwjRbW2739PJhwaccP3nW
        bNO0aquFSQEepdUs8R0LMG4LUrdtoa5BS82Fi5bEMrKRxCkJVaqYnZ0dZacqydp3yDSO0RaME6HU
        AW9sf0Uuf+mJr2Q1P8haHx/HDLUHi4IDaL58jez9eabu/4hQ42e+DVUqRzJ2JbMseinDwyNcu66j
        SXuFKz+0UFNbP9pekl3Y4hCCA3zxffwx5s2ZTW9fP8fKzrDiyQhZB1Xf1xkBGLXhRIPI4KGZ603i
        pnVEhoXi6uKCjY3CbDGkyXdd1yYnlioWvzoWZ2cVRUfLJh9EE41ic1mkaRcaEoC/z0KcVI6yia69
        k+strXLLWriMR7HkZNXDSAKw+nEsQVj1QjIquCm8jJrqwdzl9P93Kf0vKvHA13IDhFUfJgYIqz7N
        xorIao9TCyfbQ5v9BWbg5jDAzldXAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param key
 * @param secret
 * @param region
 * @param bucket
 * @param folder
 * @param isFixed バケット名とフォルダパスを固定値で指定するか
 * @param files
 */
const prepareConfigs = (key, secret, region, bucket, folder, isFixed, files) => {
    // 認証設定を作成し、指定
    const keyAuth = httpClient.createAuthSettingToken('Access Key', key);
    configs.putObject('conf_AccessKey', keyAuth);
    const secretAuth = httpClient.createAuthSettingToken('Secret Access Key', secret);
    configs.putObject('conf_SecretKey', secretAuth);

    configs.put('conf_Region', region);
    if (isFixed) {
        configs.put('conf_Bucket', bucket);
        configs.put('conf_Folder', folder);
    } else {
        const bucketDef = engine.createDataDefinition('Bucket Name', 1, 'q_bucket', 'STRING_TEXTFIELD');
        configs.putObject('conf_Bucket', bucketDef);
        engine.setData(bucketDef, bucket);
        const folderDef = engine.createDataDefinition('Folder Path', 2, 'q_folder', 'STRING_TEXTFIELD');
        configs.putObject('conf_Folder', folderDef);
        engine.setData(folderDef, folder);
    }

    const filesDef = engine.createDataDefinition('ファイル', 3, 'q_files', 'FILE');
    configs.putObject('conf_Files', filesDef);
    engine.setData(filesDef, files);
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.message).toEqual(errorMsg);
    }
};

/**
 * リージョンコードの形式が不正 - ハイフンを含まない
 */
test('Region Code is invalid - no hyphens', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'invalidregioncode';
    const bucket = 'abc-def.ghi';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Region Code is invalid.');
});

/**
 * リージョンコードの形式が不正 - ハイフンの間の文字列が長すぎる
 */
test('Region Code is invalid - too many characters', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'eu-toomanycharacters-1';
    const bucket = 'abc-def.ghi';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Region Code is invalid.');
});

/**
 * バケット名をデータ項目で指定し、値が空
 */
test('Bucket Name is blank', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    prepareConfigs(key, secret, region, null, null, false, null);

    assertError(main, 'Bucket Name is blank.');
});

/**
 * バケット名が 2 文字以下
 */
test('Bucket Name is invalid - too short', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = 'a';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名が 64 文字以上
 */
test('Bucket Name is invalid - too long', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = 'a'.repeat(64);
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名に不正な文字が含まれる
 */
test('Bucket Name is invalid - contains invalid character', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = 'abc/def';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名の先頭がハイフン
 */
test('Bucket Name is invalid - starts with a slash', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = '-abc';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名の先頭がドット
 */
test('Bucket Name is invalid - starts with a dot', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = '.abc';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名の末尾がハイフン
 */
test('Bucket Name is invalid - ends with a slash', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = '123-';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名の末尾がドット
 */
test('Bucket Name is invalid - ends with a dot', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = '123.';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

/**
 * バケット名にドットが連続する
 */
test('Bucket Name is invalid - adjacent dots', () => {
    const key = 'key-12345';
    const secret = 'secret-67890';
    const region = 'ap-northeast-1';
    const bucket = 'abc..efg';
    prepareConfigs(key, secret, region, bucket, null, false, null);

    assertError(main, 'Bucket Name is invalid.');
});

]]></test>
</service-task-definition>