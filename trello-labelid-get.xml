<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Trello: Get Label Id</label>
    <label locale="ja">Trello: ラベル ID 取得</label>
    <last-modified>2023-09-15</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item gets a label ID on Trello.</summary>
    <summary locale="ja">この工程は、Trello のラベル ID を取得します。</summary>
    <configs>
        <config name="conf_ApiKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Authorization Setting in which API Key is set</label>
            <label locale="ja">C1: API キーを設定した認証設定</label>
        </config>
        <config name="conf_ApiToken" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Authorization Setting in which API Token is set</label>
            <label locale="ja">C2: API トークンを設定した認証設定</label>
        </config>
        <config name="conf_BoardId" required="true" form-type="TEXTFIELD">
            <label>C3: Board ID</label>
            <label locale="ja">C3: ボード ID</label>
        </config>
        <config name="conf_LabelNames" required="true" form-type="TEXTAREA">
            <label>C4: Label Name (Write one per line)</label>
            <label locale="ja">C4: ラベルの名前 (複数設定する場合、1件ごとに改行してください)</label>
        </config>
        <config name="conf_LabelId" required="true" form-type="SELECT" select-data-type="STRING_TEXTAREA">
            <label>C5: Data item to save Label ID</label>
            <label locale="ja">C5: ラベル ID を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-trello-labelid-get/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-trello-labelid-get/</help-page-url>

    <script><![CDATA[

function main() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const authKey = configs.getObject("conf_ApiKey");
    const authToken = configs.getObject("conf_ApiToken");
    const boardId = configs.get('conf_BoardId');//固定値指定のみ 必須
    const labelNamesArray = decideLabelNames();
    const labelIdDef = configs.getObject('conf_LabelId');

    const apiKey = authKey.getToken();
    const apiToken = authToken.getToken();

    //// == Calculating / 演算 ==
    const labelsArray = getLabels(apiKey, apiToken, boardId);
    const numOfLines = labelNamesArray.length;

    // 与えられた関数を配列のすべての要素に対して呼び出し、その結果からなる新しい配列を生成
    const labelIdsArray = labelNamesArray.map(
        labelName => getLabelId(labelsArray, labelName)
    );

    engine.setData(labelIdDef, labelIdsArray.join("\n"));
}


/**
  * config から設定値を読み出す
  * 設定値が空行のみの場合はエラー
  * 途中に改行がある場合、末尾に改行が連続する場合はエラー
　　* 末尾が改行 1 行で終わる場合だけ、それを除去して処理する
  * @return {Array} labelNamesArray ラベル名の配列
  */
function decideLabelNames() {
    let labelNames = configs.get('conf_LabelNames');//固定値指定のみ 必須

    // まず、末尾に改行がある場合、1 行削除する	
    if (labelNames.endsWith('\n')) {
        labelNames = labelNames.slice(0, -1);
    }
 
    let labelNamesArray = labelNames.split("\n");

    // 残っている配列の全てが空文字の場合と一部が空文字の場合はエラーにする
    if (labelNamesArray.every(line => line === '')) {
        throw "Label Names aren't set.";
    } else if (labelNamesArray.some(line => line === '')){
        throw "Empty lines are set.";
    }   
    return labelNamesArray;
}


/**
  * ボード内のラベル情報を取得する
  * @param {String} auth.apiKey
  * @param {String} auth.apiToken
  * @param {String} boardId
  * @return {Array} labelsArray
  */
function getLabels(apiKey, apiToken, boardId) {

    const url = `https://api.trello.com/1/boards/${boardId}/labels?key=${apiKey}&token=${apiToken}`;
    const response = httpClient.begin()
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get label information. status: ${status}`;
    }
    return JSON.parse(responseStr);
}


/**
  * ラベル情報からラベル名に対応するラベル ID を取得する
  * ラベル名が複数ある場合、最初に名前が一致したラベルの ID を取得する
  * @param {Object} labelsArray  ラベル情報の JSON 配列
  * @param {String} labelName  ラベル名
  * @return {String} labelObj.id  ラベル ID
  */
function getLabelId(labelsArray, labelName) {

    let labelObj = labelsArray.find(labelElement => labelElement.name === labelName);
    if (labelObj !== undefined) {
        return labelObj.id;
    } else {
        throw `Label name: "${labelName}" not found in the Board`;
    }
}
    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAzBJREFUWEfF
        l11IFFEUx/93xnH9iPzow0jBaIOsSNJWI+glX6KHJLcvkiKwF7WXolJ76iWiSLBeUortoSSLcDfp
        pZfwJXrQVV8MIsNEjFbwI5T1e/bGndnZnRlnZ8ZZau/b3HvuOb97zrnnniFI8SC27Z8KZoGPeMHz
        x0FpGSh2gSBP2k8xC4IxEDIEUeyFyPnxwbNgR7c1wLm+HRBJM0DqAWTYUQpgCaAd4OlDvKsMme0x
        B6gJ1oOgFUC2TcN6sTAobiHg6Ui0PzGAN/gUQINDw/pt7fB7Go10GQPU9L8GIRfZhgyBQ3qadaSM
        lM8tivFpSrsQqKjVy63XHD15aXEmAs1u7C5wOXbCyhqF79MUGp+NKzrWeUILIMe8nUl/uV+Co3ud
        hl7L7G4cxujksjxJ0aDOiTiAlO3cDyXhlt6UwyU4c73eZQ8CIdzp/KVMh8FH9ii3I27B298GkOuK
        1PLbck3s5xdF/AnLMXUJHLbnpMXsrIoUodlV6ZvjCHbmCSAq9taeSdx+OaHioo/hr7jBJmQxVmQE
        TKvvuRogQgH+7IDmYCFfKQpyBWmutu0nuj7PxNZ914pRV7U19r0eAEtYxRZWrGSA032XwHGv1BbU
        ACyZXBcGNQBjHQdRvC1dmjt5bwQfh+biBq8U4WZ1gRkAEIlcxvvKThngzIAPlNb9VwBCXqD78FUZ
        wBtkxyv7rwDAEPyechmgJjgTe1iiFP88BOwBC3jyFQ9QTYABbASAZThLNGX0tLhRXZFrngNs1e+J
        XhZvMCkApovdFDbYidRXkM0Z3AJZOAaQZAj03tN/GwLoQpBUEjoC0CShxTVcEymE89o6MPG8FIX5
        ciGyGoYe0FxDi0LEDIxPrWB6fk2ylZnOoaTQbnOUIAc0hciiFFud0GrduhRLxcj8MbIyYrb+qGcS
        TaaPEdute46/PjmA/UX23WwGcKTlG/pGwopIgueYLasakhOHNqO7yY1sF5fM4dE7PI+qu9/jOhI2
        JIqIrhk9tm8TcrJ4RxCDowv4He0TogosWjLFjKopdWTZaJPtpjSBJ5IE2WBbHvNEKn9MFIiU/pqp
        /Z6yn9Mkg2+1/S+COKkwjkUALAAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
  * 設定の準備
  * @param boardId
  * @param labelName
  * @return returnObj.labelidDef
  */
const prepareConfigs = (boardId, labelNames) => {
    const authKey = httpClient.createAuthSettingToken(
        'Trello',
        'TrelloApiKey',
    );
    configs.putObject('conf_ApiKey', authKey);

    const authToken = httpClient.createAuthSettingToken(
        'Trello',
        'TrelloApiToken',
    );
    configs.putObject('conf_ApiToken', authToken);

    configs.put('conf_BoardId', boardId);

    configs.put('conf_LabelNames', labelNames);

    // 文字型データ項目を準備して、config に指定
    const labelIdDef = engine.createDataDefinition('ラベル ID を保存するデータ項目', 3, 'q_LabelId', 'STRING_TEXTAREA');
    configs.putObject('conf_LabelId', labelIdDef);

    engine.setData(labelIdDef, '事前文字列');

    return labelIdDef;
};


/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};


/**
 * 改行のみ
 */
test("Failed - Label Names aren't set", () => {
    prepareConfigs('234BCD', '\n\n\n');
    assertError(main, 'Label Names aren\'t set.');
});


/**
 * 先頭や、途中に空行がある 末尾に2行以上の改行がある
 */
test("Failed - Empty lines are set", () => {
    prepareConfigs('234BCD', '\nnenhancement\n\nlow-priority\n\n\n\n');
    assertError(main, 'Empty lines are set.');
});


/**
 * GET リクエスト のテスト
 * @param url
 * @param method
 * @param boardId
 */
const assertRequest = ({ url, method }, boardId) => {
    expect(url).toEqual(`https://api.trello.com/1/boards/${boardId}/labels?key=TrelloApiKey&token=TrelloApiToken`);
    expect(method).toEqual('GET');
};


/**
 * GET リクエストで失敗 存在しないボード ID 、権限のないボード ID など
 */
test("GET Failed", () => {
    prepareConfigs('234BCD', 'enhancement');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, "234BCD");
        return httpClient.createHttpResponse(404, "application/json", "{}");
    });
    assertError(main, 'Failed to get label information. status: 404');
});


/**
 * GET リクエストのレスポンス（ボード内のラベル情報を取得）を準備
 */
const responseArray = [
    {
        "id": "1234567890abcde",
        "idBoard": "0000011111",
        "name": "enhancement",
        "color": "red",
        "users": 1
    },
    {
        "id": "234567890abcde1",
        "idBoard": "0000011111",
        "name": "",
        "color": "sky",
        "users": 1
    },
    {
        "id": "34567890abcde12",
        "idBoard": "0000011111",
        "name": "enhancement",
        "color": "orange",
        "users": 1
    },
    {
        "id": "4567890abcde123",
        "idBoard": "0000011111",
        "name": "low-priority",
        "color": "green",
        "users": 1
    },
    {
        "id": "567890abcde1234",
        "idBoard": "0000011111",
        "name": "midium-priority",
        "color": "yellow",
        "users": 1
    },
    {
        "id": "67890abcde12345",
        "idBoard": "0000011111",
        "name": "enhancement",
        "color": "blue",
        "users": 1
    }
];


/**
 * 成功 -　ラベル名を 1 つ指定　- ボード内に 同じラベル名が 3 つある場合
 */
test("Success - Three same label names on the board", () => {
    const labelIdDef = prepareConfigs('123ABC', 'enhancement');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseArray));
    });
    main();
    expect(engine.findData(labelIdDef)).toEqual('1234567890abcde');
});


/**
 * 成功 -　ラベル名を 2 つ指定 -　ボード内に 1 つずつラベル名がある場合 - 末尾にひとつ改行がある
 */
test("Success - 2names - newline at the end", () => {
    const labelIdDef = prepareConfigs('123ABC', 'low-priority\nmidium-priority\n');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseArray));
    });
    main();
    expect(engine.findData(labelIdDef)).toEqual('4567890abcde123\n567890abcde1234');
});


/**
 * 失敗 -　ラベル名を 2 つ指定 - 1 つのラベル名が存在しない
 */
test("Failed - Label name does not exist", () => {
    prepareConfigs('123ABC', 'enhancement\ntest');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, "123ABC");
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseArray));
    });
    assertError(main, 'Label name: "test" not found in the Board');
});

    ]]></test>

</service-task-definition>
