<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Microsoft Lists: Search List Items</label>
    <label locale="ja">Microsoft Lists: リストアイテム検索</label>
    <last-modified>2024-01-16</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item searches items in the specified list on Microsoft Lists.</summary>
    <summary locale="ja">この工程は、Microsoft Lists の指定リスト内のアイテムを検索します。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://graph.microsoft.com/Sites.ReadWrite.All">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_SiteUrl" required="true" form-type="TEXTFIELD">
            <label>C2: SharePoint Site URL</label>
            <label locale="ja">C2: SharePoint サイトの URL</label>
        </config>
        <config name="conf_ListTitle" required="true" form-type="TEXTFIELD">
            <label>C3: List Title</label>
            <label locale="ja">C3: リストの名前</label>
        </config>
        <config name="conf_Filter" required="false" form-type="TEXTAREA" el-enabled="true">
            <label>C4: Filter</label>
            <label locale="ja">C4: フィルタ</label>
        </config>
        <config name="conf_Ids" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C5: Data item to save List Item IDs</label>
            <label locale="ja">C5: リストアイテム ID を保存するデータ項目</label>
        </config>
        <config name="conf_ColumnName1" required="false" form-type="TEXTFIELD">
            <label>C-K1: Static Name of Column 1</label>
            <label locale="ja">C-K1: 列 1 の名前（StaticName）</label>
        </config>
        <config name="conf_ColumnValues1" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C-V1: Data item to save values of Column 1</label>
            <label locale="ja">C-V1: 列 1 の値を保存するデータ項目</label>
        </config>
        <config name="conf_ColumnName2" required="false" form-type="TEXTFIELD">
            <label>C-K2: Static Name of Column 2</label>
            <label locale="ja">C-K2: 列 2 の名前（StaticName）</label>
        </config>
        <config name="conf_ColumnValues2" required="false" form-type="SELECT" select-data-type="STRING">
            <label>C-V2: Data item to save values of Column 2</label>
            <label locale="ja">C-V1: 列 2 の値を保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-microsoft-lists-listitem-search/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-microsoft-lists-listitem-search/</help-page-url>


    <script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = 'https://graph.microsoft.com/v1.0/';

const MAX_PAGE_SIZE = 5000; // 一度のリクエストで取得できるリストアイテムの最大数

const main = () => {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const siteUrl = retrieveSiteUrl();
    const listTitle = configs.get('conf_ListTitle');
    const filter = configs.get('conf_Filter');
    const {idDef, columnNames, columnDefs, singleLineFlag} = retrieveColumnNamesAndDataDefs();

    //// == 演算 / Calculating ==
    const siteId = getSiteIdByUrl(oauth2, siteUrl);
    if (columnNames.length > 0) {
        checkColumns(oauth2, siteId, listTitle, columnNames);
    }
    const listItems = getListItems(oauth2, siteId, listTitle, filter, columnNames, singleLineFlag);

    //// == ワークフローデータへの代入 / Data Updating ==
    saveData(listItems, idDef, columnNames, columnDefs);
};

/**
 * 工程コンフィグからサイトの URL を取得する
 * @returns {String} サイトの URL
 */
const retrieveSiteUrl = () => {
    let siteUrl = configs.get('conf_SiteUrl');
    // 末尾にスラッシュがある場合、削除
    if (siteUrl.endsWith('/')) {
        siteUrl = siteUrl.slice(0, -1);
    }
    return siteUrl;
};

/**
 * 工程コンフィグから列の名前、保存先データ項目を取得する
 * 以下の場合はエラー
 * - 名前、保存先データ項目の片方だけが指定されている列がある
 * - 保存先データ項目がひとつも指定されていない
 * @returns {Object} result
 * @returns {DataDefinitionView} result.idDef  ID 保存先データ項目
 * @returns {Array<String>} result.columnNames  列の名前
 * @returns {Array<DataDefinitionView>} result.columnDefs  列の値の保存先データ項目
 * @returns {boolean} result.singleLineFlag  保存先データ項目のうちひとつでも単一行のものがあれば true
 */
const retrieveColumnNamesAndDataDefs = () => {
    const columnNames = [];
    const columnDefs = [];
    let singleLineFlag = false;
    for (let i = 0; i < 2; i++) {
        const columnName = configs.get(`conf_ColumnName${i + 1}`);
        const columnDef = configs.getObject(`conf_ColumnValues${i + 1}`);
        if (columnName === '' && columnDef === null) {
            continue;
        } else if (columnName !== '' && columnDef !== null) {
            columnNames.push(columnName);
            columnDefs.push(columnDef);
            if (columnDef.matchDataType('STRING_TEXTFIELD')) {
                singleLineFlag = true;
            }
        } else {
            throw new Error(`Name and data item for Column ${i + 1} must be specified at the same time.`);
        }
    }
    const idDef = configs.getObject('conf_Ids');
    if (idDef === null && columnDefs.length === 0) {
        throw new Error('No data item to save the result.');
    }
    if (idDef !== null && idDef.matchDataType('STRING_TEXTFIELD')) {
        singleLineFlag = true;
    }
    return {idDef, columnNames, columnDefs, singleLineFlag};
};

/**
 * サイトのメタデータを取得し、siteId を返す
 * APIの仕様: https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} siteUrl  SharePoint サイトの URL
 * @returns {String} siteId
 */
const getSiteIdByUrl = (oauth2, siteUrl) => {
    // encoding sharing URL
    const encodedSharingUrl = encodeSharingUrl(siteUrl);

    // preparing for API Request
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('select', 'id')
        .get(`${GRAPH_URI}shares/${encodedSharingUrl}/site`);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to get site info. status: ${status}`);
    }
    return JSON.parse(responseStr).id;
};

/**
 * 共有URLを unpadded base64url 形式にエンコードする
 * @param {String} sharingUrl  共有URL
 * @returns {String} encodedSharingUrl  エンコードされた共有URL
 */
const encodeSharingUrl = (sharingUrl) => {
    let encodedSharingUrl = base64.encodeToUrlSafeString(sharingUrl);
    while (encodedSharingUrl.slice(-1) === '=') {
        encodedSharingUrl = encodedSharingUrl.slice(0, -1);
    }
    return `u!${encodedSharingUrl}`;
};

/**
 * リストの列のメタデータを取得し、指定した名前の列の存在と型を確認する
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} siteId  SharePoint サイトの ID
 * @param {String} listTitle  リストの名前
 * @param {Array<String>} columnNames  列の名前
 */
const checkColumns = (oauth2, siteId, listTitle, columnNames) => {
    const url = `${GRAPH_URI}sites/${encodeURIComponent(siteId)}/lists/${encodeURIComponent(listTitle)}/columns`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('$select', 'name,text') // 複数行のテキスト型をエラーにするため、text プロパティを取得
        // $filter, $search, $top パラメータは効かない
        .get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to get columns. status: ${status}`);
    }
    const columns = JSON.parse(responseStr).value;
    columnNames.forEach(columnName => {
        findAndCheckColumn(columns, columnName);
    });
};

/**
 * 列の存在と型を確認する
 * 列が存在しない場合、テキスト型で複数行を許可している場合はエラーにする
 * @param {Array<Object>} columns  列のメタデータ一覧
 * @param {String} name  列の名前
 */
const findAndCheckColumn = (columns, name) => {
    const column = columns.find((column) => column.name === name);
    if (column === undefined) {
        throw new Error(`Column '${name}' not found.`);
    }
    if (column.text !== undefined && column.text.allowMultipleLines) {
        throw new Error(`'${name}' is a text column which can contain a multi-line text.`);
    }
};

/**
 * リストアイテムを検索し、JSONオブジェクトを返す
 * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
 * @param {String} siteId  SharePoint サイトの ID
 * @param {String} listTitle  リストの名前
 * @param {String} filter  フィルタ
 * @param {Array<String>} columnNames  列の名前
 * @param {boolean} singleLineFlag  保存先データ項目のうちひとつでも単一行のものがあれば true
 * @returns {Array<Object>} 検索結果
 */
const getListItems = (oauth2, siteId, listTitle, filter, columnNames, singleLineFlag) => {
    const url = `${GRAPH_URI}sites/${encodeURIComponent(siteId)}/lists/${encodeURIComponent(listTitle)}/items`;
    let request = httpClient.begin()
        .authSetting(oauth2)
        // インデックスを作成していないフィールドでもフィルタできるように、Prefer ヘッダを指定
        // ただし、リストアイテムの総数が多すぎる（5000 件以上）とエラーになる
        .header('Prefer', 'HonorNonIndexedQueriesWarningMayFailRandomly')
        .queryParam('$select', 'id')
        .queryParam('$top', `${MAX_PAGE_SIZE}`)
        // $count パラメータは非対応
        // $orderby パラメータはあえて指定しない。デフォルトの ID 順のまま取得する
        .queryParam('$filter', filter);
    if (columnNames.length > 0) {
        request = request.queryParam('$expand', `fields($select=${columnNames.join(',')})`);
    }
    const response = request.get(url);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw new Error(`Failed to get list items. status: ${status}`);
    }
    const listItems = JSON.parse(responseStr).value;
    if (listItems.length === 0) {
        throw new Error('No list items found.');
    }
    // 本来は一度のリクエストで検索結果を取得しきれなかった場合にエラーにしたいが、$count パラメータが使用不可なので、
    // 取得された件数が上限値と同じ場合にエラーにする
    if (listItems.length === MAX_PAGE_SIZE) {
        throw new Error(`The number of results reached ${MAX_PAGE_SIZE}.`);
    }
    if (singleLineFlag && listItems.length > 1) {
        throw new Error('Multiple list items were found while the data item to save the result is single-line.');
    }
    return listItems;
};

/**
 * データ項目への保存
 * @param {Array<Object>} listItems リストアイテム
 * @param {DataDefinitionView} idDef ID 保存先データ項目
 * @param {Array<String>} columnNames 列の名前
 * @param {Array<DataDefinitionView>} columnDefs 列の値の保存先データ項目
 */
const saveData = (listItems, idDef, columnNames, columnDefs) => {
    setData(idDef, listItems.map((item) => item.id).join('\n'));
    columnNames.forEach((columnName, index) => {
        setData(columnDefs[index], stringifyColumnValues(listItems, columnName));
    });
};

/**
 * 列の値を文字列化する
 * @param listItems
 * @param columnName
 */
const stringifyColumnValues = (listItems, columnName) => {
    const columnValues = listItems.map((item) => item.fields[columnName])
        .map(columnValue => {
            if (columnValue === undefined || columnValue === null) {
                return '';
            }
            if (typeof columnValue === 'object') {
                return JSON.stringify(columnValue);
            }
            // 文字列、数値、真偽値の場合はそのまま返す。join で文字列化されるので
            return columnValue;
        });
    return columnValues.join('\n');
};

/**
 * データ項目への保存
 * @param {DataDefinitionView} def 保存先データ項目
 * @param {Object} data 保存するデータ
 */
const setData = (def, data) => {
    if (def !== null) {
        engine.setData(def, data);
    }
};

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFlJREFUWEfF
        l3tsU3UUx7/nrqVlbPiAZbjhhhLCdAYXxKBolKi49VZ0+KiKYbgIoa1mwbJuREKCJurWLghlrh1O
        EFgwARPjY+0GkqB/CD7+mDMb8lhSjchkKDKY69b1HtLbdbCtt/dmML1/3dyex+c8fud3SvifH9Lq
        v6Fw881hXeRxgJcw406AbiHiDFmfcZaBLoDaCTigj6R8tarF8bcW26oAHz5Znd4fEd4C82tEpNNi
        lJkHAfIMsuHNskBZTzIdRQAGk090rwShCqBMLY5HyzBzF0GosPrXNRKIE9lQBKgT3U4CqkFQzVJS
        OAYzwWFvcm7RBLDvuX0p53qDO4ioZDxRK+kwsGV6am65Zb8lcrXMmOjqzO61BLx3PZ3HbTHw+uhM
        jADwiTVLJJKaCSRMDABLBEG0NZW3xO0PA+xcvMkYmpIaTNZwt86fhQfXPAqQelv8e74Xn1V+PDYO
        xpm+8ymzHUccfdEfhy15Rdd6EL2rFHnOgttQuKEY39QewO+tv8piUkQCS1eam4SYOSLC895S7Hyh
        NqG5q0sha0SPnFd0/0FEMxJpxJ0frPoCwe9OaapOyW4bdpd4E8syzlj95dnRoykD1Jmq7yNBOJJI
        OnteDpa+bcHJwx043fabJudRoUWrH8EOi0dRniXpfnug8mgMwOyuIqAykXTRxmLcNHMaLp7tgaAT
        kJmXhdM/jQRhSQIJI/t2ZkEuthdvVgYAqu1NzvUxANF1mIgeTiRt2rgMnd+ewIlD7TBOnYxnt65A
        Y+l21Uy8vPdVfLT8fWUA5q/t/orFcYBfiGjufwxw3O6vyJMBvKLrHxDdoASQNS8H4dAAhBQBxvTJ
        6L8UUs2AIc0I39IaZTnmCzZ/xY1DGXCHiGBQAgj+0IljzW1Iy0hHsetFTSVYscuKPSt9mgGCRMjV
        BrAcjaX1qhlQA2DmKyWoE91HibBQCUCfOgndJ7swKc2IOQ/lod3fqgqQby5AwzNbtTWhV3T7QFij
        BGBIN+Kv4DnojXrc/sAcHD/UkRQg77F89F/qVx5EselXb/M7rXIP+ERXERMFtJ2CkqQlKNzwFGbc
        kY29qxsQ7htQBCVmk9Vf0SwDeEweg55CfyY6CdE5EPy+E8da2lTnQHRoZc7NUnXOjJ7pU3ozLPs3
        DQxfRkrT8O6n78V8y0JEwhH5ktEZdAiHwrHIovdQ1AID0YtooLcfn6zdkzTyITV5CkbfhwE8Js9U
        HYVOEVFs052gh5m7DTqe/crnlRdHAMgDyVxTyJD8E7mQCCwUWf3lB+Pxjdks1PaCa0mM6koWN+4V
        XR+AaNW1OBujO3TsRn9X3K28pup1IMF9PdZyMMpsAWfC9Sjpcud9wr0MjG0AsseVDeYgBHLYvnR+
        qqSvul3W31OvlzIvvARQGYAC1YywfDhbQVw7LXXWrtH/AzSXIBGxx/ROhp50ZgYWALiLiPKH5kEH
        g38m4McwDzaVBd7o1pox1QxoNTReucsdycEwUqG3yAAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param siteUrl
 * @param listTitle
 * @param filter
 * @param columnName1
 * @param columnName2
 * @return result
 * @return {DataDefinitionView} result.idDef
 * @return {DataDefinitionView} result.column1Def
 * @return {DataDefinitionView} result.column2Def
 */
const prepareConfigs = (siteUrl, listTitle, filter, columnName1, columnName2) => {
    const oauth2 = httpClient.createAuthSettingOAuth2(
        'OneDrive',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/token',
        'https://graph.microsoft.com/Sites.ReadWrite.All offline_access',
        'client_id',
        'client_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', oauth2);
    configs.put('conf_SiteUrl', siteUrl);
    configs.put('conf_ListTitle', listTitle);
    configs.put('conf_Filter', filter);
    configs.put('conf_ColumnName1', columnName1);
    configs.put('conf_ColumnName2', columnName2);

    // 文字型データ項目（複数行）を準備
    const idDef = engine.createDataDefinition('リストアイテム ID', 1, 'q_listitemIds', 'STRING_TEXTAREA');
    const column1Def = engine.createDataDefinition('値_1', 2, 'q_columnValues1', 'STRING_TEXTAREA');
    const column2Def = engine.createDataDefinition('値_2', 3, 'q_columnValues2', 'STRING_TEXTAREA');
    engine.setData(idDef, '事前\n文字列');
    engine.setData(column1Def, '事前\n文字列');
    engine.setData(column2Def, '事前\n文字列');
    configs.putObject('conf_Ids', idDef);
    configs.putObject('conf_ColumnValues1', column1Def);
    configs.putObject('conf_ColumnValues2', column2Def);

    return {idDef, column1Def, column2Def};
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    try {
        main();
        fail();
    } catch (e) {
        expect(e.message).toEqual(errorMsg);
    }
};

/**
 * 保存先データ項目が一つも設定されておらずエラーになる場合
 */
test('No data item to save the result', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '', '');
    configs.put('conf_Ids', '');
    configs.put('conf_ColumnValues1', '');
    configs.put('conf_ColumnValues2', '');

    assertError('No data item to save the result.');
});

/**
 * 列 1 の名前が空なのに保存先データ項目が設定されていてエラーになる場合
 */
test('ColumnName1 is empty but the data item to save the values is set', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '', '列 2');

    assertError('Name and data item for Column 1 must be specified at the same time.');
});

/**
 * 列 2 の名前が空なのに保存先データ項目が設定されていてエラーになる場合
 */
test('ColumnName2 is empty but the data item to save the values is set', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '');

    assertError('Name and data item for Column 2 must be specified at the same time.');
});

/**
 * 列 1 の名前が設定されているのに保存先データ項目が設定されておらずエラーになる場合
 */
test('Data item to save the values of Column 1 is not set', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');
    configs.put('conf_ColumnValues1', '');

    assertError('Name and data item for Column 1 must be specified at the same time.');
});

/**
 * 列 2 の名前が設定されているのに保存先データ項目が設定されておらずエラーになる場合
 */
test('Data item to save the values of Column 2 is not set', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');
    configs.put('conf_ColumnValues2', '');

    assertError('Name and data item for Column 2 must be specified at the same time.');
});

/**
 * サイト情報取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param siteUrl
 */
const assertGetSiteInfoRequest = ({ url, method, headers }, siteUrl) => {
    const encodedUrl = encodeSharingUrl(siteUrl);
    const expectedUrl = `${GRAPH_URI}shares/${encodedUrl}/site?select=id`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers['Authorization']).toEqual('Bearer access_token');
};

/**
 * サイト情報取得の GET リクエストでエラー
 */
test('Fail in 1st GET request', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    httpClient.setRequestHandler((request) => {
        assertGetSiteInfoRequest(request, siteUrl);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to get site info. status: 400');
});

/**
 * クエリパラメータのテスト用の文字列を生成する
 * @param key
 * @param value
 * @returns {String}
 */
const generateQueryString = (key, value) => {
    const encodedKey = encodeURIComponent(key);
    const encodedValue = encodeURIComponent(value)
        .replace(/%20/g, '+') // HttpRequestWrapper#formParam() はスペースを + に置き換える
        .replace(/'/g, '%27') // encodeURIComponent() でエンコードされない文字をエンコード
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
    return `${encodedKey}=${encodedValue}`;
};

/**
 * 列情報取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param siteId
 * @param listTitle
 */
const assertGetColumnsRequest = ({ url, method, headers }, siteId, listTitle) => {
    const expectedUrl = `${GRAPH_URI}sites/${encodeURIComponent(siteId)}/lists/${encodeURIComponent(listTitle)}/columns`
        + `?${generateQueryString('$select', 'name,text')}`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers['Authorization']).toEqual('Bearer access_token');
};

/**
 * 列情報取得のの GET リクエストでエラー
 */
test('Fail in 2nd GET request', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetColumnsRequest(request, siteId, listTitle);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to get columns. status: 400');
});

/**
 * 列 1 に指定した名前の列が存在せずエラーになる場合
 */
test('Column 1 not found', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [ // 列 1 は存在しない
        { name: '列 2', text: { allowMultipleLines: false } },
        { name: '列 3', text: { allowMultipleLines: false } },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetColumnsRequest(request, siteId, listTitle);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
    });
    assertError("Column '列 1' not found.");
});

/**
 * 列 2 に指定した名前の列が存在せずエラーになる場合
 */
test('Column 2 not found', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [ // 列 2 は存在しない
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 3', text: { allowMultipleLines: false } },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetColumnsRequest(request, siteId, listTitle);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
    });
    assertError("Column '列 2' not found.");
});

/**
 * 列 1 に指定した名前の列が複数行のテキスト型でエラーになる場合
 */
test('Column 1 is multi-line text', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: true } },
        { name: '列 2', text: { allowMultipleLines: false } },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetColumnsRequest(request, siteId, listTitle);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
    });
    assertError("'列 1' is a text column which can contain a multi-line text.");
});

/**
 * 列 2 に指定した名前の列が複数行のテキスト型でエラーになる場合
 */
test('Column 2 is multi-line text', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2', text: { allowMultipleLines: true } },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetColumnsRequest(request, siteId, listTitle);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
    });
    assertError("'列 2' is a text column which can contain a multi-line text.");
});

/**
 * リストアイテム取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param siteId
 * @param listTitle
 * @param filter
 * @param columnNames
 */
const assertGetListItemsRequest = ({ url, method, headers }, siteId, listTitle, filter, columnNames) => {
    let expectedUrl = `${GRAPH_URI}sites/${encodeURIComponent(siteId)}/lists/${encodeURIComponent(listTitle)}/items`
        + `?${generateQueryString('$select', 'id')}`
        + `&${generateQueryString('$top', MAX_PAGE_SIZE)}`
        + `&${generateQueryString('$filter', filter)}`;
    if (columnNames.length > 0) {
        const expand = `fields($select=${columnNames.join(',')})`;
        expectedUrl += `&${generateQueryString('$expand', expand)}`;
    }
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers.Prefer).toEqual('HonorNonIndexedQueriesWarningMayFailRandomly');
    expect(headers['Authorization']).toEqual('Bearer access_token');
};

/**
 * リストアイテム取得のの GET リクエストでエラー
 */
test('Fail in 3rd GET request', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2', text: { allowMultipleLines: false } },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, ['列 1', '列 2']);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError('Failed to get list items. status: 400');
});

/**
 * 検索結果が 0 件でエラーになる場合
 */
test('No list items found', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, ['列 1', '列 2']);
        return httpClient.createHttpResponse(200, 'application/json', `{"value":[]}`);
    });
    assertError('No list items found.');
});

/**
 * リストアイテム検索結果のレスポンスを準備
 * @param num 検索結果の個数
 * @param columnNames 検索結果に含まれる列の名前
 * @param types 検索結果の列の型（String, Number, Boolean, Object のいずれか）
 * @returns {String}
 */
const prepareListItemsResponse = (num, columnNames, types) => {
    const listItems = prepareListItemse(num, columnNames, types);
    return JSON.stringify({ value: listItems });
};

/**
 * リストアイテム検索結果を準備
 * @param num 検索結果の個数
 * @param columnNames 検索結果に含まれる列の名前
 * @param types 検索結果の列の型（String, Number, Boolean, Object のいずれか）
 * @returns {String}
 */
const prepareListItemse = (num, columnNames, types) => {
    const listItems = [];
    for (let i = 0; i < num; i++) {
        const fields = {};
        columnNames.forEach((columnName, j) => {
            switch (types[j]) {
                case 'String':
                    fields[columnName] = `${columnName} の値_${i + 1}`;
                    break;
                case 'Number':
                    fields[columnName] = i + 1;
                    break;
                case 'Boolean':
                    fields[columnName] = i % 2 === 0;
                    break;
                case 'Object':
                    fields[columnName] = { displayName: `${columnName} の値_${i + 1}` };
                    break;
            }
        });
        listItems.push({
            id: `id_${i + 1}`,
            fields
        });
    }
    return listItems;
};

/**
 * 検索結果が上限件数でエラーになる場合
 */
test('The number of results reached the max page size', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(MAX_PAGE_SIZE, columnNames, types));
    });
    assertError(`The number of results reached ${MAX_PAGE_SIZE}.`);
});

/**
 * 検索結果が複数件あるのに、ID を保存するデータ項目が単一行のテキスト型でエラーになる場合
 */
test('Multiple list items were found while the data item to save ID is single-line', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');
    const singleLineDef = engine.createDataDefinition('単一行のデータ項目', 4, 'q_textfield', 'STRING_TEXTFIELD');
    configs.putObject('conf_Ids', singleLineDef);

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(2, columnNames, types));
    });
    assertError('Multiple list items were found while the data item to save the result is single-line.');
});

/**
 * 検索結果が複数件あるのに、列 1 の値を保存するデータ項目が単一行のテキスト型でエラーになる場合
 */
test('Multiple list items were found while the data item to save Column 1 is single-line', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');
    const singleLineDef = engine.createDataDefinition('単一行のデータ項目', 4, 'q_textfield', 'STRING_TEXTFIELD');
    configs.putObject('conf_ColumnValues1', singleLineDef);

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(2, columnNames, types));
    });
    assertError('Multiple list items were found while the data item to save the result is single-line.');
});

/**
 * 検索結果が複数件あるのに、列 2 の値を保存するデータ項目が単一行のテキスト型でエラーになる場合
 */
test('Multiple list items were found while the data item to save Column 2 is single-line', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');
    const singleLineDef = engine.createDataDefinition('単一行のデータ項目', 4, 'q_textfield', 'STRING_TEXTFIELD');
    configs.putObject('conf_ColumnValues2', singleLineDef);

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(2, columnNames, types));
    });
    assertError('Multiple list items were found while the data item to save the result is single-line.');
});

/**
 * 成功 - すべてのデータ項目に保存（複数行）
 */
test('Succeed - save to all data items', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Status eq '承認済み'";
    const {idDef, column1Def, column2Def} = prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(3, columnNames, types));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(idDef)).toEqual('id_1\nid_2\nid_3');
    expect(engine.findData(column1Def)).toEqual('列 1 の値_1\n列 1 の値_2\n列 1 の値_3');
    expect(engine.findData(column2Def)).toEqual('列 2 の値_1\n列 2 の値_2\n列 2 の値_3');
});

/**
 * 成功 - すべてのデータ項目に保存（単一行）, 数値型の列と真偽値型の列を指定
 */
test('Succeed - save to all data items, textfield, Number and Boolean', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user2_test_onmicrosoft_com';
    const listTitle = 'リスト 2';
    const filter = "fields/Title eq 'リストアイテムのタイトル'";
    prepareConfigs(siteUrl, listTitle, filter, 'Numeric', 'Boolean');
    const newIdDef = engine.createDataDefinition('ID（単一行）', 4, 'q_newId', 'STRING_TEXTFIELD');
    const newColumn1Def = engine.createDataDefinition('列 1（単一行）', 5, 'q_newColumn1', 'STRING_TEXTFIELD');
    const newColumn2Def = engine.createDataDefinition('列 2（単一行）', 6, 'q_newColumn2', 'STRING_TEXTFIELD');
    configs.putObject('conf_Ids', newIdDef);
    configs.putObject('conf_ColumnValues1', newColumn1Def);
    configs.putObject('conf_ColumnValues2', newColumn2Def);

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: 'Numeric' },
        { name: 'Boolean' },
    ];
    const columnNames = ['Numeric', 'Boolean'];
    const types = ['Number', 'Boolean'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient.createHttpResponse(200, 'application/json', prepareListItemsResponse(1, columnNames, types));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(newIdDef)).toEqual('id_1');
    expect(engine.findData(newColumn1Def)).toEqual('1');
    expect(engine.findData(newColumn2Def)).toEqual('true');
});

/**
 * 成功 - フィルタ指定なし, ID のみ保存（複数行）
 */
test('Succeed - no filter, save IDs only', () => {
    const siteUrl = 'https://test.sharepoint.com/sites/MarketingDepartment';
    const listTitle = '共有リスト';
    const filter = '';
    const {idDef, column1Def, column2Def} = prepareConfigs(siteUrl, listTitle, filter, '', '');
    configs.put('conf_ColumnValues1', '');
    configs.put('conf_ColumnValues2', '');

    let reqCount = 0;
    const siteId = 'test.sharepoint.com,9876abcd-5e6f-7g8h-9i0j,1a2b3c4d-9a8b7c6d5e4f';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, []);
        return httpClient.createHttpResponse(200, 'application/json', prepareListItemsResponse(5, [], []));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(idDef)).toEqual('id_1\nid_2\nid_3\nid_4\nid_5');
    expect(engine.findData(column1Def)).toEqual('事前\n文字列');
    expect(engine.findData(column2Def)).toEqual('事前\n文字列');
});

/**
 * 成功 - フィルタ指定なし, ID のみ保存（単一行）
 */
test('Succeed - no filter, save one ID', () => {
    const siteUrl = 'https://test.sharepoint.com/sites/MarketingDepartment';
    const listTitle = '共有リスト';
    const filter = '';
    prepareConfigs(siteUrl, listTitle, filter, '', '');
    configs.put('conf_ColumnValues1', '');
    configs.put('conf_ColumnValues2', '');
    const newIdDef = engine.createDataDefinition('ID（単一行）', 4, 'q_newId', 'STRING_TEXTFIELD');
    configs.putObject('conf_Ids', newIdDef);

    let reqCount = 0;
    const siteId = 'test.sharepoint.com,9876abcd-5e6f-7g8h-9i0j,1a2b3c4d-9a8b7c6d5e4f';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, []);
        return httpClient.createHttpResponse(200, 'application/json', prepareListItemsResponse(1, [], []));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(newIdDef)).toEqual('id_1');
});

/**
 * 成功 - 列 1 のみ保存（複数行）, オブジェクト型の列を指定
 */
test('Succeed - save Column 1 only, Object', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 2';
    const filter = "fields/Status eq '未承認'";
    const {idDef, column1Def, column2Def} = prepareConfigs(siteUrl, listTitle, filter, 'Destination', '');
    configs.put('conf_Ids', '');
    configs.put('conf_ColumnValues2', '');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: 'Destination' }
    ];
    const columnNames = ['Destination'];
    const types = ['Object'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(2, columnNames, types));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(idDef)).toEqual('事前\n文字列');
    expect(engine.findData(column1Def)).toEqual('{"displayName":"Destination の値_1"}\n{"displayName":"Destination の値_2"}');
    expect(engine.findData(column2Def)).toEqual('事前\n文字列');
});

/**
 * 成功 - 列 2 のみ保存（単一行）, オブジェクト型の列を指定
 */
test('Succeed - save Column 2 only, textfield, Object', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 2';
    const filter = "fields/Status eq '未承認'";
    const {idDef, column1Def, column2Def} = prepareConfigs(siteUrl, listTitle, filter, '', 'Image');
    configs.put('conf_Ids', '');
    configs.put('conf_ColumnValues1', '');
    const newColumn2Def = engine.createDataDefinition('列 2（単一行）', 4, 'q_newColumn2', 'STRING_TEXTFIELD');
    configs.putObject('conf_ColumnValues2', newColumn2Def);

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: 'Image' }
    ];
    const columnNames = ['Image'];
    const types = ['Object'];
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', prepareListItemsResponse(1, columnNames, types));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(idDef)).toEqual('事前\n文字列');
    expect(engine.findData(column1Def)).toEqual('事前\n文字列');
    expect(engine.findData(column2Def)).toEqual('事前\n文字列');
    expect(engine.findData(newColumn2Def)).toEqual('{"displayName":"Image の値_1"}');
});

/**
 * 成功 - すべてのデータ項目に保存（複数行）, 値が空のアイテムがある
 */
test('Succeed - save to all data items, includes empty values', () => {
    const siteUrl = 'https://test-my.sharepoint.com/personal/user_test_onmicrosoft_com';
    const listTitle = 'リスト 1';
    const filter = "fields/Status eq '承認済み'";
    const {idDef, column1Def, column2Def} = prepareConfigs(siteUrl, listTitle, filter, '列 1', '列 2');

    let reqCount = 0;
    const siteId = 'test-my.sharepoint.com,1234abcd-5e6f-7g8h-9i0j,1a2b3c4d-1a2b3c4d5e6f';
    const columns = [
        { name: '列 1', text: { allowMultipleLines: false } },
        { name: '列 2' },
    ];
    const columnNames = ['列 1', '列 2'];
    const types = ['String', 'String'];
    const listItems = prepareListItemse(3, columnNames, types);
    Object.assign(listItems[1], { fields: {} }); // 2 行目は、列 1 も列 2 も undefined
    Object.assign(listItems[2], { fields: { "列 1": null, "列 2": "列 2 の値_3" } }); // 3 行目の列 1 は null
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetSiteInfoRequest(request, siteUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', `{"id":"${siteId}"}`);
        }
        if (reqCount === 1) {
            assertGetColumnsRequest(request, siteId, listTitle);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify({ value: columns }));
        }
        assertGetListItemsRequest(request, siteId, listTitle, filter, columnNames);
        return httpClient
            .createHttpResponse(200, 'application/json', JSON.stringify({ value: listItems }));
    });
    expect(main()).toEqual(undefined);

    expect(engine.findData(idDef)).toEqual('id_1\nid_2\nid_3');
    expect(engine.findData(column1Def)).toEqual('列 1 の値_1\n\n'); // 2 行目、3 行目は空
    expect(engine.findData(column2Def)).toEqual('列 2 の値_1\n\n列 2 の値_3'); // 2 行目は空
});

]]></test>

</service-task-definition>
