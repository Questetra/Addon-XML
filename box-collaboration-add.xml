<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2023-12-22</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Box: Add Collaboration</label>
<label locale="ja">Box: コラボレーション追加</label>
<summary>This item adds a collaboration for the specified user to the specified file or folder on Box. The user is specified by the email address.</summary>
<summary locale="ja">この工程は、Box の指定ファイルもしくはフォルダに、指定ユーザとのコラボレーションを追加します。ユーザはメールアドレスで指定します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-collaboration-add/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-collaboration-add/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
   oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_EmailAddress" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Email address of the Box user to invite</label>
    <label locale="ja">C2: 招待する Box ユーザのメールアドレス</label>
  </config>
  <config name="conf_Role" required="true" form-type="SELECT_ITEM">
    <label>C3: Role to set</label>
    <label locale="ja">C3: 設定するロール</label>
	  <item value="editor">
		  <label>Editor</label>
		  <label locale="ja">編集者</label>
		  </item>
	  <item value="viewer">
		  <label>Viewer</label>
		  <label locale="ja">ビューア</label>
		  </item>
  </config>
  <config name="conf_ItemType" required="true" form-type="SELECT_ITEM">
    <label>C4: Item type (file or folder)</label>
    <label locale="ja">C4: 項目の種類（ファイルまたはフォルダ）</label>
	  <item value="file">
		  <label>File</label>
		  <label locale="ja">ファイル</label>
		  </item>
	  <item value="folder">
		  <label>Folder</label>
		  <label locale="ja">フォルダ</label>
		  </item>
  </config>
  <config name="conf_ItemId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C5: File/Folder ID to add a collaboration to</label>
    <label locale="ja">C5: コラボレーションを追加するファイル/フォルダの ID</label>
  </config>
</configs>

<script><![CDATA[
function main(){

  const oauth2 = configs.getObject("conf_OAuth2");
  const itemType = configs.get("conf_ItemType");
  const fileOrFolderId = decideFileOrFolderId(itemType);
  const emailAddress = decideEmailAddress();
  const role = configs.get("conf_Role");
  
  // コラボレーション追加
  addCollaboration(oauth2, emailAddress, role, itemType, fileOrFolderId);
}


/**
  * 指定するメールアドレスをconfigから読み出して出力する
  * @return {String}  emailAddress メールアドレス
  */
function decideEmailAddress(){
  let emailAddress = "";
  const emailAddressDef = configs.getObject("conf_EmailAddress");
  if(emailAddressDef === null){
    emailAddress = configs.get("conf_EmailAddress");
  }else{
    emailAddress = engine.findData(emailAddressDef);
 }

  if(emailAddress === "" || emailAddress === null) {
    throw "Email address is blank";
  }
  return emailAddress;
}


/**
  * コラボレーションするファイルもしくはフォルダのIDをconfigから読み出して出力する
  * @param {String}  itemType アクセス権限が付与される項目の種類 ファイル/フォルダ
  * @return {String} id ファイル もしくは フォルダの ID
  */
function decideFileOrFolderId(itemType){
  let id = "";
  const idDef = configs.getObject("conf_ItemId");
  if(idDef === null){
    id = configs.get("conf_ItemId");
  }else{
    id = engine.findData(idDef);
  }

  if(id === "" || id === null) {
    throw "File ID or Folder ID is blank";
  }
  if(itemType === "folder" && id === "0") {
    throw "Root folder cannot be collaborated";
  }

  return id;
}


/**
  * コラボレーションを追加する
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @param {String} emailAddress コラボレーションするユーザのメールアドレス
  * @param {String} role ロール
  * @param {String} itemType アクセス権限が付与される項目の種類 ファイル/フォルダ
  * @param {String} fileOrFolderId コラボレーションしたいファイル/フォルダのID
  */
function addCollaboration(oauth2, emailAddress, role, itemType, fileOrFolderId) {
  const jsonReq = {};
  jsonReq["item"] = {"id": fileOrFolderId, "type": itemType};
  jsonReq["accessible_by"] = {"login": emailAddress };
  jsonReq["role"] = role;
  
  const url = 'https://api.box.com/2.0/collaborations';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam("fields", "invite_email,role,accessible_by")
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  let jsonRes;
  try {
     jsonRes = JSON.parse(responseTxt);
  } catch(e) {
     engine.log(`${responseTxt}`);
     engine.log("failed to parse as json");
     throw `Failed to add collaboration. status: ${status}`;
  }

  if (status !== 201){
    engine.log(`${responseTxt}`);
    if(status === 400 && jsonRes["code"] === "user_already_collaborator"){
      throw `This request is not needed, ${emailAddress} already collaborator. status: ${status}`;
    }else{
      throw `Failed to add collaboration. status: ${status}`;
    }
  }

  if (jsonRes["invite_email"] === null ){
    engine.log(`${jsonRes.accessible_by.login} collborated as ${jsonRes.role}`);
  }else{
    engine.log(`${jsonRes.invite_email} collborated as ${jsonRes.role}, and Box sends an invitation email`); 
  }
}
]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>


    <test><![CDATA[

/**
 * 設定の準備
 * emailAddress id は、文字型データ項目で指定
 * @param configs
 * @param itemType
 * @param emailAddress
 * @param id
 * @param role
 * @return {{
 *     emailAddressDef: {Object},
 *     idDef: {Object}
 * }}
 */
const prepareConfigs = (configs, itemType, emailAddress, id, role) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('conf_ItemType', itemType);

    // 文字型データ項目を準備して、config に指定
    const emailAddressDef = engine.createDataDefinition('メールアドレス', 3, 'q_emailAddress', 'STRING_TEXTFIELD');
    configs.putObject('conf_EmailAddress', emailAddressDef);
    // 文字型データ項目の値（メールアドレス）を指定
    engine.setData(emailAddressDef, emailAddress);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ID', 5, 'q_itemId', 'STRING_TEXTFIELD');
    configs.putObject('conf_ItemId', idDef);
    // 文字型データ項目の値（file/folder ID）を指定
    engine.setData(idDef, id);

    configs.put('conf_Role', role);

    return {
        emailAddressDef,
        idDef
    };
};


/**
 * リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param emailAddress
 * @param id
 * @param itemType
 * @param role
 */
const assertRequest = ({url, method, contentType,body}, emailAddress, id, itemType, role) => {
    expect(url).toEqual(`https://api.box.com/2.0/collaborations?fields=invite_email%2Crole%2Caccessible_by`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.item.id).toEqual(id);
    expect(bodyObj.item.type).toEqual(itemType);
    expect(bodyObj.accessible_by.login).toEqual(emailAddress);
    expect(bodyObj.role).toEqual(role);
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};


/**
 * conf_EmailAddress にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('Email address is null', () => {
    prepareConfigs(configs, 'folder', null, '12345', 'editor');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Email address is blank');
});

/**
 * conf_EmailAddress に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('Email address is blank', () => {
    configs.put('OAuth2', 'Box');
    configs.put('conf_ItemType', 'folder');
    configs.put('conf_EmailAddress', '');
    configs.put('conf_ItemId', '12345');
    configs.put('conf_Role', 'viewer');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Email address is blank');
});

/**
 * conf_ItemId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('File ID or Folder ID is null', () => {
    prepareConfigs(configs, 'file', 'testuser@questetra.com', null, 'viewer');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'File ID or Folder ID is blank');
});

/**
 * conf_ItemId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('File ID or Folder ID is blank', () => {
    configs.put('OAuth2', 'Box');
    configs.put('conf_ItemType', 'file');
    configs.put('conf_EmailAddress', 'testuser@questetra.com');
    configs.put('conf_ItemId', '');
    configs.put('conf_Role', 'editor');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'File ID or Folder ID is blank');
});

/**
 * conf_ItemType が 'folder' で、 conf_ItemId がルートフォルダ（"0"）でエラーになる場合
 */
test('Root folder cannot be collaborated', () => {
    prepareConfigs(configs, 'folder', 'testuser@questetra.com', '0', 'viewer');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Root folder cannot be collaborated');
});

/**
 * コラボレーション追加成功の場合
 */
test('201 Success', () => {
    const {
        emailAddressDef,
        idDef
    } = prepareConfigs(configs, 'file', 'testuser@questetra.com', '12345', 'editor');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'testuser@questetra.com', '12345','file', 'editor');
        // レスポンスは、簡易版レプリゼンテーション＋ field で指定した属性
        const responseObj = {
            "type": "collaboration",
            "id": 12345678,
            "invite_email": null,
            "role": "editor",
            "accessible_by": {
                "type": "user",
                "id": 12345678,
                "name": "Test User",
                "login": "testuser@questetra.com"
            }
        };
        
        return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(idDef)).toEqual('12345');
    expect(engine.findData(emailAddressDef)).toEqual('testuser@questetra.com');
});

/**
 * Box への API リクエストでエラー　code が user_already_collaborator の場合
 */
test('Failed - user already collaborator', () => {
    const {
        emailAddressDef,
        idDef
    } = prepareConfigs(configs, 'file', 'testuser2@questetra.com', '54321', 'editor');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'testuser2@questetra.com', '54321','file', 'editor');
        const responseObj = {
            "type": "error",
            "status":400,
            "code":"user_already_collaborator",
            "help_url":"http:\/\/developers.box.com\/docs\/#errors",
            "message":"User is already a collaborator",
            "request_id":"1234567890"
        };
        
        return httpClient.createHttpResponse(400, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'This request is not needed, testuser2@questetra.com already collaborator. status: 400');
});

/**
 * Box への API リクエストでエラー　code が user_already_collaborator 以外の場合
 */
test('Failed - Failures other than "user already collaborator"', () => {
    const {
        emailAddressDef,
        idDef
    } = prepareConfigs(configs, 'folder', 'testuser3@questetra.com', '67890', 'viewer');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'testuser3@questetra.com', '67890','folder', 'viewer');
        const responseObj = {
            "type": "error",
            "status":400,
            "code":"method_not_allowed",
            "help_url":"http:\/\/developers.box.com\/docs\/#errors",
            "message":"Method Not Allowed",
            "request_id":"1234567890"
        };
        
        return httpClient.createHttpResponse(400, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    assertError(main, 'Failed to add collaboration. status: 400');
});

]]></test>
</service-task-definition>
