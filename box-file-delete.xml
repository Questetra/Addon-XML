<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-11-28</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Delete File</label>
    <label locale="ja">Box: ファイル削除</label>
    <summary>This item deletes files on Box. You can delete multiple files at once. When you delete multiple files, you
        should write one file ID per line.
    </summary>
    <summary locale="ja">この工程は、Box 上のファイルを削除します。一度に複数の削除が可能です。複数削除する場合、データ項目では 1 行につき 1 つずつ ID を書くようにしてください。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-delete/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-delete/</help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileIds" form-type="SELECT" select-data-type="STRING" required="true">
            <label>C2: Data Item with File IDs to delete</label>
            <label locale="ja">C2: 削除するファイル ID が保存されているデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[
main();
function main() {
    const fileIds = engine.findDataByNumber(configs.get("conf_FileIds"));
    if (fileIds === "" || fileIds === null) {
        throw "File IDs aren't set.";
    }
    let linesArray = fileIds.split("\n");
    linesArray = linesArray.filter(lines => lines !== ""); // 空文字列を削除
    if (linesArray.length === 0) {
        throw "File IDs aren't set.";
    }
    const numOfLines = linesArray.length;
    if (numOfLines > httpClient.getRequestingLimit()) {
        throw "Number of File IDs is over the limit."
    }
    const oauth2 = configs.get("conf_OAuth2");
    for (let i = 0; i < numOfLines; i++) {
        deleteFile(oauth2, linesArray[i])
    }
}
function deleteFile(oauth2, fileId) {
    const url = `https://api.box.com/2.0/files/${fileId}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .delete(url);

    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    engine.log(`status: ${status}`);
    if (status >= 300) {
        engine.log(responseTxt)
        throw `Failed to delete File ID:${fileId}`;
    } else {
        engine.log(`Succeeded to delete File ID:${fileId}`);
    }
}
]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD/UlEQVRYR82XbWibVRTHf/fJ2jXJ
        2qSd65x11aC0YgJWZUwEWZ0D/SJaHYKKmgykbL70Bf2k4IYwZOKWOhFRMM9QZxHUjSEo+7AOlA1E
        7WSRThzdqq1tWWxjm7Zrk1y5N+SlydM2XdvN50sebs5z7u+e8z/n3iu4xo9Y1Pz+3x6F5BagAYQb
        oX4BSTfIUaAbIboIeY8W63dhAH+vGyZaQLYihLsox1LBiCA4OjA9CmzOZ34Af9gP8kDRE+dPo0GM
        AObtR+YimBvAfzaIEC1FrXghIymDmL42KzNrgMBZE8RzC/ld1P8SE9MbyP+mEGA5V16Ykg5MX2vu
        8GwAlXNBaFErW6yxFE25msgCaLXHeq9YcMWCaGE6PenqyAEI70bwRrF+lmQn2YPp3a18ZAECYVWv
        rrTj0I4bqHLaeOTgn0uay/JjFQXTV5kFUB1OyK9zjYeC9ThKBeW7epYfQHfPlBZSEbBQ/nBHCmDN
        zpUCkLoiUgCBcBegenzmUQDO1QaHT0dpqC3T4yd7YrzyxZB+33V/Jds3VbBmtUH/SJzmQwN07ryR
        7r4p2jtTNh88uwHPdaU8uP+iVRRPEvI2pgEuADflA6wrtxV8+GPvJBcuzfDY3RXYjBzgfxNU2A0M
        AW2fD1Jht/FmUzWx6STuFyyiqDYw03tnGkDmz6QioADUZO98F8HtMHh521o9lpQwNSMxvx/l9PkJ
        XtpWxSaPnZFYArfDRmQ8oeFcDhvvHv+Hts5Bax2FvGJeAFUFW97q5Yc/JrWDVx9ay74n1uv3Iz+P
        0fRetkIiB+uxlxj80jfFvbfatc2Jnhhb91mGPwWUA1CQgoH9dawrX0VN+zmGxxLa/qnNLj5rrtHv
        ShtPf9ifWdnfB+p02X7z6zhNd5Xr8U9PRXnmo6zN7DDIM4R8DXOK8NRrHu65xY7K+QNvX2SDaxXH
        Wmqpu75U+1FhVsL78qcxDjfX8ORml05BeZmN6YTUDUalQenh/RMjC4jQogwb6x189eJGKp02YpeT
        2AxBWYmgLzLDwGhcw8UTaJG57AaT0xIlJGXTcTyi09HcWMml8QTVLecKAWRuGVo0IvXF1tuc7N1e
        rUspnpSE+y+z4+N+/hqJ88nzNdxX58BRajAYjbPn6DB7H1/P70PTPNzRpyf8tr2WjVUleF8/bwGQ
        24jU33mt2Fq2yzYaJeTVx7v/0WaktmMxoaohsyEt23pnO4oiHTcXbsfK6JoeSNKUK3oky54D0tNd
        vUMp8hAhnz8/rVfpWF648vkjkEmHPqiYSxBmFCn8V3YxyUDoq1krAnWcLrZCokjU1Sy4tKtZfsJS
        l9NGhGgA6QZxR8pEngExipTdYHTNt+LiNbBCTSDf7X8FbX8wYecpbwAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * FileId は、文字型データ項目で指定
 * @param configs
 * @param fileId
 * @return {Object}
 */
const prepareConfigs = (configs, fileId) => {
    configs.put('conf_OAuth2', 'Box');
    const fileIdDef = engine.createDataDefinition('ファイル ID', 3, 'q_fileId', 'STRING_TEXTAREA');
    configs.putObject('conf_FileIds', fileIdDef);
    engine.setData(fileIdDef, fileId);

    return fileIdDef;
};

/**
 * リクエストのテスト
 * @param url
 * @param method
 * @param id
 */
const assertRequest = ({url, method}, fileId) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}`);
    expect(method).toEqual('DELETE');
};

test('IDs is null', () => {
    prepareConfigs(configs, null);
    expect(execute).toThrow("File IDs aren't set.");
});

test('IDs is blank', () => {
    prepareConfigs(configs, '\n\n\n'); //空行が複数行あるだけ
    expect(execute).toThrow("File IDs aren't set.");
});

test('Number of File IDs is over the limit', () => {
    let ids = '';
    for (let i = 0; i <= httpClient.getRequestingLimit(); i++) {
        ids += `f${i}\n`;
    }
    prepareConfigs(configs, ids);
    expect(execute).toThrow('Number of File IDs is over the limit.');
});


/**
 * 削除するファイルが複数の場合（この場合、最大リクエスト数）
 */
test('Succeed to delete multiple files', () => {
    let ids = '';
    for (let i = 0; i < httpClient.getRequestingLimit(); i++) {
        ids += `f${i}\n`;
    }
    const fileIdDef = prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        assertRequest(request, `f${requestCount++}`);
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual(ids);

    // リクエスト数をチェック
    expect(requestCount).toEqual(httpClient.getRequestingLimit());
});


/**
 * 削除するファイルが１つの場合
 */
test('Succeed to delete 1 file', () => {
    const fileIdDef = prepareConfigs(configs, '12345');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '12345');
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(fileIdDef)).toEqual('12345');
});


/**
 * ファイル削除失敗の場合（400レスポンスが返ってくる）
 */
test('Failed to delete file', () => {
    let ids = '';
    for (let i = 0; i < 2; i++) {
        ids += `000${i}\n`;
    }
    prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        try {
            assertRequest(request, `000${requestCount}`);
            if (requestCount === 1) {
                return httpClient.createHttpResponse(400, 'application/json', '{}');
            } else {
                return httpClient.createHttpResponse(204, 'application/json', '{}');
            }
        } finally {
            requestCount++;
        }
    });

    expect(execute).toThrow('Failed to delete File ID:0001');
});
]]></test>


</service-task-definition>
