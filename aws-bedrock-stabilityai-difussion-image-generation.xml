<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Amazon Bedrock: Stability.ai Diffusion: Image Generation</label>
    <label locale="ja">Amazon Bedrock: Stability.ai Diffusion: 画像生成</label>
    <!--    <last-modified>2023-11-30</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <!--    <summary>This item uploads files to the specified folder on Amazon S3.</summary>
        <summary locale="ja">この工程は、Amazon S3 の指定フォルダにファイルをアップロードします。</summary> -->
    <configs>
        <config name="conf_AccessKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Access Key</label>
            <label locale="ja">C1: アクセスキー</label>
        </config>
        <config name="conf_SecretKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Secret Access Key</label>
            <label locale="ja">C2: シークレットアクセスキー</label>
        </config>
        <config name="conf_Region" required="true" form-type="TEXTFIELD">
            <label>C3: Region Code</label>
            <label locale="ja">C3: リージョンコード</label>
        </config>
        <config name="conf_Message" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>U1: User Message</label>
            <label locale="ja">U1: ユーザメッセージ</label>
        </config>
        <config name="conf_File" required="true" form-type="SELECT" select-data-type="FILE">
            <label>A1: Data item to save generated file</label>
            <label locale="ja">A1: 生成されたファイルを保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>
    <script><![CDATA[
const MODEL = "stability.stable-diffusion-xl-v1";
const SERVICE = "bedrock";

function main() {
    ////// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const awsKey = configs.getObject("conf_AccessKey").getToken();
    const awsSecret = configs.getObject("conf_SecretKey").getToken();
    const region = retrieveRegion();
    const message = configs.get('conf_Message');
    ////// == 演算 / Calculating ==

    const URL = `https://bedrock-runtime.${region}.amazonaws.com/model/${MODEL}/invoke`;

    const payload = {
        "text_prompts": [{"text": message}],
        "cfg_scale": 10,
        "seed": 10,
        "steps": 50
    };

    const response = httpClient.begin()
        .awsSignV4(awsKey, awsSecret, region, SERVICE)
        .header("Accept", "image/png")
        .body(JSON.stringify(payload), "application/json")
        .post(URL);

    const status = response.getStatusCode();
    if (status !== 200) {
        const respTxt = response.getResponseAsString();
        engine.log(respTxt);
        throw new Error(`status is not 200: ${status}`);
    }

    const newFile = new com.questetra.bpms.core.event.scripttask.NewQfile(
        "test.png",
        "image/png",
        response.getResponse()
    );
    saveFileData('conf_File', newFile);
}

/**
 * config からリージョンコードを読み出す
 * リージョンコードの形式として不正な場合はエラー
 * @return {String}
 */
function retrieveRegion() {
    const region = configs.get("conf_Region");
    // 今後リージョンが増えることも考えて、中央の最大文字数には余裕をみている
    const reg = new RegExp("^[a-z]{2}-[a-z]{4,16}-[1-9]$");
    if (!reg.test(region)) {
        throw new Error("Region Code is invalid.");
    }
    return region;
}

const MAX_TOKENS_DEFAULT = 2048;

/**
 * config から最大トークン数を読み出す
 * 指定なしの場合は 2048 を返す
 * @returns {Number}
 */
const retrieveMaxTokens = () => {
    const maxTokens = configs.get('conf_MaxTokens');
    if (maxTokens === '') {
        return MAX_TOKENS_DEFAULT;
    }
    const regExp = new RegExp(/^[1-9][0-9]*$/);
    if (!regExp.test(maxTokens)) {
        throw new Error('Maximum number of tokens must be a positive integer.');
    }
    return parseInt(maxTokens, 10);
};

/**
 * データ項目への保存
 * @param configName
 * @param newFile
 */
const saveFileData = (configName, newFile) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    let files = engine.findData(def);
    if (files === null) {
        files = new java.util.ArrayList();
    }
    files.add(newFile);
    engine.setData(def, newFile);
};
    ]]></script>
    <icon>        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABE9JREFUWEfN        l3tMlWUcxz/v4SCXA38gtyPTiXo2m8YdEp3cUzGxOdw0E5tRNqlsMDGlRRE5kFJjqUDLKEJsYuCN        xD8qA5oMGeBhXpIdbiuRrORSkOKBt71vHuIcDnRU2un5893v8nl/z/f3e55HwMpLsDS/V1CQo6Pe        MR6EKBECAG/A5b5/D9AhQBOI5weVg+VdDQ2DlsT+VwDvBZFqpXJkpyiwFbC3JChwRxAp0OsVOR1X        v+uezGdSgLl+YVtB2CuAysLERmYiDICY2qatKZjIf0IAjX9EniiKSQ+T2NRHEIR83aWql83FMgug        8Q8vEUWenYrkhhiCwFHdpeqN4+BMP0zln1tSCaMKSHsuIORP5Z+bxhIRk8ZqYhRAUrvCdkT3sIKz        FFoS5sg9hcbQHaMAGt/wD0SBZEsDPYqdIJKra65OkWLIANKQcdCrfjPt85zMXcTGRGCjtGFo6B6f        lRwnfMkibv58i2073ubwwRw8Pdx4bUcGcbHRrIlbQfnpc2xcvwZnJxV37w6Rd7iYwuJSU947fyoH        XKVhJQNo/MISRIRiU6uQQF96evvRtXXw8YE9eKk9adG147NwPum79/Hum9txUqnI2nuQVSuiUXu6        09f/OwqFgoQtycya6SWH/PGnrnEFExA36bQ1R+4DhH8iQqKp1aJgf57bsJaZXmpEUcTe3o6S0lO8        tHkDpScqeGp5FPrhYWrrGglbEkJ9YzNKpZLVK2PQtXVypvJrjpVXMDAwfioLUKjTVr8gA8zzC2/k        7/k+uubMnkVBbha9fX18efIsq2JjUHu48Xp6Nvuz07n1y69Ms53GjZvduLtNZ4bak4MfFVF2upLl        0WGsfXoli58I5JuqC6SkZZqTTFOrtjrQAHB7zMEiG0vO72Wmcb6mls+/KCd3z1s4ONjz4qs72ZWS        xJLQICrOfUvXzW6eT1jHja5unkncxrKopVy+2iLrpCh/H38MDLA5KdUcQE+rtnq6AUA0Z7E7PZWV        yyLR6/VcbNDi4e5Kbl4hPgvmy1tTeKSU1vZOMtJSqG/UytU58P47LF0cwjRbW2739PJhwaccP3nW        bNO0aquFSQEepdUs8R0LMG4LUrdtoa5BS82Fi5bEMrKRxCkJVaqYnZ0dZacqydp3yDSO0RaME6HU        AW9sf0Uuf+mJr2Q1P8haHx/HDLUHi4IDaL58jez9eabu/4hQ42e+DVUqRzJ2JbMseinDwyNcu66j        SXuFKz+0UFNbP9pekl3Y4hCCA3zxffwx5s2ZTW9fP8fKzrDiyQhZB1Xf1xkBGLXhRIPI4KGZ603i        pnVEhoXi6uKCjY3CbDGkyXdd1yYnlioWvzoWZ2cVRUfLJh9EE41ic1mkaRcaEoC/z0KcVI6yia69        k+strXLLWriMR7HkZNXDSAKw+nEsQVj1QjIquCm8jJrqwdzl9P93Kf0vKvHA13IDhFUfJgYIqz7N        xorIao9TCyfbQ5v9BWbg5jDAzldXAAAAAElFTkSuQmCC    </icon>
    <test><![CDATA[
]]></test>
</service-task-definition>