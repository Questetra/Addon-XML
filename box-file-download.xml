<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-01-28</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box: Download File</label>
<label locale="ja">Box: ファイルダウンロード</label>
<summary>Download the specified file in Box. If you do not specify a file name, it will be saved with the file name in Box.</summary>
<summary locale="ja">Box 内の指定ファイルをダウンロードします。ファイル名を指定しない場合、Boxでのファイル名で保存されます。</summary>
<help-page-url> https://support.questetra.com/bpmn-icons/service-task-box-file-download/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-download/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2"
   oauth2-setting-name="https://app.box.com/api/oauth2/root_readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: File ID to download</label>
    <label locale="ja">C2: ダウンロードするファイルの ID </label>
  </config>
  <config name="conf_FileName" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: File Name (named with the file name in Box if blank)</label>
    <label locale="ja">C3: ファイル名 (空白の場合、Boxでのファイル名で保存されます。)</label>
  </config>
  <config name="conf_Files" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C4: File type data item to add the downloaded file</label>
    <label locale="ja">C4: ダウンロードファイルを追加保存するファイル型データ項目</label>
  </config>
</configs>

<script><![CDATA[
main();
function main(){

  const oauth2 = configs.get("conf_OAuth2");

  const fileIdDef = configs.getObject("conf_FileId");
  let fileId = decideFileId(fileIdDef);

  let fileName = configs.get( "conf_FileName" );
   if(fileName === "" || fileName === null){
   // Boxでのファイル名を取得する
     fileName = getBoxFileName(oauth2, fileId);
  }

  const {contentType, content} = downloadBoxFile(oauth2, fileId);

  const filesDef = configs.getObject("conf_Files");  
  saveFile(filesDef, fileName, contentType, content);

}

/**
  * ダウンロードするファイルのIDをconfigから読み出して出力する
  * @param {String} fileIdDef
  * @return {String}  fileId ファイルの ID
  */
function decideFileId(fileIdDef){
  let fileId = "";
  if(fileIdDef === null){
    fileId = configs.get( "conf_FileId");
  }else{
    fileId = engine.findData(fileIdDef);
  }
  if(fileId === "" ||fileId === null) {
    throw "fileId is blank";
  }
  return fileId;
}

/**
  * Boxのファイル名を取得する
  * @param {String} oauth2 認証設定
  * @param {String} fileId  ダウンロードするファイルのID
  * @return {String} jsonRes.name  Boxでのファイル名 
  */
function getBoxFileName(oauth2, fileId){
const url = `https://api.box.com/2.0/files/${fileId}/`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .get(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status !== 200) {
    engine.log(`${responseTxt}`);
    throw `Failed to download file. status: ${status}`;
  }
  let jsonRes;
   try {
     jsonRes = JSON.parse(responseTxt);
   } catch(e) {
     engine.log("failed to parse as json");
     throw `Failed to download file. status: ${status}`;
   }
return jsonRes.name;
}

/**
  * box API にファイルダウンロードの GET リクエストを送信し、レスポンスを返す
  * @param {String} oauth2 認証設定
  * @param {String} folderId  ダウンロードするファイルのID
  * @return {HttpResponseWrapper} contentType
  * @return {HttpResponseWrapper} content
  */
function downloadBoxFile(oauth2, fileId){
  
  const url = `https://api.box.com/2.0/files/${fileId}/content/`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .get(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 200) {
  engine.log(`${responseTxt}`);
  throw `Failed to download file. status: ${status}`;
  }
  return {
    contentType: response.getContentType(),
    content: response.getResponse()
  };
}

/**
  * ダウンロードしたファイルを保存する
  * @param {String} fileName  保存する際のファイル名
  * @param {Qfile} file  ファイル
  * @param {HttpResponseWrapper} contentType
  * @param {HttpResponseWrapper} content
  */
function saveFile(filesDef, fileName, contentType, content){

  let files = engine.findData( filesDef );
  if (files === null) {
    files = new java.util.ArrayList();
  }

  const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
    fileName, contentType, content
  );

  files.add( qfile );

  // == ワークフローデータへ代入する
  engine.setData( filesDef, files );

}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>
</service-task-definition>
