<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>New Record to Google Sheets (Table)</label>
<label locale="ja">Google Sheets 行追加 (Table)</label>

<last-modified>2019-12-25</last-modified>
<help-page-url>https://support.questetra.com/ja/addons/googlesheets-appendtable/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/addons/googlesheets-appendtable/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2">
    <label>C1: OAuth2 Config Name</label>
    <label locale="ja">C1: OAuth2設定名</label>
  </config>
  <config name="conf_DataIdW" required="true" form-type="TEXTFIELD">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdX" required="true" form-type="TEXTFIELD">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_DataIdT" required="true" form-type="SELECT" select-data-type="LIST">
    <label>C4: TABLE DATA</label>
    <label locale="ja">C4: テーブル型データ項目</label>
  </config>
  <config name="conf_DataIdA" required="false" form-type="TEXTFIELD">
    <label>C-A: Column-A Value of New Row</label>
    <label locale="ja">C-A: 末尾行の A 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdB" required="false" form-type="TEXTFIELD">
    <label>C-B: Column-B Value of New Row</label>
    <label locale="ja">C-B: 末尾行の B 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdC" required="false" form-type="TEXTFIELD">
    <label>C-C: Column-C Value of New Row</label>
    <label locale="ja">C-C: 末尾行の C 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdD" required="false" form-type="TEXTFIELD">
    <label>C-D: Column-D Value of New Row</label>
    <label locale="ja">C-D: 末尾行の D 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="TEXTFIELD">
    <label>C-E: Column-E Value of New Row</label>
    <label locale="ja">C-E: 末尾行の E 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdF" required="false" form-type="TEXTFIELD">
    <label>C-F: Column-F Value of New Row</label>
    <label locale="ja">C-F: 末尾行の F 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdG" required="false" form-type="TEXTFIELD">
    <label>C-G: Column-G Value of New Row</label>
    <label locale="ja">C-G: 末尾行の G 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdH" required="false" form-type="TEXTFIELD">
    <label>C-H: Column-H Value of New Row</label>
    <label locale="ja">C-H: 末尾行の H 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdI" required="false" form-type="TEXTFIELD">
    <label>C-I: Column-I Value of New Row</label>
    <label locale="ja">C-I: 末尾行の I 列に追加されるテーブル型データ項目の列</label>
  </config>
  <config name="conf_DataIdJ" required="false" form-type="TEXTFIELD">
    <label>C-J: Column-J Value of New Row</label>
    <label locale="ja">C-J: 末尾行の J 列に追加されるテーブル型データ項目の列</label>
  </config>
</configs>

<script><![CDATA[
// Append Table Records to Google Sheets (ver. 20160915)
// (c) 2016, Questetra, Inc. (the MIT License)

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)
main();
function main(){
  //// == 自動工程コンフィグの参照 / Config Retrieving ==
  let dataidArray = [];
  const dataIdT = configs.get( "conf_DataIdT" ); // (returns Number)
  const oauth2 = configs.get( "conf_OAuth2" );
  const spreadsheetId = configs.get( "conf_DataIdW" ) + "";
  const sheetName = configs.get( "conf_DataIdX" ) + "";
  dataidArray[0] = configs.get( "conf_DataIdA" );
  dataidArray[1] = configs.get( "conf_DataIdB" );
  dataidArray[2] = configs.get( "conf_DataIdC" );
  dataidArray[3] = configs.get( "conf_DataIdD" );
  dataidArray[4] = configs.get( "conf_DataIdE" );
  dataidArray[5] = configs.get( "conf_DataIdF" );
  dataidArray[6] = configs.get( "conf_DataIdG" );
  dataidArray[7] = configs.get( "conf_DataIdH" );
  dataidArray[8] = configs.get( "conf_DataIdI" );
  dataidArray[9] = configs.get( "conf_DataIdJ" );
  //// == ワークフローデータの参照 / Data Retrieving ==
  const myTable = engine.findDataByNumber( dataIdT );
  // myTable: com.questetra.bpms.core.model.formdata.ListArray
  if(myTable === null){
    throw "the table data is empty.";
  }
  tableData = engine.findDataDefinitionByNumber( dataIdT );
  tableDataList = tableData.getSubDataDefinitions();
  //// == 演算 / Calculating ==
  let accessLog = "";
  let responseJson = "";
  let sheetId = -1;
  const token = httpClient.getOAuth2Token( oauth2 );
  
  try{
    // check spreadsheet
    let uri = "https://sheets.googleapis.com/v4/spreadsheets/";
    uri += spreadsheetId;
    uri += "?includeGridData=false";
    const response = httpClient.begin()
      .bearer(token)
      .get( uri ); 
    accessLog += "---GET request--- " + response.getStatusCode() + "\n";
    responseJson = response.getResponseAsString();
    if( response.getStatusCode() == 200 ){
      let jsonObj = JSON.parse( responseJson );
      accessLog += " SPREADSHEET TITLE: \"" + jsonObj.properties.title + "\" has";
      accessLog += jsonObj.sheets.length + " sheets\n";
      for( var i = 0; i < jsonObj.sheets.length; i++ ){
        if( jsonObj.sheets[i].properties.title == sheetName ){
          sheetId = parseInt( jsonObj.sheets[i].properties.sheetId, 10 );
          accessLog += " SHEET TITLE: \"" + sheetName + "\" exists (id: " + sheetId + ")\n";
        }else{
          accessLog += " SHEET TITLE: \"" + sheetName + "\" does not exist\n";
        }
      }
    }else{
      throw responseJson;
    }

    // add sheet (not exsist)
    if( sheetId == -1 ){  
      let uri2 = "https://sheets.googleapis.com/v4/spreadsheets/";
      uri2 += spreadsheetId;
      uri2 += ":batchUpdate";

      sheetId = processInstance.getProcessInstanceId() - 0;
      let myObj2 = {};
      myObj2.requests = []; // Array
      myObj2.requests[0] = {};
      myObj2.requests[0].addSheet = {};
      myObj2.requests[0].addSheet.properties = {};
      myObj2.requests[0].addSheet.properties.sheetId = sheetId;
      myObj2.requests[0].addSheet.properties.title = sheetName;

      const response2 = httpClient.begin()
        .bearer(token)
        .body( JSON.stringify( myObj2 ), "application/json" )
        .post( uri2 ); 
      accessLog += "---POST request--- " + response2.getStatusCode() + "\n";
      if( response2.getStatusCode() == 200 ){
        accessLog += " SHEET TITLE: \"" + sheetName + "\" created (id: " + sheetId + ")\n";
      }
    }

    // append records
    if( sheetId >= 0 ){
      if( myTable !== null){
        var numOfRows = myTable.size() - 0; // 行（Tableの高さ）

        let myObj3 = {};
        myObj3.requests = []; // Array
        myObj3.requests[0] = {};
        myObj3.requests[0].appendCells = {};
        myObj3.requests[0].appendCells.rows = []; // Array
        myObj3.requests[0].appendCells.sheetId = sheetId;
        myObj3.requests[0].appendCells.fields = "*";

        for( var i = 0; i < numOfRows; i++ ){
          myObj3.requests[0].appendCells.rows[i] = {};
          myObj3.requests[0].appendCells.rows[i].values = []; // Array
          for( var j = 0; j < 10; j++ ){
            if(dataidArray[j] !== "" && dataidArray[j] !== null ){
              let cellValue = myTable.get(i, dataidArray[j] ) + "";
              if(cellValue.length > 50000){
                throw "Can't set text over 50,000 character.";
              }
              accessLog += "\n";
              if(tableDataList[j].matchDataType("Numeric-type")){
                myObj3.requests[0].appendCells.rows[i].values[j]
              = {"userEnteredValue": {"numberValue": cellValue }}; 
                accessLog += "Num";
                accessLog += "\n";
              }else{
                myObj3.requests[0].appendCells.rows[i].values[j]
              = {"userEnteredValue": {"stringValue": cellValue }};
                accessLog += "Str";
                accessLog += "\n";
              }
              
               
            }
          }
        }

        let uri3 = "https://sheets.googleapis.com/v4/spreadsheets/";
        uri3 += spreadsheetId;
        uri3 += ":batchUpdate";

        let response3 = httpClient.begin()
          .bearer(token)
          .body( JSON.stringify( myObj3 ), "application/json" )
          .post( uri3 ); 
        accessLog += "---POST request--- " + response3.getStatusCode() + "\n";
        if( response3.getStatusCode() == 200 ){
          accessLog += "ADDED DATA";
        }else if( response3.getStatusCode() >= 300 ){
          throw response3.getResponseAsString();
        }
      }
    }
  }catch(e){
    accessLog += e.message + "\n";
    throw accessLog;
 }

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.log(accessLog );
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
