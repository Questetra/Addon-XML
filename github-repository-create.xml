<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>GitHub: Create Repository</label>
    <label locale="ja">GitHub: リポジトリ作成</label>
    <!--
    <last-modified>2024-08-15</last-modified>
    -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <summary>
        This item creates a repository on GitHub.
    </summary>
    <summary locale="ja">
        この工程は、GitHub にリポジトリを作成します。
    </summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-github-repository-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-github-repository-create/</help-page-url>
    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Personal Access Token (fine-grained)</label>
            <label locale="ja">C1: 個人用アクセストークン（fine-grained）</label>
        </config>
        <config name="conf_Org" form-type="TEXTFIELD">
            <label>C2: Organization Name (if blank, create the user's repository)</label>
            <label locale="ja">C2: 組織名（空の場合、ユーザのリポジトリを作成）</label>
        </config>
        <config name="conf_Name" required="true" form-type="TEXTFIELD" el-enabled="true">
            <label>C3: Repository Name</label>
            <label locale="ja">C3: リポジトリの名前</label>
        </config>
        <config name="conf_Visibility" required="true" form-type="SELECT_ITEM">
            <label>C4: Visibility</label>
            <label locale="ja">C4: 公開設定</label>
            <item value="public">
                <label>Public</label>
            </item>
            <item value="private">
                <label>Private</label>
            </item>
            <item value="internal">
                <label>Internal (available only for organizations on Enterprise Cloud)</label>
                <label locale="ja">Internal（Enterprise Cloud の組織でのみ有効）</label>
            </item>
        </config>
        <config name="conf_Description" form-type="TEXTFIELD" el-enabled="true">
            <label>C5: Description</label>
            <label locale="ja">C5: 説明</label>
        </config>
        <config name="conf_Homepage" form-type="TEXTFIELD" el-enabled="true">
            <label>C6: Website</label>
            <label locale="ja">C6: ウェブサイト</label>
        </config>
        <config name="conf_Topics" form-type="SELECT" select-data-type="STRING|SELECT">
            <label>C7: Topics (write one per line)</label>
            <label locale="ja">C7: トピック（文字型データ項目の場合、1 行に 1 つ）</label>
        </config>
        <config name="conf_FullName" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C7: Data item to save the repository's Full Name</label>
            <label locale="ja">C7: リポジトリのフルネームを保存するデータ項目</label>
        </config>
        <config name="conf_Url" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C8: Data item to save the repository's web view URL</label>
            <label locale="ja">C8: リポジトリの表示 URL を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

const API_VERSION = '2022-11-28';
const API_VERSION_HEADER = 'X-GitHub-Api-Version';

const MAX_TOPIC_NUM = 20;
const MAX_TOPIC_LENGTH = 50;

function main() {
    ////// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const auth = configs.getObject('conf_Auth');
    const org = configs.get('conf_Org');
    const name = configs.get('conf_Name');
    if (name === '') {
        throw new Error('Repository Name is blank.');
    }
    const visibility = configs.get('conf_Visibility');
    if (org === '' && visibility === 'internal') {
        throw new Error('Internal visibility is unavailable when creating a repository for users.');
    }
    const description = configs.get('conf_Description');
    const homepage = configs.get('conf_Homepage');
    const topics = retrieveTopics();

    ////// == 演算 / Calculating ==
    let repo;
    if (org === '') {
        repo = createRepositoryForUser(auth, name, visibility, description, homepage);
    } else {
        repo = createRepositoryForOrganization(auth, org, name, visibility, description, homepage);
    }
    if (topics.length > 0) {
        setTopics(auth, repo.full_name, topics);
    }

    ////// == ワークフローデータへの代入 / Data Updating ==
    saveData('conf_FullName', repo.full_name);
    saveData('conf_Url', repo.html_url);
}

/**
 * config に設定されたトピックを読み出す
 * @returns {Array<String>} トピックの配列
 */
const retrieveTopics = () => {
    const dataDef = configs.getObject('conf_Topics');
    if (dataDef === null) {
        return [];
    }
    let topics = [];
    if (dataDef.matchDataType('STRING')) { // 文字型データ項目の場合
        const dataObj = engine.findData(dataDef);
        if (dataObj === null) {
            return [];
        }
        topics = dataObj.split('\n')
            .filter(name => name !== '');
    } else { // 選択型データ項目の場合
        const selects = engine.findData(dataDef);
        if (selects === null || selects.size() === 0) {
            return [];
        }
        selects.forEach(item => {
            topics.push(item.getValue());
        });
    }
    // バリデーション
    if (topics.length > MAX_TOPIC_NUM) {
        throw new Error(`The maximum number of topics is ${MAX_TOPIC_NUM}.`);
    }
    if (topics.some(topic => topic.length > MAX_TOPIC_LENGTH)) {
        throw new Error(`Each topic must be within ${MAX_TOPIC_LENGTH} characters.`);
    }
    const reg = new RegExp(`^[a-z0-9-]+$`);
    if (!topics.every(topic => reg.test(topic))) {
        throw new Error('Each topic must consist of lowercase letters, numbers, and hyphens.');
    }
    return topics;
};

/**
 * ユーザのリポジトリを作成
 * @param {AuthSettingWrapper} auth HTTP 認証設定
 * @param {String} name リポジトリ名
 * @param {String} visibility 公開設定
 * @param {String} description 説明
 * @param {String} homepage ウェブサイト
 * @returns {Object} レポジトリ情報
 */
const createRepositoryForUser = (auth, name, visibility, description, homepage) => {
    const url = 'https://api.github.com/user/repos';

    const private = visibility === 'private';
    const payload = {name, private, description, homepage};
    payload.gitignore_template = 'Node'; // テスト用
    payload.license_template = 'MIT'; // テスト用
    payload.topics = ['test']; // テスト用
    const response = httpClient.begin()
        .header(API_VERSION_HEADER, API_VERSION)
        .authSetting(auth)
        .body(JSON.stringify(payload), 'application/json')
        .post(url);

    const status = response.getStatusCode();
    const respTxt = response.getResponseAsString();
    if (status !== 201) {
        engine.log(respTxt);
        throw new Error(`Failed to create a repository for the user. status: ${status}`);
    }
    engine.log(respTxt); // テスト用
    return JSON.parse(respTxt);
};

/**
 * 組織のリポジトリを作成
 * @param {AuthSettingWrapper} auth HTTP 認証設定
 * @param {String} org 組織名
 * @param {String} name リポジトリ名
 * @param {String} visibility 公開設定
 * @param {String} description 説明
 * @param {String} homepage ウェブサイト
 * @returns {Object} レポジトリ情報
 */
const createRepositoryForOrganization = (auth, org, name, visibility, description, homepage) => {
    const url = `https://api.github.com/orgs/${encodeURIComponent(org)}/repos`;

    const payload = {name, visibility, description, homepage};
    const response = httpClient.begin()
        .header(API_VERSION_HEADER, API_VERSION)
        .authSetting(auth)
        .body(JSON.stringify(payload), 'application/json')
        .post(url);

    const status = response.getStatusCode();
    const respTxt = response.getResponseAsString();
    if (status !== 201) {
        engine.log(respTxt);
        throw new Error(`Failed to create a repository for the organization. status: ${status}`);
    }
    engine.log(respTxt); // テスト用
    return JSON.parse(respTxt);
};

/**
 * リポジトリのトピックを設定
 * @param {AuthSettingWrapper} auth HTTP 認証設定
 * @param {String} fullName リポジトリのパス
 * @param {Array<String>} topics トピック
 */
const setTopics = (auth, fullName, topics) => {
    const url = `https://api.github.com/repos/${fullName}/topics`;

    const response = httpClient.begin()
        .header(API_VERSION_HEADER, API_VERSION)
        .authSetting(auth)
        .body(JSON.stringify({names: topics}), 'application/json')
        .put(url);

    const status = response.getStatusCode();
    const respTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(respTxt);
        throw new Error(`Failed to set topics. status: ${status}`);
    }
};

/**
 * データ項目への保存
 * @param {String} configName 設定名
 * @param {Object} data 保存するデータ
 */
const saveData = (configName, data) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    engine.setData(def, data);
};

]]></script>

<!--
    <icon>

    </icon>
-->

    <test><![CDATA[



]]></test>
</service-task-definition>