<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2020-08-24</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Office 365 Excel: Append New Row</label>
<label locale="ja">Office 365 Excel: 行追加</label>
<summary>Insert cells before the specified row in a sheet and add data into the new row.</summary>
<summary locale="ja">シート内の指定された行の上に新しい行を挿入し、データを入力します。</summary>
<help-page-url>https://support.questetra.com/addons/excel-appendcells/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/excel-appendcells/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_Path" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C2: Target Book Path</label>
    <label locale="ja">C2: 入力先のブックのパス</label>
  </config>
  <config name="conf_Title" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_RowNumber" form-type="SELECT" select-data-type="DECIMAL" editable="true">
    <label>C4: Row Number to insert new row(When empty, the top row)</label>
    <label locale="ja">C4: 挿入先の行番号(空の場合は一番上の行)</label>
  </config>
  <config name="conf_ValueA" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-A: Column-A Value of Inserted Row</label>
    <label locale="ja">C-A: 挿入行の A 列に追加される値</label>
  </config>
  <config name="conf_ValueB" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-B: Column-B Value of Inserted Row</label>
    <label locale="ja">C-B: 挿入行の B 列に追加される値</label>
  </config>
  <config name="conf_ValueC" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-C: Column-C Value of Inserted Row</label>
    <label locale="ja">C-C: 挿入行の C 列に追加される値</label>
  </config>
  <config name="conf_ValueD" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-D: Column-D Value of Inserted Row</label>
    <label locale="ja">C-D: 挿入行の D 列に追加される値</label>
  </config>
  <config name="conf_ValueE" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-E: Column-E Value of Inserted Row</label>
    <label locale="ja">C-E: 挿入行の E 列に追加される値</label>
  </config>
  <config name="conf_ValueF" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-F: Column-F Value of Inserted Row</label>
    <label locale="ja">C-F: 挿入行の F 列に追加される値</label>
  </config>
  <config name="conf_ValueG" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-G: Column-G Value of Inserted Row</label>
    <label locale="ja">C-G: 挿入行の G 列に追加される値</label>
  </config>
  <config name="conf_ValueH" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-H: Column-H Value of Inserted Row</label>
    <label locale="ja">C-H: 挿入行の H 列に追加される値</label>
  </config>
  <config name="conf_ValueI" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-I: Column-I Value of Inserted Row</label>
    <label locale="ja">C-I: 挿入行の I 列に追加される値</label>
  </config>
  <config name="conf_ValueJ" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-J: Column-J Value of Inserted Row</label>
    <label locale="ja">C-J: 挿入行の J 列に追加される値</label>
  </config>
</configs>

<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)


//// == Config Retrieving / 工程コンフィグの参照 ==
main();
function main(){
  const oauth2 = configs.get( "conf_OAuth2" ) + "";
  const bookPath = configs.get( "conf_Path" ) + "";
  const sheetName = configs.get( "conf_Title" ) + "";
  const rowNumber = retrieveRowNumber();
  let values = [];
  values[0] = configs.get( "conf_ValueA" ) + "";
  values[1] = configs.get( "conf_ValueB" ) + "";
  values[2] = configs.get( "conf_ValueC" ) + "";
  values[3] = configs.get( "conf_ValueD" ) + "";
  values[4] = configs.get( "conf_ValueE" ) + "";
  values[5] = configs.get( "conf_ValueF" ) + "";
  values[6] = configs.get( "conf_ValueG" ) + "";
  values[7] = configs.get( "conf_ValueH" ) + "";
  values[8] = configs.get( "conf_ValueI" ) + "";
  values[9] = configs.get( "conf_ValueJ" ) + "";
  // convert 'java.lang.String' to 'javascript string'

  //// == Calculating / 演算 ==
  // Get OAuth2 Token
  const token  = httpClient.getOAuth2Token( oauth2 );

  if(bookPath === ""){
    throw "Book Path is empty."
  }
  if(bookPath[0] !== "/"){
    throw "Book Path must start with '/'."
  }

  // Access to the API 1st(Get Book ID)
  const getIdUrl = `https://graph.microsoft.com/v1.0/me/drive/root:${bookPath}`;
  //Path must start with "/".
  let getBookId = httpClient.begin()
    .bearer(token)
    .get(getIdUrl); 

  addLog(getBookId, "GET");

  const responseAjson = JSON.parse(responseA);
  const bookId = responseAjson.id;

  const postRequest = {
    "Shift" : "Down"
  }
  // Access to the API 2nd(Insert Row)
  const insertUrl = `https://graph.microsoft.com/v1.0/me/drive/items/${bookId}/workbook/worksheets/${sheetName}/range(address='${sheetName}!${rowNumber}:${rowNumber}')/insert`;

  let insertNewRow = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify( postRequest ), "application/json")
    .post (insertUrl);
    
  addLog(insertNewRow, "POST");

  const patchRequest = makeRequestToAdd(values);
  // Access to the API 3rd(PATCH)
  const patchUri = `https://graph.microsoft.com/v1.0/me/drive/items/${bookId}/workbook/worksheets/${sheetName}/range(address='${sheetName}!A${rowNumber}:J${rowNumber}')/`;

  let patchToSheet = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify( patchRequest ), "application/json")
    .patch(patchUri); 
  
  addLog(patchToSheet, "PATCH");

  //// == Output Log / ログ出力 ==
  engine.log(accessLog);
}

/**
  * configから行番号の値を読み出す、空なら1
  * @return {Number} configの値
  */
function retrieveRowNumber() {
  const rowNumberDef = configs.getObject( "conf_RowNumber" );
  let rowNumber;
  if ( rowNumberDef === null ) {
    rowNumber = configs.get( "conf_RowNumber" )
  }else{
    rowNumber = engine.findData( rowNumberDef );
  }
  if ( rowNumber === "" || rowNumber === null){
    rowNumber = "1";
  }
  rowNumber = parseInt(rowNumber, 10); //parse to int
  if ( isNaN(rowNumber) === true){
    //check whether rowNumber is number or not
    throw "Row number must be number."
  } else if ( rowNumber < 1 || rowNumber > 1048576){
    throw "Invalid row number"
  }
  return rowNumber;
}

function addLog(request, requestType){
  const response = request.getResponseAsString();
  const status = request.getStatusCode();
  accessLog += `---${requestType} request--- 
  ${status}
  ${response}
  `;
  if(status >= 300){
    throw accessLog;
  }
}

function makeRequestToAdd(values){
  let request = {
    values : [[]]
  };
  let count = 0;
  for(let i = 0; i < 10; i++){
    if(values[i] === "" || values[i] === null){
      request.values[0].push(null);
      count++;
    }else{
      if(values[i].length > 32767){
        throw "Can't set text over 32,767 character.";
      }
      request.values[0].push(values[i]);
    }
  }
  if(count === 10){
    throw "No Data to add is set.";
  }
  return request;
}
  
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEZklEQVRYR8WXf2xTVRTHv3evo9v6
+/XHyuZccRMjc8QRkkFEI9MWJCHBJSgqzIjJshFxjqHGuCAh8VdcJy7DEYyiGY5/QDFElHaKmZjM
P3AiatAprcsiLDoawlZbWXvNvesrb91r+waY3qRJ8969537uOd9zzn0EOR5E7f4ljWuLtPpIPSVk
JQGtAYgLgCWxPgTQIAUZIpSeiE4UfPTnvqNhNbazArieXeNEbOp5QtAEoECNUQARSrEXgub14BvH
LmRakxHA1eZuIiAdAHQqN06dNklBtwe9/r3p1qcFcG33vE0omq9x4xnLKEFPsMO3RcmWIoCrzd1H
QB65EZtLNijowaDX/2iqzVkAak6+ofYBLHEtQrmtBA6DiG+Gh9B+uCsrr5InZgAkYt4jWVpeeSfu
r1qGCkcZ5pvsEPUmGAv1yBc0MzY7dnoAT/W+nBWATaCgzXJNJAGY2kl86jdJcD++8gmK5qkTPQMQ
BAE2vRlxSkETP/afEIIuXy8Gf/9BApykeZpKKTuuAmzzvEkInpFmnes4rupEbBIDWOh0odhk5dDh
fyN8rUDyUKQtxK4jPXj/5JGkPUqxO9jpa2UPOAAvMobouDzP5woghWBwx0Es2zWt3xbPRrR4Ns0C
YHUiellrZcWKAyzY5t4IQnrlR04HwNz7z5UotJp8CHkCX8I8wIbNYMEdpZU4MzqMqXiMe6Om/HYl
AIDSTYFO/wEO4GrzvEuAzekA3vnqEBaXLURtxWIMX/gDHZ/tx56GdmgSYmQAI+PnuUhXVa/A8TMn
uSmnyYZ7bluqCECB94Je35PTHmhzfweQmnQAbNPOzz9Ad0M7uvs/xH1Vy/lJpSHPAnkImuoexnNr
Nit7AHQo4PUvSQB4LsoaC7crD0EsHseLh97C6uq78OnpAbz2UGvS/VIIWE0oNlphLjIgFL6MWDzG
09WqN6cBQCjg9YkSAE2VfKoGvh85i/quFhzeupvHVT7SeWCr+zG0rmpIB4CA10dUATDhdfkPwKIz
ITR5CU9zzV6tYQyAndRuFFFitmP04hivBRpBwAL7TaoAMobg3F+j2NPfh1fXt6Jx/068tK6ZG5Zr
YHhsBKLOiLU1K3F06AR/VWopRt2iWjUhSC9CFv+dH3ejfqmbu/7rX0/hi58GsWPdFuQlvMA8MPDL
KR7/xnvXo7u/D5ErUdzqLMcTdz+YXYSZ0pABTETD0M0r4Gk3EQljNDSGm63zk6WaAZRYHHAYRdj0
Fvw9EeIeyBfyYTdYVKThHApRqlilLFCqhBlFKC9EN6IUsz5gN4i8H4xdGudpyDxWJjqzl2JeDa+z
Gd3iKEOxUZzloKl4HI/vewFnzweS72Y1Iw6Q0o6b6zagqrSCx5bFlQlMpy2ckX5KlVApRCnPlNvx
dE/gl9DkhSTVGOsHq6tX8NbrNNt47psK9fjy52+v/0IibabmSqbilIpTsl7JkhC5vJT+H56Y87Vc
5oncfZgkIXL5aSZXUs4+Tq9V8WrX/Qc0OzY/XizhkgAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
