<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2023-12-22</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Box: Delete Folder</label>
<label locale="ja">Box: フォルダ削除</label>
<summary>This item deletes folders on Box. </summary>
<summary locale="ja">この工程は、Box 上のフォルダを削除します。一度に複数の削除が可能です。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/box-folder-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/box-folder-delete/</help-page-url>
<configs>
  <config name="OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
   oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="FolderIdsItem" form-type="SELECT" select-data-type="STRING" required="true">
    <label>C2: Folder IDs to delete (Write one per line)</label>
    <label locale="ja">C2: 削除するフォルダ ID (1 行 1 ID)</label>
  </config>
</configs>

<script><![CDATA[

function main() {
    const folderIds = engine.findDataByNumber(configs.get("FolderIdsItem"));
    if (folderIds === "" || folderIds === null) {
        throw "Folder IDs aren't set.";
    }

    let linesArray = folderIds.split("\n");
    linesArray = linesArray.filter(lines => lines !== ""); // 空文字列を削除
    if (linesArray.length === 0) {
        throw "Folder IDs aren't set.";
    }

    const numOfLines = linesArray.length;
    if (numOfLines > httpClient.getRequestingLimit()) {
        throw "Number of Folder IDs is over the limit."
    }
    const oauth2 = configs.getObject("OAuth2");
    for (let i = 0; i < numOfLines; i++) {
        deleteFolder(oauth2, linesArray[i])
    }
}

function deleteFolder(oauth2, folderId) {
    const url = `https://api.box.com/2.0/folders/${folderId}`;

    let response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam("recursive", "true")
        .delete(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status >= 300) {
        engine.log(responseTxt);
        throw `Failed to delete. Folder ID:${folderId}, status: ${status}`;
    } else {
        engine.log(`Succeeded to delete. Folder ID:${folderId}`);
    }
}

]]></script>
  
  <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD/UlEQVRYR82XbWibVRTHf/fJ2jXJ
2qSd65x11aC0YgJWZUwEWZ0D/SJaHYKKmgykbL70Bf2k4IYwZOKWOhFRMM9QZxHUjSEo+7AOlA1E
7WSRThzdqq1tWWxjm7Zrk1y5N+SlydM2XdvN50sebs5z7u+e8z/n3iu4xo9Y1Pz+3x6F5BagAYQb
oX4BSTfIUaAbIboIeY8W63dhAH+vGyZaQLYihLsox1LBiCA4OjA9CmzOZ34Af9gP8kDRE+dPo0GM
AObtR+YimBvAfzaIEC1FrXghIymDmL42KzNrgMBZE8RzC/ld1P8SE9MbyP+mEGA5V16Ykg5MX2vu
8GwAlXNBaFErW6yxFE25msgCaLXHeq9YcMWCaGE6PenqyAEI70bwRrF+lmQn2YPp3a18ZAECYVWv
rrTj0I4bqHLaeOTgn0uay/JjFQXTV5kFUB1OyK9zjYeC9ThKBeW7epYfQHfPlBZSEbBQ/nBHCmDN
zpUCkLoiUgCBcBegenzmUQDO1QaHT0dpqC3T4yd7YrzyxZB+33V/Jds3VbBmtUH/SJzmQwN07ryR
7r4p2jtTNh88uwHPdaU8uP+iVRRPEvI2pgEuADflA6wrtxV8+GPvJBcuzfDY3RXYjBzgfxNU2A0M
AW2fD1Jht/FmUzWx6STuFyyiqDYw03tnGkDmz6QioADUZO98F8HtMHh521o9lpQwNSMxvx/l9PkJ
XtpWxSaPnZFYArfDRmQ8oeFcDhvvHv+Hts5Bax2FvGJeAFUFW97q5Yc/JrWDVx9ay74n1uv3Iz+P
0fRetkIiB+uxlxj80jfFvbfatc2Jnhhb91mGPwWUA1CQgoH9dawrX0VN+zmGxxLa/qnNLj5rrtHv
ShtPf9ifWdnfB+p02X7z6zhNd5Xr8U9PRXnmo6zN7DDIM4R8DXOK8NRrHu65xY7K+QNvX2SDaxXH
Wmqpu75U+1FhVsL78qcxDjfX8ORml05BeZmN6YTUDUalQenh/RMjC4jQogwb6x189eJGKp02YpeT
2AxBWYmgLzLDwGhcw8UTaJG57AaT0xIlJGXTcTyi09HcWMml8QTVLecKAWRuGVo0IvXF1tuc7N1e
rUspnpSE+y+z4+N+/hqJ88nzNdxX58BRajAYjbPn6DB7H1/P70PTPNzRpyf8tr2WjVUleF8/bwGQ
24jU33mt2Fq2yzYaJeTVx7v/0WaktmMxoaohsyEt23pnO4oiHTcXbsfK6JoeSNKUK3oky54D0tNd
vUMp8hAhnz8/rVfpWF648vkjkEmHPqiYSxBmFCn8V3YxyUDoq1krAnWcLrZCokjU1Sy4tKtZfsJS
l9NGhGgA6QZxR8pEngExipTdYHTNt+LiNbBCTSDf7X8FbX8wYecpbwAAAABJRU5ErkJggg==</icon>

<test><![CDATA[
/**
 * 設定の準備
 * FolderId は、文字型データ項目で指定
 * @param configs
 * @param folderId
 * @return {Object}
 */
const prepareConfigs = (configs, folderId) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );
    configs.putObject('OAuth2', auth);
    const folderIdDef = engine.createDataDefinition('フォルダ ID', 3, 'q_folderId', 'STRING_TEXTAREA');
    configs.putObject('FolderIdsItem', folderIdDef);
    engine.setData(folderIdDef, folderId);

    return folderIdDef;
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
  try {
    func();
    fail();
  } catch (e) {
    expect(e.toString()).toEqual(errorMsg);
  }
};

/**
 * リクエストのテスト
 * @param url
 * @param method
 * @param id
 */
const assertRequest = ({ url, method }, folderId) => {
    expect(url).toEqual(`https://api.box.com/2.0/folders/${folderId}?recursive=true`);
    expect(method).toEqual('DELETE');
};

/**
 * フォルダ ID が null の場合
 */
test('IDs is null', () => {
    prepareConfigs(configs, null);
    assertError(main, "Folder IDs aren't set.");
});

/**
 * フォルダ ID が空白の場合
 */
test('IDs is blank', () => {
    prepareConfigs(configs, '\n\n\n'); //空行が複数行あるだけ
    assertError(main, "Folder IDs aren't set.");
});

/**
 * フォルダ ID の数が最大リクエスト数を超えた場合
 */
test('Number of Folder IDs is over the limit', () => {
    let ids = '';
    for (let i = 0; i <= httpClient.getRequestingLimit(); i++) {
        ids += `f${i}\n`;
    }
    prepareConfigs(configs, ids);
    assertError(main, 'Number of Folder IDs is over the limit.');
});


/**
 * 削除するフォルダが複数の場合（この場合、最大リクエスト数）
 */
test('Succeed to delete multiple folders', () => {
    let ids = '';
    for (let i = 0; i < httpClient.getRequestingLimit(); i++) {
        ids += `f${i}\n`;
    }
    const folderIdDef = prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        assertRequest(request, `f${requestCount++}`);
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(folderIdDef)).toEqual(ids);

    // リクエスト数をチェック
    expect(requestCount).toEqual(httpClient.getRequestingLimit());
});


/**
 * 削除するフォルダが1つの場合
 */
test('Succeed to delete 1 folder', () => {
    const folderIdDef = prepareConfigs(configs, '12345');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '12345');
        return httpClient.createHttpResponse(204, 'application/json', '{}');
    });

    main();

    // 文字型データ項目の値をチェック
    expect(engine.findData(folderIdDef)).toEqual('12345');
});


/**
 * フォルダ削除失敗の場合（400レスポンスが返ってくる）
 */
test('Failed to delete folder', () => {
    let ids = '';
    for (let i = 0; i < 2; i++) {
        ids += `000${i}\n`;
    }
    prepareConfigs(configs, ids);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
        try {
            assertRequest(request, `000${requestCount}`);
            if (requestCount === 1) {
                return httpClient.createHttpResponse(400, 'application/json', '{}');
            } else {
                return httpClient.createHttpResponse(204, 'application/json', '{}');
            }
        } finally {
            requestCount++;
        }
    });

    assertError(main, 'Failed to delete. Folder ID:0001, status: 400');
});
]]></test>

</service-task-definition>
