<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <addon-type>START_EVENT</addon-type>
    <last-modified>2021-03-03</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Google Calendar: Insert Event</label>
    <label locale="ja">Google カレンダー: イベント開始時</label>
    <summary>Start Process when the start time of the event has passed on Google Calendar.</summary>
    <summary locale="ja">Google カレンダーに登録されている、イベントの開始時刻を経過すると、プロセスを開始します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/start-event-google-calendar-event-started/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/start-event-google-calendar-event-started/
    </help-page-url>

    <configs>
        <config name="conf_User" required="true" form-type="QUSER">
            <label>C1: User Who Connects with Google Calendar</label>
            <label locale="ja">C1: Google カレンダー に接続するユーザ</label>
        </config>
        <config name="conf_CalendarId" form-type="TEXTFIELD">
            <label>C2: Calendar ID (Primary Calendar if blank)</label>
            <label locale="ja">C2: Calendar ID (空白の場合、プライマリのカレンダー)</label>
        </config>
        <config name="conf_idData" required="true" form-type="SELECT" select-data-type="STRING">
            <label>C3: Data item to save Event ID</label>
            <label locale="ja">C3: イベント ID を保存するデータ項目</label>
        </config>
        <config name="conf_timestampData" form-type="SELECT" select-data-type="DATETIME">
            <label>C4: Data item to save Event Start Datetime</label>
            <label locale="ja">C4: イベント開始日時を保存するデータ項目</label>
        </config>
    </configs>


    <script><![CDATA[
/**
 * 開始時刻を経過したイベントの検索
 * @param limit イベント数の上限
 * @param timestampLowerLimit timestamp の下限
 * @return イベント一覧
 */
const list = (limit, timestampLowerLimit) => {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const quser = configs.getObject("conf_User");
    if (quser === null) {
        throw `User not found.`;
    }
    let calendarId = configs.get("conf_CalendarId");
    if (calendarId === "" || calendarId === null) {
        calendarId = "primary";
    } else if (calendarId.search(/[^\w.@]/) !== -1) {
        throw "Invalid Calendar ID";
    }

    const events = getEvents(quser, calendarId, {limit, timestampLowerLimit});
    logEvents(events);
    return events;
}

/** 日時フォーマッター */
const datetimeFormatter = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
/** 日時文字列 -> java.sql.Timestamp */
const parseDatetime = str => new java.sql.Timestamp(datetimeFormatter.parse(str).getTime());

/**
 * イベントのログ出力
 * @param events
 */
const logEvents = (events) => {
    if (events.length === 0) {
        engine.log('no events');
        return;
    }
    const replacer = (key, value) => value instanceof java.sql.Timestamp ? datetimeFormatter.format(value) : value;
    events.forEach(event => {
        engine.log(JSON.stringify(event, replacer));
    });
};

/**
 * イベント取得の GET リクエストを送信する
 * @param {QuserView} quser 実行ユーザ
 * @param {String} calendarId カレンダーID
 * @param {Object} params  GET リクエストのパラメータに使用する情報が格納されたオブジェクト
 *   プロパティ： {Number} limit 結果件数の上限
 *              {java.sql.Timetamp} timestampLowerLimit イベント開始日時の下限
 * @return イベント一覧
 */
function getEvents(quser, calendarId, {limit, timestampLowerLimit}) {
    const eventsUrl = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events`;
    engine.log(`API URI: ${eventsUrl}`);

    const response = httpClient
        .begin()
        .googleOAuth2(quser, "Calendar")
        .queryParam('maxResults', `${limit}`)
        .queryParam('orderBy', 'startTime')
        .queryParam('singleEvents', 'true')
        .queryParam('timeMin', datetimeFormatter.format(timestampLowerLimit))
        .queryParam('timeMax', datetimeFormatter.format(new java.sql.Timestamp(Date.now())))
        .get(eventsUrl);

    //when error thrown
    const responseTxt = response.getResponseAsString();
    const status = response.getStatusCode();
    if (status >= 300) {
        engine.log(`---GET request--- ${status}`);
        engine.log(responseTxt);
        throw `Failed to get records. status: ${status}`;
    }
    const json = JSON.parse(responseTxt);

    const parseStart = (start) => {
        if (start.dateTime !== undefined) {
            return parseDatetime(start.dateTime);
        }
        // いったん GMT ベースでパース
        let time = datetimeFormatter.parse(`${start.date}T00:00:00Z`).getTime();
        // offset 分ずらす
        time += engine.getTimeZoneOffsetInMinutes() * 60 * 1000;
        return new java.sql.Timestamp(time);
    };
    // レコードオブジェクトを整形して返す
    const formatItem = (item) => ({
        id: String(item.id),
        timestamp: parseStart(item.start)
    });

    return json.items.map(formatItem).reverse();
}
]]></script>


    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEt0lEQVRYR8VXX2xTVRj/ndv2tmv3
        p1cGDyqM8SBRx9jcNBEMW7apSMKYMWoiD9sSEhITQ33AB23DyOaDJmoxGqPRbBgwEhMdUSRKS4ri
        XMA/I4jJhkZQIEhgbdm69ra395hz72572t5u3UbwvDS99/vO+Z3v+/2+77sE//MiCzm/vT/cRYjQ
        AtAGAG4A7JetMQARgIwBJBTwVh4udd95AbT2hd1Wm7CLqtRDiHbovItSRIhA/EpK3RfqkyJzOcwJ
        oO3VcA9RyVulHpx/EAMC0N6gTxouBqIogPb+sJ8Qsmve65ZkQPwBb9WLZqamANoHwkMEpLukvUs0
        oiBDQW9Vb755AQD+5utrrGirs8FmmZcqpjAmp1UcPJlAPKm/ppTuC/okD2+cszPLuUDJoGHwTm85
        1t5p0f5ejaoYnVCwuUGEw2Z+7ZkkcPy3JDautUFyEagUGD6dxHvH4hkHSumTPCcyABjbLRbyF0+4
        D3dWoKZa0Jwvh1WEzqXQ9aAdLrs5gJgMfP2rjLY6EcvK9a2PjiXx5hEeACLpNK011JEB0NEf7gMh
        e4ytm9dY0V4ngpaYYzMzgQBTCYpDIwlcn+J2onRvwCf1MZ8sgIEwKyRVxkb+7nLcf7ce/qWstAp8
        fkrGB8EElwZEgj63lAGgVzjyBX/Q69tdaFxtXcrZmm8qDRwakbH/uyyAWUJqXNAiYKb53VudeKy+
        CNsWAIsp4N1v4/jmzKwUZn0NRWgAOvrDIRDSwu/b0+LAMw/bYeOy8PcNFYOhBG5MqRo/Hq0X4RQB
        Rr7xKwrGLirY1mTHsoqsuCIxijeOzGD0vJILm9ITAZ/UqkdgIHyBgNTwFtuaRexoK8tIjpHp4EkZ
        Tz1kR3UlwU9/KojJVJPc8GkZVU4BlybT6Gyyo5oDwNTzyqcxXJ5U8+M2FvC6G/UIDEQKyL7pXhs8
        T5Shoky/DdM0y6do1Zl7aVLFqT9S6Gy2g7Gdke3Ln5NgfjyA81fTeP6jadOkBbxuUhRA3UoLXu5y
        YXllbhWUFeBaVMWxs0m03idizQq9TjBwZgBGJhTs+Sw2NwCzFNx1h4DnNjrgduUCiMsUCYXi93/S
        WFUtYGW1ThIWgdGJFNatsqLSmfUZv5LGx3kKmFXBmaBPaihKwgdqrXip05mpaPlX+DdK8dUvMrY/
        4tB4UiwCjJi7D5hEIIeEJq23Y50NL2x2aixni/WCHycUbG0SYRWAUgFcvK5ix/tTBSnIkaFZIere
        5MCzG7IyZCRkveDaTRW1KywYGdf7Qu08HGAl+LXDM5pE+WU0paKl2LOlDFsaxWytZu0UwHSC4mac
        YnmFoCnCWAwgAye5BNi556xGvH10BsfPpbjzaTTglbTxrmgz2vu0CxvuuTWl+JMfEjjwvZwFYNaM
        tOHTigtGQ+JngQVU3gLTwpmARhUFqwvaMfPkB5KdHQ48Xi/CsshpyEAyHacYPBFH4KyegqIDieFw
        a4fRvIBwoTfe3MahlO4PeqWe/BzdnrHc5OZzRoBLRxchGOInpYURkkYpRc+iPkyMgzR1WOABgad0
        IDQKCr+Shn9Jn2b5t2UVEwAbIhoo4CaErDcaCwFYT2cfqaG5blwyBxYW6sVb/wdgbxw/u9E3bAAA
        AABJRU5ErkJggg==
    </icon>

</service-task-definition>