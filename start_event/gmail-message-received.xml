<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Start: Gmail: Email Message Received</label>
    <label locale="ja">開始: Gmail: メール受信時</label>
    <!-- <last-modified>2020-11-17</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <summary>Start Process when Gmail has received a new message.</summary>
    <summary locale="ja">Gmail が新しいメールを受信すると、プロセスを開始します。</summary>
    <configs>
        <config name="conf_auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting to connect Gmail</label>
            <label locale="ja">C1: Gmail に接続するための認証設定</label>
        </config>
        <config name="conf_label">
            <label>C2: Label ID (Inbox if blank)</label>
            <label locale="ja">C2: ラベルの ID (空白の場合、受信トレイ)</label>
        </config>
        <config name="conf_idData" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: String type data iatem to save Message ID</label>
            <label locale="ja">C3: メール ID を保存する文字型データ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/start-addons/gmail-message-received/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/start-addons/gmail-message-received/</help-page-url>

    <script><![CDATA[
/**
 * configs から必要な情報の取り出し
 * @return {{apiUri: String, apiToken: *, appId: any}}
 */
const prepare = () => {
    const auth = configs.get('conf_auth');
    let label = configs.get('conf_label');
    if (label === null || label === '') {
        label = 'INBOX';
    }
    return {
        auth,
        label
    };
};

/**
 * 初期化
 * @return {*}
 */
const init = () => {
    return [];
};

/**
 * 追加されたメールの検索
 * @param limit
 * @param lastData
 */
const list = (limit, lastData) => {
    const {auth, label} = prepare();
    return getMessages(auth, label, limit);
};

/**
 * Gmail REST API にメール取得の GET リクエストを送信し、必要な情報を JSON オブジェクトに格納する
 * @param {String} apiUri  API の URI
 * @param {String} apiToken  API トークン
 * @param {Object} message  メール情報を格納する JSON オブジェクト
 */
function getMessages(auth, label, limit) {
    const q = 'is:unread';
    const response = httpClient.begin()
        .authSetting(auth)
        .queryParam('labelIds', label)
        .queryParam('maxResults', `${limit}`)
        .queryParam('q', q)
        .get('https://gmail.googleapis.com/gmail/v1/users/me/messages');

    // when error thrown
    const responseJson = response.getResponseAsString();
    const status = response.getStatusCode();
    if (status >= 300) {
        engine.log(`API URI: ${apiUri}`);
        const accessLog = `---GET request--- ${status}\n${responseJson}\n`;
        engine.log(accessLog);
        throw `Failed to get message. status: ${status}`;
    }

    // when successful, parse the message content
    const json = JSON.parse(responseJson);
    const messages = json.messages.map(formatMessage);
    engine.log(JSON.stringify(messages));
    addReadLabels(auth, messages);
    return messages;
}

/**
 * 既読に変更する
 * @param auth
 * @param messages
 */
function addReadLabels(auth, messages) {
    const body = {
        ids: messages.map(m => m.id),
        addLabelIds: [],
        removeLabelIds: ['UNREAD']
    };
    engine.log(JSON.stringify(body));
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(body), 'application/json')
        .post('https://gmail.googleapis.com/gmail/v1/users/me/messages/batchModify');
    const status = response.getStatusCode();
    if (status >= 300) {
        const accessLog = `---POST request--- ${status}\n${response.getResponseAsString()}\n`;
        engine.log(accessLog);
        throw `Failed to batchModify. status: ${status}`;
    }
}

const formatMessage = (message) => {
    return {
        id: message.id
    };
};

  ]]>
    </script>
    <!-- アイコン未設定（Icon Maker に Gmail のアイコンがない）
    <icon>

    </icon>
    -->
</service-task-definition>
