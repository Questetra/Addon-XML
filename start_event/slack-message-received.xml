<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <addon-type>START_EVENT_WEBHOOK</addon-type>
    <!-- <last-modified>2023-06-22</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <label>Start: Slack: Direct Message Received</label>
    <label locale="ja">開始: Slack: ダイレクトメッセージ受信時</label>
    <!--
    <summary>This item starts a process when Event's start time has passed on Google
        Calendar.</summary>
    <summary locale="ja">このアイテムは、Google カレンダーに登録されている、予定の開始時刻を経過すると、プロセスを開始します。
    </summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/start-event-google-calendar-event-started/
    </help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/start-event-google-calendar-event-started/
    </help-page-url>
    -->

    <configs>
        <config name="conf_Secret" form-type="OAUTH2" auth-type="TOKEN" required="true">
            <label>Signing Secret</label>
        </config>
        <config name="conf_Text" form-type="SELECT" select-data-type="STRING_TEXTAREA" required="true">
            <label>Content</label>
        </config>
    </configs>


    <script><![CDATA[
const post = ({body, headers}) => {
    const secret = configs.getObject('conf_Secret').getToken();
    verifyRequest(secret, {body, headers});

    const json = JSON.parse(body);
    switch (json.type) {
        case 'url_verification':
            return {
                'content-type': 'text/plain',
                'body': json.challenge
            };
        case 'event_callback':
            const {text} = json.event;
            const textDef = configs.getObject('conf_Text');
            engine.setData(textDef, text);
            engine.setStartProcess(true);
            return {
                'content-type': 'text/plain',
                'body': json.challenge
            };
    }

    return {
        status: 400
    };
};

const verifyRequest = (secret, {body, headers}) => {
    const signature = headers.getFirst('X-Slack-Signature');
    const timestamp = headers.getFirst('X-Slack-Request-Timestamp');
    engine.log(body);
    engine.log(`${timestamp} ${signature}`);

    if (Date.now() - timestamp * 1000 > 5 * 60 * 1000) {
        throw new Error('Request is too old');
    }
    const baseString = `v0:${timestamp}:${body}`;
    const calcString = hex.encodeToString(hmac.sha256(secret, baseString));
    engine.log(`hmac: ${calcString}`);
    if ('v0=' + calcString !== signature) {
        throw new Error('Signature is not valid');
    }
};
]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
        l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
        XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
        D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
        wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
        kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
        LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
        1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
        yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
        4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
        Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
        nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
        7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
        TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
        NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
        brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
        p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
        snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
        rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
        U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
        aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==
    </icon>

    <test><![CDATA[
]]></test>

</service-task-definition>