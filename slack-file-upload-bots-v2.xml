<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<!--
<last-modified>2024-05-22</last-modified>
-->
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Slack: Upload File (Bots) V2</label>
<label locale="ja">Slack: ファイルアップロード (Bots) V2</label>
<summary>This item uploads files to Slack with Bots.</summary>
<summary locale="ja">この工程は、Bots 機能を使って Slack にファイルをアップロードします。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://slack.com/oauth2/chat:write,files:write">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_ChannelId" required="true">
    <label>C2: Slack Channel ID</label>
    <label locale="ja">C2: Slack チャンネル ID</label>
  </config>
  <config name="conf_Files" form-type="SELECT" select-data-type="FILE" required="true">
    <label>C3: Data item whose attached files will be uploaded</label>
    <label locale="ja">C3: アップロードするファイルが保存されているデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-slack-file-upload-bots-v2</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-slack-file-upload-bots-v2</help-page-url>
<script><![CDATA[
function main() {
  const oauth2 = configs.getObject("conf_OAuth2");
  const channelId = configs.get("conf_ChannelId");
  const filesDef = configs.getObject("conf_Files");

  const files = engine.findData( filesDef );
  //check whether files exist or not
  if (files === null){
    engine.log ("No File to upload");
    return;
  }
  //check whether number of files is under the limit
  const numOfFiles = files.length;
  //TODO 要修正
  if (numOfFiles > httpClient.getRequestingLimit()){
    throw "Number of Files is over the limit.";
  }

  const fileIds = [];
  for (let i = 0; i < numOfFiles; i++){
    const {uploadUrl, fileId} = getUploadUrl(oauth2, files[i]);
    upload(uploadUrl, files[i]);
    fileIds.push(fileId);
  }

  completeUpload(oauth2, fileIds, channelId);
}

/**
  * Get Upload Url
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @param {QfileView} file
  * @returns {Object} {uploadUrl: String, fileId: String}
  */
function getUploadUrl(oauth2, file){
  const url = 'https://slack.com/api/files.getUploadURLExternal';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam('filename', file.getName())
    .queryParam('length', file.getLength().toString())
    .get(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  let responseJson;
  try {
    responseJson = JSON.parse(responseTxt);
  } catch(e) {
    engine.log("failed to parse as json");
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw `Failed to get upload URL. status: ${status}`;
  }
  if (responseJson.ok !== true) {
    const filename = file.getName();
    const error = `Failed to get upload URL\n filename: ${filename} error: ${responseJson.error}`;
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw error;
  }
  return {uploadUrl: responseJson.upload_url, fileId: responseJson.file_id};
}

/**
  * Upload File
  * @param {String} uploadUrl
  * @param {QfileView} file
  */  
function upload(uploadUrl, file){
  const response = httpClient.begin()
    .multipart('file', file)
    .post(uploadUrl);
  const status = response.getStatusCode();
  if (status !== 200) {
    engine.log(response.getResponseAsString());
    throw `Failed to upload. status: ${status} filename: ${file.getName()}`;
  }
}

/**
  * Complete File Uploads
  * @param {AuthSettingWrapper} oauth2  OAuth2 認証設定
  * @param {Array<String>} fileIds
  * @param {String} channelId
  */
function completeUpload(oauth2, fileIds, channelId){
  const url = 'https://slack.com/api/files.completeUploadExternal';
  const payload = {
    channel_id: channelId,
    files: fileIds.map(fileId => ({id: fileId}))
  };
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(payload), 'application/json')
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  let responseJson;
  try {
    responseJson = JSON.parse(responseTxt);
  } catch(e) {
    engine.log("failed to parse as json");
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw `Failed to complete upload. status: ${status}`;
  }
  if (responseJson.ok !== true) {
    const error = `Failed to complete upload\n error: ${responseJson.error}`;
    engine.log(`status: ${status}`);
    engine.log(responseTxt);
    throw error;
  }

}
]]></script>
<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABFBJREFUWEfN
l39ME2cYx79vofwSEljXirCwLWOSYJRotjgnJDPZWNKjg4BYpDgnCCuYKCxmxLUu7pcJZupitmqY
XTfFLRnaqeXqYibbXExIdNQ/tj+WLMvCEjPoGGABxULf5b3Sy7W9a0+zhd0f/aP3Ps/zeZ/fR7DE
D1Fr31RgygrNh2pBsYmCrAXoYwDyFuUnAPI7AfWB4FtNqsbtueWZVaM7KYBRb8wnIN0UsALIUKMU
wF0CnKCgPV6/989EMgkBjIYqKyh9H8AylYZjj82AkL3esYETSvKKANzDnIMStD+g4SgxQnGc/4vv
kNMlC2A0cJ+DYuu/YVzUQfCFd4xvjNUZB6Dm5kUlRRj5ZUTUlZOXA41Gg6nxqYTMcp6IAliM+XEl
LcyQa9iFzGUZmJ6cxrbVL6PhNTO2dG4BIQS8i4ejW1E8rJaQdmlOiAAs2wHya6KEaznQjNqOWpHv
1MFTgvGMrHBxzAfnUV1YkyxyMwAtjlSHCMDpuaMU6EwkXVZRhoPn3hOPeD+7hBctlUhJTRH/4wxV
yQBAgA94P98lOIT9sCazEAyNq6lzBtHR0460jDSc+9CNtndb7xuA9YkUrUbHmpUAwBm4JkpxOha9
4PEVaHmrBfmP5ke9unc3CM9JDwb7B3Hx1oU4gFXrS9HU3YShr4dwofeirEcIwTZ+jO8LA+g5JwWa
Y0/2/XQaeYZIt43Xs+eFThy5dDgKwLyyAWd+7kOqNlUQ6GnrwdXzP8QJE+AT3s+3CABGfdUwQNfG
nhoY9QjZrfSwJDR3mZGemS4cCd4Lwv2RW/gv8jAvHd51REYF8Xn9A+sWAbi/JYNFPGz71IZnjRtk
7c/dmYOl1ILttu0w7TQJZxyvO6B/RI/63fViVbRteBWjI6NyOia8fv6hCABVumVxWTHWbFyNhfkF
TI3fDt90LohrA9dEEZYrLFSjf4xBl6/DqmdKMTt9B5fPXEZoIaToQa+fD/vXqOdkAXbsfwV1u+pA
NERwr/nJBnw81AvdCp1wq53rW4XbN7+5Q4y51NqkfxLW8nYEJgKyEFIA2RBIM1wuvr32XjTubUR2
brbiLRN0R2kI5JPw7G/9yMzOFJT7vvdh5vYsyk0bRWOsEZWVr0HhE4WKAM4DTrgdXyVOQqUyfPr5
p9D6TisCkwHYN9vReawrDsD1tgs21xsoWVcSZYTlzPB3PhyyHgINxUc4qgyVGlEs9j7nvjiAXH0u
snKy8OOVGwo3lXdOVCNS24rlAKSz4ObVm7BttiuGQ/IiuhWzF2qG0Z6ju1FpqRT19B/rR421Bto0
rfAfc/tLBdVJAeKGUbgUk4/j5UXL4bx+UuiOLK6NpRZhMFVUV4iJaq/fnwxAfhwLEOElNOFGwUpu
U91zuPLlIGYD4c2bTci0dC2uf3MjmXHlhSQiqWYlS25FIfFkltP/31L6X3jivtfyCMSSfpiIEEv5
aSZNpSX7OH3QjFcr9w829dcwn81r2gAAAABJRU5ErkJggg==</icon>


<test><![CDATA[
/**
 * 設定の準備
 * @param configs
 * @param ChannelName
 * @param File
 */
const prepareConfigs = (configs, channelName, file) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Slack',
        'https://slack.com/oauth/v2/authorize',
        'https://slack.com/api/oauth.v2.access',
        'files:write',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );

    configs.putObject('conf_OAuth2', auth);
    configs.put('ChannelName', channelName);

    const fileDef = engine.createDataDefinition('ファイル', 1, 'q_files', 'FILE');
    configs.putObject('File', fileDef);
    engine.setData(fileDef, file);
};



/**
 * 指定サイズのテキストファイルを作成
 * @param name
 * @param size
 */
const createQfile = (name, size) => {
    let text = '';
    while (text.length < size) {
        if (text.length !== 0 && text.length * 2 < size) {
            text += text;
        } else {
            text += 'a';
        }
    }
    return engine.createQfile(name, 'text/plain; charset=US-ASCII', text);
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
    }
    if (!failed) {
        fail();
    }
};

/**
 * ファイルが添付されていない場合（正常終了）
 */
test('No File to upload', () => {
    prepareConfigs(configs, 'channel1', null);

    main();
});



/**
 * ファイル数が HTTP リクエスト数制限を超えてエラーになる場合
 */
test('Number of Files is over the limit.', () => {
    const files = new java.util.ArrayList();
    for (let i = 0; i < httpClient.getRequestingLimit() + 1; i++) {
        files.add(createQfile(`ファイル${i}.txt`, 1 ));
    }
    prepareConfigs(configs, 'channel1', files);

    assertError(main, 'Number of Files is over the limit.');
});



/**
 * POSTリクエストのテスト（ファイルアップロード）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param email
 */
const assertPostRequest = ({url, method, contentType, body}, channels, filename, filesize) => {
    expect(url).toEqual(`https://slack.com/api/files.upload`);
    expect(method).toEqual('POST');
    expect(body.size()).toEqual(2);

    const channel = body.get('channels').get(0);
    const file = body.get('file').get(0);
    expect(channel).toEqual(channels);
    expect(file.getName()).toEqual(filename);
    expect(file.getContentType()).startsWith('text/plain');
    expect(file.getLength()).toEqual(filesize);
};



/**
 * POST API リクエストでエラーになる場合
 */
test('POST Failed', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile(`file2.txt`, 1));
    prepareConfigs(configs, 'channel2', files);

    httpClient.setRequestHandler((request) => {
      assertPostRequest(request, 'channel2', "file2.txt", 1 );
      return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError(main, 'Failed to upload\n filename: file2.txt');
});



/**
 * アップロード成功の場合
 * 1 ファイル　 2 つのチャンネル
 */
test('Success - 1 file　2 channels', () => {
    const files = new java.util.ArrayList();
    files.add(createQfile(`file3.txt`, 1));
    prepareConfigs(configs, 'channel3, channel4', files);

    httpClient.setRequestHandler((request) => {    
      filename = [];
      filename.push("file3.txt");
      assertPostRequest(request,  'channel3, channel4', `file3.txt`, 1 );
      const responseObj = {
        "ok" : true
      }
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();
});



/**
 * アップロード成功の場合
 * ファイル数が HTTP リクエスト数制限と同じ
 */
test('Success - fileRequestingLimit', () => {
    const files = new java.util.ArrayList();
    for (let i = 0; i < httpClient.getRequestingLimit(); i++) {
        files.add(createQfile(`file${i}.txt`, 1));
    }
    prepareConfigs(configs, 'channel4', files);

    let requestCount = 0;
    httpClient.setRequestHandler((request) => {
      assertPostRequest(request, 'channel4', `file${requestCount}.txt` ,1 );
      const responseObj = {
        "ok" : true
      }
      requestCount++
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    // <script> のスクリプトを実行
    main();

    // リクエスト数をチェック
    expect(requestCount).toEqual(httpClient.getRequestingLimit());
});



/**
 * アップロード失敗の場合
 * いずれかのチャンネル が存在ない
 */
test('Failed - One of the channels does not exist', () => {
    const file = new java.util.ArrayList();
    file.add(createQfile(`file9.txt`, 1));
    prepareConfigs(configs, 'channel9, channel10', file);

    httpClient.setRequestHandler((request) => {
      assertPostRequest(request, 'channel9, channel10', "file9.txt", 1 );
      const responseObj = {
        "ok": false,
        "error": "channel_not_found"
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    assertError(main, 'Failed to upload\n filename: file9.txt error: channel_not_found');
});



/**
 * アップロード失敗の場合
 * いずれかのチャンネルに join していない
 */
test('Failed - Not joined to any channel', () => {
    const file = new java.util.ArrayList();
    file.add(createQfile(`file10.txt`, 1));
    prepareConfigs(configs, 'channel9, channel11', file);

    httpClient.setRequestHandler((request) => {
      assertPostRequest(request, 'channel9, channel11', "file10.txt", 1 );
      const responseObj = {
        "ok": false,
        "error": "not_in_channel"
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    assertError(main, 'Failed to upload\n filename: file10.txt error: not_in_channel');
});



/**
 * アップロード失敗の場合
 * 空ファイル
 */
test('Failed - no data file', () => {
    const file = new java.util.ArrayList();
    file.add(createQfile(`kara.txt`, 0));
    prepareConfigs(configs, 'channel12', file);

    httpClient.setRequestHandler((request) => {
      assertPostRequest(request, 'channel12', "kara.txt", 0  );
      const responseObj = {
        "ok": false,
        "error": "no_file_data"
      };
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseObj));
    });

    assertError(main, 'Failed to upload\n filename: kara.txt error: no_file_data');
});
]]></test>    
</service-task-definition>
