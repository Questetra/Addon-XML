<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Append New Rows (Table type data)</label>
<label locale="ja">Google スプレッドシート: 行追加 (テーブル型データ)</label>
<summary>Appends values of table data item after the last row in a sheet. Inserts new rows if necessary.</summary>
<summary locale="ja">シート末尾にテーブル型データの値を入力します。必要あれば行領域を拡大します。</summary>
<last-modified>2022-01-13</last-modified>
<help-page-url>https://support.questetra.com/bpmn-icons/googlesheets-appendtable/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/googlesheets-appendtable/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2"
          oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Config</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_DataIdW" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdX" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_DataIdT" required="true" form-type="SELECT" select-data-type="LIST">
    <label>C4: Table type data item</label>
    <label locale="ja">C4: テーブル型データ項目</label>
  </config>
  <config name="conf_DataIdA" required="false" form-type="TEXTFIELD">
    <label>C-A: Field Name of Sub Data Item for Column-A</label>
    <label locale="ja">C-A: A 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdB" required="false" form-type="TEXTFIELD">
    <label>C-B: Field Name of Sub Data Item for Column-B</label>
    <label locale="ja">C-B: B 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdC" required="false" form-type="TEXTFIELD">
    <label>C-C: Field Name of Sub Data Item for Column-C</label>
    <label locale="ja">C-C: C 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdD" required="false" form-type="TEXTFIELD">
    <label>C-D: Field Name of Sub Data Item for Column-D</label>
    <label locale="ja">C-D: D 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="TEXTFIELD">
    <label>C-E: Field Name of Sub Data Item for Column-E</label>
    <label locale="ja">C-E: E 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdF" required="false" form-type="TEXTFIELD">
    <label>C-F: Field Name of Sub Data Item for Column-F</label>
    <label locale="ja">C-F: F 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdG" required="false" form-type="TEXTFIELD">
    <label>C-G: Field Name of Sub Data Item for Column-G</label>
    <label locale="ja">C-G: G 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdH" required="false" form-type="TEXTFIELD">
    <label>C-H: Field Name of Sub Data Item for Column-H</label>
    <label locale="ja">C-H: H 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdI" required="false" form-type="TEXTFIELD">
    <label>C-I: Field Name of Sub Data Item for Column-I</label>
    <label locale="ja">C-I: I 列に追加するサブデータ項目のフィールド名</label>
  </config>
  <config name="conf_DataIdJ" required="false" form-type="TEXTFIELD">
    <label>C-J: Field Name of Sub Data Item for Column-J</label>
    <label locale="ja">C-J: J 列に追加するサブデータ項目のフィールド名</label>
  </config>
</configs>

<script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

main();

function main() {
    const tableDataDef = configs.getObject("conf_DataIdT");
    const oauth2 = configs.get( "conf_OAuth2" );
    const spreadsheetId = retrieveStringData("conf_DataIdW", "Target Spreadsheet ID");
    const sheetName = retrieveStringData("conf_DataIdX", "Target Sheet Title");
    const fieldNames = getFieldNames();

    // 追加するデータを準備
    const rows = makeRows(tableDataDef, fieldNames);

    // シート名からシート ID の取得
    const sheetId = getSheetId(oauth2, spreadsheetId, sheetName);

    // データの追加
    appendData(oauth2, sheetId, spreadsheetId, rows);
}

/**
 * 文字列データを config から読み出す。空であればエラー。
 * @param  {String} confName config 名
 * @param  {String} label エラーメッセージ用のラベル
 * @return {String} string 文字列データ
 */
function retrieveStringData( confName, label ){
    let string = configs.get( confName );
    const dataDef = configs.getObject( confName );
    if (dataDef !== null) {
        string = engine.findData(dataDef);
    }
    if (string === null || string === "") {
        throw `${label} is empty.`;
    }
    return string;
}

/**
 * スプレッドシートの各列に追加するサブデータ項目のフィールド名一覧を取得
 * @return {*[]}
 */
function getFieldNames() {
    const CONF_FIELD_NAMES = [
        'conf_DataIdA',
        'conf_DataIdB',
        'conf_DataIdC',
        'conf_DataIdD',
        'conf_DataIdE',
        'conf_DataIdF',
        'conf_DataIdG',
        'conf_DataIdH',
        'conf_DataIdI',
        'conf_DataIdJ',
    ];

    const fieldNames = CONF_FIELD_NAMES.map(conf => configs.get(conf));

    if (fieldNames.every(fieldName => fieldName === null || fieldName === '')) {
        // 全項目、設定値が空なら、エラー
        throw "No Data to add is selected.";
    }
    return fieldNames;
}

/**
 * シート名からシート ID の取得
 * @param {String} oauth2
 * @param {String} spreadsheetId
 * @param {String} sheetName
 * @return {Number}
 */
function getSheetId(oauth2, spreadsheetId, sheetName) {
    const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadsheetId)}?includeGridData=false`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .get(uri);
    const status = response.getStatusCode();
    const responseJson = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseJson);
        throw `Can't get sheet information. status: ${status}`;
    }
    const jsonObj = JSON.parse(responseJson);
    engine.log(`SPREADSHEET (TITLE: ${jsonObj.properties.title}) has ${jsonObj.sheets.length} sheets`);
    for (let i = 0; i < jsonObj.sheets.length; i++) {
        if (jsonObj.sheets[i].properties.title === sheetName) {
            const sheetId = parseInt(jsonObj.sheets[i].properties.sheetId, 10);
            engine.log(`SHEET TITLE: ${sheetName} exists (id: ${sheetId})`);
            return sheetId;
        }
    }
    // error (not exist)
    throw `Sheet ${sheetName} does not exist`;
}

/**
 * 追加用の行データを作成
 * @param {ProcessDataDefinitionView} tableDataDef
 * @param {Array<String>} fieldNames
 * @return {Array<Object>}
 */
function makeRows(tableDataDef, fieldNames) {
    // テーブル型データおよびサブデータ項目の定義を取得
    const tableData = engine.findData(tableDataDef);
    if (tableData === null) {
        throw "the table data is empty.";
    }
    const subDataDefs = tableDataDef.getSubDataDefinitions();

    // subDataDef のマップを作成。キーはフィールド名。
    const subDataDefMap = makeSubDataDefMap(subDataDefs);

    //行データの作成
    const rowCount = tableData.size();
    const rows = new Array(rowCount);
    for (let i = 0; i < rowCount; i++) {
        const values = makeRowValues(i, tableData, subDataDefMap, fieldNames);
        rows[i] = {values};
    }

    return rows;
}

/**
 * SubDataDefinitionView の Map を作成
 * @param {Array<SubDataDefinitionView>} subDataDefs
 * @return {Map<string, SubDataDefinitionView>}
 */
function makeSubDataDefMap(subDataDefs) {
    const subDataDefMap = new Map();
    for (let i = 0; i < subDataDefs.length; i++) {
        const def = subDataDefs[i];
        const varName = def.getVarName();
        if (varName !== null) {
            subDataDefMap.set(varName, def);
        }
    }
    return subDataDefMap;
}

/**
 * AppendData 用、各行の値を作成する
 * @param rowNumber
 * @param {ScriptListArray} tableData
 * @param {Map<String, SubDataDefinitionView>>} subDataDefMap
 * @param {Array<String>} fieldName
 * @return {Array<Object>}
 */
function makeRowValues(rowNumber, tableData, subDataDefMap, fieldNames) {
    const values = new Array(fieldNames.length);
    let flag = true;
    // 後ろの列から前の列へ
    for (let j = fieldNames.length - 1; j >= 0; j--) {
        const fieldName = fieldNames[j];
        const cellValue = getCellValue(rowNumber, tableData, subDataDefMap, fieldName);
        if (flag && cellValue === '') {
            // 後ろの列は、空である限り null を指定
            values[j] = null;
        } else {
            // 基本、stringValue
            let valueType = 'stringValue';
            if (cellValue !== '') {
                if (subDataDefMap.get(fieldName).matchDataType('DECIMAL')) {
                    //空ではなく、数値型データの場合のみ、numberValue
                    valueType = 'numberValue';
                }
            }
            values[j] = {
                "userEnteredValue": {
                    [valueType]: cellValue
                }
            };
            flag = false;
        }
    }
    if (flag) {
        throw "There is an empty row in data to append.";
    }
    return values;
}

/**
 * セルの値の取得
 * @param {Number} rowNumber
 * @param {ScriptListArray} tableData
 * @param {Map<String, SubDataDefinitionView>} subDataDefMap
 * @param {String} fieldName
 * @return {String}
 */
function getCellValue(rowNumber, tableData, subDataDefMap, fieldName) {
    if (fieldName === "" || fieldName === null) {
        // サブデータ項目の指定が無い場合
        return '';
    }
    if (!subDataDefMap.has(fieldName)) {
        //when selected column doesn't exist
        throw `Field Name ${fieldName} does not exist`;
    }
    const cellValue = tableData.get(rowNumber, fieldName);
    if (cellValue.length > 50000) {
        //when the number of letters in text is over 50000
        throw "Can't set text over 50,000 character.";
    }
    return cellValue;
}

/**
 * データを Google Sheets に送信する
 * @param {String} oauth2
 * @param {String} sheetId
 * @param {String} spreadsheetId
 * @param {Array<Object>} rows
 */
function appendData(oauth2, sheetId, spreadsheetId, rows) {
    const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadsheetId)}:batchUpdate`;
    const obj = {
        requests: [{
            appendCells: {
                rows,
                sheetId,
                fields: "*"
            }
        }]
    };
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(obj), "application/json")
        .post(uri);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw `Failed to append data. status: ${status}`;
    }
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[

const COLUMNS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];

/**
 * 設定の準備
 * スプレッドシートの ID とシートのタイトルはデータ項目で指定
 * サブデータ項目はすべて文字型
 * @param spreadSheetId
 * @param sheetTitle
 * @return {tableDef, expectedRows}
 */
const prepareConfigs = (spreadSheetId, sheetTitle) => {
    configs.put('conf_OAuth2', 'Google');

    // スプレッドシートの ID を設定した文字型データ項目（単一行）を準備
    const spreadSheetIdDef = engine.createDataDefinition('スプレッドシートの ID', 1, 'q_SpreadSheetId', 'STRING_TEXTFIELD');
    engine.setData(spreadSheetIdDef, spreadSheetId);
    configs.putObject('conf_DataIdW', spreadSheetIdDef);

    // シートのタイトルを設定した文字型データ項目（単一行）を準備
    const sheetTitleDef = engine.createDataDefinition('シートのタイトル', 2, 'q_SheetTitle', 'STRING_TEXTFIELD');
    engine.setData(sheetTitleDef, sheetTitle);
    configs.putObject('conf_DataIdX', sheetTitleDef);

    // テーブル型データ項目を準備
    const tableDef = engine.createDataDefinition('テーブル', 3, 'q_Table', 'LIST');

    // 文字型のサブデータ項目を設定可能な列数ぶん準備し、config にフィールド名をセット
    COLUMNS.forEach(col => {
        tableDef.addSubDataDefinition(`${col}列のサブデータ`, `q_SubData${col}`, 'STRING');
        configs.put(`conf_DataId${col}`, `q_SubData${col}`);
    });

    // テーブルにデータを2行追加
    const table = tableDef.createListArray();
    for (let i = 0; i < 2; i++) {
        const row = table.addRow();
        COLUMNS.forEach((col, j) => {
            row.put(`q_SubData${col}`, `${i+1}行${j+1}列の文字列`);
        });
    }
    engine.setData(tableDef, table);
    configs.putObject('conf_DataIdT', tableDef);

    // POST リクエストボディ確認用の行データを準備
    const expectedRows = [];
    for (let i = 0; i < 2; i++) {
        expectedRows[i] = [];
        for (let j = 0; j < COLUMNS.length; j++) {
            expectedRows[i][j] = {
                type: 'stringValue',
                value: `${i+1}行${j+1}列の文字列`
            };
        }
    }

    return {tableDef, expectedRows};
};

/**
 * スプレッドシートの ID をデータ項目で指定し、値が空でエラーになる場合
 */
test('Target Spreadsheet ID is empty', () => {
    prepareConfigs(null, 'シート1');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Target Spreadsheet ID is empty.');
    }
});

/**
 * シートのタイトルをデータ項目で指定し、値が空でエラーになる場合
 */
test('Target Sheet Title is empty', () => {
    prepareConfigs('abc123', null);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Target Sheet Title is empty.');
    }
});

/**
 * フィールド名の設定がひとつもなく、エラーになる場合
 */
test('No field names', () => {
    prepareConfigs('abc123', 'シート1');
    COLUMNS.forEach(col => configs.put(`conf_DataId${col}`, '')); // 空文字列で上書き

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('No Data to add is selected.');
    }
});

/**
 * テーブルにデータが一行もなくエラーになる場合
 */
test('Table is empty', () => {
    const {tableDef} = prepareConfigs('abc123', 'シート1');
    engine.setData(tableDef, null); // null で上書き

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('the table data is empty.');
    }
});

/**
 * テーブルデータに空行が含まれていて、エラーになる場合
 */
test('Table has an empty row', () => {
    const {tableDef} = prepareConfigs('abc123', 'シート1');
    const table = engine.findData(tableDef);
    table.addRow(); // 空行を追加
    engine.setData(tableDef, table);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith("There is an empty row in data to append.");
    }
});

/**
 * 存在しないフィールド名が設定されていて、エラーになる場合
 */
test('Field name does not exist', () => {
    prepareConfigs('abc123', 'シート1');
    configs.put('conf_DataIdB', '存在しないフィールド名'); // B 列を存在しないフィールド名で上書き

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Field Name 存在しないフィールド名 does not exist');
    }
});

/**
 * サブデータ項目に 50,000 文字を超える文字列が設定されていて、エラーになる場合
 */
test('Over 50,000 characters', () => {
    const {tableDef} = prepareConfigs('abc123', 'シート1');
    const table = engine.findData(tableDef);
    const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV'
        .repeat(500) + 'A';
    table.getRow(0).setCol(2, string); // 1行3列目を上書き
    engine.setData(tableDef, table);

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith("Can't set text over 50,000 character.");
    }
});

const SAMPLE_GET = {
    "spreadsheetId": "abc123",
    "properties": {
        "title": "テスト用スプレッドシート"
    },
    "sheets": [
        {
        "properties": {
            "sheetId": 0,
            "title": "シート1",
            "index": 0,
            "sheetType": "GRID",
            "gridProperties": {
            "rowCount": 1000,
            "columnCount": 26
            }
        }
        },
        {
        "properties": {
            "sheetId": 1,
            "title": "シート 2/2",
            "index": 1,
            "sheetType": "GRID",
            "gridProperties": {
            "rowCount": 1000,
            "columnCount": 26
            }
        }
        }
    ],
    "spreadsheetUrl": "https://docs.google.com/spreadsheets/d/abc123/edit?ouid=102859041491136123607"
};

/**
 * GET リクエストのテスト（Google スプレッドシートのシート ID を取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param spreadSheetId
 */
const assertGetRequest = ({url, method}, spreadSheetId) => {
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
        spreadSheetId
        )}?includeGridData=false`);
    expect(method).toEqual('GET');
};

const SAMPLE_POST = {
    "spreadsheetId": "abc123",
    "replies": [
        {}
    ]
};

/**
 * POST リクエストのテスト (Google スプレッドシートの行を追加)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetId
 * @param expectedRows
 */
const assertPostRequest = ({url, method, contentType, body}, spreadSheetId, sheetId, expectedRows) => {
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
        spreadSheetId
        )}:batchUpdate`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.requests[0].appendCells.sheetId).toEqual(sheetId);
    expect(bodyObj.requests[0].appendCells.fields).toEqual('*');
    assertRows(expectedRows, bodyObj.requests[0].appendCells.rows);
};

/**
 * リクエストボディの行データのテスト
 * @param expectedRows
 * @param actualRows
 */
const assertRows = (expectedRows, actualRows) => {
    expectedRows.forEach((cells, i) => {
        cells.forEach(({type, value}, j) => {
            if (value === null) {
                expect(actualRows[i].values[j]).toEqual(null);
            } else {
                expect(actualRows[i].values[j].userEnteredValue[type]).toEqual(value);
            }
        });
    });
};

/**
 * 行追加成功の場合 - 先頭にあるシート
 */
test('Success - 1st sheet', () => {
    const {expectedRows} = prepareConfigs('abc123', 'シート1');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // シート ID 取得のリクエスト
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        // 行追加のリクエスト
        assertPostRequest(request, 'abc123', 0, expectedRows);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST));
    });

    // <script> のスクリプトを実行
    execute();
});

/**
 * 行追加成功の場合 - 2番目にあるシート
 */
test('Success - 2nd sheet', () => {
    const {expectedRows} = prepareConfigs('abc123', 'シート 2/2');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // シート ID 取得のリクエスト
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        // 行追加のリクエスト
        assertPostRequest(request, 'abc123', 1, expectedRows);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST));
    });

    // <script> のスクリプトを実行
    execute();
});

/**
 * シート ID 取得の GET リクエストで失敗
 */
test('Fail in GET Request', () => {
    prepareConfigs('abc123', 'シート1');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'abc123');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith("Can't get sheet information. status: 400");
    }
});

/**
 * 存在しないシートタイトルを指定
 */
test('Sheet does not exist', () => {
    prepareConfigs('abc123', '存在しないシート');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'abc123');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET))
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Sheet 存在しないシート does not exist');
    }
});

/**
 * 行追加の POST リクエストで失敗
 */
test('Fail in POST Request', () => {
    const {expectedRows} = prepareConfigs('abc123', 'シート1');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // シート ID 取得のリクエスト
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        // シート追加のリクエスト
        assertPostRequest(request, 'abc123', 0, expectedRows);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to append data. status: 400');
    }
});

/**
 * 設定の準備
 * スプレッドシートの ID とシートのタイトルは直接指定
 * サブデータ項目に文字型、数値型、選択型、日時型を含む
 * @param spreadSheetId
 * @param sheetTitle
 * @return {tableDef, expectedRows}
 */
const prepareConfigsWithVariousDataTypes = (spreadSheetId, sheetTitle) => {
    configs.put('conf_OAuth2', 'Google');
    configs.put('conf_DataIdW', spreadSheetId);
    configs.put('conf_DataIdX', sheetTitle);

    // テーブル型データ項目を準備
    const tableDef = engine.createDataDefinition('テーブル', 1, 'q_Table', 'LIST');

    // サブデータ項目を準備し、config にフィールド名をセット
    tableDef.addSubDataDefinition('A列のサブデータ', 'q_SubDataA', 'STRING');
    tableDef.addSubDataDefinition('B列のサブデータ', 'q_SubDataB', 'STRING');
    tableDef.addSubDataDefinition('C列のサブデータ', 'q_SubDataC', 'DECIMAL');
    tableDef.addSubDataDefinition('D列のサブデータ', 'q_SubDataD', 'DECIMAL');
    // E列は設定しない
    tableDef.addSubDataDefinition('F列のサブデータ', 'q_SubDataF', 'SELECT');
    tableDef.addSubDataDefinition('G列のサブデータ', 'q_SubDataG', 'SELECT');
    tableDef.addSubDataDefinition('H列のサブデータ', 'q_SubDataH', 'DATE');
    tableDef.addSubDataDefinition('I列のサブデータ', 'q_SubDataI', 'DATE');
    // J列は設定しない

    // config にフィールド名をセット（E列, J列は設定しない）
    COLUMNS.forEach(col => {
        if (col === 'E' || col === 'J') {
            return;
        }
        configs.put(`conf_DataId${col}`, `q_SubData${col}`);
    });

    // テーブルにデータを2行追加
    const table = tableDef.createListArray();
    const values = [
        {A:'文字列1', B:'', C:'111', D:'', F:'選択肢1', G:'', H:'2021-01-01', I:''},
        {A:'', B:'文字列2', C:'', D:'222', F:'', G:'選択肢2', H:'', I:'2022-02-02'}
    ];
    for (let i = 0; i < 2; i++) {
        const row = table.addRow();
        COLUMNS.forEach((col, j) => {
            if (col === 'E' || col === 'J') {
                return;
            }
            row.put(`q_SubData${col}`, values[i][col]);
        });
    }
    engine.setData(tableDef, table);
    configs.putObject('conf_DataIdT', tableDef);

    // POST リクエストボディ確認用の行データを準備
    const expectedRows = [];
    const expectedValues = [
        ['文字列1', '', '111', '', '', '選択肢1', '', '2021-01-01', null, null],
        ['', '文字列2', '', '222', '', '', '選択肢2', '', '2022-02-02', null]
    ];
    for (let i = 0; i < 2; i++) {
        expectedRows[i] = [];
        COLUMNS.forEach((col, j) => {
            const value = expectedValues[i][j];
            let type = 'stringValue';
            if ((i === 0 && col === 'C') || (i === 1 && col === 'D')) {
                type = 'numberValue';
            }
            expectedRows[i][j] = {
                type,
                value
            };
        });
    }

    return {tableDef, expectedRows};
};

/**
 * 行追加成功の場合 - 様々なデータ型
 * スプレッドシートの ID とシートのタイトルは固定値で指定
 */
test('Success - Various data types', () => {
    const {expectedRows} = prepareConfigsWithVariousDataTypes('abc123', 'シート1');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) { // シート ID 取得のリクエスト
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        // 行追加のリクエスト
        assertPostRequest(request, 'abc123', 0, expectedRows);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST));
    });

    // <script> のスクリプトを実行
    execute();
});

]]></test>

</service-task-definition>
