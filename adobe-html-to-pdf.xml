<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <last-modified>2023-07-25</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Adobe: Generate PDF (HTML to PDF)</label>
    <label locale="ja">Adobe: PDF 生成（HTML to PDF）</label>
    <summary>This item generates a PDF file from an HTML file, using Adobe PDF Services.</summary>
    <summary locale="ja">この工程は、Adobe PDF Services を利用して、HTML ファイルから PDF ファイルを生成します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-adobe-html-to-pdf/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-adobe-html-to-pdf/</help-page-url>
    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="OAUTH2_CLIENT_CREDENTIALS"
                    oauth2-setting-name="https://ims-na1.adobelogin.com/openid,AdobeID,DCAPI"
        >
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_HtmlDef" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C2: Data item that stores the source HTML file</label>
            <label locale="ja">C2: 変換元の HTML ファイルが保存されているデータ項目</label>
        </config>
        <config name="conf_Size" required="true" form-type="SELECT_ITEM">
            <label>C3: PDF Page Size</label>
            <label locale="ja">C3: PDF ページサイズ</label>
            <item value="A4-P">
                <label>A4 Portrait</label>
                <label locale="ja">A4 縦</label>
            </item>
            <item value="A4-L">
                <label>A4 Landscape</label>
                <label locale="ja">A4 横</label>
            </item>
        </config>
        <config name="conf_PdfDef" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C4: Data item to save the generated PDF file</label>
            <label locale="ja">C4: 生成された PDF ファイルを保存するデータ項目</label>
        </config>
        <config name="conf_DeleteOtherFiles" form-type="TOGGLE">
            <label>C5: Delete other files when saving</label>
            <label locale="ja">C5: 保存時に他のファイルを削除する</label>
        </config>
        <config name="conf_SaveAs" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C6: File name to save as</label>
            <label locale="ja">C6: 保存する際のファイル名</label>
        </config>
    </configs>

    <script><![CDATA[

/** PDF のレイアウトの候補 (サイズはインチで指定) */
const LAYOUTS = {
    'A4-P': {
        pageWidth: 8.27,
        pageHeight: 11.69
    },
    'A4-L': {
        pageWidth: 11.69,
        pageHeight: 8.27
    }
};

/**
 * tokenUrl: https://ims-na1.adobelogin.com/ims/token/v3
 * scope: openid, AdobeID, DCAPI
 * @returns {boolean}
 */
const main = () => {
    const authSetting = configs.getObject('conf_Auth');
    const htmlFile = retrieveHtmlFile();
    const pageSize = configs.get('conf_Size');
    validateFileName();

    const {uploadUri, assetID} = createAsset(authSetting);
    uploadHtml(uploadUri, htmlFile);
    const statusUrl = htmlToPdf(authSetting, assetID, pageSize);
    engine.saveTemporaryData(statusUrl);

    return proceed();
};

const proceed = () => {
    const authSetting = configs.getObject('conf_Auth');
    const pdfDef = configs.getObject('conf_PdfDef');
    const deleteOtherFiles = configs.getObject('conf_DeleteOtherFiles');
    const fileName = configs.get('conf_SaveAs');
    const statusUrl = engine.restoreTemporaryData();

    const {status, asset: {downloadUri} = {}} = checkStatus(authSetting, statusUrl);
    if (status !== 'done') {
        return false;
    }
    const qfile = downloadPdf(downloadUri, fileName);
    saveFile(pdfDef, deleteOtherFiles, qfile);
};

/**
 * config から変換元の HTML ファイルを読み出す
 * @returns {QfileView}
 */
const retrieveHtmlFile = () => {
    const htmlDef = configs.getObject('conf_HtmlDef');
    const files = engine.findData(htmlDef);
    if (files === null) {
        throw 'No source file attached.'
    }
    if (files.size() > 1) {
        throw 'More than one source files attached.';
    }
    const sourceFile = files.get(0);
    if (sourceFile.getLength() === 0) {
        throw 'Source file is empty.';
    }
    if (!sourceFile.getContentType().startsWith('text/html')) {
        throw 'Content-Type of the source file is not text/html.';
    }
    return sourceFile;
};

/**
 * config に設定された保存する際のファイル名をバリデーション
 * 空の場合はエラー
 */
const validateFileName = () => {
    const fileName = configs.get('conf_SaveAs');
    if (fileName === '') {
        throw 'File name to save as is blank.';
    }
};

/**
 * asset の作成
 * @param authSetting
 * @returns {any}
 */
const createAsset = (authSetting) => {
    const body = JSON.stringify({
        mediaType: 'text/html'
    });
    const response = httpClient.begin().authSetting(authSetting)
        .header('x-api-key', authSetting.getClientId())
        .body(body, 'application/json')
        .post('https://pdf-services-ue1.adobe.io/assets');
    const status = response.getStatusCode();
    const respStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(respStr);
        throw new Error(`Failed to create asset. status:${status}`);
    }
    return JSON.parse(respStr);
};

/**
 * HTML ファイルのアップロード
 * @param url
 * @param htmlFile
 */
const uploadHtml = (url, htmlFile) => {
    const response = httpClient.begin().body(htmlFile).put(url);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw new Error(`Failed to upload HTML. status:${status}`);
    }
};

/**
 * HTML から PDF を生成
 * @param authSetting
 * @param assetID
 * @param pageSize
 */
const htmlToPdf = (authSetting, assetID, pageSize) => {
    const body = JSON.stringify({
        assetID,
        json: '{}',
        includeHeaderFooter: false,
        pageLayout: LAYOUTS[pageSize]
    });
    const response = httpClient.begin().authSetting(authSetting)
        .header('x-api-key', authSetting.getClientId())
        .body(body, 'application/json')
        .post('https://pdf-services-ue1.adobe.io/operation/htmltopdf');
    const status = response.getStatusCode();
    if (status !== 201) {
        engine.log(response.getResponseAsString());
        throw new Error(`Failed to convert HTML to PDF. status:${status}`);
    }
    return response.getHeaderValues('Location').get(0);
};

/**
 * 変換ステータスの確認
 * @param authSetting
 * @param statusUrl
 * @returns {any}
 */
const checkStatus = (authSetting, statusUrl) => {
    const response = httpClient.begin().authSetting(authSetting)
        .header('x-api-key', authSetting.getClientId())
        .get(statusUrl);
    const status = response.getStatusCode();
    const respStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(respStr);
        throw new Error(`Failed to get converting status. status:${status}`);
    }
    return JSON.parse(respStr);
};

/**
 * PDF ファイルのダウンロード
 * @param downloadUrl
 * @param fileName
 */
const downloadPdf = (downloadUrl, fileName) => {
    const response = httpClient.begin().get(downloadUrl);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw new Error(`Failed to download PDF. status:${status}`);
    }
    const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
        fileName, 'application/pdf', response.getResponse()
    );
    return qfile;
};

/**
 * ファイルを保存
 * @param dataDef
 * @oaram deleteOtherFiles
 * @param qfile
 */
const saveFile = (dataDef, deleteOtherFiles, qfile) => {
    let files = engine.findData(dataDef);
    if (files === null || deleteOtherFiles) {
        files = new java.util.ArrayList();
    }
    files.add(qfile);
    engine.setData(dataDef, files);
};

    ]]></script>

    <!--
    <icon>
    </icon>
    -->

    <test><![CDATA[
    ]]></test>

</service-task-definition>
