<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>kintone: Search Records</label>
<label locale="ja">kintone: レコード検索</label>
<!--
<last-modified>2021-12-14</last-modified>
-->
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<summary>Search Records in a Kintone App using a query.</summary>
<summary locale="ja">kintone アプリから検索クエリに合致するレコードを取得します。</summary>
<configs>
  <config name="conf_auth" required="true" form-type="OAUTH2">
    <label>C1: Authorization Setting in which API Token is set</label>
    <label locale="ja">C1: API トークンを設定した認証設定</label>
  </config>
  <config name="conf_basic" required="false" form-type="OAUTH2">
    <label>C2: Basic Auth Setting (required if enabled on Kintone)</label>
    <label locale="ja">C2: Basic 認証設定（kintone で設定されている場合のみ）</label>
  </config>
  <config name="conf_domain" required="true" form-type="TEXTFIELD">
    <label>C3: Domain (such as xxxxx.kintone.com or xxxxx.cybozu.com)</label>
    <label locale="ja">C3: ドメイン（xxxxx.kintone.com または xxxxx.cybozu.com）</label>
  </config>
  <config name="conf_guestSpaceId" required="false" form-type="TEXTFIELD">
    <label>C4: Guest Space ID (required if the App is in a Guest Space)</label>
    <label locale="ja">C4: ゲストスペース ID（ゲストスペース内のアプリの場合のみ）</label>
  </config>
  <config name="conf_appId" required="true" form-type="TEXTFIELD">
    <label>C5: App ID</label>
    <label locale="ja">C5: アプリ ID</label>
  </config>
  <config name="conf_query" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6: Search Query</label>
    <label locale="ja">C6: 検索クエリ</label>
  </config>
  <config name="conf_recordIds" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C7: Data item to save Record IDs</label>
    <label locale="ja">C7: レコード ID の一覧を保存するデータ項目</label>
  </config>
  <config name="conf_idField" required="false" form-type="TEXTFIELD">
    <label>C8F: Field Code 1</label>
    <label locale="ja">C8F: フィールドコード_1</label>
  </config>
  <config name="conf_ids" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C8V: Data item to save Values of Field Code 1</label>
    <label locale="ja">C8V: 値_1 の一覧を保存するデータ項目</label>
  </config>
  <config name="conf_labelField" required="false" form-type="TEXTFIELD">
    <label>C9F: Field Code 2</label>
    <label locale="ja">C9F: フィールドコード_2</label>
  </config>
  <config name="conf_labels" required="false" form-type="SELECT" select-data-type="STRING">
    <label>C9V: Data item to save Values of Field Code 2</label>
    <label locale="ja">C9V: 値_2 の一覧を保存するデータ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/bpmn-icons/kintone-choice-download/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/kintone-choice-download/</help-page-url>

<script><![CDATA[

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const auth = configs.get("conf_auth");
  const basic = configs.get("conf_basic");
  const domain = configs.get("conf_domain");
  const guestSpaceId = configs.get("conf_guestSpaceId");
  const appId = configs.get("conf_appId");
  const query = configs.get("conf_query");
  const fieldCodeList = [
    "$id",
    configs.get("conf_idField"),
    configs.get("conf_labelField")
  ];
  const dataDefList = [
    configs.getObject("conf_recordIds"),
    configs.getObject("conf_ids"),
    configs.getObject("conf_labels")
  ];

  //// == ワークフローデータの参照 / Data Retrieving ==
  const apiToken = httpClient.getOAuth2Token( auth );

  //// == 演算 / Calculating ==
  const singleLineFlag = checkFieldCodesAndDataDefs( fieldCodeList, dataDefList );

  const apiUri = determineApiUri( domain, guestSpaceId );
  checkAppId( appId );

  // フィールドの存在とフィールド型をチェック
  const fields = new Set( fieldCodeList );
  fields.delete(null);
  fields.delete("");
  let requestNum = 0; // HTTP リクエスト回数
  if ( fields.size > 1 ) { // $id 以外のフィールドがある場合のみチェック
    checkFields( apiUri, apiToken, basic, appId, fields );
    requestNum++;
  }

  const initialParams = prepareInitialParams( appId, fields, query );
  const records = []; // レコードオブジェクトを格納する配列
  getRecords( apiUri, apiToken, basic, initialParams, records, requestNum, singleLineFlag );

  //// == ワークフローデータへの代入 / Data Updating ==
  saveData( records, fieldCodeList, dataDefList );
}

/**
  * フィールドコードと保存先データ項目をチェックし、以下の場合はエラーとする
  * 1. 保存先データ項目が一つも設定されていない
  * 2. フィールドコードが空なのに、保存先データ項目が設定されている
  * 3. フィールドコードが設定されているのに、保存先データ項目が設定されていない
  * @param {Array<String>} fieldCodeList  フィールドコードの配列（1番目は $id）
  * @param {Array<ProcessDataDefinitionView>} dataDefList  保存先データ項目の配列
  * @return {boolean} singleLineFlag  保存先データ項目のいずれかが単一行であれば true
  */
function checkFieldCodesAndDataDefs( fieldCodeList, dataDefList ) {
  let singleLineFlag = false;

  // 保存先データ項目が一つも設定されていなければエラー
  if ( dataDefList.filter(dataDef => dataDef !== null).length === 0 ) {
    throw "No data item to save the result is set.";
  }

  // レコード ID を保存するデータ項目をチェック
  if ( dataDefList[0] !== null && dataDefList[0].matchDataType("STRING_TEXTFIELD") ) {
    singleLineFlag = true;
  }

  // フィールドコードと、値を保存するデータ項目をチェック
  for (let i = 1; i < fieldCodeList.length; i++) {
    if ( fieldCodeList[i] === "" || fieldCodeList[i] === null ) { // フィールドコードが空
      if ( dataDefList[i] !== null ) { // 保存先データ項目が設定されている
        throw `Field Code ${i} is empty but the data item to save the values is set.`;
      }
    } else { // フィールドコードが空でない
      if ( dataDefList[i] === null ) { // 保存先データ項目が設定されていない
        throw `Data item to save the values of Field Code ${i} is not set.`;
      }
      if ( !singleLineFlag && dataDefList[i].matchDataType("STRING_TEXTFIELD") ) {
        singleLineFlag = true;
      }
    }
  }

  return singleLineFlag;
}

/**
  * kintone REST API のレコード取得の URI を決定する
  * ドメインが空、または kintone のドメインとして不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  * @param {String} guestSpaceId  ゲストスペース ID
  * @return {String} apiUri  API の URI
  */
function determineApiUri( domain, guestSpaceId ) {
  checkDomain( domain );
  let apiUri;
  if ( guestSpaceId === "" || guestSpaceId === null ) {
    apiUri = `https://${domain}/k/v1/`;
  } else {
    if ( !isValidId(guestSpaceId) ) {
      throw "Invalid Guest Space ID.";
    }
    apiUri = `https://${domain}/k/guest/${guestSpaceId}/v1/`;
  }
  return apiUri;
}

/**
  * ドメインが空または不正な文字列であればエラーとする
  * @param {String} domain  ドメイン
  */
function checkDomain( domain ) {
  if ( domain === "" || domain === null ) {
    throw "Domain is empty.";
  }
  const reg = new RegExp( '^[0-9a-zA-Z-]{3,32}.(?:kintone.com|cybozu.com)$' );
  if ( !reg.test(domain) ) {
    throw "Invalid Kintone domain.";
  }
}

/**
  * アプリ ID が空または不正な文字列であればエラーとする
  * @param {String} appId  アプリ ID
  */
function checkAppId( appId ) {
  if ( appId === "" || appId === null ) {
    throw "App ID is empty.";
  }
  if ( !isValidId(appId) ) {
    throw "Invalid App ID.";
  }
}

/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}

/**
  * kintone REST API にフィールド一覧取得の GET リクエストを送信し、
  * 指定したフィールドの存在とフィールド型をチェックする
  *  サポートするフィールド型： レコードID, レコード番号, 文字列（１行）, リンク, 数値, 日付, 時刻, 日時, 計算
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {String} appId  アプリ ID
  * @param {Set<String>} fields  フィールドコードの集合
  */
function checkFields( apiUri, apiToken, basic, appId, fields ) {
  const getFieldsUri = `${apiUri}app/form/fields.json`;
  let request = httpClient.begin()
    .queryParam("app", appId)
    .header( "X-Cybozu-API-Token", apiToken );
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  const response = request.get( getFieldsUri );
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    engine.log(`---GET request--- ${status}\n${responseStr}\n`);
    throw `Failed to get form fields. status: ${status}`;
  }
  const json = JSON.parse(responseStr);

  // フィールドコードの存在とフィールド型をチェック（フィールドコードが'$id'であればチェック不要）
  const supportedFieldTypes = new Set( [ "RECORD_NUMBER", "SINGLE_LINE_TEXT", "LINK", "NUMBER", "DATE", "TIME", "DATETIME", "CALC" ] );
  fields.forEach(fieldCode => {
    if ( fieldCode !== '$id' ) {
      if ( json.properties[fieldCode] === undefined ) {
        throw `Field Code: ${fieldCode} does not exist in the app.`;
      }
      if ( !supportedFieldTypes.has( json.properties[fieldCode].type ) ) { // フィールド型がサポート外であればエラー
        throw `Unable to save the values of ${fieldCode}. Field Type ${json.properties[fieldCode].type} is not supported.`;
      }
    }
  });
}

/**
  * 初回の GET リクエストのパラメータに使用する情報を準備する
  * @param {String} appId  アプリ ID
  * @param {Set<String>} fields  フィールドコードの集合
  * @param {String} query  検索クエリ
  * @return {Object} initialParams  リクエストのパラメータに使用する情報を格納した JSON オブジェクト
  *   プロパティ： {String} app  アプリ ID
  *              {Set<String>} fields  フィールドコードの集合
  *              {String} query  検索クエリ
  *              {Number} lastRecordId  検索済みの最後のレコード番号
  */
function prepareInitialParams( appId, fields, query ) {
  const initialParams = {
      app: appId,
      fields: fields,
      query: query,
      lastRecordId: 0
  };
  return initialParams;
}

/**
  * kintone REST API にレコード取得の GET リクエストを送信する
  * 未取得のレコードがなくなるまで再帰的に実行される
  * @param {String} apiUri  API の URI
  * @param {String} apiToken  API トークン
  * @param {String} basic  Basic 認証設定
  * @param {Object} params  GET リクエストのパラメータに使用する情報が格納されたオブジェクト
  *   プロパティ： {String} app  アプリ ID
  *              {Set<String>} fields  フィールドコードの集合
  *              {String} query  検索クエリ
  *              {Number} lastRecordId  検索済みの最後のレコード番号
  * @param {Array<Object>} records  レコードオブジェクトを格納する配列
  * @param {Number} requestNum  HTTP リクエスト回数
  * @param {boolean} singleLineFlag  保存先データ項目のいずれかが単一行であれば true
  */
function getRecords( apiUri, apiToken, basic, { app, fields, query, lastRecordId }, records, requestNum, singleLineFlag ) {
  // リクエスト回数の上限チェック
  if ( requestNum + 1 > httpClient.getRequestingLimit() ) {
    throw "HTTP requests exceed the limit.";
  }

  const LIMIT = 500; // 1回の GET リクエストで取得できるレコードの上限件数
  const getRecordsUri = `${apiUri}records.json`;
  let request = httpClient.begin()
    .queryParam("app", app)
    .header( "X-Cybozu-API-Token", apiToken );
  if ( basic !== "" && basic !== null ) {
    request = request.authSetting(basic);
  }
  // query パラメータの設定
  if ( query === "" || query === null ) {
    request = request.queryParam("query", `$id > ${lastRecordId} order by $id asc limit ${LIMIT}`);
  } else {
    request = request.queryParam("query", `( ${query} ) and $id > ${lastRecordId} order by $id asc limit ${LIMIT}`);
  }
  // fields パラメータの設定
  Array.from(fields.values()).forEach((fieldCode, i) => {
    request = request.queryParam(`fields[${i}]`, fieldCode);
  });
  const response = request.get( getRecordsUri );
  //when error thrown
  const responseStr = response.getResponseAsString();
  const status = response.getStatusCode();
  if (status >= 300) {
    engine.log(`---GET request--- ${status}\n${responseStr}\n`);
    throw `Failed to get records. status: ${status}`;
  }
  const json = JSON.parse(responseStr);
  Array.prototype.push.apply(records, json.records); // レコードオブジェクトを配列に追加
  requestNum++; // リクエスト回数を加算

  // レコード件数のチェック
  if ( records.length === 0 ) { // 該当するレコードが一件もなければエラー
    throw "No records found.";
  }
  if ( singleLineFlag && records.length > 1 ) { // 保存先データ項目が単一行なのにレコードが複数件あればエラー
    throw "Multiple records were found while the data item to save the result is Single-Line.";
  }

  // 再帰呼び出し
  if ( json.records.length === LIMIT ) {
    // 取得レコードの件数が LIMIT と同じ場合は、未取得のレコードが残っている場合があるので、
    // lastRecordId を更新し、getRecords を再帰呼び出しする
    lastRecordId = json.records[json.records.length - 1].$id.value;
    getRecords( apiUri, apiToken, basic, { app, fields, query, lastRecordId }, records, requestNum );
  }
}

/**
  * レコードからデータを読み出し、データ項目に出力する
  * @param {Array<Object>} records  レコードオブジェクトが格納された配列
  * @param {Array<String>} fieldCodeList  フィールドコードの配列
  * @param {Array<ProcessDataDefinitionView>} dataDefList  保存先データ項目の配列
  */
function saveData( records, fieldCodeList, dataDefList ) {
  dataDefList.forEach((dataDef, i) => {
    if ( dataDef !== null ) {
      const dataList = records.map( record => record[fieldCodeList[i]].value );
      engine.setData( dataDef, dataList.join("\n") );
    }
  });
}

  ]]>
</script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEAElEQVRYR8VXXWhTVxz/nZubNLlJ
bVbd6nSDglFwKkOrY+zDdAzBB1mHDoZSX/wAqw9WnPRBNzuHMJljsuksbPPBiQ4RpThlMLGNL+Jg
iiAbaARfrNqa2ObjNuQm9y/n3N7b3JvcNI6OnKfk/L9+9/f/OOcw1HmxWuMPtc1R/I3KWonwAYCl
AFoBvDRh/wzAAwC3dIaBXFo9P+fvIbUW31MCyLS3zi7qcg8YthHgr9FpDoQ+j1Q4FBp88LiaTVUA
o+3ztxHRYQYEawns1CEgyxj7LDx4r8/N3hXAWDTyIwFd/yWw04YBx5ti8e2VfFUEMBqddxpg66cj
+KQPOhOO3d9QAZx9azq/vBYmbAzwnIPo+PR+ucMbY12lNWEB4NWukRx3KzhpVguIdFBipCo+z4LF
KN6946rDC9PLChGzOywAYysj3xFDd5ml1wel52t4P1wjRNqf/VC/2QtoeZuq/NZKKPu+BZsRBiVH
oH7ZjcLtvyoCYYQjTdfiu7hQAOBDJhhSEs4+967qQGD3V2D+gM0R5cYxfngvtCsXwcLNCB7sg2cR
n032Vbh5HernO0DZtE3AgFw2o87kw0oASLZHOiXCr6VanshChH7qB5hLpxIhs7UD/p1fQF6y3JXy
wo0Ysj1byuQ6w8bmwfgp4X00GvkFwKZSrdDR3yBF3gB0HUyxzyFSs4AkgZJPIb36GiidAgs1ij1r
FYugTEqkJLWmrYwFACfCsfhmE8DNiflu2YeOnbVopfQYmF8RMsqpYI1Nxu/ECNjMlw0bTQONZ4WM
Uy70ZVmIUuveqVS8t8Kx+DITQLLkYBFGnAHP4jYLEGUzyJ8/iYbOListvNhY8wQAAPrwI2gDl9Hw
6WYb5elP3oP+9IkzDc/CsXizCYCcUicAXvVULAJkqLKAIpzy9uRpEl8dmgE9MQJp1iu1AEA4Fjcq
bDQaKQMQ/OGMvbh42/HgvgaD/tQYtIFLkN+OQuIseH3GvoMVvufCgA1AWQrkFe9D6f0eLBiayLHB
gNmSvBVzR3rh69gAz8I3J1PlAKDF/oDauxMgvWoKyorQ4FlCoHs/fB+tnxw8stegO9gIPcnpboHZ
FRycWZj6k4dQ921H8d4/zsDmf1sRlrVhqZU0ey58H3dCer0Vctu7FgtWDQjuCXpiGPn+06L98hdO
uQU29yfbsNIgqmTNB45y6GdrLtgA8E68+jvUA2LCTrlsg8htFFf0InkQ2HMQvtVroQ8PQWqZK7qB
j9ziv7enDCwy6xzFfNP1MHJxyScgnxPM60X+8rmaAptKZYcRF0x1HL9QhCrKrscxt6nrhcQEXdcr
mQmirpfS/4OJF76WW0zU82Figqjr06y0m+r2OJ2u/nfz8xwerN4wOc7tdwAAAABJRU5ErkJggg==
</icon>

</service-task-definition>
