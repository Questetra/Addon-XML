<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-08-02</last-modified>
<license>(C) Questetra, In. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Update Row </label>
<label locale="ja">Google スプレッドシート: 行更新</label>
<summary>Update data in a specified row of a Google Sheet.</summary>
<summary locale="ja">Google スプレッドシートの指定した行のデータを更新します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-row-update/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-row-update/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SheetId" required="true" form-type="TEXTFIELD">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシート ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートタイトル</label>
  </config>
  <config name="conf_RowNo" required="true" form-type="SELECT"  select-data-type="STRING_TEXTFIELD">
    <label>C4: Row to Update (e.g. "1", "11")</label>
    <label locale="ja">C4: 更新する行 (例 "1", "11")</label>
  </config>
  <config name="conf_Range" required="true" form-type="TEXTFIELD">
    <label>C5: Column Range to Update (e.g. "A:J")(Up to 10 columns)</label>
    <label locale="ja">C5: 更新する列範囲 (例 "A:J","K:L") (最大 10 列)</label>
  </config>
  <config name="conf_Column1" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_1: Value that is updated in the 1st column </label>
    <label locale="ja">C6_1: 列範囲のうち 1 列目の更新後の値</label>
  </config>
  <config name="conf_Column2" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_2: Value that is updated in the 2nd column</label>
    <label locale="ja">C6_1: 列範囲のうち 2 列目の更新後の値</label>
  </config>
  <config name="conf_Column3" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_3: Value that is updated in the 3rd column </label>
    <label locale="ja">C6_3: 列範囲のうち 3 列目の更新後の値</label>
  </config>
  <config name="conf_Column4" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_4: Value that is updated in the 4th column </label>
    <label locale="ja">C6_4: 列範囲のうち 4 列目の更新後の値</label>
  </config>
  <config name="conf_Column5" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_5: Value that is updated in the 5th column </label>
    <label locale="ja">C6_5: 列範囲のうち 5 列目の更新後の値</label>
  </config>
  <config name="conf_Column6" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_6: Value that is updated in the 6th column </label>
    <label locale="ja">C6_6: 列範囲のうち 6 列目の更新後の値</label>
  </config>
  <config name="conf_Column7" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_7: Value that is updated in the 7th column </label>
    <label locale="ja">C6_7: 列範囲のうち 7 列目の更新後の値</label>
  </config>
  <config name="conf_Column8" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_8: Value that is updated in the 8th column </label>
    <label locale="ja">C6_8: 列範囲のうち 8 列目の更新後の値</label>
  </config>
  <config name="conf_Column9" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_9: Value that is updated in the 9th column </label>
    <label locale="ja">C6_9: 列範囲のうち 9 列目の更新後の値</label>
  </config>
  <config name="conf_Column10" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C6_10: Value that is updated in the 10 column </label>
    <label locale="ja">C6_10: 列範囲のうち 10 列目の更新後の値</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const COLUMN_MAX_NUM = 10;

main();
function main(){

  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth = configs.get( "conf_OAuth2" );
  const sheetId = configs.get( "conf_SheetId" );
  const sheetTitle = configs.get( "conf_SheetTitle" );
  const rowNo = retrieveRowNo();
  const range = configs.get( "conf_Range" );
  checkRowNoAndRange( rowNo, range );
  const rangeArr = range.split(':');
  const dataArray = retrieveRowValues(rangeArr);
 
  
  //// == 演算 / Calculating ==
  updateRowData( oauth, sheetId, sheetTitle, rowNo, rangeArr, dataArray  );

}


/**
  * config から行番号 を読み出す
  * @return {String} rowNo  行番号
  */
function retrieveRowNo() {
  const rowNoDef = configs.getObject( "conf_RowNo" );
  return engine.findData( rowNoDef );
}


/**
  * 列範囲 の最初の列と最終の列から 更新列数を読み出し、更新後の値を列数分だけ格納する
  * @param {String} rangeArr 更新する列範囲の最初の列と最終の列が格納された配列
  * @return {Array<String>} dataArray 更新後の値の配列
  */
function retrieveRowValues(rangeArr) {
  const dataArray = [];
  let column_Num = COLUMN_MAX_NUM;

  if ( (lettersToNumber(rangeArr[1]) - lettersToNumber(rangeArr[0]) + 1) <= 0) {
    throw "Can't set column range.";
  } 
  if ( (lettersToNumber(rangeArr[1]) - lettersToNumber(rangeArr[0]) + 1) < COLUMN_MAX_NUM) {
    column_Num = lettersToNumber(rangeArr[1]) - lettersToNumber(rangeArr[0]) + 1;
  } 
  for (let i = 0; i < column_Num; i++) {    
    const value = configs.get(`conf_Column${i+1}`);
    if(value.length > 50000){
      throw "Can't set text over 50,000 characters.";
    }
    dataArray.push(value);
  }
  return dataArray;
}


/**
  * 行番号が空、不正な文字列であればエラーとする
  * 列範囲が不適切な文字列であればエラーとする
  * @param {String} rowNo  行番号
  * @param {String} range  列範囲
  */
function checkRowNoAndRange( rowNo, range ) {
  if ( rowNo === "" || rowNo === null ) {
    throw "Row number is empty.";
  }
  if ( !isValidNo(rowNo) ) {
    throw "Invalid Row number.";
  }
  if ( !isValidRange(range) ) {
    throw "Invalid Range.";
  }
}


/**
  * 行番号 が有効か（自然数か）を判定する
  * @param {String} noString  行番号 の文字列
  * @return {Boolean}  有効な 行番号 かどうか
  */
function isValidNo( noString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( noString );
}


/**
  * 列範囲 が有効かを判定する
  * @param {String} rangeString  列範囲 の文字列
  * @return {Boolean}  有効な 列範囲 かどうか
  */
function isValidRange( rangeString ) {
  const idReg = new RegExp( '^[A-Z]+:[A-Z]+$' );
  return idReg.test( rangeString );
}


/**
 * Google スプレッドシートの行データを更新
 * @param {String} oauth OAuth2 認証設定
 * @param {String} sheetId スプレッドシートの ID
 * @param {String} sheetTitle シート名
 * @param {String} rowNo 更新する行
 * @param {String} rangeArr 更新する列範囲の最初の列と最終の列が格納された配列
 * @param {Array<String>} dataArray 更新後の値の配列
 */
function updateRowData( oauth, sheetId, sheetTitle, rowNo, rangeArr, dataArray  ) {

  const enSheetId = encodeURIComponent(sheetId);
  const enSheetTitle = encodeURIComponent(sheetTitle);
  
  const requestObj = buildRequestObj(dataArray);
  
  // Method: spreadsheets.values.update
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${enSheetId}/values/${enSheetTitle}!${rangeArr[0]}${rowNo}:${rangeArr[1]}${rowNo}`;
  const response = httpClient.begin()
    .authSetting( oauth )
    .queryParam( "valueInputOption", "USER_ENTERED" )
    .body( JSON.stringify( requestObj ), "application/json" )
    .put( uri );
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}`;
    engine.log( accessLog );
    throw `Failed to update. status:${status}`;
  }
}


  /**
  * configから更新情報を読み出し、JSON オブジェクトを返す
  * @param {Array<String>} dataArray 更新後の値の配列
  * @return {Object} requestObj  JSON オブジェクト
  */
function buildRequestObj( dataArray ) {
  const requestObj = {};
  requestObj.majorDimension = "ROWS";
  requestObj.values = [];
  requestObj.values.push(dataArray);
  return requestObj;
}


// convert A to 1, Z to 26, AA to 27
function lettersToNumber(letters){
  const chrs = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const mode = chrs.length - 1;
  let number = 0;
  for(let p = 0; p < letters.length; p++){
    number = number * mode + chrs.indexOf(letters[p]);
  }
  return number;
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
