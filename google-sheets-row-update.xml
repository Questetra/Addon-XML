<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2024-02-08</last-modified>
<license>(C) Questetra, In. (MIT License)</license>
<engine-type>3</engine-type>
<addon-version>2</addon-version>
<label>Google Sheets: Update Row </label>
<label locale="ja">Google スプレッドシート: 行更新</label>
<summary>This item updates data in a specified row of a Google Sheet.</summary>
<summary locale="ja">この工程は、Google スプレッドシートの指定した行のデータを更新します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-row-update/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-row-update/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SheetId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシート ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートタイトル</label>
  </config>
  <config name="conf_ValueInputOption" required="false" form-type="SELECT_ITEM">
    <label>C4: How values should be interpreted when updating row</label>
    <label locale="ja">C4: 行更新時の値の解釈方法</label>
      <item value="RAW">
        <label>as RAW values (default)</label>
        <label locale="ja">RAW 方式（デフォルト）</label>
      </item>
      <item value="USER_ENTERED">
        <label>as USER_ENTERED values</label>
        <label locale="ja">USER_ENTERED 方式</label>
      </item>
  </config>
  <config name="conf_RowNo" required="true" form-type="SELECT"  select-data-type="STRING_TEXTFIELD">
    <label>C5: Row to Update (e.g. "1", "11")</label>
    <label locale="ja">C5: 更新する行 (例 "1", "11")</label>
  </config>

  <config name="conf_Range" required="true" form-type="TEXTFIELD">
    <label>C6: Column Range to Update (e.g. "A:J")(Up to 10 columns)</label>
    <label locale="ja">C6: 更新する列範囲 (例 "A:J","K:L") (最大 10 列)</label>
  </config>
  <config name="conf_Column1" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_1: Value that is updated in the 1st column </label>
    <label locale="ja">C7_1: 列範囲のうち 1 列目の更新後の値</label>
  </config>
  <config name="conf_Column2" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_2: Value that is updated in the 2nd column</label>
    <label locale="ja">C7_2: 列範囲のうち 2 列目の更新後の値</label>
  </config>
  <config name="conf_Column3" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_3: Value that is updated in the 3rd column </label>
    <label locale="ja">C7_3: 列範囲のうち 3 列目の更新後の値</label>
  </config>
  <config name="conf_Column4" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_4: Value that is updated in the 4th column </label>
    <label locale="ja">C7_4: 列範囲のうち 4 列目の更新後の値</label>
  </config>
  <config name="conf_Column5" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_5: Value that is updated in the 5th column </label>
    <label locale="ja">C7_5: 列範囲のうち 5 列目の更新後の値</label>
  </config>
  <config name="conf_Column6" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_6: Value that is updated in the 6th column </label>
    <label locale="ja">C7_6: 列範囲のうち 6 列目の更新後の値</label>
  </config>
  <config name="conf_Column7" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_7: Value that is updated in the 7th column </label>
    <label locale="ja">C7_7: 列範囲のうち 7 列目の更新後の値</label>
  </config>
  <config name="conf_Column8" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_8: Value that is updated in the 8th column </label>
    <label locale="ja">C7_8: 列範囲のうち 8 列目の更新後の値</label>
  </config>
  <config name="conf_Column9" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_9: Value that is updated in the 9th column </label>
    <label locale="ja">C7_9: 列範囲のうち 9 列目の更新後の値</label>
  </config>
  <config name="conf_Column10" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C7_10: Value that is updated in the 10 column </label>
    <label locale="ja">C7_10: 列範囲のうち 10 列目の更新後の値</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const COLUMN_MAX_NUM = 10;

function main(){

  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth = configs.getObject("conf_OAuth2");
  const sheetId = retrieveStringData( "conf_SheetId", "Target Spreadsheet ID" );
  const sheetTitle = retrieveStringData( "conf_SheetTitle", "Target Sheet Title" );
  const rowNo = retrieveRowNo();
  const range = configs.get( "conf_Range" );
  checkRowNoAndRange( rowNo, range );
  const rangeArr = range.split(':');
  const dataArray = retrieveRowValues(rangeArr);

  let valueInputOption = configs.get('conf_ValueInputOption');
  if (valueInputOption === '') {
    valueInputOption = 'RAW';
  }
  
  //// == 演算 / Calculating ==
  updateRowData( oauth, sheetId, sheetTitle, valueInputOption, rowNo, rangeArr, dataArray  );

}


/**
 * 文字列データを config から読み出す。空であればエラー。
 * @param {String} confName config 名
 * @param {String} label エラーメッセージ用のラベル
 * @return {String} string 文字列データ
 */
function retrieveStringData( confName, label ){
  let string = configs.get( confName );
  const dataDef = configs.getObject( confName );
  if (dataDef !== null) {
    string = engine.findData(dataDef);
  }
  if (string === null || string === "") {
    throw `${label} is empty.`;
  }
  return string;
}


/**
  * config から行番号 を読み出す
  * @return {String} rowNo  行番号
  */
function retrieveRowNo() {
  const rowNoDef = configs.getObject( "conf_RowNo" );
  return engine.findData( rowNoDef );
}


/**
  * 列範囲 の最初の列と最終の列から 更新列数を読み出し、更新後の値を列数分だけ格納する
  * @param {Array<String>} rangeArr 更新する列範囲の最初の列と最終の列が格納された配列
  * @return {Array<String>} dataArray 更新後の値の配列
  */
function retrieveRowValues(rangeArr) {
  const dataArray = [];
  let columnNum = lettersToNumber(rangeArr[1]) - lettersToNumber(rangeArr[0]) + 1;
  if (columnNum <= 0) {
    throw "Invalid Range.";
  }
  if (columnNum > COLUMN_MAX_NUM) {
    columnNum = COLUMN_MAX_NUM;
  }
  for (let i = 0; i < columnNum; i++) {    
    const value = configs.get(`conf_Column${i+1}`);
    if(value.length > 50000){
      throw "Can't set text over 50,000 characters.";
    }
    dataArray.push(value);
  }
  return dataArray;
}


/**
  * 行番号が空、不正な文字列であればエラーとする
  * 列範囲が不適切な文字列であればエラーとする
  * @param {String} rowNo  行番号
  * @param {String} range  列範囲
  */
function checkRowNoAndRange( rowNo, range ) {
  if ( rowNo === "" || rowNo === null ) {
    throw "Row number is empty.";
  }
  if ( !isValidNo(rowNo) ) {
    throw "Invalid Row number.";
  }
  if ( !isValidRange(range) ) {
    throw "Invalid Range.";
  }
}


/**
  * 行番号 が有効か（自然数か）を判定する
  * @param {String} noString  行番号 の文字列
  * @return {Boolean}  有効な 行番号 かどうか
  */
function isValidNo( noString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( noString );
}


/**
  * 列範囲 が有効かを判定する
  * @param {String} rangeString  列範囲 の文字列
  * @return {Boolean}  有効な 列範囲 かどうか
  */
function isValidRange( rangeString ) {
  const idReg = new RegExp( '^[A-Z]+:[A-Z]+$' );
  return idReg.test( rangeString );
}


/**
 * Google スプレッドシートの行データを更新
 * @param {AuthSettingWrapper} oauth  OAuth2 認証設定
 * @param {String} sheetId スプレッドシートの ID
 * @param {String} sheetTitle シート名
 * @param {String} rowNo 更新する行
 * @param {Array<String>} rangeArr 更新する列範囲の最初の列と最終の列が格納された配列
 * @param {Array<String>} dataArray 更新後の値の配列
 */
function updateRowData( oauth, sheetId, sheetTitle, valueInputOption, rowNo, rangeArr, dataArray  ) {

  const enSheetId = encodeURIComponent(sheetId);
  const enSheetTitle = encodeURIComponent(sheetTitle);
  
  const requestObj = buildRequestObj(dataArray);
  
  // Method: spreadsheets.values.update
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${enSheetId}/values/${enSheetTitle}!${rangeArr[0]}${rowNo}:${rangeArr[1]}${rowNo}`;
  const response = httpClient.begin()
    .authSetting( oauth )
    .queryParam( "valueInputOption",  valueInputOption )
    .body( JSON.stringify( requestObj ), "application/json" )
    .put( uri );
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}`;
    engine.log( accessLog );
    throw `Failed to update. status:${status}`;
  }
}


/**
  * configから更新情報を読み出し、JSON オブジェクトを返す
  * @param {Array<String>} dataArray 更新後の値の配列
  * @return {Object} requestObj  JSON オブジェクト
  */
function buildRequestObj( dataArray ) {
  const requestObj = {};
  requestObj.majorDimension = "ROWS";
  requestObj.values = [];
  requestObj.values.push(dataArray);
  return requestObj;
}


// convert A to 1, Z to 26, AA to 27
function lettersToNumber(letters){
  const chrs = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const mode = chrs.length - 1;
  let number = 0;
  for(let p = 0; p < letters.length; p++){
    number = number * mode + chrs.indexOf(letters[p]);
  }
  return number;
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[

/**
 * 設定の準備
 * スプレッドシートの ID とシートのタイトルはデータ項目で指定
 * @param spreadSheetId
 * @param sheetTitle
 * @param rowNo
 * @param range
 * @param rowData
 */
const prepareConfigs = (spreadSheetId, sheetTitle, rowNo, range, rowData) => {
  const auth = httpClient.createAuthSettingOAuth2(
    'Google',
    'https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force',
    'https://accounts.google.com/o/oauth2/token',
    'spreadsheets',
    'consumer_key',
    'consumer_secret',
    'access_token'
  );

  configs.putObject('conf_OAuth2', auth);

  // スプレッドシートの ID を設定した文字型データ項目（単一行）を準備し、設定
  const spreadSheetIdDef = engine.createDataDefinition('スプレッドシートの ID', 1, 'q_SpreadSheetId', 'STRING_TEXTFIELD');
  engine.setData(spreadSheetIdDef, spreadSheetId);
  configs.putObject('conf_SheetId', spreadSheetIdDef);

  // シートのタイトルを設定した文字型データ項目（単一行）を準備し、設定
  const sheetTitleDef = engine.createDataDefinition('シートのタイトル', 2, 'q_SheetTitle', 'STRING_TEXTFIELD');
  engine.setData(sheetTitleDef, sheetTitle);
  configs.putObject('conf_SheetTitle', sheetTitleDef);

  configs.put('conf_ValueInputOption', ''); // テスト時に値が null にならないように空文字を設定

  // 更新する行の行番号を設定した文字型データ項目（単一行）を準備し、設定
  const rowNoDef = engine.createDataDefinition('更新する行の行番号', 3, 'q_RowNo', 'STRING_TEXTFIELD');
  engine.setData(rowNoDef, rowNo);
  configs.putObject('conf_RowNo', rowNoDef);

  // 列範囲を設定
  configs.put('conf_Range', range);

  // 更新後の値を設定
  for (let i = 0; i < 10; i++) {
    configs.put(`conf_Column${i+1}`, rowData[i]);
  }
};

const SAMPLE_ROW = ['1列目の値', '2列目の値', '3列目の値', '4列目の値', '5列目の値', '6列目の値', '7列目の値', '8列目の値', '9列目の値', '10列目の値'];

const SAMPLE_ROW_BLANK = new Array(10).fill(''); // 全ての要素が空文字列

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
  let failed = false;
  try {
    main();
  } catch (e) {
    failed = true;
  }
  if (!failed) {
    fail();
  }
};

/**
 * スプレッドシートの ID をデータ項目で指定し、値が空でエラーになる場合
 */
test('Target Spreadsheet ID is empty', () => {
  prepareConfigs(null, 'シート1', '1', 'A:J', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Target Spreadsheet ID is empty.');
});

/**
 * シートのタイトルをデータ項目で指定し、値が空でエラーになる場合
 */
test('Target Sheet Title is empty', () => {
  prepareConfigs('abc123', null, '1', 'A:J', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Target Sheet Title is empty.');

});

/**
 * 行番号が空でエラーになる場合
 */
test('Row number is empty', () => {
  prepareConfigs('abc123', 'シート1', null, 'A:J', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Row number is empty.');
});

/**
 * 行番号が不正でエラーになる場合
 */
test('Invalid Row number', () => {
  prepareConfigs('abc123', 'シート1', '0', 'A:J', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Invalid Row number.');
});

/**
 * 列範囲が不正でエラーになる場合 - 形式が不正
 */
test('Invalid Range - Invalid Format', () => {
  prepareConfigs('abc123', 'シート1', '1', 'A', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Invalid Range.');
});

/**
 * 列範囲が不正でエラーになる場合 - 降順で指定
 */
test('Invalid Range - Invalid Order', () => {
  prepareConfigs('abc123', 'シート1', '1', 'AA:A', SAMPLE_ROW);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Invalid Range.');
});

/**
 * 更新後の値に 50,000 文字を超えるものがありエラーになる場合
 */
test('Over 50,000 characters', () => {
  const rowData = Array.from(SAMPLE_ROW_BLANK); // 新しい配列を生成
  // 2列目の値を 50,001 文字に
  rowData[1] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV'
    .repeat(500) + 'A';
  prepareConfigs('abc123', 'シート1', '1', 'A:J', rowData);

  // <script> のスクリプトを実行し、エラーがスローされることを確認
  assertError(main, 'Can\'t set text over 50,000 characters.');
});

/**
 * PUT リクエストのテスト (Google スプレッドシートの行を更新)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetTitle
 * @param rangeWithRowNo
 * @param values
 */
const assertPutRequest = ({url, method, contentType, body}, spreadSheetId, sheetTitle, rangeWithRowNo, values, valueInputOption) => {
  if (valueInputOption === ''){
    valueInputOption = 'RAW';
  }
  expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
      spreadSheetId
    )}/values/${encodeURIComponent(
      sheetTitle
    )}!${rangeWithRowNo}?valueInputOption=${valueInputOption}`);


//const uri = `https://sheets.googleapis.com/v4/spreadsheets/${enSheetId}/values/${enSheetTitle}!${rangeArr[0]}${rowNo}:${rangeArr[1]}${rowNo}`;

  expect(method).toEqual('PUT');
  expect(contentType).toEqual('application/json');
  const bodyObj = JSON.parse(body);
  expect(bodyObj.majorDimension).toEqual('ROWS');
  expect(bodyObj.values[0].length).toEqual(values.length);
  values.forEach((value, i) => {
    expect(bodyObj.values[0][i]).toEqual(value);
  });
};

/**
 * 行更新成功 - 10 列すべてを更新 valueInputOption 指定なし
 * スプレッドシートの ID とシートのタイトルはデータ項目で指定
 */
test('Success - All columns updated, valueInputOption not specified', () => {
  prepareConfigs('abc123', 'シート1', '1', 'A:J', SAMPLE_ROW);

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'A1:J1', SAMPLE_ROW, '');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新成功 - 10 列すべてを空文字列で更新 valueInputOption 指定なし
 * スプレッドシートの ID とシートのタイトルは固定値で指定
 */
test('Success - All columns updated as blank, valueInputOption not specified', () => {
  prepareConfigs(null, null, '100', 'K:T', SAMPLE_ROW_BLANK);
  configs.put('conf_SheetId', '456789vwxyz');
  configs.put('conf_SheetTitle', 'シート 1/2!');

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, '456789vwxyz', 'シート 1/2!', 'K100:T100', SAMPLE_ROW_BLANK, '');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新成功 - 列範囲を 11 列以上指定 valueInputOption に RAW を指定
 */
test('Success - Range has more than 10 columns, select RAW', () => {
  prepareConfigs('abc123', 'シート1', '2', 'B:AA', SAMPLE_ROW);
  configs.put('conf_ValueInputOption', 'RAW');

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'B2:AA2', SAMPLE_ROW, 'RAW');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新成功 - 列範囲を 1 列のみ指定 valueInputOption に RAW を指定
 */
test('Success - 1 column updated, select RAW', () => {
  prepareConfigs('abc123', 'シート1', '3', 'AB:AB', SAMPLE_ROW);
  configs.put('conf_ValueInputOption', 'RAW');
  const values = SAMPLE_ROW.slice(0, 1); // 送られるデータは 1 列分のみ

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'AB3:AB3', values, 'RAW');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新成功 - 列範囲を 3 列のみ指定 valueInputOption に USER_ENTERED を指定
 */
test('Success - 3 columns updated, select USER_ENTERED', () => {
  prepareConfigs('abc123', 'シート1', '4', 'AA:AC', SAMPLE_ROW);
  configs.put('conf_ValueInputOption', 'USER_ENTERED');
  const values = SAMPLE_ROW.slice(0, 3); // 送られるデータは 3 列分のみ

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'AA4:AC4', values, 'USER_ENTERED');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新成功 - 値が設定されている列と設定されていない列が混在  valueInputOption に USER_ENTERED を指定
 * 50,000 文字までは設定できる
 */
test('Success - Some columns are blank, select USER_ENTERED', () => {
  const rowData = ['', '2列目の値', '', '', '5列目の値', '', '', '8列目の値', '9列目の\n値', ''];
  // 3列目の値を 50,000 文字に
  rowData[2] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV'
    .repeat(500);
  prepareConfigs('abc123', 'シート1', '1', 'A:J', rowData);
  configs.put('conf_ValueInputOption', 'USER_ENTERED');

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'A1:J1', rowData, 'USER_ENTERED');
    return httpClient.createHttpResponse(200, 'application/json', `{}`);
  });

  // <script> のスクリプトを実行
  main();
});

/**
 * 行更新の PUT リクエストで失敗
 */
test('Fail in PUT Request', () => {
  prepareConfigs('abc123', 'シート1', '1', 'A:J', SAMPLE_ROW);

  httpClient.setRequestHandler((request) => {
    assertPutRequest(request, 'abc123', 'シート1', 'A1:J1', SAMPLE_ROW);
    return httpClient.createHttpResponse(400, 'application/json', `{}`);
  });

  assertError(main, 'Failed to update. status:400');
});

]]></test>

</service-task-definition>
