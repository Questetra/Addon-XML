<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box: Copy File</label>
<label locale="ja">Box: ファイルコピー</label>
<last-modified>2021-10-28</last-modified>
<summary>Copy the File and save it in the specified Folder</summary>
<summary locale="ja">既存ファイルを複製し、指定フォルダに新規保存します</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/box-file-copy/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/box-file-copy/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SourceFileId" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source File ID</label>
    <label locale="ja">C2: コピー元ファイルの ID</label>
  </config>
  <config name="conf_FolderId" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder ID to store (The same folder of Source File if blank)</label>
    <label locale="ja">C3: 保存先フォルダの ID (空白の場合、元ファイルと同じ場所に作成されます)</label>
  </config>
  <config name="conf_NewFileName" form-type="TEXTFIELD" el-enabled="true">
    <label>C4: New File Name (named automatically if blank)</label>
    <label locale="ja">C4: 新しいファイルのファイル名 (空白の場合、自動的に設定されます)</label>
  </config>
  <config name="conf_DataForId" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C5: Data item to save New File ID </label>
    <label locale="ja">C5: ファイル ID を保存するデータ項目</label>
  </config>
  <config name="conf_DataForUrl" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C6: Data item to save New File Viewing URL </label>
    <label locale="ja">C6: ファイル URL を保存するデータ項目</label>
  </config>
</configs>


<script><![CDATA[
main();
function main(){
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.get( "conf_OAuth2" ) ;
  const fileId = decideFileId();

  if(fileId === "" || fileId === null){
    throw "No Source File ID";
  }

  const newFileName = configs.get( "conf_NewFileName" );
  checkNewFileName(newFileName);

  let folderId = decideFolderId();

  if(folderId === "" || folderId === null){
    //空の場合は"元ファイルが配置されているフォルダ"とする when folder id isn't set, set "same folder"
    folderId = getFolderID(oauth2, fileId);
  }

  const saveIdData = configs.getObject( "conf_DataForId" );
  const saveUrlData = configs.getObject( "conf_DataForUrl" );

  const newFileID = copyFile(oauth2, folderId, fileId, newFileName);

  if (saveIdData !== null) {
    engine.setData(saveIdData, newFileID);
  }
  if (saveUrlData !== null) {
    engine.setData(saveUrlData, `https://app.box.com/file/${newFileID}`);
  }
}

/**
  * ファイルのIDをconfigから読み出して出力する。
  * @return {String}  ファイルの ID
  */
function decideFileId(){
  let fileId = "";
  const fileIdDef = configs.getObject("conf_SourceFileId");
  if(fileIdDef === null){
    fileId = configs.get( "conf_SourceFileId");
  }else{
    fileId = engine.findData(fileIdDef);
  }
  return fileId;
}


/**
  * 新しいファイルのファイル名をチェックする。（サポートされていない文字が使われていないか）
  */
function checkNewFileName(newFileName){

//ファイル名が255文字を超えていないか
  if(newFileName.length > 255){
    throw "File Name should be less than 256 characters";
  }

//ファイル名に「/」や「\」が含まれていないか
  const reg = new RegExp('[/\\\\]');
  if(newFileName.search(reg) !== -1) {
    throw "Invalid File Name";
  }

//ファイル名の先頭と末尾に半角スペースが使われていないか
  if(newFileName.slice(0,1) === " " || newFileName.slice(-1) === " ") {
    throw "Invalid File Name";
  }

//ファイル名が「.」や「..」ではないか
  if(newFileName === "." || newFileName === ".."){
    throw "Invalid File Name";
  }
}

/**
  * フォルダのIDをconfigから読み出して出力する。
  * @return {String}  フォルダの ID
  */
function decideFolderId(){
  let folderId = "";
  const folderIdDef = configs.getObject("conf_FolderId");
  if(folderIdDef === null){
    folderId = configs.get( "conf_FolderId");
  }else{
    folderId = engine.findData(folderIdDef);
  }
  return folderId;
}

/**
  * get parent folderID of file
  * ファイルが配置されているフォルダのIDを取得する。
  * @return {String}  フォルダの ID
  */
function getFolderID(oauth2, fileId){

  const url = `https://api.box.com/2.0/files/${fileId}`;

  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam("fields", "parent")
    .get(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  engine.log(`status: ${status}`);

  if(status !== 200){
    engine.log(responseTxt);
    throw `Failed to get parent folder and Failed to copy.`;
  }
  const jsonRes = JSON.parse(responseTxt);
  return jsonRes.parent.id;
}

/**
  * Box 上のファイルを指定フォルダに指定ファイル名でコピーする。
  * @return {String}  コピーしたファイルの ID
  */
//copy file on Box  @return {String}  ファイルの ID
function copyFile(oauth2, folderId, fileId, newFileName) {
  let jsonReq = {};
  jsonReq["parent"] = {"id": folderId };

  if ( newFileName !== "" && newFileName !== null ){ 
    jsonReq["name"] = newFileName;
  }  
  
  const url = `https://api.box.com/2.0/files/${fileId}/copy`;

  const response = httpClient.begin()
    .authSetting(oauth2)
    .queryParam("fields", "id")
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  
  engine.log(`status: ${status}`);

  if (status !== 201) {
    engine.log(responseTxt);
    throw "Failed to copy.";
  }
  const jsonRes = JSON.parse(responseTxt);
  return jsonRes.id;
}

]]></script>

<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=</icon>
    
    
    
        <test><![CDATA[

/**
 * 設定の準備
 * conf_SourceFileId  conf_FolderId  は、文字型データ項目で指定
 * @param configs
 * @param sourceFileId
 * @param folderId
 * @param newFileName
 * @return {{
 *     sourceFileIdDef: {Object},
 *     folderIdDef: {Object},
 *     idDef: {Object},
 *     urlDef: {Object}
 * }}
 */
const prepareConfigs = (configs, sourceFileId, folderId, newFileName) => {
    configs.put('conf_OAuth2', 'Box');

    // 文字型データ項目を準備して、config に指定
    const sourceFileIdDef = engine.createDataDefinition('コピー元ファイルID', 1, 'q_sourceFileId', 'STRING_TEXTFIELD');
    configs.putObject('conf_SourceFileId', sourceFileIdDef);
    // 文字型データ項目の値（コピー元ファイルID）を指定
    engine.setData(sourceFileIdDef, sourceFileId);

    configs.put('conf_NewFileName', newFileName);

    // 文字型データ項目を準備して、config に指定
    const folderIdDef = engine.createDataDefinition('保存先フォルダID', 2, 'q_folderId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FolderId', folderIdDef);
    // 文字型データ項目の値（保存先フォルダID）を指定
    engine.setData(folderIdDef, folderId);

    // 文字型データ項目を準備して、config に指定
    const idDef = engine.createDataDefinition('ファイルID', 3, 'q_ids', 'STRING_TEXTAREA');
    configs.putObject('conf_DataForId', idDef);
    // 文字型データ項目の値（ファイル ID を保存するデータ項目）を指定
    engine.setData(idDef, '事前文字列');

    // 文字型データ項目を準備して、config に指定
    const urlDef = engine.createDataDefinition('ファイルURL', 4, 'q_urls', 'STRING_TEXTAREA');
    configs.putObject('conf_DataForUrl', urlDef);
    // 文字型データ項目の値（ファイル URL を保存するデータ項目）を指定
    engine.setData(urlDef, '事前文字列');

    return {
        sourceFileIdDef,
        folderIdDef,
        idDef,
        urlDef
    };
};


/**
 * リクエストのテスト（ファイルが配置されているフォルダのIDを取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param fileId
 */
const assertGetRequest = ({url, method}, fileId) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}?fields=parent`);
    expect(method).toEqual('GET');
};


/**
 * リクエストのテスト（ファイルコピー）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param folderId
 * @param newFileName
 */
const assertPostRequest = ({url, method, contentType, body}, fileId, folderId, newFileName) => {
    expect(url).toEqual(`https://api.box.com/2.0/files/${fileId}/copy?fields=id`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.parent.id).toEqual(folderId);
    if ( newFileName !== "" && newFileName !== null ){ 
        expect(bodyObj.name).toEqual(newFileName);
    }else{
        //newFileName が空の場合、bodyObj に name の指定がないことを確認
        expect(bodyObj.name === undefined).toEqual(true);
    }
};


/**
 * conf_SourceFileId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('No Source File ID - FileId specified by String Data', () => {
    prepareConfigs(configs, null, '12345', 'test.txt');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('No Source File ID');
    }
});

/**
 * conf_SourceFileId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('No Source File ID - FileId specified with fixed value ' , () => {
    prepareConfigs(configs, null, '54321', 'test.pdf');
    //conf_SourceFileId の設定値を固定値で上書き
    configs.put('conf_SourceFileId', '');

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('No Source File ID');
    }
});

/**
 * ファイル名が255文字を超えてエラーになる場合
 */
test('File Name Length > 255', () => {
    let name = '';
    while (name.length <= 255) {
        name += 'a';
    }
    prepareConfigs(configs, '87654321', '54321', name);
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('File Name should be less than 256 characters');
    }
});

/**
 * ファイル名に / が含まれている場合
 */
test('File Name uses /', () => {
    prepareConfigs(configs, '23456789', '23456', 'sample/test');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

/**
 * ファイル名に \\ が含まれている場合
 */
test('File Name uses \\', () => {
    prepareConfigs(configs, '98765432', '65432', 'sample\\test');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

/**
 * ファイル名が半角スペースから始まる場合
 */
test('File Name starts with space', () => {
    prepareConfigs(configs, '12345678', '12345', ' test');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

/**
 * ファイル名が半角スペースで終わる場合
 */
test('File Name ends with space', () => {
    prepareConfigs(configs, '12345678', '12345', 'test ');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

/**
 * ファイル名が"."の場合
 */
test('File Name is .', () => {
    prepareConfigs(configs, '12345678', '45678', '.');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});

/**
 * ファイル名が".."の場合
 */
test('File Name is ..', () => {
    prepareConfigs(configs, '87654321', '87654', '..');
    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid File Name');
    }
});


/**
 * Box への API リクエストでエラー 
 * ファイルが配置されているフォルダの ID 取得失敗
 */
test('GET Failed', () => {
    prepareConfigs(configs, '12345678', null, 'test.xml');

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, '12345678');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to get parent folder and Failed to copy.');
    }
});


/**
 * Box への API リクエストでエラー 
 * ファイルコピー失敗
 * コピー先のフォルダ指定無
 */
test('PUT Failed', () => {
    prepareConfigs(configs, '87654321', null, 'test.png');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '87654321');
            //レスポンスは、簡易版レプリゼンテーション＋ field で指定した属性
            const responseGetObj = {
                "type": "file",
                "id": "87654321",
                "etag": "0",
                "parent": {
                     "type": "folder",
                     "id": "33333",
                     "sequence_id": "0",
                     "etag": "0",
                     "name": "testfolder"
                 }
            };
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }
        assertPostRequest(request, '87654321', '33333', 'test.png');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    // <script> のスクリプトを実行し、エラーがスローされることを確認
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to copy.');
    }
});


/**
 * コピー成功
 * ファイル名指定、コピー先のフォルダ指定　
 */
test('201 Success - file folder', () => {
    const {
        sourceFileIdDef,
        folderIdDef,
        idDef,
        urlDef
    } = prepareConfigs(configs, '12345678', '12345', 'test.txt');
	
    httpClient.setRequestHandler((request) => {        
        assertPostRequest(request, '12345678', '12345', 'test.txt');
        //レスポンスは、簡易版レプリゼンテーション
        const responsePostObj = {
            "type": "file",
            "id": "87654321",
            "etag": "0"
        };        
        return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(responsePostObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(sourceFileIdDef)).toEqual('12345678');
    expect(engine.findData(folderIdDef)).toEqual('12345');
    expect(engine.findData(idDef)).toEqual('87654321');
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/file/87654321');
});


/**
 * コピー成功
 * ファイル名、コピー先のフォルダ　共に空　
 */
test('201 Success', () => {
    const {
        sourceFileIdDef,
        folderIdDef,
        idDef,
        urlDef
    } = prepareConfigs(configs, '23456789', null, '');

    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, '23456789');
            //レスポンスは、簡易版レプリゼンテーション＋ field で指定した属性
            const responseGetObj = {
                "type": "file",
                "id": "23456789",
                "etag": "0",
                "parent": {
                     "type": "folder",
                     "id": "23456",
                     "sequence_id": "0",
                     "etag": "0",
                     "name": "testfolder"
                 }
        };
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(responseGetObj));
        }
        assertPostRequest(request, '23456789', '23456', '');
        //レスポンスは、簡易版レプリゼンテーション
        const responsePostObj = {
            "type": "file",
            "id": "98765432",
            "etag": "0"
        };
        
        return httpClient.createHttpResponse(201, 'application/json', JSON.stringify(responsePostObj));
    });

    // <script> のスクリプトを実行
    execute();

    // 文字型データ項目の値をチェック
    expect(engine.findData(sourceFileIdDef)).toEqual('23456789');
    expect(engine.findData(folderIdDef)).toEqual(null);
    expect(engine.findData(idDef)).toEqual('98765432');
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/file/98765432');
});

]]></test>
    

</service-task-definition>
