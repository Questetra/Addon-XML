<?xml version="1.0" encoding="UTF-8"?>
    <service-task-definition>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Box: Move Folder</label>
    <label locale="ja">Box: フォルダ移動</label>
    <last-modified>2024-06-18</last-modified>
    <summary>This item moves the folder to the specified folder. Folder ID and URL won't change.</summary>
    <summary locale="ja">この工程は、既存フォルダを指定フォルダに移動します。フォルダの ID・URL は変化しません。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-folder-move/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-folder-move/</help-page-url>

    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Folder ID to move</label>
            <label locale="ja">C2: 移動させるフォルダの ID</label>
        </config>
        <config name="conf_ParentFolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
            <label>C3: Folder ID to move to</label>
            <label locale="ja">C3: 移動先フォルダの ID</label>
        </config>
    </configs>


    <script><![CDATA[

const main = () => {
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const oauth2 = configs.getObject("conf_OAuth2");
    const folderId = decideFolderId();
    const parentFolderId = decideParentFolderId();

    //// == Calculating / 演算 ==
    moveFolder(oauth2, folderId, parentFolderId);
};

/**
  * 移動させるフォルダの ID を config から読み出す
  * 空の場合はエラー
  * @return {String}  移動させるフォルダの ID
  */
const decideFolderId = () => {
    const folderIdDef = configs.getObject("conf_FolderId");
    const folderId = engine.findData(folderIdDef);
    if (folderId === null) {
        throw new Error("Folder ID to move is blank.");
    }
    return folderId;
};

/**
  * 移動先フォルダの ID を config から読み出す
  * 空の場合はエラー
  * @return {String}  移動先フォルダの ID
  */
const decideParentFolderId = () => {
    let folderId = "";
    const folderIdDef = configs.getObject("conf_ParentFolderId");
    if (folderIdDef === null) {
        folderId = configs.get("conf_ParentFolderId");
    } else {
        folderId = engine.findData(folderIdDef);
    }
    if (folderId === "" || folderId === null) {
        throw new Error("Folder ID to move to is blank.");
    }
    return folderId;
};

/**
  * Box 上のファイルを指定フォルダに移動する。
  * @param {Object} oauth2
  * @param {String} folderId
  * @param {String} parentFolderId
  */
const moveFolder = (oauth2, folderId, parentFolderId) => {
    const url = `https://api.box.com/2.0/folders/${encodeURIComponent(folderId)}`;
    const jsonBody = {
        "parent": {
            "id": parentFolderId
        }
    };

    const response = httpClient.begin()
        .authSetting(oauth2)
        // fields には id を指定（レスポンスを基本レプリゼンテーションに縮小するため）
        .queryParam("fields", "id")
        .body(JSON.stringify(jsonBody), "application/json; charset=UTF-8")
        .put(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseTxt);
        throw new Error(`Failed to move. status: ${status}`);
    }
};

]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>
        
    <test><![CDATA[

/**
 * 設定の準備
 * 移動先フォルダの ID を文字型データ項目で指定
 * @param folderId
 * @param parentFolderId
 */
const prepareConfigs = (folderId, parentFolderId) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', auth);

    const folderIdDef = engine.createDataDefinition('移動させるフォルダ ID', 1, 'q_sourceFolderId', 'STRING_TEXTFIELD');
    configs.putObject('conf_FolderId', folderIdDef);
    engine.setData(folderIdDef, folderId);

    const parentFolderIdDef = engine.createDataDefinition('移動先フォルダ ID', 2, 'q_parentFolderId', 'STRING_TEXTFIELD');
    configs.putObject('conf_ParentFolderId', parentFolderIdDef);
    engine.setData(parentFolderIdDef, parentFolderId);
};


/**
 * API リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param request.contentType
 * @param request.body
 * @param folderId
 * @param parentFolderId
 */
const assertRequest = ({url, method, headers, contentType, body}, folderId, parentFolderId) => {
    expect(url).toEqual(`https://api.box.com/2.0/folders/${folderId}?fields=id`);
    expect(method).toEqual('PUT');
    expect(headers.Authorization).toEqual('Bearer access_token');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.parent.id).toEqual(parentFolderId);
};

/**
 * 異常系のテスト
 * @param errorMsg
 */
const assertError = (errorMsg) => {
    let failed = false;
    try {
        main();
    } catch (e) {
        failed = true;
        expect(e.message).toEqual(errorMsg);
    }
    if (!failed) {
        fail('No error was thrown.');
    }
};

/**
 * conf_FolderId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('Folder ID to move is blank', () => {
    prepareConfigs(null, '12345');
    assertError('Folder ID to move is blank.');
});

/**
 * conf_ParentFolderId にデータ項目を設定しているが、そのデータ項目の値が空でエラーになる場合
 */
test('Folder ID to move to is blank - String type data item', () => {
    prepareConfigs('12345678', null);
    assertError('Folder ID to move to is blank.');
});

/**
 * conf_ParentFolderId に固定値を指定しているが、その固定値が空でエラーになる場合
 */
test('Folder ID to move to is blank - fixed value' , () => {
    prepareConfigs('87654321', '54321');
    //conf_ParentFolderId の設定値を固定値（空）で上書き
    configs.put('conf_ParentFolderId', '');
    assertError('Folder ID to move to is blank.');
});

/**
 * ファイル移動失敗
 * Box への API リクエストでエラー
 */
test('Failed to move - PUT Failed', () => {
    prepareConfigs('87654321', '54321');

    httpClient.setRequestHandler((request) => {
        assertRequest(request, '87654321', '54321');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError('Failed to move. status: 400');
});

/**
 * ファイル移動成功
 * 移動先フォルダの ID を文字型データ項目で指定
 */
test('200 Success - String type data item', () => {
    prepareConfigs('12345678', '12345');
	
    httpClient.setRequestHandler((request) => {        
        assertRequest(request, '12345678', '12345');
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "12345678"}');
    });

    // <script> のスクリプトを実行
    expect(main()).toEqual(undefined);
});

/**
 * ファイル移動成功
 * 移動先フォルダの ID を固定値で指定
 */
test('200 Success - fixed value', () => {
    prepareConfigs('4567890', 'dummy');
    //conf_ParentFolderId の設定値を固定値で上書き
    configs.put('conf_ParentFolderId', '98765');
	
    httpClient.setRequestHandler((request) => {        
        assertRequest(request, '4567890', '98765');
        return httpClient.createHttpResponse(200, 'application/json', '{"id": "4567890"}');
    });

    // <script> のスクリプトを実行
    expect(main()).toEqual(undefined);
});

]]></test>

</service-task-definition>
