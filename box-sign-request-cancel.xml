<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-09-07</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Box: Cancel Sign Request</label>
    <label locale="ja">Box Sign: 署名リクエストキャンセル</label>
    <summary>This item cancels a specified sign request on Box.
    </summary>
    <summary locale="ja">この工程は、Box 上の指定の署名リクエストをキャンセルします。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-sign-request-cancel/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-sign-request-cancel/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/sign_requests.readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_RequestId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Sign Request ID</label>
            <label locale="ja">C2: 署名リクエスト ID</label>
        </config>
    </configs>

    <script><![CDATA[
function main() {
    const oauth2 = configs.getObject("conf_OAuth2");
    const requestId = decideRequestId();
    cancelRequest(oauth2, requestId);
}

/**
 * リクエストIDをconfigから読み出して出力する。
 * @return {String} requestId リクエスト ID
 */
function decideRequestId() {
    const requestIdDef = configs.getObject("conf_RequestId");
    requestId = engine.findData(requestIdDef);
    if (requestId === null) {
        throw "Request ID is blank";
    }
    return requestId;
}

/**
 * 署名リクエストキャンセル
 * 全員署名済、拒否、キャンセル済、変換中等、ステータスが原因でキャンセルに失敗する場合は正常終了
 * ステータス以外が原因でキャンセルに失敗する場合はエラーにする
 * @param {AuthSettingWrapper} oauth OAuth2 設定
 * @param {String} requestId 署名リクエストの ID
 */
function cancelRequest(oauth2, requestId) {
    const url = `https://api.box.com/2.0/sign_requests/${requestId}/cancel`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .post(url);
    const status = response.getStatusCode();
    if (status !== 200) {
        const responseTxt = response.getResponseAsString();
        try {
            const jsonRes = JSON.parse(responseTxt);
            if (jsonRes.code === "bad_request") {
                engine.log(jsonRes.context_info.errors[0].message);
                return;
            }
        } catch (ignore) { }

        const error = `Failed to cancel. status: ${status}`;
        engine.log(responseTxt);
        throw error;
    }

    engine.log(`status: ${status} Request was cancelled, request ID: ${requestId}`);
}
]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * requestId は、文字型データ項目で指定
 * @param requestId
 * @return {Object}
 */
const prepareConfigs = (requestId) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box Sign',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'sign_requests.readwrite root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', auth);
    const requestIdDef = engine.createDataDefinition(
        "リクエスト ID",
        3,
        "q_requestId",
        "STRING_TEXTFIELD"
    );
    configs.putObject("conf_RequestId", requestIdDef);
    engine.setData(requestIdDef, requestId);

    return requestIdDef;
};


/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};


/**
 * リクエスト ID を指定し、値が空
 */
test("No Request ID", () => {
    prepareConfigs(null);
    assertError(main, 'Request ID is blank');
});


/**
 * POST リクエストのエラーレスポンス（エラーの原因がステータス）を準備
 * @param id
 * @return responseObj
 */
const prepareErrorResponse = (id) => {

    const responseObj = {
        "type":"error",
        "code":"bad_request",
        "status":400,
        "message":"Bad request",
        "help_url":"http://developers.box.com/docs/#errors",
        id,
        "context_info":
            {
                "errors":
                    [{"name":"detail",
	                    "message":"Signrequest already cancelled",
		                "reason":"invalid_parameter"}]
            }
    };
    return responseObj;
};


/**
 * Post リクエスト のテスト
 * @param url
 * @param method
 * @param requestId
 */
const assertPostRequest = ({ url, method }, requestId) => {
    expect(url).toEqual(`https://api.box.com/2.0/sign_requests/${requestId}/cancel`);
    expect(method).toEqual('POST');
};


/**
 * POST リクエストで失敗
 */
test("POST Failed", () => {
    prepareConfigs("12345");

    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, "12345");
        return httpClient.createHttpResponse(404, "application/json", "{}");
    });
    assertError(main, 'Failed to cancel. status: 404');
});


/**
 * 正常系 ステータスは sent、viewed など
 */
test("Success - sent viewed", () => {
    const requestIdDef = prepareConfigs("00000");
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, "00000");
        return httpClient.createHttpResponse(200, "application/json", "{}");
    });
    main();
    expect(engine.findData(requestIdDef)).toEqual("00000");
});


/**
 * キャンセル処理せずに正常終了 ステータスは declined、signed、cancelled、converting 等
 */
test("Success - 400", () => {
    const requestIdDef = prepareConfigs("45678");
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, "45678");
        return httpClient.createHttpResponse(400, 'application/json', JSON.stringify(prepareErrorResponse("45678")));
    });
    main();
    expect(engine.findData(requestIdDef)).toEqual("45678");
});

]]></test>

</service-task-definition>
