<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-04-05</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Copy Sheet</label>
<label locale="ja">Google スプレッドシート: シートコピー</label>
<summary>Copy a single Google Sheet to the same or another spreadsheet.</summary>
<summary locale="ja">Google スプレッドシートのシートを同じ、または別のスプレッドシートにコピーします。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-sheet-copy/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-sheet-copy/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SpreadSheetId" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: コピー元スプレッドシートの ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: コピーするシートのタイトル</label>
  </config>
  <config name="conf_Destination" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C4: Destination Spreadsheet ID (if blank, the same spreadsheet)</label>
    <label locale="ja">C4: コピー先スプレッドシートの ID（空白の場合、同じスプレッドシート）</label>
  </config>
  <config name="conf_NewSheetTitle" required="false" form-type="TEXTFIELD" el-enabled="true">
    <label>C5: New Sheet Title (if blank, set automatically)</label>
    <label locale="ja">C5: 新しいシートのタイトル（空白の場合、自動設定されます）</label>
  </config>
</configs>

<script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

main();
function main() {
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");

  const spreadSheetId = configs.get("conf_SpreadSheetId");
  if (spreadSheetId === "" || spreadSheetId === null) {
    throw "Source SpreadSheet ID isn't set";
  }

  const sheetTitle = configs.get("conf_SheetTitle");
  if (sheetTitle === "" || sheetTitle === null) {
    throw "Source SpreadSheet Title isn't set";
  }

  const destinationDef = configs.getObject("conf_Destination");
  let destinationSpreadsheetId = "";
  if (destinationDef === null) {
    destinationSpreadsheetId = configs.get("conf_Destination");
  } else {
    destinationSpreadsheetId = engine.findData(destinationDef);
  }

  if (destinationSpreadsheetId === "" || destinationSpreadsheetId === null) {
    destinationSpreadsheetId = spreadSheetId;
  }

  const newSheetTitle = configs.get("conf_NewSheetTitle");
  if (newSheetTitle.length > 100) {
    throw "Sheet Title is too long. It cannot be longer than 100 characters.";
  }

  //// == Calculating / 演算 ==
  const sheetId = getSheetId(oauth2, spreadSheetId, sheetTitle);

  const destinationSheetId = copySheet(
    oauth2,
    spreadSheetId,
    sheetId,
    destinationSpreadsheetId
  );

  if (newSheetTitle !== "" && newSheetTitle !== null) {
    setTitle(
      oauth2,
      destinationSpreadsheetId,
      destinationSheetId,
      newSheetTitle
    );
  }
}

/**
 * Google スプレッドシートのシート ID を取得
 * @param {String} oauth2 OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetTitle シートタイトル
 * @return {Number} sheetId シート ID
 */
function getSheetId(oauth2, spreadSheetId, sheetTitle) {
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
    spreadSheetId
  )}?includeGridData=false`;
  const response = httpClient.begin().authSetting(oauth2).get(uri);
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    engine.log(responseStr);
    throw `Failed to get sheet information. status: ${status}`;
  }
  const { properties, sheets } = JSON.parse(responseStr);
  engine.log(
    `SPREADSHEET (TITLE: ${properties.title}) has ${sheets.length} sheets`
  );
  for (let i = 0; i < sheets.length; i++) {
    if (sheets[i].properties.title === sheetTitle) {
      const sheetId = parseInt(sheets[i].properties.sheetId, 10);
      engine.log(`SHEET TITLE: ${sheetTitle} exists (id: ${sheetId})`);
      return sheetId;
    }
  }
  // error (not exist)
  throw `Sheet ${sheetTitle} does not exist`;
}

/**
 * Google スプレッドシートに新しいシートをコピー
 * @param {String} oauth2 OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetId シートの ID
 * @param {String} destinationSpreadsheetId コピー先スプレッドシート ID
 * @return {String} destinationSheetId コピー先シートの ID
 */
function copySheet(oauth2, spreadSheetId, sheetId, destinationSpreadsheetId) {
  // Method: spreadsheets.copyTo
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
    spreadSheetId
  )}/sheets/${encodeURIComponent(sheetId)}:copyTo`;

  const response = httpClient
    .begin()
    .authSetting(oauth2)
    .body(JSON.stringify({ destinationSpreadsheetId }), "application/json")
    .post(uri);

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status >= 300) {
    engine.log(`Status: ${status}`);
    engine.log(responseStr);
    throw `Failed to copy sheet.`;
  }

  engine.log("Succeeded to copy sheet");
  return JSON.parse(responseStr).sheetId;
}

/**
 * Google スプレッドシートのシート名を変更する
 * @param {String} oauth2 OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetId シートの ID
 * @param {String} newSheetTitle シートの新しいタイトル
 */
function setTitle(oauth2, spreadSheetId, sheetId, newSheetTitle) {
  // Method: spreadsheets.batchUpdate
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
    spreadSheetId
  )}:batchUpdate`;

  const requestObj = {
    requests: [
      {
        updateSheetProperties: {
          fields: "title",
          properties: {
            title: newSheetTitle,
            sheetId: sheetId,
          },
        },
      },
    ],
  };

  const response = httpClient
    .begin()
    .authSetting(oauth2)
    .body(JSON.stringify(requestObj), "application/json")
    .post(uri);

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status >= 300) {
    engine.log(`Status: ${status}`);
    engine.log(responseStr);
    throw `Failed to set sheet title.`;
  }
  engine.log("Succeeded to set sheet title");
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[
/**
 * 設定の準備
 * @param spreadSheetId
 * @param sheetTitle
 * @param destinationSpreadsheetId
 * @param newSheetTitle
 */
const prepareConfigs = (
  spreadSheetId,
  sheetTitle,
  destinationSpreadsheetId,
  newSheetTitle
) => {
  configs.put("conf_OAuth2", "Google");
  configs.put("conf_SpreadSheetId", spreadSheetId);
  configs.put("conf_SheetTitle", sheetTitle);
  // コピー先スプレッドシートの ID を設定した文字型データ項目（単一行）を準備
  const destinationDef = engine.createDataDefinition(
    "コピー先スプレッドシートの ID",
    1,
    "q_destination",
    "STRING_TEXTFIELD"
  );
  engine.setData(destinationDef, destinationSpreadsheetId);
  configs.putObject("conf_Destination", destinationDef);
  configs.put("conf_NewSheetTitle", newSheetTitle);
};

/**
 * シート名が長すぎる
 */
test("Sheet Title Length > 100", () => {
  const newSheetName = "a".repeat(101); // 101 文字
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", newSheetName);
  // <script> のスクリプトを実行し、エラーがスローされることを確認
  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith("Sheet Title is too long. It cannot be longer than 100 characters.");
  }
});

const SAMPLE_GET_1 = {
  spreadsheetId: "spreadsheet-1",
  properties: {
    "title": "スプレッドシート 1"
  },
  sheets: [
    {
      properties: {
        sheetId: 0,
        title: "シート 1",
        index: 0,
        sheetType: "GRID",
        gridProperties: {
          rowCount: 1000,
          columnCount: 26,
        },
      },
    },
    {
      properties: {
        sheetId: 1,
        title: "シート 2",
        index: 1,
        sheetType: "GRID",
        gridProperties: {
          rowCount: 1000,
          columnCount: 26,
        },
      },
    },
  ],
  spreadsheetUrl:
    "https://docs.google.com/spreadsheets/d/spreadsheet-1/edit?ouid=12345678",
};

const SAMPLE_GET_2 = {
  spreadsheetId: "spreadsheet-2",
  properties: {
    "title": "スプレッドシート 2"
  },
  sheets: [
    {
      properties: {
        sheetId: 2,
        title: "シート 1",
        index: 0,
        sheetType: "GRID",
        gridProperties: {
          rowCount: 1000,
          columnCount: 26,
        },
      },
    }
  ],
  spreadsheetUrl:
    "https://docs.google.com/spreadsheets/d/spreadsheet-2/edit?ouid=12345678",
};

const SAMPLE_POST_1 = {
  "sheetId": 1234567,
  "title": "シート 1 のコピー",
  "index": 10,
  "sheetType": "GRID",
  "gridProperties": {
    "rowCount": 150001,
    "columnCount": 26
  }
};

const SAMPLE_POST_2 = {
  "sheetId": 7654321,
  "title": "シート 2 のコピー",
  "index": 10,
  "sheetType": "GRID",
  "gridProperties": {
    "rowCount": 150001,
    "columnCount": 26
  }
};

/**
 * GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param spreadSheetId
 */
const assertGetRequest = (
  { url, method },
  spreadSheetId
) => {
  expect(url).toEqual(
    `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
      spreadSheetId
    )}?includeGridData=false`
  );
  expect(method).toEqual("GET");
};

/**
 * シートコピーの POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetId
 * @param destinationSpreadsheetId
 */
const assertCopySheetRequest = (
  { url, method, contentType, body },
  spreadSheetId,
  sheetId,
  destinationSpreadsheetId
) => {
  expect(url).toEqual(
    `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
      spreadSheetId
    )}/sheets/${encodeURIComponent(sheetId)}:copyTo`
  );
  expect(method).toEqual("POST");
  expect(contentType).toEqual("application/json; charset=UTF-8");
  const bodyObj = JSON.parse(body);
  expect(bodyObj).toEqual({destinationSpreadsheetId});
};

/**
 * シート名変更の POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetId
 * @param newSheetTitle
 */
const assertSetTitleRequest = (
  { url, method, contentType, body },
  spreadSheetId,
  sheetId,
  newSheetTitle
) => {
  expect(url).toEqual(
    `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
      spreadSheetId
    )}:batchUpdate`
  );
  expect(method).toEqual("POST");
  expect(contentType).toEqual("application/json; charset=UTF-8");
  const bodyObj = JSON.parse(body);
  expect(bodyObj.requests[0].updateSheetProperties.fields).toEqual("title");
  expect(bodyObj.requests[0].updateSheetProperties.properties.title).toEqual(newSheetTitle);
  expect(bodyObj.requests[0].updateSheetProperties.properties.sheetId).toEqual(sheetId);
};

/**
 * GET リクエストで失敗
 */
test('Fail in 1st Request', () => {
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", "新しいシート");

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, "spreadsheet-1");
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to get sheet information. status: 400');
  }
});

/**
 * GET リクエストには成功するが、シートが存在しない
 */
test('Sheet does not exist', () => {
  prepareConfigs("spreadsheet-1", "存在しないシート", "spreadsheet-2", "新しいシート");

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, "spreadsheet-1");
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
  });

  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Sheet 存在しないシート does not exist');
  }
});

/**
 * シートコピーの POST リクエストで失敗
 */
test('Fail in 2nd Request', () => {
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", "新しいシート");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    assertCopySheetRequest(request, "spreadsheet-1", 0, "spreadsheet-2");
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to copy sheet.');
  }
});

/**
 * シート名変更の POST リクエストで失敗
 */
test('Fail in 3rd Request', () => {
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", "新しいシート");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    if (reqCount === 1) {
      assertCopySheetRequest(request, "spreadsheet-1", 0, "spreadsheet-2");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_1));
    }
    assertSetTitleRequest(request, "spreadsheet-2", 1234567, "新しいシート");
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  try {
    execute();
    fail('not come here');
  } catch (e) {
    expect(e.message).endsWith('Failed to set sheet title.');
  }
});

/**
 * シートコピー成功の場合 - コピー先スプレッドシート、新しいシートのタイトルを指定
 * コピー先スプレッドシートの指定は文字型データ項目
 * コピー元シートはひとつ目のシート
 */
test("Success - Set Destination and New Sheet Title", () => {
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", "新しいシート");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    if (reqCount === 1) {
      assertCopySheetRequest(request, "spreadsheet-1", 0, "spreadsheet-2");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_1));
    }
    assertSetTitleRequest(request, "spreadsheet-2", 1234567, "新しいシート");
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * シートコピー成功の場合 - コピー先スプレッドシートを指定しない場合
 * コピー先スプレッドシートの指定は文字型データ項目
 * コピー元シートはふたつ目のシート
 */
test("Success - without Destination", () => {
  prepareConfigs("spreadsheet-1", "シート 2", null, "新しいシート");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    if (reqCount === 1) {
      assertCopySheetRequest(request, "spreadsheet-1", 1, "spreadsheet-1"); // コピー先はコピー元と同じ
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_2));
    }
    assertSetTitleRequest(request, "spreadsheet-1", 7654321, "新しいシート");
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * シートコピー成功の場合 - 新しいシートのタイトルは自動設定
 */
test("Success - without New Sheet Title", () => {
  prepareConfigs("spreadsheet-1", "シート 1", "spreadsheet-2", "");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_1));
    }
    assertCopySheetRequest(request, "spreadsheet-1", 0, "spreadsheet-2");
    return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_1));
    // シート名変更のリクエストは送信されない
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * シートコピー成功の場合 - コピー先スプレッドシートの ID を固定値で指定
 */
test("Success - Destination set as fixed value", () => {
  prepareConfigs("spreadsheet-2", "シート 1", null, "新しいシート 2");
  configs.put("conf_Destination", "spreadsheet-1");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-2");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
    }
    if (reqCount === 1) {
      assertCopySheetRequest(request, "spreadsheet-2", 2, "spreadsheet-1");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_1));
    }
    assertSetTitleRequest(request, "spreadsheet-1", 1234567, "新しいシート 2");
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });

  // <script> のスクリプトを実行
  execute();
});

/**
 * シートコピー成功の場合 - コピー先スプレッドシートの ID を固定値で指定し、空
 */
test("Success - without Destination, fixed value", () => {
  prepareConfigs("spreadsheet-2", "シート 1", null, "新しいシート 2");
  configs.put("conf_Destination", "");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "spreadsheet-2");
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET_2));
    }
    if (reqCount === 1) {
      assertCopySheetRequest(request, "spreadsheet-2", 2, "spreadsheet-2"); // コピー先はコピー元と同じ
      reqCount++;
      return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST_1));
    }
    assertSetTitleRequest(request, "spreadsheet-2", 1234567, "新しいシート 2");
    return httpClient.createHttpResponse(200, 'application/json', '{}');
  });

  // <script> のスクリプトを実行
  execute();
});

]]></test>

</service-task-definition>