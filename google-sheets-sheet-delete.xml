<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-11-15</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Delete Sheet</label>
<label locale="ja">Google スプレッドシート: シート削除</label>
<summary>Delete a single sheet in a Google Sheet. When the Google Sheet has only one sheet, it cannot be deleted.</summary>
<summary locale="ja">Google スプレッドシートのシートを削除します。ただし、スプレッドシートにシートが 1 つしかない場合は削除できません。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-google-sheets-sheet-delete/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-google-sheets-sheet-delete/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SpreadSheetId" required="true" form-type="TEXTFIELD">
    <label>C2: Spreadsheet ID</label>
    <label locale="ja">C2: スプレッドシートの ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD" el-enabled="true">
    <label>C3: Sheet Title to delete</label>
    <label locale="ja">C3: 削除するシートのタイトル</label>
  </config>
</configs>

<script><![CDATA[
// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

main();
function main() {
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const spreadSheetId = configs.get("conf_SpreadSheetId");
  const sheetTitle = configs.get("conf_SheetTitle");
  if (sheetTitle === "" || sheetTitle === null) {
    throw "Sheet Title is empty.";
  }
  
  //// == Calculating / 演算 ==
  const sheetId = getSheetId(oauth2, spreadSheetId, sheetTitle);
  
  deleteSheet(
    oauth2,
    spreadSheetId,
    sheetId,
  );
}

/**
 * Google スプレッドシートのシート ID を取得
 * @param {String} oauth2 OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetTitle シートタイトル
 * @return {Number} sheetId シート ID
 */
function getSheetId(oauth2, spreadSheetId, sheetTitle) {
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
    spreadSheetId
  )}?includeGridData=false`;
  const response = httpClient.begin().authSetting(oauth2).get(uri);
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    engine.log(responseStr);
    throw `Failed to get sheet information. status: ${status}`;
  }
  const { properties, sheets } = JSON.parse(responseStr);
  for (let i = 0; i < sheets.length; i++) {
    if (sheets[i].properties.title === sheetTitle) {
      const sheetId = parseInt(sheets[i].properties.sheetId, 10);
      return sheetId;
    }
  }
  // error (not exist)
  throw `Sheet ${sheetTitle} does not exist`;
}

/**
 * Google スプレッドシートのシートを削除
 * @param {String} oauth2 OAuth2 認証設定
 * @param {String} spreadSheetId スプレッドシートの ID
 * @param {String} sheetId シートの ID
 */
function deleteSheet(oauth2, spreadSheetId, sheetId) {
  // Method: spreadsheets.batchUpdate
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
    spreadSheetId
  )}:batchUpdate`;

  const requestObj = {
    requests: [
      {
        deleteSheet: {
          sheetId: sheetId
        }
      }
    ]
  };  
  
  const response = httpClient
    .begin()
    .authSetting(oauth2)
    .body(JSON.stringify(requestObj), "application/json")
    .post(uri);

  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status >= 300) {
    engine.log(responseStr);
    throw `Failed to delete sheet. status: ${status}`;
  }

  return;
}


]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

<test><![CDATA[

const SAMPLE_GET = {
  "spreadsheetId": "abc123",
  "sheets": [
    {
      "properties": {
        "sheetId": 0,
        "title": "シート1",
        "index": 0,
        "sheetType": "GRID",
        "gridProperties": {
          "rowCount": 1000,
          "columnCount": 26
        }
      }
    },
    {
      "properties": {
        "sheetId": 1,
        "title": "シート2",
        "index": 1,
        "sheetType": "GRID",
        "gridProperties": {
          "rowCount": 1000,
          "columnCount": 26
        }
      }
    }
  ],
  "spreadsheetUrl": "https://docs.google.com/spreadsheets/d/abc123/edit?ouid=102859041491136123607"
}

const SAMPLE_POST = {
  "spreadsheetId": "abc123",
  "replies": [
    {}
  ]
}

/**
 * 設定の準備
 * @param configs
 * @param spreadSheetId
 * @param sheetTitle
 */
const prepareConfigs = (configs, spreadSheetId, sheetTitle) => {
    configs.put('conf_OAuth2', 'Google');
    configs.put('conf_SpreadSheetId', spreadSheetId);
    configs.put('conf_SheetTitle', sheetTitle);
    
};

/**
 * conf_SheetTitle が、空でエラーになる場合
 */
test('Sheet Title is blank', () => {
    prepareConfigs(configs, 'abc123', '');
    
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Sheet Title is empty.');
    }
});

/**
 * GET リクエストのテスト（Google スプレッドシートのシート ID を取得）
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param spreadSheetId
 */
const assertGetRequest = ({url, method}, spreadSheetId) => {
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
        spreadSheetId
        )}?includeGridData=false`);
    expect(method).toEqual('GET');
};

/**
 * POST リクエストのテスト (Google スプレッドシートのシートを削除)
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param spreadSheetId
 * @param sheetId
 */
const assertPostRequest = ({url, method, contentType, body}, spreadSheetId, sheetId) => {
    expect(url).toEqual(`https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(
        spreadSheetId
        )}:batchUpdate`);
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.requests[0].deleteSheet.sheetId).toEqual(sheetId);
};

/**
 * シート削除成功の場合
 */
test('Success', () => {
    prepareConfigs(configs, 'abc123', 'シート1');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertPostRequest(request, 'abc123', 0);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_POST));
    });
    
    execute();
});

/**
 * Google Sheets への GET API リクエストでエラー 
 */
 test('GET Failed', () => {
    prepareConfigs(configs, 'abc123', 'シート1');
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'abc123');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to get sheet information. status: 400');
    }
});

/**
 * Box への POST API リクエストでエラー 
 */
 test('POST Failed', () => {
    prepareConfigs(configs, 'abc123', 'シート1');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetRequest(request, 'abc123');
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
        }
        assertPostRequest(request, 'abc123', 0);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Failed to delete sheet. status: 400');
    }
});

/**
 * Google Sheets に指定したシートのタイトルがない
 */
test('Sheet Title dose not exist', () => {
    prepareConfigs(configs, 'abc123', 'シート3');
    
    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'abc123');
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(SAMPLE_GET));
    });
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Sheet シート3 does not exist');
    }
});

]]></test>
</service-task-definition>