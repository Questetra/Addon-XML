<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Amazon Bedrock: Stability.ai Diffusion: Image Generation</label>
    <label locale="ja">Amazon Bedrock: Stability.ai Diffusion: 画像生成</label>
    <!--    <last-modified>2023-11-30</last-modified> -->
    <license>(C) Questetra, Inc. (MIT License)</license>
    <!--
    <summary>This item uploads files to the specified folder on Amazon S3.</summary>
    <summary locale="ja">この工程は、Amazon S3 の指定フォルダにファイルをアップロードします。</summary> -->
    <!--
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-aws-bedrock-anthropic-claude-chat/</help-page-url>
    -->
    <configs>
        <config name="conf_AccessKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: Access Key</label>
            <label locale="ja">C1: アクセスキー</label>
        </config>
        <config name="conf_SecretKey" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C2: Secret Access Key</label>
            <label locale="ja">C2: シークレットアクセスキー</label>
        </config>
        <config name="conf_Region" required="true" form-type="TEXTFIELD">
            <label>C3: Region Code</label>
            <label locale="ja">C3: リージョンコード</label>
        </config>
        <config name="conf_Message" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C1: Text Prompt</label>
            <label locale="ja">C1: テキストプロンプト</label>
        </config>
        <config name="conf_Negative" el-enabled="true" form-type="TEXTFIELD">
            <label>C1: Negative Prompt</label>
            <label locale="ja">C1: ネガティブプロンプト</label>
        </config>
        <config name="conf_Size" form-type="SELECT_ITEM">
            <label>C2-a: 画像サイズ</label>
            <label locale="ja">C2-b: Image Size</label>
            <item value="1024x1024">
                <label>1024x1024</label>
            </item>
            <item value="1152x896">
                <label>1152x896</label>
            </item>
            <item value="1216x832">
                <label>1216x832</label>
            </item>
            <item value="1344x768">
                <label>1344x768</label>
            </item>
            <item value="1536x640">
                <label>1536x640</label>
            </item>
            <item value="640x1536">
                <label>640x1536</label>
            </item>
            <item value="768x1344">
                <label>768x1344</label>
            </item>
            <item value="832x1216">
                <label>832x1216</label>
            </item>
            <item value="896x1152">
                <label>896x1152</label>
            </item>
        </config>
        <config name="conf_InitImage" form-type="SELECT" select-data-type="FILE">
            <label>C2-b: Data item to store base image file</label>
            <label locale="ja">C2-a: ベースとする画像ファイルを保持するデータ項目</label>
        </config>
        <config name="conf_Style" form-type="SELECT_ITEM">
            <label>C3: 画像スタイル</label>
            <label locale="ja">C3: Image Style</label>
            <item value="3d-model">
                <label>3d-model</label>
            </item>
            <item value="analog-film">
                <label>analog-film</label>
            </item>
            <item value="anime">
                <label>anime</label>
            </item>
            <item value="cinematic">
                <label>cinematic</label>
            </item>
            <item value="comic-book">
                <label>comic-book</label>
            </item>
            <item value="digital-art">
                <label>digital-art</label>
            </item>
            <item value="enhance">
                <label>enhance</label>
            </item>
            <item value="fantasy-art">
                <label>fantasy-art</label>
            </item>
            <item value="isometric">
                <label>isometric</label>
            </item>
            <item value="line-art">
                <label>line-art</label>
            </item>
            <item value="low-poly">
                <label>low-poly</label>
            </item>
            <item value="modeling-compound">
                <label>modeling-compound</label>
            </item>
            <item value="neon-punk">
                <label>neon-punk</label>
            </item>
            <item value="origami">
                <label>origami</label>
            </item>
            <item value="photographic">
                <label>photographic</label>
            </item>
            <item value="pixel-art">
                <label>pixel-art</label>
            </item>
            <item value="tile-texture">
                <label>tile-texture</label>
            </item>
        </config>
        <config name="conf_Seed" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C4: Data item that stores / to save the seed</label>
            <label locale="ja">C4: シードを保持している／保存するデータ項目</label>
        </config>
        <config name="conf_File" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C5: Data item to save generated file</label>
            <label locale="ja">C5: 生成されたファイルを保存するデータ項目</label>
        </config>
        <config name="conf_FileName" form-type="TEXTFIELD" required="true" el-enabled="true">
            <label>C6: Saving file name</label>
            <label locale="ja">C6: 保存ファイル名</label>
        </config>
    </configs>
    <script><![CDATA[
const MODEL = "stability.stable-diffusion-xl-v1";
const SERVICE = "bedrock";

function main() {
    ////// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const awsKey = configs.getObject("conf_AccessKey").getToken();
    const awsSecret = configs.getObject("conf_SecretKey").getToken();
    const region = retrieveRegion();
    const payload = buildPayload();
    const fileName = configs.get("conf_FileName");

    ////// == 演算 / Calculating ==
    const { generatedFile, seed } = generateImage(awsKey, awsSecret, region, payload, fileName);

    ////// == ワークフローデータへの代入 / Data Updating ==
    saveFileData('conf_File', generatedFile);
    saveData('conf_Seed', seed);
}

/**
 * config からリージョンコードを読み出す
 * リージョンコードの形式として不正な場合はエラー
 * @return {String}
 */
const retrieveRegion = () => {
    const region = configs.get("conf_Region");
    // 今後リージョンが増えることも考えて、中央の最大文字数には余裕をみている
    const reg = new RegExp("^[a-z]{2}-[a-z]{4,16}-[1-9]$");
    if (!reg.test(region)) {
        throw new Error("Region Code is invalid.");
    }
    return region;
}

/**
 * config から API リクエストのボティにセットするパラメータを読み出し、
 * ペイロードを構築する
 * @return {Object}
 */
const buildPayload = () => {
    // cfg_scale / steps は stability.ai のデフォルト値で行く
    const payload = {
        text_prompts: retrieveTextPrompts(),
        seed: retrieveSeed(),
        style_preset: retrieveStyle()
    };

    const initImage = retrieveInitImage();
    const size = retrieveImageSize();
    if (initImage !== null) {
        Object.assign(payload, {
            init_image: initImage
        });
    } else if (size !== null) { // init_image がある場合は size は無視される
        Object.assign(payload, {
            width: size.width,
            height: size.height
        });
    }
    return payload;
}

/**
 * config からテキストプロンプトとネガティブプロンプトを読み出す
 * @return {Array}
 */
const retrieveTextPrompts = () => {
    const message = configs.get('conf_Message');
    const negative = configs.get('conf_Negative');

    const prompts = [{
        text: message,
        weight: 1.0
    }];
    if (negative !== '') {
        prompts.push({
            text: negative,
            weight: -0.5
        });
    }
    return prompts;
};

/**
 * config から画像サイズを読み出す
 * @return {Object} {width, height}
 */
const retrieveImageSize = () => {
    const size = configs.get("conf_Size");
    if (size === "") {
        return null;
    }
    const width = Number.parseInt(size.split("x")[0]);
    const height = Number.parseInt(size.split("x")[1]);
    return {
        width,
        height
    };
};

/**
 * config からベースとする画像を読み出し、base64 エンコードして返す
 * @return {String} base64 エンコードされた画像
 */
const retrieveInitImage = () => {
    const imageDef = configs.getObject("conf_InitImage");
    if (imageDef === null) {
        return null;
    }
    const images = engine.findData(imageDef);
    if (images === null) {
        return null;
    }
    if (images.size() !== 1) {
        throw new Error("Initial image must be one.");
    }
    const image = images.get(0);
    return base64.encodeToString(fileRepository.readFile(image));
};

/**
 * config から画像スタイルを読み出す
 * @return {String}
 */
const retrieveStyle = () => {
    const style = configs.get("conf_Style");
    if (style === "") {
        return undefined;
    }
    return style;
};

/**
 * config からシードを読み出す
 * @return {Number}
 */
const retrieveSeed = () => {
    const seedDef = configs.getObject("conf_Seed");
    if (seedDef === null) {
        return undefined;
    }
    const seed = engine.findData(seedDef);
    if (seed === null) {
        return undefined;
    }
    let seedNum;
    try {
        seedNum = Number.parseInt(seed);
    } catch (e) {
        throw new Error("Invalid seed integer.");
    }
    if (seedNum < 0 || seedNum > 4294967295) {
        throw new Error("Invalid seed integer.");
    }
    return seedNum;
};

/**
 * 画像を生成する API リクエストを送信
 * @param awsKey
 * @param awsSecret
 * @param region
 * @param payload
 * @param fileName
 * @return {Object} {generatedFile: NewQfile, seed: String}
 */
const generateImage = (awsKey, awsSecret, region, payload, fileName) => {
    const URL = `https://bedrock-runtime.${region}.amazonaws.com/model/${MODEL}/invoke`;
    const response = httpClient.begin()
        .awsSignV4(awsKey, awsSecret, region, SERVICE)
        .body(JSON.stringify(payload), "application/json")
        .post(URL);

    const status = response.getStatusCode();
    const respTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(respTxt);
        throw new Error(`Failed to invoke model. status: ${status}`);
    }

    const {artifacts} = JSON.parse(respTxt);
    engine.log(JSON.stringify(Object.assign({}, artifacts[0], { // base64 以外の値をログ出力
        base64: undefined
    })));
    const image = base64.decodeFromStringToByteArray(artifacts[0].base64);
    const generatedFile = new com.questetra.bpms.core.event.scripttask.NewQfile(
        fileName,
        "image/png",
        image
    );
    const seed = String(artifacts[0].seed)
    return { generatedFile, seed };
};

/**
 * データ項目への保存
 * @param configName
 * @param newFile
 */
const saveFileData = (configName, newFile) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    let files = engine.findData(def);
    if (files === null) {
        files = new java.util.ArrayList();
    }
    files.add(newFile);
    engine.setData(def, files);
};

/**
 * データ項目への保存
 * @param configName
 * @param data
 */
const saveData = (configName, data) => {
    const def = configs.getObject(configName);
    if (def === null) {
        return;
    }
    engine.setData(def, data);
};

    ]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAABE9JREFUWEfN
        l3tMlWUcxz/v4SCXA38gtyPTiXo2m8YdEp3cUzGxOdw0E5tRNqlsMDGlRRE5kFJjqUDLKEJsYuCN
        xD8qA5oMGeBhXpIdbiuRrORSkOKBt71vHuIcDnRU2un5893v8nl/z/f3e55HwMpLsDS/V1CQo6Pe
        MR6EKBECAG/A5b5/D9AhQBOI5weVg+VdDQ2DlsT+VwDvBZFqpXJkpyiwFbC3JChwRxAp0OsVOR1X
        v+uezGdSgLl+YVtB2CuAysLERmYiDICY2qatKZjIf0IAjX9EniiKSQ+T2NRHEIR83aWql83FMgug
        8Q8vEUWenYrkhhiCwFHdpeqN4+BMP0zln1tSCaMKSHsuIORP5Z+bxhIRk8ZqYhRAUrvCdkT3sIKz
        FFoS5sg9hcbQHaMAGt/wD0SBZEsDPYqdIJKra65OkWLIANKQcdCrfjPt85zMXcTGRGCjtGFo6B6f
        lRwnfMkibv58i2073ubwwRw8Pdx4bUcGcbHRrIlbQfnpc2xcvwZnJxV37w6Rd7iYwuJSU947fyoH
        XKVhJQNo/MISRIRiU6uQQF96evvRtXXw8YE9eKk9adG147NwPum79/Hum9txUqnI2nuQVSuiUXu6
        09f/OwqFgoQtycya6SWH/PGnrnEFExA36bQ1R+4DhH8iQqKp1aJgf57bsJaZXmpEUcTe3o6S0lO8
        tHkDpScqeGp5FPrhYWrrGglbEkJ9YzNKpZLVK2PQtXVypvJrjpVXMDAwfioLUKjTVr8gA8zzC2/k
        7/k+uubMnkVBbha9fX18efIsq2JjUHu48Xp6Nvuz07n1y69Ms53GjZvduLtNZ4bak4MfFVF2upLl
        0WGsfXoli58I5JuqC6SkZZqTTFOrtjrQAHB7zMEiG0vO72Wmcb6mls+/KCd3z1s4ONjz4qs72ZWS
        xJLQICrOfUvXzW6eT1jHja5unkncxrKopVy+2iLrpCh/H38MDLA5KdUcQE+rtnq6AUA0Z7E7PZWV
        yyLR6/VcbNDi4e5Kbl4hPgvmy1tTeKSU1vZOMtJSqG/UytU58P47LF0cwjRbW2739PJhwaccP3nW
        bNO0aquFSQEepdUs8R0LMG4LUrdtoa5BS82Fi5bEMrKRxCkJVaqYnZ0dZacqydp3yDSO0RaME6HU
        AW9sf0Uuf+mJr2Q1P8haHx/HDLUHi4IDaL58jez9eabu/4hQ42e+DVUqRzJ2JbMseinDwyNcu66j
        SXuFKz+0UFNbP9pekl3Y4hCCA3zxffwx5s2ZTW9fP8fKzrDiyQhZB1Xf1xkBGLXhRIPI4KGZ603i
        pnVEhoXi6uKCjY3CbDGkyXdd1yYnlioWvzoWZ2cVRUfLJh9EE41ic1mkaRcaEoC/z0KcVI6yia69
        k+strXLLWriMR7HkZNXDSAKw+nEsQVj1QjIquCm8jJrqwdzl9P93Kf0vKvHA13IDhFUfJgYIqz7N
        xorIao9TCyfbQ5v9BWbg5jDAzldXAAAAAElFTkSuQmCC
    </icon>

    <test><![CDATA[
]]></test>
</service-task-definition>