<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-11-28</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Delete Shared Link of File</label>
    <label locale="ja">Box: ファイル共有リンク削除</label>
    <summary>This item deletes a Shared Link URL of the specified file on Box. An error will occur if there is no shared
        link.
    </summary>
    <summary locale="ja">この工程は、Box 上の指定ファイルの共有リンク URL を削除します。共有リンクが無い場合は、エラーとなります。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-file-link-delete/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-file-link-delete/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C2: File ID to delete Shared Link</label>
            <label locale="ja">C2: 共有リンクを削除するファイルの ID</label>
        </config>
    </configs>

    <script><![CDATA[
main();
function main() {
  const oauth2 = configs.get("conf_OAuth2");
  const fileId = decideFileId();
  checkExistingSharedLink(oauth2, fileId);
  deleteSharedLink(oauth2, fileId);
}

/**
 * ファイルのIDをconfigから読み出して出力する。
 * @return {String} fileId ファイルの ID
 */
function decideFileId() {
  let fileId = "";
  const fileIdDef = configs.getObject("conf_FileId");
  if (fileIdDef === null) {
    fileId = configs.get("conf_FileId");
  } else {
    fileId = engine.findData(fileIdDef);
  }
  if (fileId === "" || fileId === null) {
    throw "File ID is blank";
  }
  return fileId;
}

/**
 * ファイルに共有リンクが作成されているか調べ、無い場合はエラーにする
 * @param {String} oauth OAuth2 設定
 * @param {String} fileId ファイルの ID
 */
function checkExistingSharedLink(oauth2, fileId) {
  const url = `https://api.box.com/2.0/files/${fileId}?fields=shared_link`;
  const response = httpClient.begin().authSetting(oauth2).get(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 200) {
    engine.log(responseTxt);
    throw `Failed to get file information. status:${status}`;
  }
  const jsonRes = JSON.parse(responseTxt);

  if (jsonRes.shared_link === null) {
    throw `Failed to Delete Shared Link. \n The file(ID:${fileId}) doesn't have a Shared link.`;
  }
}

/**
 * Delete Shared Link to File on Box 共有リンク削除
 * @param {String} oauth2 OAuth2 設定
 * @param {String} fileId 共有リンクを削除したいファイルのID
 */
function deleteSharedLink(oauth2, fileId) {
  const jsonBody = {};
  jsonBody["shared_link"] = null;

  const url = `https://api.box.com/2.0/files/${fileId}?fields=shared_link`;
  const response = httpClient
    .begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonBody), "application/json; charset=UTF-8")
    .put(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  if (status !== 200) {
    const error = `Failed to delete. status:${status}`;
    engine.log(responseTxt);
    throw error;
  }
  engine.log(`status: ${status} Shared Link was deleted, file ID: ${fileId}`);
}
]]></script>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[
/**
 * 共有リンクがあるサンプル
 */
const HAS_SHARED_LINK = {
  id: 12345,
  type: "file",
  etag: 1,
  name: "Contracts",
  sequence_id: 3,
  shared_link: {
    access: "open",
    download_count: 3,
    download_url: "https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg",
    effective_access: "company",
    effective_permission: "can_download",
    is_password_enabled: true,
    permissions: {
      can_download: true,
      can_preview: true,
    },
    preview_count: 3,
    unshared_at: "2018-04-13T13:53:23-07:00",
    url: "https://www.box.com/s/vspke7y05sb214wjokpk",
    vanity_name: "my_url",
    vanity_url: "https://acme.app.box.com/v/my_url/",
  },
};

/**
 * 共有リンクがないサンプル
 */
const NO_SHARED_LINK = {
  id: 12345,
  type: "file",
  etag: 1,
  name: "Contracts",
  sequence_id: 3,
  shared_link: null,
};

/**
 * 設定の準備
 * FileId は、文字型データ項目で指定
 * @param configs
 * @param FileId
 * @return {Object}
 */
const prepareConfigs = (configs, fileId) => {
  configs.put("conf_OAuth2", "Box");
  const fileIdDef = engine.createDataDefinition(
    "ファイル ID",
    3,
    "q_fileId",
    "STRING_TEXTFIELD"
  );
  configs.putObject("conf_FileId", fileIdDef);
  engine.setData(fileIdDef, fileId);

  return fileIdDef;
};

/**
 * GET リクエストのテスト
 * @param url
 * @param method
 * @param fileId
 */
const assertGetRequest = ({ url, method }, fileId) => {
  expect(url).toEqual(
    `https://api.box.com/2.0/files/${fileId}?fields=shared_link`
  );
  expect(method).toEqual("GET");
};

/**
 * PUT リクエストのテスト
 * @param url
 * @param method
 * @param contentType
 * @param body
 * @param fileId
 */
const assertPutRequest = ({ url, method, contentType, body }, fileId) => {
  expect(url).toEqual(
    `https://api.box.com/2.0/files/${fileId}?fields=shared_link`
  );
  expect(method).toEqual("PUT");
  expect(contentType).toEqual("application/json; charset=UTF-8");
  const bodyObj = JSON.parse(body);
  expect(bodyObj.shared_link).toEqual(null);
};

test("Success / fileId specified by String Data", () => {
  const fileIdDef = prepareConfigs(configs, "12345");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "12345");
      reqCount++;
      return httpClient.createHttpResponse(
        200,
        "application/json",
        JSON.stringify(HAS_SHARED_LINK)
      );
    }
    assertPutRequest(request, "12345");
    return httpClient.createHttpResponse(
      200,
      "application/json",
      JSON.stringify(NO_SHARED_LINK)
    );
  });

  execute();

  expect(engine.findData(fileIdDef)).toEqual("12345");
});

/**
 * 正常系 / 固定値で指定されたファイル ID
 */
test("Success / fileID specified with fixed value", () => {
  configs.put("conf_OAuth2", "Box");
  configs.put("conf_FileId", "98765");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "98765");
      reqCount++;
      return httpClient.createHttpResponse(
        200,
        "application/json",
        JSON.stringify(HAS_SHARED_LINK)
      );
    }
    assertPutRequest(request, "98765");
    return httpClient.createHttpResponse(
      200,
      "application/json",
      JSON.stringify(NO_SHARED_LINK)
    );
  });

  execute();
});

/**
 * ファイル ID が null
 */
test("FileID is null", () => {
  prepareConfigs(configs, null);

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith("File ID is blank");
  }
});

/**
 * ファイル ID が空白
 */
test("FileID is blank", () => {
  configs.put("conf_OAuth2", "Box");
  configs.put("conf_FileId", "");

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith("File ID is blank");
  }
});

/**
 * GET が失敗
 */
test("GET Failed", () => {
  prepareConfigs(configs, "12345");

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, "12345");
    return httpClient.createHttpResponse(400, "application/json", "{}");
  });

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith(
      "Failed to get file information. status:400"
    );
  }
});

/**
 * 共有リンクがない
 */
test("No shared link", () => {
  prepareConfigs(configs, "12345");

  httpClient.setRequestHandler((request) => {
    assertGetRequest(request, "12345");
    return httpClient.createHttpResponse(
      200,
      "application/json",
      JSON.stringify(NO_SHARED_LINK)
    );
  });

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith(
      "Failed to Delete Shared Link. \n The file(ID:12345) doesn't have a Shared link."
    );
  }
});

/**
 * PUT 失敗
 */
test("PUT Failed", () => {
  prepareConfigs(configs, "12345");

  let reqCount = 0;
  httpClient.setRequestHandler((request) => {
    if (reqCount === 0) {
      assertGetRequest(request, "12345");
      reqCount++;
      return httpClient.createHttpResponse(
        200,
        "application/json",
        JSON.stringify(HAS_SHARED_LINK)
      );
    }
    assertPutRequest(request, "12345");
    return httpClient.createHttpResponse(400, "application/json", "{}");
  });

  try {
    execute();
    fail("not come here");
  } catch (e) {
    expect(e.message).endsWith("Failed to delete. status:400");
  }
});
]]></test>

</service-task-definition>
