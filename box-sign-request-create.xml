<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2022-04-07</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Box Sign: Create Sign Request</label>
<label locale="ja">Box Sign: 署名リクエスト作成</label>
<summary>Create a signing document from the specified file on Box and send a sign request.</summary>
<summary locale="ja">Box 上のファイルから署名用ドキュメントを作成し、署名リクエストを送信します。</summary>
<help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-sign-request-create/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-sign-request-create/</help-page-url>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://app.box.com/api/oauth2/sign_requests.readwrite">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SourceFileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C2: Source File ID to create a signing document from</label>
    <label locale="ja">C2: 署名用ドキュメントの作成元ファイル ID</label>
  </config>
  <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder ID to save the signing document (Root cannot be used)</label>
    <label locale="ja">C3: 署名用ドキュメントを保存するフォルダ ID (ルートフォルダは使用できません)</label>
  </config>
  <config name="conf_EmailAddress" required="true" form-type="SELECT" select-data-type="STRING">
    <label>C4: Email Addresses of the signers (Write one per line)</label>
    <label locale="ja">C4: 署名者メールアドレス (複数設定する場合、1件ごとに改行してください)</label>
  </config>
  <config name="conf_Password" form-type="SELECT" select-data-type="STRING">
    <label>C5: Passwords for each signer (Write one per line)</label>
    <label locale="ja">C5: 署名者ごとのパスワード (1件ごとに改行してください)</label>
  </config>
  <config name="conf_EmailSubject" form-type="TEXTFIELD" el-enabled="true">
    <label>C6: Email Subject (Default subject if blank)</label>
    <label locale="ja">C6: 送信されるメールの件名 (空白の場合、デフォルトの件名が使用されます)</label>
  </config>
  <config name="conf_EmailMessage" form-type="TEXTAREA" el-enabled="true">
    <label>C7: Message to include in the email (Default message if blank)</label>
    <label locale="ja">C7: メール本文に含めるメッセージ (空白の場合、デフォルトの文面が使用されます)</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://account.box.com/api/oauth2/authorize
// - Token Endpoint URL: https://api.box.com/oauth2/token
// - Scope: sign_requests.readwrite root_readwrite
// - Consumer Key: (Get by Box Developer Console)
// - Consumer Secret: (Get by Box Developer Console)

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const oauth2 = configs.get('conf_OAuth2');
  const fileId = decideEditable('conf_SourceFileId', 'Source File ID');
  const folderId = decideEditable('conf_FolderId', 'Folder ID');
  if (folderId === '0') {
    throw 'Root folder cannot be used.';
  }
  const signers = retrieveSigners();
  const subject = configs.get('conf_EmailSubject');
  const message = configs.get('conf_EmailMessage');

  //// == 演算 / Calculating ==
  createRequest(oauth2, fileId, folderId, signers, subject, message);
}

/**
  * editable な config から設定値を読み出す
  * 設定値が空の場合はエラー
  * @param {String} confName 設定名
  * @param {String} label エラー出力用ラベル
  * @return {String} value 設定値
  */
function decideEditable(confName, label) {
  let value = '';
  const dataDef = configs.getObject(confName);
  if (dataDef === null) {
    value = configs.get(confName);
  } else {
    value = engine.findData(dataDef);
  }
  if (value === '' || value === null) {
    throw `${label} is blank.`;
  }
  return value;
}

/**
  * 署名者情報 (メールアドレスとパスワード) をデータ項目から読み出す
  * 1つも設定されていない場合、上限件数を超える場合はエラー
  * @return {Array<Object>} signers 署名者 {email, password} の配列
  */
function retrieveSigners() {
  const emails = retrieveEmails();
  const passwords = retrievePasswords(); // データ項目が設定されていない場合は null

  // 署名者の配列を作成
  let signers = []; // {email, password}
  if (passwords === null) { // パスワード設定なし
    signers = emails.filter(email => email !== '') // 途中の空行を削除
      .map(email => ({email}));
  } else if (emails.length !== passwords.length) { // パスワード設定があるが、行数が一致しない
    throw 'Number of Passwords does not match the number of Email Addresses.';
  } else { // パスワードの設定がある
    emails.forEach((email, i) => {
      const password = passwords[i];
      if (email === '' && passwords === '') { // 両方空行なら無視する
        return;
      }
      if (email === '' || passwords === '') { // 片方だけ空行ならエラー
        throw 'Number of Passwords does not match the number of Email Addresses.';
      }
      signers.push({email, password});
    });
  }

  if (signers.length === 0) {
    throw 'No Email Address.';
  }
  if (signers.length > 35) {
    throw 'Number of Email Addresses exceeds the limit. The maximum number is 35.';
  }
  return signers;
}

/**
  * メールアドレスをデータ項目から読み出す
  * データ項目の中身が空の場合ははエラー
  * @return {Array<String>} emails
  */
function retrieveEmails() {
  const emailDef = configs.getObject('conf_EmailAddress');
  const emailString = engine.findData(emailDef);
  if (emailString === null || emailString === "") {
    throw 'No Email Address.';
  }
  const emails = emailString.split('\n');
  while (emails[emails.length - 1] === '') { // 末尾の空行を削除
    emails.pop();
  }
  return emails;
}

/**
  * パスワードをデータ項目から読み出す
  * データ項目が設定されていない場合は null を返す
  * データ項目の中身が空の場合ははエラー
  * @return {Array<String>} passwords
  */
function retrievePasswords() {
  const passwordDef = configs.getObject('conf_Password');
  if (passwordDef === null) {
    return null;
  }
  passwordString = engine.findData(passwordDef);
  if (passwordString === null || passwordString === "") {
    throw 'Data item for Passwords is set but its content is empty.';
  }
  passwords = passwordString.split('\n');
  while (passwords[passwords.length - 1] === '') { // 末尾の空行を削除
    passwords.pop();
  }
  return passwords;
}

/**
  * Create Sign Request  署名リクエスト作成
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId 元ファイルの ID
  * @param {String} folderId 保存先フォルダの ID
  * @param {Array<Object>} signers 署名者 {email, password} の配列
  * @param {String} subject 送信メールの件名
  * @param {String} message 送信メールに含めるメッセージ
  */
function createRequest(oauth2, fileId, folderId, signers, subject, message) {
  const jsonBody = {signers};
  jsonBody['source_files'] = [{
    'id': fileId,
    'type': 'file'
  }];
  jsonBody['parent_folder'] = {
    'id': folderId,
    'type': 'folder'
  };
  if (subject !== '' && subject !== null) {
    jsonBody['email_subject'] = subject;
  }
  if (message !== '' && message !== null) {
    jsonBody['email_message'] = message;
  }

  const url = 'https://api.box.com/2.0/sign_requests';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonBody), 'application/json; charset=UTF-8')
    .post(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 201) {
    engine.log(responseTxt);
    throw `Failed to create Sign Request. status:${status}`;
  }
}

]]></script>

<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
YII=
</icon>
</service-task-definition>
