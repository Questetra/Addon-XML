<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-04-11</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box Sign: Create Sign Request</label>
    <label locale="ja">Box Sign: 署名リクエスト作成</label>
    <summary>Create a signing document from the specified file on Box and send a sign request.</summary>
    <summary locale="ja">Box 上のファイルから署名用ドキュメントを作成し、署名リクエストを送信します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-sign-request-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-sign-request-create/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/sign_requests.readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_SourceFileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C2: Source File ID to create a signing document from</label>
            <label locale="ja">C2: 署名用ドキュメントの作成元ファイル ID</label>
        </config>
        <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C3: Folder ID to save the signing document (Root cannot be used)</label>
            <label locale="ja">C3: 署名用ドキュメントを保存するフォルダ ID (ルートフォルダは使用できません)</label>
        </config>
        <config name="conf_EmailAddress" required="true" form-type="SELECT" select-data-type="STRING">
            <label>C4: Email Addresses of the signers (Write one per line)</label>
            <label locale="ja">C4: 署名者メールアドレス (複数設定する場合、1件ごとに改行してください)</label>
        </config>
        <config name="conf_Password" form-type="SELECT" select-data-type="STRING">
            <label>C5: Passwords for each signer (Write one per line)</label>
            <label locale="ja">C5: 署名者ごとのパスワード (1件ごとに改行してください)</label>
        </config>
        <config name="conf_EmailSubject" form-type="TEXTFIELD" el-enabled="true">
            <label>C6: Email Subject (Default subject if blank)</label>
            <label locale="ja">C6: 送信されるメールの件名 (空白の場合、デフォルトの件名が使用されます)</label>
        </config>
        <config name="conf_EmailMessage" form-type="TEXTAREA" el-enabled="true">
            <label>C7: Message to include in the email (Default message if blank)</label>
            <label locale="ja">C7: メール本文に含めるメッセージ (空白の場合、デフォルトの文面が使用されます)</label>
        </config>
    </configs>

    <script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://account.box.com/api/oauth2/authorize
// - Token Endpoint URL: https://api.box.com/oauth2/token
// - Scope: sign_requests.readwrite root_readwrite
// - Consumer Key: (Get by Box Developer Console)
// - Consumer Secret: (Get by Box Developer Console)

main();
function main(){
  //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
  const oauth2 = configs.get('conf_OAuth2');
  const fileId = decideEditable('conf_SourceFileId', 'Source File ID');
  const folderId = decideEditable('conf_FolderId', 'Folder ID');
  if (folderId === '0') {
    throw 'Root folder cannot be used.';
  }
  const signers = retrieveSigners();
  const subject = configs.get('conf_EmailSubject');
  const message = configs.get('conf_EmailMessage');

  //// == 演算 / Calculating ==
  createRequest(oauth2, fileId, folderId, signers, subject, message);
}

/**
  * editable な config から設定値を読み出す
  * 設定値が空の場合はエラー
  * @param {String} confName 設定名
  * @param {String} label エラー出力用ラベル
  * @return {String} value 設定値
  */
function decideEditable(confName, label) {
  let value = '';
  const dataDef = configs.getObject(confName);
  if (dataDef === null) {
    value = configs.get(confName);
  } else {
    value = engine.findData(dataDef);
  }
  if (value === '' || value === null) {
    throw `${label} is blank.`;
  }
  return value;
}

/**
  * 署名者情報 (メールアドレスとパスワード) をデータ項目から読み出す
  * 1つも設定されていない場合、上限件数を超える場合はエラー
  * @return {Array<Object>} signers 署名者 {email, password} の配列
  */
function retrieveSigners() {
  const emails = retrieveFilledArray('conf_EmailAddress', 'Email Address');
  const passwords = retrieveFilledArray('conf_Password', 'Password');

  // 件数チェック
  if (emails === null || emails.length === 0) {
    throw 'No Email Address.';
  }
  if (emails.length > 35) { // Box Sign の仕様で最大35件まで
    throw 'Number of Email Addresses exceeds the limit. The maximum number is 35.';
  }

  // 署名者の配列を作成
  const signers = emails.map(email => ({email}));
  if (passwords === null) { // パスワード設定なし
    return signers;
  }
  // パスワード設定あり
  if (passwords.length !== signers.length) { // 件数が一致しない
    throw 'Number of Passwords does not match the number of Email Addresses.';
  }
  passwords.forEach((password, i) => {
    signers[i].password = password
  });
  return signers;
}

/**
  * config から複数行のデータを読み出し、配列を生成する
  * データ項目が設定されていない場合は null を返す
  * データ項目が設定されていて、中身が空の場合はエラー
  * 空行を含む場合はエラー (最後に空行がひとつだけある場合は無視)
  * @param {String} confName config 名
  * @param {String} label エラー出力に使用するラベル
  * @return {Array<String>} array 空文字列を含まない配列
  */
function retrieveFilledArray(confName, label) {
  const dataDef = configs.getObject(confName);
  if (dataDef === null) { // データ項目が設定されていない
    return null;
  }
  const string = engine.findData(dataDef);
  if (string === null || string === '') { // データ項目の中身が空
    throw `Data item for ${label} is set but its content is empty.`;
  }

  const array = string.split('\n');
  if (array[array.length - 1] === '') { // 最後に空行があれば削除
    array.pop();
  }
  // 空行が残っている場合はエラー
  const i = array.indexOf('');
  if (i !== -1) {
    throw `${label} at line ${i+1} is blank.`;
  }
  return array;
}

/**
  * Create Sign Request  署名リクエスト作成
  * @param {String} oauth OAuth2 設定
  * @param {String} fileId 元ファイルの ID
  * @param {String} folderId 保存先フォルダの ID
  * @param {Array<Object>} signers 署名者 {email, password} の配列
  * @param {String} subject 送信メールの件名
  * @param {String} message 送信メールに含めるメッセージ
  */
function createRequest(oauth2, fileId, folderId, signers, subject, message) {
  const jsonBody = {signers};
  jsonBody['source_files'] = [{
    'id': fileId,
    'type': 'file'
  }];
  jsonBody['parent_folder'] = {
    'id': folderId,
    'type': 'folder'
  };
  if (subject !== '' && subject !== null) {
    jsonBody['email_subject'] = subject;
  }
  if (message !== '' && message !== null) {
    jsonBody['email_message'] = message;
  }

  const url = 'https://api.box.com/2.0/sign_requests';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonBody), 'application/json; charset=UTF-8')
    .post(url);

  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  if (status !== 201) {
    engine.log(responseTxt);
    throw `Failed to create Sign Request. status:${status}`;
  }
}

]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * ファイル ID、フォルダ ID はデータ項目で指定
 * メールアドレス、パスワードは複数行のデータ項目で指定
 * @param fileId
 * @param folderId
 * @param emails
 * @param passwords
 * @param subject
 * @param message
 */
const prepareConfigs = (fileId, folderId, emails, passwords, subject, message) => {
  configs.put('conf_OAuth2', 'Box Sign');

  // ファイル ID を設定した文字型データ項目（単一行）を準備し、設定
  const fileIdDef = engine.createDataDefinition('ファイル ID', 1, 'q_FileId', 'STRING_TEXTFIELD');
  engine.setData(fileIdDef, fileId);
  configs.putObject('conf_SourceFileId', fileIdDef);

  // フォルダ ID を設定した文字型データ項目（単一行）を準備し、設定
  const folderIdDef = engine.createDataDefinition('フォルダ ID', 2, 'q_FolderId', 'STRING_TEXTFIELD');
  engine.setData(folderIdDef, folderId);
  configs.putObject('conf_FolderId', folderIdDef);

  // メールアドレスを設定した文字型データ項目（複数行）を準備し、設定
  const emailDef = engine.createDataDefinition('メールアドレス', 3, 'q_EmailAddress', 'STRING_TEXTAREA');
  engine.setData(emailDef, emails);
  configs.putObject('conf_EmailAddress', emailDef);

  // パスワードを設定した文字型データ項目（複数行）を準備し、設定
  const passwordDef = engine.createDataDefinition('パスワード', 4, 'q_Password', 'STRING_TEXTAREA');
  engine.setData(passwordDef, passwords);
  configs.putObject('conf_Password', passwordDef);

  // メールの件名、メッセージを設定
  configs.put('conf_EmailSubject', subject);
  configs.put('conf_EmailMessage', message);
}

/**
 * ファイル ID をデータ項目で指定し、値が空でエラー
 */
test('Source File ID is blank', () => {
  prepareConfigs(null, 'folderId-1', 'test1@example.com', 'password1', '', '');
  expect(execute).toThrow('Source File ID is blank.');
});

/**
 * フォルダ ID をデータ項目で指定し、値が空でエラー
 */
test('Folder ID is blank', () => {
  prepareConfigs('fileId-1', null, 'test1@example.com', 'password1', '', '');
  expect(execute).toThrow('Folder ID is blank.');
});

/**
 * フォルダ ID に 0 (ルートフォルダの ID) を指定しエラー
 */
test('Root folder cannot be used', () => {
  prepareConfigs('fileId-1', '0', 'test1@example.com', 'password1', '', '');
  expect(execute).toThrow('Root folder cannot be used.');
});

/**
 * メールアドレスが空でエラー
 */
test('No Email Address - Data item is set but its content is empty', () => {
  prepareConfigs('fileId-1', 'folderId-1', null, 'password1', '', '');
  expect(execute).toThrow('Data item for Email Address is set but its content is empty.');
});

/**
 * メールアドレスが改行のみでエラー
 */
test('No Email Address - A blank line', () => {
  prepareConfigs('fileId-1', 'folderId-1', '\n', 'password1', '', '');
  expect(execute).toThrow('Email Address at line 1 is blank.');
});

/**
 * メールアドレスが 35 件を超えていてエラー
 */
test('Number of Email Addresses exceeds the limit', () => {
  const emails = 'test@example.com\n'.repeat(36);
  const passwords = 'password\n'.repeat(36);
  prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
  expect(execute).toThrow('Number of Email Addresses exceeds the limit. The maximum number is 35.');
});

/**
 * メールアドレスの途中に空行がありエラー
 */
test('An Email Address is blank', () => {
  const emails = 'test1@example.com\n\ntest2@example.com'; // 2 件。2行目が空行
  const passwords = 'password1\npassword2'; // 2件
  prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
  expect(execute).toThrow('Email Address at line 2 is blank.');
});

/**
 * パスワードが空でエラー
 */
test('Data item for Password is set but its content is empty', () => {
  prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', null, '', '');
  expect(execute).toThrow('Data item for Password is set but its content is empty.');
});

/**
 * パスワードの途中に空行がありエラー
 */
test('A Password is blank', () => {
  const emails = 'test1@example.com\ntest2@example.com'; // 2 件
  const passwords = '\npassword1\npassword2'; // 2件。先頭に空行がある
  prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
  expect(execute).toThrow('Password at line 1 is blank.');
});

/**
 * パスワードが改行のみでエラー
 */
test('No Password - A blank line', () => {
  prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', '\n', '', '');
  expect(execute).toThrow('Password at line 1 is blank.');
});

/**
 * メールアドレスとパスワードの件数が一致せずエラー
 */
test('Number of Passwords does not match the number of Email Addresses', () => {
  const emails = 'test1@example.com\ntest2@example.com\ntest3@example.com'; // 3 件
  const passwords = 'password1\npassword2'; // 2件
  prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
  expect(execute).toThrow('Number of Passwords does not match the number of Email Addresses.');
});

/**
 * POST リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.contentType
 * @param request.body
 * @param fileId
 * @param folderId
 * @param signers
 * @param subject
 * @param message
 */
const assertPostRequest = ({url, method, contentType, body}, fileId, folderId, signers, subject, message) => {
  expect(url).toEqual('https://api.box.com/2.0/sign_requests');
  expect(method).toEqual('POST');
  expect(contentType).toEqual('application/json; charset=UTF-8');
  const bodyObj = JSON.parse(body);
  expect(bodyObj.source_files[0].id).toEqual(fileId);
  expect(bodyObj.source_files[0].type).toEqual('file');
  expect(bodyObj.parent_folder.id).toEqual(folderId);
  expect(bodyObj.parent_folder.type).toEqual('folder');
  expect(bodyObj.signers).toEqual(signers);
  if (subject !== '') {
    expect(bodyObj.email_subject).toEqual(subject);
  } else {
    expect(bodyObj.email_subject).toEqual(undefined);
  }
  if (message !== '') {
    expect(bodyObj.email_message).toEqual(message);
  } else {
    expect(bodyObj.email_message).toEqual(undefined);
  }
};

/**
 * POST リクエストで失敗
 */
test('Fail in POST Request', () => {
  const email = 'test1@example.com';
  const password = 'password1';
  const signers = [{email, password}];
  prepareConfigs('fileId-1', 'folderId-1', email, password, '', '');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '');
    return httpClient.createHttpResponse(400, 'application/json', '{}');
  });

  expect(execute).toThrow('Failed to create Sign Request. status:400');
});

/**
 * 署名リクエスト作成成功
 * Box Sign の上限 35 件の署名者でテスト
 * パスワード設定あり
 */
test('Success - 35 signers with passwords', () => {
  const emails = [];
  const passwords = [];
  const signers = [];
  for (let i = 0; i < 35; i++) {
    const email = `test${i+1}@example.com`;
    const password = `password${i+1}`
    emails.push(email);
    passwords.push(password);
    signers.push({email, password});
  }
  const emailString = emails.join('\n') + '\n'; // 末尾の改行は無視される
  const passwordString = passwords.join('\n');
  prepareConfigs('fileId-1', 'folderId-1', emailString, passwordString, '', '');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '');
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

/**
 * 署名リクエスト作成成功
 * メールアドレスを単一行データ項目で指定
 * パスワード設定あり
 */
test('Success - Email Address set with TEXTFIELD', () => {
  const email = 'test2@example.com';
  const password = 'password2';
  const signers = [{email, password}];

  // メールアドレスはいったん null に
  prepareConfigs('fileId-2', 'folderId-2', null, password, '', '');

  // メールアドレスを設定した文字型データ項目（単一行）を準備し、設定
  const emailDef = engine.createDataDefinition('メールアドレス (単一行)', 5, 'q_EmailAddressSingle', 'STRING_TEXTFIELD');
  engine.setData(emailDef, email);
  configs.putObject('conf_EmailAddress', emailDef);
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-2', 'folderId-2', signers, '', '');
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

/**
 * 署名リクエスト作成成功
 * パスワードを単一行データ項目で指定
 */
test('Success - Password set with TEXTFIELD', () => {
  const email = 'test3@example.com';
  const password = 'password3';
  const signers = [{email, password}];

  // パスワードはいったん null に
  prepareConfigs('fileId-3', 'folderId-3', email, null, '', '');

  // メールアドレスを設定した文字型データ項目（単一行）を準備し、設定
  const passwordDef = engine.createDataDefinition('パスワード (単一行)', 5, 'q_PasswordSingle', 'STRING_TEXTFIELD');
  engine.setData(passwordDef, password);
  configs.putObject('conf_Password', passwordDef);
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-3', 'folderId-3', signers, '', '');
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

/**
 * 署名リクエスト作成成功
 * パスワードを指定しない
 */
test('Success - Without passwords', () => {
  const emails = [];
  const signers = [];
  for (let i = 0; i < 5; i++) {
    const email = `test${i+1}@example.com`;
    emails.push(email);
    signers.push({email});
  }
  const emailString = emails.join('\n');

  // パスワードはいったん null に
  prepareConfigs('fileId-3', 'folderId-3', emailString, null, '', '');

  // パスワードの設定をクリア
  configs.put('conf_Password', '');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-3', 'folderId-3', signers, '', '');
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

/**
 * 署名リクエスト作成成功
 * メールの件名、メッセージを指定
 */
test('Success - With email subject and message', () => {
  const email = 'test1@example.com';
  const password = 'password1';
  const signers = [{email, password}];
  const subject = '署名リクエスト';
  const message = '署名リクエストです。\n署名をお願いします。';
  prepareConfigs('fileId-1', 'folderId-2', email, password, subject, message);
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-1', 'folderId-2', signers, subject, message);
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

/**
 * 署名リクエスト作成成功
 * ファイル ID、フォルダ ID を固定値で指定
 */
test('Success - File ID and Folder ID are set as fixed values', () => {
  const email = 'test1@example.com';
  const password = 'password1';
  const signers = [{email, password}];

  // ファイル ID、フォルダ ID はいったん null に
  prepareConfigs(null, null, email, password, '', '');

  // ファイル ID、フォルダ ID を固定値で指定
  configs.put('conf_SourceFileId', 'fileId-2');
  configs.put('conf_FolderId', 'folderId-1');
  
  httpClient.setRequestHandler((request) => {
    assertPostRequest(request, 'fileId-2', 'folderId-1', signers, '', '');
    return httpClient.createHttpResponse(201, 'application/json', '{}');
  });

  execute();
});

]]></test>

</service-task-definition>
