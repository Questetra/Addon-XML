<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2023-09-01</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <label>Box Sign: Create Sign Request</label>
    <label locale="ja">Box Sign: 署名リクエスト作成</label>
    <summary>This item creates a signing document from the specified file on Box and sends a sign request.</summary>
    <summary locale="ja">この工程は、Box 上のファイルから署名用ドキュメントを作成し、署名リクエストを送信します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-box-sign-request-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-box-sign-request-create/
    </help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/sign_requests.readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_SourceFileId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C2: Source File ID to create a signing document from</label>
            <label locale="ja">C2: 署名用ドキュメントの作成元ファイル ID</label>
        </config>
        <config name="conf_FolderId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C3: Folder ID to save the signing document (Root cannot be used)</label>
            <label locale="ja">C3: 署名用ドキュメントを保存するフォルダ ID (ルートフォルダは使用できません)</label>
        </config>
        <config name="conf_EmailAddress" required="true" form-type="SELECT" select-data-type="STRING">
            <label>C4: Email Addresses of the signers (Write one per line)</label>
            <label locale="ja">C4: 署名者メールアドレス (複数設定する場合、1件ごとに改行してください)</label>
        </config>
        <config name="conf_Password" form-type="SELECT" select-data-type="STRING">
            <label>C5: Passwords for each signer (Write one per line)</label>
            <label locale="ja">C5: 署名者ごとのパスワード (1件ごとに改行してください)</label>
        </config>
        <config name="conf_EmailSubject" form-type="TEXTFIELD" el-enabled="true">
            <label>C6: Email Subject (Default subject if blank)</label>
            <label locale="ja">C6: 送信されるメールの件名 (空白の場合、デフォルトの件名が使用されます)</label>
        </config>
        <config name="conf_EmailMessage" form-type="TEXTAREA" el-enabled="true">
            <label>C7: Message to include in the email (Default message if blank)</label>
            <label locale="ja">C7: メール本文に含めるメッセージ (空白の場合、デフォルトの文面が使用されます)</label>
        </config>
        <config name="conf_DaysValid" form-type="TEXTFIELD">
            <label>C8: Days until expiration (Never expires if blank)</label>
            <label locale="ja">C8: 期限切れまでの日数 (空白の場合、期限は設定されません)</label>
        </config>
        <config name="conf_RequestId" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C9: Data item to save ID of the sign request</label>
            <label locale="ja">C9: 署名リクエスト ID を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[

// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://account.box.com/api/oauth2/authorize
// - Token Endpoint URL: https://api.box.com/oauth2/token
// - Scope: sign_requests.readwrite root_readwrite
// - Consumer Key: (Get by Box Developer Console)
// - Consumer Secret: (Get by Box Developer Console)

const MAX_SIGNER_NUM = 35;
const MAX_DAYS_VALID = 730;

const PROCESSING_STATUSES = [
    'converting',
    'created' // 送信完了まで待機するため、created も処理中扱いにする
];

const ERROR_STATUSES = [
    'error_converting',
    'error_sending'
];

function main() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const fileId = decideEditable('conf_SourceFileId', 'Source File ID');
    const folderId = decideEditable('conf_FolderId', 'Folder ID');
    if (folderId === '0') {
        throw 'Root folder cannot be used.';
    }
    const signers = retrieveSigners();
    const subject = configs.get('conf_EmailSubject');
    const message = configs.get('conf_EmailMessage');
    const daysValid = retrieveDaysValid();
    const requestIdDef = configs.getObject('conf_RequestId');

    //// == 演算 / Calculating ==
    const requestId = createRequest(oauth2, fileId, folderId, signers, subject, message, daysValid);
    setData(requestIdDef, requestId);
    if (checkStatus(oauth2, requestId) === false) {
        engine.saveTemporaryData(requestId); // 署名リクエスト ID を一時データとして保存
        return false;
    }
}

function proceed() {
    //// == 工程コンフィグ・ワークフローデータの参照 / Config & Data Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const requestId = engine.restoreTemporaryData();
    if (requestId === null) {
        throw 'Sign Request ID has not been saved.';
    }

    //// == 演算 / Calculating ==
    if (checkStatus(oauth2, requestId) === false) {
        return false;
    }
}

/**
  * editable な config から設定値を読み出す
  * 設定値が空の場合はエラー
  * @param {String} confName 設定名
  * @param {String} label エラー出力用ラベル
  * @return {String} value 設定値
  */
function decideEditable(confName, label) {
    let value = '';
    const dataDef = configs.getObject(confName);
    if (dataDef === null) {
        value = configs.get(confName);
    } else {
        value = engine.findData(dataDef);
    }
    if (value === '' || value === null) {
        throw `${label} is blank.`;
    }
    return value;
}

/**
  * 署名者情報 (メールアドレスとパスワード) をデータ項目から読み出す
  * 1つも設定されていない場合、上限件数を超える場合はエラー
  * @return {Array<Object>} signers 署名者 {email, password} の配列
  */
function retrieveSigners() {
    const emails = retrieveFilledArray('conf_EmailAddress', 'Email Address');
    const passwords = retrieveFilledArray('conf_Password', 'Password');

    // 件数チェック
    if (emails === null || emails.length === 0) {
        throw 'No Email Address.';
    }
    if (emails.length > MAX_SIGNER_NUM) {
        throw `Number of Email Addresses exceeds the limit. The maximum number is ${MAX_SIGNER_NUM}.`;
    }

    // 署名者の配列を作成
    const signers = emails.map(email => ({email}));
    if (passwords === null) { // パスワード設定なし
        return signers;
    }
    // パスワード設定あり
    if (passwords.length !== signers.length) { // 件数が一致しない
        throw 'Number of Passwords does not match the number of Email Addresses.';
    }
    passwords.forEach((password, i) => {
        signers[i].password = password
    });
    return signers;
}

/**
  * config から複数行のデータを読み出し、配列を生成する
  * データ項目が設定されていない場合は null を返す
  * データ項目が設定されていて、中身が空の場合はエラー
  * 空行を含む場合はエラー (最後に空行がひとつだけある場合は無視)
  * @param {String} confName config 名
  * @param {String} label エラー出力に使用するラベル
  * @return {Array<String>} array 空文字列を含まない配列
  */
function retrieveFilledArray(confName, label) {
    const dataDef = configs.getObject(confName);
    if (dataDef === null) { // データ項目が設定されていない
        return null;
    }
    const string = engine.findData(dataDef);
    if (string === null || string === '') { // データ項目の中身が空
        throw `Data item for ${label} is set but its content is empty.`;
    }

    const array = string.split('\n');
    if (array[array.length - 1] === '') { // 最後に空行があれば削除
        array.pop();
    }
    // 空行が残っている場合はエラー
    const i = array.indexOf('');
    if (i !== -1) {
        throw `${label} at line ${i+1} is blank.`;
    }
    return array;
}

/**
  * config から署名リクエストが期限切れになるまでの日数を読み出す
  * @return {Number} daysValid 署名リクエストが期限切れになるまでの日数
  */
function retrieveDaysValid() {
    const daysValidStr = configs.get('conf_DaysValid');
    const error = `Days until expiration must be positive integer no greater than ${MAX_DAYS_VALID}.`;
    if (daysValidStr === null || daysValidStr === '') {
        return null;
    }
    const reg = new RegExp('^[1-9][0-9]{0,2}$');
    if (!reg.test(daysValidStr)) {
        throw error;
    }
    const daysValid = parseInt(daysValidStr, 10);
    if (daysValid > MAX_DAYS_VALID) {
        throw error;
    }
    return daysValid;
}

/**
  * Create Sign Request  署名リクエスト作成
  * @param {AuthSettingWrapper} oauth OAuth2 設定
  * @param {String} fileId 元ファイルの ID
  * @param {String} folderId 保存先フォルダの ID
  * @param {Array<Object>} signers 署名者 {email, password} の配列
  * @param {String} subject 送信メールの件名
  * @param {String} message 送信メールに含めるメッセージ
  * @param {Number} daysValid 署名リクエストが期限切れになるまでの日数
  * @return {String} requestId 署名リクエストの ID
  */
function createRequest(oauth2, fileId, folderId, signers, subject, message, daysValid) {
    const jsonBody = {
        signers,
        days_valid: daysValid
    };
    jsonBody['source_files'] = [{
        'id': fileId,
        'type': 'file'
    }];
    jsonBody['parent_folder'] = {
        'id': folderId,
        'type': 'folder'
    };
    if (subject !== '' && subject !== null) {
        jsonBody['email_subject'] = subject;
    }
    if (message !== '' && message !== null) {
        jsonBody['email_message'] = message;
    }

    const url = 'https://api.box.com/2.0/sign_requests';
    const response = httpClient.begin()
        .authSetting(oauth2)
        .body(JSON.stringify(jsonBody), 'application/json; charset=UTF-8')
        .post(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status !== 201) {
        engine.log(responseTxt);
        throw `Failed to create Sign Request. status:${status}`;
    }
    return JSON.parse(responseTxt).id;
}

/**
  * データ項目にデータを保存する
  * @param {DataDefinitionView} dataDef データ項目の DataDefinitionView
  * @param {Object} value 保存する値
  */
function setData(dataDef, value) {
    if (dataDef !== null) {
        engine.setData(dataDef, value);
    }
}

/**
  * 署名リクエストのステータスを確認
  * 処理中の場合は false を返し、処理完了の場合は署名リクエスト ID を保存
  * @param {AuthSettingWrapper} oauth OAuth2 設定
  * @param {String} requestId 署名リクエスト ID
  * @returns {boolean} 処理未完了の場合は false
  */
function checkStatus(oauth2, requestId) {
    const status = getSignRequestStatus(oauth2, requestId);
    // エラーステータスの場合、例外をスローする
    if (ERROR_STATUSES.includes(status)) {
        throw `The Sign Request failed in ${status} status.`;
    }
    // 処理中の場合、false を返す
    if (PROCESSING_STATUSES.includes(status)) {
        engine.log(`current status: ${status}`);
        return false;
    }
}

/**
  * 署名リクエストのステータスを取得
  * @param {AuthSettingWrapper} oauth2 OAuth2 設定
  * @param {String} requestId 署名リクエストの ID
  * @return {String} status 署名リクエストのステータス
  */
function getSignRequestStatus(oauth2, requestId) {
    const url = `https://api.box.com/2.0/sign_requests/${requestId}`;
    const response = httpClient.begin()
        .authSetting(oauth2)
        .get(url);
    const status = response.getStatusCode();
    const responseTxt = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseTxt);
        throw `Failed to get Sign Request. status:${status}`;
    }
    return JSON.parse(responseTxt).status;
}

]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>

    <test><![CDATA[

/**
  * 設定の準備
  * ファイル ID、フォルダ ID はデータ項目で指定
  * メールアドレス、パスワードは複数行のデータ項目で指定
  * @param fileId
  * @param folderId
  * @param emails
  * @param passwords
  * @param subject
  * @param message
  * @return requestIdDef
  */
const prepareConfigs = (fileId, folderId, emails, passwords, subject, message) => {
    const auth = httpClient.createAuthSettingOAuth2(
        'Box Sign',
        'https://account.box.com/api/oauth2/authorize',
        'https://api.box.com/oauth2/token',
        'sign_requests.readwrite root_readwrite',
        'consumer_key',
        'consumer_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', auth);

    // ファイル ID を設定した文字型データ項目（単一行）を準備し、設定
    const fileIdDef = engine.createDataDefinition('ファイル ID', 1, 'q_FileId', 'STRING_TEXTFIELD');
    engine.setData(fileIdDef, fileId);
    configs.putObject('conf_SourceFileId', fileIdDef);

    // フォルダ ID を設定した文字型データ項目（単一行）を準備し、設定
    const folderIdDef = engine.createDataDefinition('フォルダ ID', 2, 'q_FolderId', 'STRING_TEXTFIELD');
    engine.setData(folderIdDef, folderId);
    configs.putObject('conf_FolderId', folderIdDef);

    // メールアドレスを設定した文字型データ項目（複数行）を準備し、設定
    const emailDef = engine.createDataDefinition('メールアドレス', 3, 'q_EmailAddress', 'STRING_TEXTAREA');
    engine.setData(emailDef, emails);
    configs.putObject('conf_EmailAddress', emailDef);

    // パスワードを設定した文字型データ項目（複数行）を準備し、設定
    const passwordDef = engine.createDataDefinition('パスワード', 4, 'q_Password', 'STRING_TEXTAREA');
    engine.setData(passwordDef, passwords);
    configs.putObject('conf_Password', passwordDef);

    // メールの件名、メッセージを設定
    configs.put('conf_EmailSubject', subject);
    configs.put('conf_EmailMessage', message);

    // 署名リクエスト ID を保存するデータ項目を準備し、設定
    const requestIdDef = engine.createDataDefinition('署名リクエスト ID', 5, 'q_RequestId', 'STRING_TEXTFIELD');
    engine.setData(requestIdDef, '事前文字列');
    configs.putObject('conf_RequestId', requestIdDef);

    return requestIdDef;
}

/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
  * ファイル ID をデータ項目で指定し、値が空でエラー
  */
test('Source File ID is blank', () => {
    prepareConfigs(null, 'folderId-1', 'test1@example.com', 'password1', '', '');
    assertError(main, 'Source File ID is blank.');
});

/**
  * フォルダ ID をデータ項目で指定し、値が空でエラー
  */
test('Folder ID is blank', () => {
    prepareConfigs('fileId-1', null, 'test1@example.com', 'password1', '', '');
    assertError(main, 'Folder ID is blank.');
});

/**
  * フォルダ ID に 0 (ルートフォルダの ID) を指定しエラー
  */
test('Root folder cannot be used', () => {
    prepareConfigs('fileId-1', '0', 'test1@example.com', 'password1', '', '');
    assertError(main, 'Root folder cannot be used.');
});

/**
  * メールアドレスが空でエラー
  */
test('No Email Address - Data item is set but its content is empty', () => {
    prepareConfigs('fileId-1', 'folderId-1', null, 'password1', '', '');
    assertError(main, 'Data item for Email Address is set but its content is empty.');
});

/**
  * メールアドレスが改行のみでエラー
  */
test('No Email Address - A blank line', () => {
    prepareConfigs('fileId-1', 'folderId-1', '\n', 'password1', '', '');
    assertError(main, 'Email Address at line 1 is blank.');
});

/**
  * メールアドレスの件数が上限を超えていてエラー
  */
test('Number of Email Addresses exceeds the limit', () => {
    const emails = 'test@example.com\n'.repeat(MAX_SIGNER_NUM + 1);
    const passwords = 'password\n'.repeat(MAX_SIGNER_NUM + 1);
    prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
    assertError(main, `Number of Email Addresses exceeds the limit. The maximum number is ${MAX_SIGNER_NUM}.`);
});

/**
  * メールアドレスの途中に空行がありエラー
  */
test('An Email Address is blank', () => {
    const emails = 'test1@example.com\n\ntest2@example.com'; // 2 件。2行目が空行
    const passwords = 'password1\npassword2'; // 2件
    prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
    assertError(main, 'Email Address at line 2 is blank.');
});

/**
  * パスワードが空でエラー
  */
test('Data item for Password is set but its content is empty', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', null, '', '');
    assertError(main, 'Data item for Password is set but its content is empty.');
});

/**
  * パスワードの途中に空行がありエラー
  */
test('A Password is blank', () => {
    const emails = 'test1@example.com\ntest2@example.com'; // 2 件
    const passwords = '\npassword1\npassword2'; // 2件。先頭に空行がある
    prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
    assertError(main, 'Password at line 1 is blank.');
});

/**
  * パスワードが改行のみでエラー
  */
test('No Password - A blank line', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', '\n', '', '');
    assertError(main, 'Password at line 1 is blank.');
});

/**
  * メールアドレスとパスワードの件数が一致せずエラー
  */
test('Number of Passwords does not match the number of Email Addresses', () => {
    const emails = 'test1@example.com\ntest2@example.com\ntest3@example.com'; // 3 件
    const passwords = 'password1\npassword2'; // 2件
    prepareConfigs('fileId-1', 'folderId-1', emails, passwords, '', '');
    assertError(main, 'Number of Passwords does not match the number of Email Addresses.');
});

/**
  * 期限までの日数が 0 でエラー
  */
test('Invalid days until expiration - zero', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', 'password', '', '');
    configs.put('conf_DaysValid', '0');
    assertError(main, `Days until expiration must be positive integer no greater than ${MAX_DAYS_VALID}.`);
});

/**
  * 期限までの日数が負の数でエラー
  */
test('Invalid days until expiration - negative integer', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', 'password', '', '');
    configs.put('conf_DaysValid', '-1');
    assertError(main, `Days until expiration must be positive integer no greater than ${MAX_DAYS_VALID}.`);
});

/**
  * 期限までの日数が整数でなくエラー
  */
test('Invalid days until expiration - not integer', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', 'password', '', '');
    configs.put('conf_DaysValid', '1.5'); // 小数
    assertError(main, `Days until expiration must be positive integer no greater than ${MAX_DAYS_VALID}.`);
});

/**
  * 期限までの日数が最大値を超えてエラー
  */
test('Invalid days until expiration - too large number', () => {
    prepareConfigs('fileId-1', 'folderId-1', 'test1@example.com', 'password', '', '');
    configs.put('conf_DaysValid', `${MAX_DAYS_VALID + 1}`);
    assertError(main, `Days until expiration must be positive integer no greater than ${MAX_DAYS_VALID}.`);
});

/**
  * POST リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  * @param request.contentType
  * @param request.body
  * @param fileId
  * @param folderId
  * @param signers
  * @param subject
  * @param message
  * @param daysValid
  */
const assertPostRequest = ({url, method, contentType, body}, fileId, folderId, signers, subject, message, daysValid) => {
    expect(url).toEqual('https://api.box.com/2.0/sign_requests');
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json; charset=UTF-8');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.source_files[0].id).toEqual(fileId);
    expect(bodyObj.source_files[0].type).toEqual('file');
    expect(bodyObj.parent_folder.id).toEqual(folderId);
    expect(bodyObj.parent_folder.type).toEqual('folder');
    expect(bodyObj.signers).toEqual(signers);
    if (subject !== '') {
        expect(bodyObj.email_subject).toEqual(subject);
    } else {
        expect(bodyObj.email_subject).toEqual(undefined);
    }
    if (message !== '') {
        expect(bodyObj.email_message).toEqual(message);
    } else {
        expect(bodyObj.email_message).toEqual(undefined);
    }
    expect(bodyObj.days_valid).toEqual(daysValid);
};

/**
  * POST リクエストで失敗
  */
test('Fail in POST Request', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];
    prepareConfigs('fileId-1', 'folderId-1', email, password, '', '');
    
    httpClient.setRequestHandler((request) => {
        assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '', null);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError(main, 'Failed to create Sign Request. status:400');
});

/**
  * GET リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  * @param requestId
  */
const assertGetRequest = ({url, method}, requestId) => {
    expect(url).toEqual(`https://api.box.com/2.0/sign_requests/${requestId}`);
    expect(method).toEqual('GET');
};

/**
  * GET リクエストで失敗
  */
test('Fail in GET Request', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];
    prepareConfigs('fileId-1', 'folderId-1', email, password, '', '');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId1"}');
        }
        assertGetRequest(request, 'requestId1');
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });

    assertError(main, 'Failed to get Sign Request. status:400');
});

/**
  * 変換エラーで失敗
  */
test('Fail in converting', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];
    prepareConfigs('fileId-1', 'folderId-1', email, password, '', '');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId1"}');
        }
        assertGetRequest(request, 'requestId1');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "error_converting"}');
    });

    assertError(main, 'The Sign Request failed in error_converting status.');
});

/**
  * 送信エラーで失敗
  */
test('Fail in sending', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];
    prepareConfigs('fileId-1', 'folderId-1', email, password, '', '');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId1"}');
        }
        assertGetRequest(request, 'requestId1');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "error_sending"}');
    });

    assertError(main, 'The Sign Request failed in error_sending status.');
});

/**
  * 署名リクエスト作成成功
  * Box Sign の署名者の上限数でテスト
  * パスワード設定あり
  * 期限設定なし
  * 1 回目のステータス確認で sent
  */
test('Success - Maximum number of signers with passwords, completed in main()', () => {
    const emails = [];
    const passwords = [];
    const signers = [];
    for (let i = 0; i < MAX_SIGNER_NUM; i++) {
        const email = `test${i+1}@example.com`;
        const password = `password${i+1}`
        emails.push(email);
        passwords.push(password);
        signers.push({email, password});
    }
    const emailString = emails.join('\n') + '\n'; // 末尾の改行は無視される
    const passwordString = passwords.join('\n');
    const requestIdDef = prepareConfigs('fileId-1', 'folderId-1', emailString, passwordString, '', '');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-1', 'folderId-1', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId1"}');
        }
        assertGetRequest(request, 'requestId1');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "sent"}');
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('requestId1');
});

/**
  * 署名リクエスト作成成功
  * メールアドレスを単一行データ項目で指定
  * パスワード設定あり
  * 期限を最長日数後に設定
  * 3 回目のステータス確認で sent
  */
test('Success - Email Address set with TEXTFIELD, completed in proceed()', () => {
    const email = 'test2@example.com';
    const password = 'password2';
    const signers = [{email, password}];

    // メールアドレスはいったん null に
    const requestIdDef = prepareConfigs('fileId-2', 'folderId-2', null, password, '', '');

    // メールアドレスを設定した文字型データ項目（単一行）を準備し、設定
    const emailDef = engine.createDataDefinition('メールアドレス (単一行)', 5, 'q_EmailAddressSingle', 'STRING_TEXTFIELD');
    engine.setData(emailDef, email);
    configs.putObject('conf_EmailAddress', emailDef);

    // 期限までの日数を設定
    configs.put('conf_DaysValid', `${MAX_DAYS_VALID}`);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-2', 'folderId-2', signers, '', '', MAX_DAYS_VALID);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId2"}');
        }
        assertGetRequest(request, 'requestId2');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "converting"}');
    });
    expect(main()).toEqual(false);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'requestId2');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "created"}'); // 送信済みになるまで待つ
    });
    expect(proceed()).toEqual(false);

    httpClient.setRequestHandler((request) => {
        assertGetRequest(request, 'requestId2');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "sent"}');
    });
    expect(proceed()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('requestId2');
});

/**
  * 署名リクエスト作成成功
  * パスワードを単一行データ項目で指定
  * 期限を 1 日後に設定
  * 1 回目のステータス確認で viewed
  */
test('Success - Password set with TEXTFIELD', () => {
    const email = 'test3@example.com';
    const password = 'password3';
    const signers = [{email, password}];

    // パスワードはいったん null に
    const requestIdDef = prepareConfigs('fileId-3', 'folderId-3', email, null, '', '');

    // メールアドレスを設定した文字型データ項目（単一行）を準備し、設定
    const passwordDef = engine.createDataDefinition('パスワード (単一行)', 5, 'q_PasswordSingle', 'STRING_TEXTFIELD');
    engine.setData(passwordDef, password);
    configs.putObject('conf_Password', passwordDef);

    // 期限までの日数を設定
    configs.put('conf_DaysValid', '1');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-3', 'folderId-3', signers, '', '', 1);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId3"}');
        }
        assertGetRequest(request, 'requestId3');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "viewed"}');
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('requestId3');
});

/**
  * 署名リクエスト作成成功
  * パスワードを指定しない
  */
test('Success - Without passwords', () => {
    const emails = [];
    const signers = [];
    for (let i = 0; i < 5; i++) {
        const email = `test${i+1}@example.com`;
        emails.push(email);
        signers.push({email});
    }
    const emailString = emails.join('\n');

    // パスワードはいったん null に
    const requestIdDef = prepareConfigs('fileId-3', 'folderId-3', emailString, null, '', '');

    // パスワードの設定をクリア
    configs.put('conf_Password', '');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-3', 'folderId-3', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId345"}');
        }
        assertGetRequest(request, 'requestId345');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "viewed"}');
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('requestId345');
});

/**
  * 署名リクエスト作成成功
  * メールの件名、メッセージを指定
  */
test('Success - With email subject and message', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];
    const subject = '署名リクエスト';
    const message = '署名リクエストです。\n署名をお願いします。';
    const requestIdDef = prepareConfigs('fileId-1', 'folderId-2', email, password, subject, message);
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-1', 'folderId-2', signers, subject, message, null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId123"}');
        }
        assertGetRequest(request, 'requestId123');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "viewed"}');
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('requestId123');
});

/**
  * 署名リクエスト作成成功
  * ファイル ID、フォルダ ID を固定値で指定
  * 署名リクエスト ID を保存するデータ項目を指定しない
  */
test('Success - File ID and Folder ID are set as fixed values', () => {
    const email = 'test1@example.com';
    const password = 'password1';
    const signers = [{email, password}];

    // ファイル ID、フォルダ ID はいったん null に
    const requestIdDef = prepareConfigs(null, null, email, password, '', '');
    configs.put('conf_RequestId', '');

    // ファイル ID、フォルダ ID を固定値で指定
    configs.put('conf_SourceFileId', 'fileId-2');
    configs.put('conf_FolderId', 'folderId-1');
    
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertPostRequest(request, 'fileId-2', 'folderId-1', signers, '', '', null);
            reqCount++;
            return httpClient.createHttpResponse(201, 'application/json', '{"id": "requestId3"}');
        }
        assertGetRequest(request, 'requestId3');
        return httpClient.createHttpResponse(200, 'application/json', '{"status": "viewed"}');
    });
    expect(main()).toEqual(undefined);
    expect(engine.findData(requestIdDef)).toEqual('事前文字列');
});

]]></test>

</service-task-definition>
