<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-01-15</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Append New Row</label>
<label locale="ja">Google スプレッドシート: 行追加</label>
<summary>Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.</summary>
<summary locale="ja">シート末尾に１行追加し、その各セルにデータを入力します。必要あれば行領域を拡大します。</summary>
<help-page-url>https://support.questetra.com/addons/googlesheets-appendcells/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googlesheets-appendcells/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="conf_DataIdW" required="true" form-type="TEXTFIELD">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdX" required="true" form-type="TEXTFIELD">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_DataIdA" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-A: Column-A Value of New Row</label>
    <label locale="ja">C-A: 末尾行の A 列に追加される値</label>
  </config>
  <config name="conf_DataIdB" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-B: Column-B Value of New Row</label>
    <label locale="ja">C-B: 末尾行の B 列に追加される値</label>
  </config>
  <config name="conf_DataIdC" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-C: Column-C Value of New Row</label>
    <label locale="ja">C-C: 末尾行の C 列に追加される値</label>
  </config>
  <config name="conf_DataIdD" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-D: Column-D Value of New Row</label>
    <label locale="ja">C-D: 末尾行の D 列に追加される値</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-E: Column-E Value of New Row</label>
    <label locale="ja">C-E: 末尾行の E 列に追加される値</label>
  </config>
  <config name="conf_DataIdF" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-F: Column-F Value of New Row</label>
    <label locale="ja">C-F: 末尾行の F 列に追加される値</label>
  </config>
  <config name="conf_DataIdG" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-G: Column-G Value of New Row</label>
    <label locale="ja">C-G: 末尾行の G 列に追加される値</label>
  </config>
  <config name="conf_DataIdH" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-H: Column-H Value of New Row</label>
    <label locale="ja">C-H: 末尾行の H 列に追加される値</label>
  </config>
  <config name="conf_DataIdI" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-I: Column-I Value of New Row</label>
    <label locale="ja">C-I: 末尾行の I 列に追加される値</label>
  </config>
  <config name="conf_DataIdJ" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-J: Column-J Value of New Row</label>
    <label locale="ja">C-J: 末尾行の J 列に追加される値</label>
  </config>
</configs>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// - Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// - Scope: https://www.googleapis.com/auth/spreadsheets
// - Consumer Key: (Get by Google Developers Console)
// - Consumer Secret: (Get by Google Developers Console)


//// == Config Retrieving / 工程コンフィグの参照 ==
main();
function main(){
  const oauth2 = configs.get( "conf_OAuth2" );
  const spreadsheetId = configs.get( "conf_DataIdW" );
  const sheetName = configs.get( "conf_DataIdX" );
  const dataIdA = configs.get( "conf_DataIdA" );
  const dataIdB = configs.get( "conf_DataIdB" );
  const dataIdC = configs.get( "conf_DataIdC" );
  const dataIdD = configs.get( "conf_DataIdD" );
  const dataIdE = configs.get( "conf_DataIdE" );
  const dataIdF = configs.get( "conf_DataIdF" );
  const dataIdG = configs.get( "conf_DataIdG" );
  const dataIdH = configs.get( "conf_DataIdH" );
  const dataIdI = configs.get( "conf_DataIdI" );
  const dataIdJ = configs.get( "conf_DataIdJ" );
  // convert 'java.lang.String' to 'javascript string'

  //// == Calculating / 演算 ==
  // Request QUERY (?a=b)
  // (no set)
  let requestObj = {};
    requestObj.requests = [];
    requestObj.requests[0] = {};
    requestObj.requests[0].appendCells = {};
    requestObj.requests[0].appendCells.sheetId = -1;
    requestObj.requests[0].appendCells.fields = "*";
    requestObj.requests[0].appendCells.rows = [];
    requestObj.requests[0].appendCells.rows[0] = {};
    requestObj.requests[0].appendCells.rows[0].values = [];

    requestObj.requests[0].appendCells.rows[0].values[0] = cellDataObject( dataIdA );
    requestObj.requests[0].appendCells.rows[0].values[1] = cellDataObject( dataIdB );
    requestObj.requests[0].appendCells.rows[0].values[2] = cellDataObject( dataIdC );
    requestObj.requests[0].appendCells.rows[0].values[3] = cellDataObject( dataIdD );
    requestObj.requests[0].appendCells.rows[0].values[4] = cellDataObject( dataIdE );
    requestObj.requests[0].appendCells.rows[0].values[5] = cellDataObject( dataIdF );
    requestObj.requests[0].appendCells.rows[0].values[6] = cellDataObject( dataIdG );
    requestObj.requests[0].appendCells.rows[0].values[7] = cellDataObject( dataIdH );
    requestObj.requests[0].appendCells.rows[0].values[8] = cellDataObject( dataIdI );
    requestObj.requests[0].appendCells.rows[0].values[9] = cellDataObject( dataIdJ );
    
    let count = 0;
    let flag = 1;
    for(let i = 9; i > -1; i--){
      if(requestObj.requests[0].appendCells.rows[0].values[i].userEnteredValue.stringValue === ""){
        count++;
        if(flag){
          requestObj.requests[0].appendCells.rows[0].values[i] = null;
        }
      }else{
        flag = 0;
      }
    }
    if(count === 10){
      throw "No Data to add is set.";
    }

  // Access to the API 1st(Get GID)
  let getgid = httpClient.begin().authSetting( oauth2 )
    .get (`https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}`);
  const getRes = JSON.parse(getgid.getResponseAsString());
  const sheetArray = getRes.sheets;
  if(sheetArray === [] || sheetArray === null){
    throw "Can't get sheet information";
  }
  for (var i = 0;i < sheetArray.length;i++){
    if(sheetArray[i].properties.title === sheetName){
      requestObj.requests[0].appendCells.sheetId = sheetArray[i].properties.sheetId;
    }
  }
  if (requestObj.requests[0].appendCells.sheetId === -1){
    throw `Sheet '${sheetName}' doesn't exist`;
  }
  // Set Url (https://example.com/abc/def/)
  const apiUri = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}:batchUpdate`;
  // Access to the API 2nd(POST)
  let response = httpClient.begin().authSetting( oauth2 )
    .body( JSON.stringify( requestObj ), "application/json" )
    .post( apiUri ); // HttpResponseWrapper
  
  const httpStatus = response.getStatusCode();
  if( httpStatus !== 200 ){
      engine.log(response.getResponseAsString());
      throw `Http Status is not 200: ${httpStatus}`;
    }
  //var responseObj = JSON.parse( response.getResponseAsString() );

  // Retrieve Properties from Response-JSON
  // (no action)

  // Error Handling - https://stripe.com/docs/api#errors
  // (no action)

}
// Request BODY (JSON, Form Parameters, etc)
/**
 * 設定するデータのチェック。
 * @param  {String} data 設定するデータ
 * @return {Object} dataObj 設定するデータ
 */
function cellDataObject( data ){
  let dataObj = {};
  dataObj.userEnteredValue = {};
  if( data === "" || data === null){
    dataObj.userEnteredValue.stringValue = "";
    return dataObj;
  }else{ // for "STRING" 
    if(data.length > 50000){
      throw "Can't set text over 50,000 character.";
    }
    dataObj.userEnteredValue.stringValue = data;
    return dataObj;
  }
}
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
