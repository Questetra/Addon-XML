<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-07-19</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Append New Row</label>
<label locale="ja">Google スプレッドシート: 行追加</label>
<summary>Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.</summary>
<summary locale="ja">シート末尾に１行追加し、その各セルにデータを入力します。必要あれば行領域を拡大します。</summary>
<help-page-url>https://support.questetra.com/addons/googlesheets-appendcells/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/googlesheets-appendcells/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_DataIdW" required="true" form-type="TEXTFIELD">
    <label>C2: Target Spreadsheet ID</label>
    <label locale="ja">C2: 入力先のスプレッドシートの ID</label>
  </config>
  <config name="conf_DataIdX" required="true" form-type="TEXTFIELD">
    <label>C3: Target Sheet Title</label>
    <label locale="ja">C3: 入力先のシートのタイトル</label>
  </config>
  <config name="conf_RowNum" required="false" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
    <label>C4: Data item to save the appended row number</label>
    <label locale="ja">C4: 追加した行の行番号を保存するデータ項目</label>
  </config>
  <config name="conf_DataIdA" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-A: Column-A Value of New Row</label>
    <label locale="ja">C-A: 末尾行の A 列に追加される値</label>
  </config>
  <config name="conf_DataIdB" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-B: Column-B Value of New Row</label>
    <label locale="ja">C-B: 末尾行の B 列に追加される値</label>
  </config>
  <config name="conf_DataIdC" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-C: Column-C Value of New Row</label>
    <label locale="ja">C-C: 末尾行の C 列に追加される値</label>
  </config>
  <config name="conf_DataIdD" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-D: Column-D Value of New Row</label>
    <label locale="ja">C-D: 末尾行の D 列に追加される値</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-E: Column-E Value of New Row</label>
    <label locale="ja">C-E: 末尾行の E 列に追加される値</label>
  </config>
  <config name="conf_DataIdF" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-F: Column-F Value of New Row</label>
    <label locale="ja">C-F: 末尾行の F 列に追加される値</label>
  </config>
  <config name="conf_DataIdG" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-G: Column-G Value of New Row</label>
    <label locale="ja">C-G: 末尾行の G 列に追加される値</label>
  </config>
  <config name="conf_DataIdH" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-H: Column-H Value of New Row</label>
    <label locale="ja">C-H: 末尾行の H 列に追加される値</label>
  </config>
  <config name="conf_DataIdI" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-I: Column-I Value of New Row</label>
    <label locale="ja">C-I: 末尾行の I 列に追加される値</label>
  </config>
  <config name="conf_DataIdJ" required="false" form-type="TEXTAREA" el-enabled="true">
    <label>C-J: Column-J Value of New Row</label>
    <label locale="ja">C-J: 末尾行の J 列に追加される値</label>
  </config>
</configs>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// - Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// - Scope: https://www.googleapis.com/auth/spreadsheets
// - Consumer Key: (Get by Google Developers Console)
// - Consumer Secret: (Get by Google Developers Console)

main();
function main(){
  //// == Config Retrieving / 工程コンフィグの参照 ==
  const oauth2 = configs.get( "conf_OAuth2" );
  const spreadsheetId = configs.get( "conf_DataIdW" );
  const sheetName = configs.get( "conf_DataIdX" );
  const rowNumDef = configs.getObject( "conf_RowNum" );

  const columns = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];
  const dataArray = columns.map( i => configs.get( `conf_DataId${i}` ) );

  //// == Calculating / 演算 ==
  const row = buildRowObj(dataArray);
  const sheetId = getSheetId(oauth2, spreadsheetId, sheetName); // Access to the API 1st(Get GID)
  appendRow(oauth2, spreadsheetId, sheetId, row); // Access to the API 2nd(POST)
  if(rowNumDef === null) return;

  // only when rowNumDef is not null
  const rowNum = getLastRowNum(oauth2, spreadsheetId, sheetName); // Access to the API 3rd(GET)

  //// == ワークフローデータへの代入 / Data Updating ==
  engine.setData(rowNumDef, rowNum);
}

/**
 * 文字列データを所定の形式のセルオブジェクトに変換する。
 * @param  {String} data 文字列データ
 * @return {Object} cellObj 文字列データが格納されたセルオブジェクト
 */
function buildCellObj( data ){
  const cellObj = {};
  cellObj.userEnteredValue = {};
  if( data === "" || data === null){
    cellObj.userEnteredValue.stringValue = "";
    return cellObj;
  }else{ // for "STRING"
    if(data.length > 50000){
      throw "Can't set text over 50,000 characters.";
    }
    cellObj.userEnteredValue.stringValue = data;
    return cellObj;
  }
}

/**
 * 文字列データを所定の形式の行オブジェクトに変換する。
 * @param  {Array<String>} dataArray 文字列データの配列
 * @return {Object} rowObj 文字列データが格納された行オブジェクト
 */
function buildRowObj( dataArray ){
  const rowObj = {};
  rowObj.values = dataArray.map( data => buildCellObj( data ) );

  // 後ろから空白の要素数を数える
  let count = 0;
  for(let i = rowObj.values.length; i > 0; i--) {
    if(rowObj.values[i-1].userEnteredValue.stringValue === ""){
      count++;
    }else{ // 空白でなければ、ループから抜ける
      break;
    }
  }

  // 空白部分を削除
  if(count > 0){
    rowObj.values = rowObj.values.slice(0, -count);
  }

  // すべてが空白ならエラー
  if(rowObj.values.length === 0){
    throw "No Data to add is set.";
  }

  return rowObj;
}

/**
 * GET リクエストを送信し、シート ID (GID) を取得する。
 * @param {String} oauth2 OAuth2 設定名
 * @param {String} spreadsheetId スプレッドシート ID
 * @param {String} sheetName シート名
 * @return {Number} sheetId シート ID (GID)
 */
function getSheetId(oauth2, spreadsheetId, sheetName){
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadsheetId)}?includeGridData=false`;
  const response = httpClient.begin()
    .authSetting(oauth2)
    .get(uri);
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    engine.log(responseStr);
    throw `Failed to get sheet information. status: ${status}`;
  }
  const jsonObj = JSON.parse(responseStr);
  engine.log(`SPREADSHEET (TITLE: ${jsonObj.properties.title}) has ${jsonObj.sheets.length} sheets`);
  for (let i = 0; i < jsonObj.sheets.length; i++) {
    if (jsonObj.sheets[i].properties.title === sheetName) {
      const sheetId = parseInt(jsonObj.sheets[i].properties.sheetId, 10);
      engine.log(`SHEET TITLE: ${sheetName} exists (id: ${sheetId})`);
      return sheetId;
    }
  }
  // error (not exist)
  throw `Sheet ${sheetName} does not exist`;
}

/**
 * 行追加のリクエストボディを生成する。
 * @param  {Number} sheetId シート ID (GID)
 * @return {Object} row 行オブジェクト
 */
function buildRequestObj(sheetId, row){
  const requestObj = {};
  requestObj.requests = [];
  requestObj.requests[0] = {};
  requestObj.requests[0].appendCells = {};
  requestObj.requests[0].appendCells.sheetId = sheetId;
  requestObj.requests[0].appendCells.fields = "*";
  requestObj.requests[0].appendCells.rows = [];
  requestObj.requests[0].appendCells.rows[0] = row;
  return requestObj;
}

/**
 * 行追加の POST リクエストを送信する。
 * @param {String} oauth2 OAuth2 設定名
 * @param {String} spreadsheetId スプレッドシート ID
 * @param {Number} sheetId シート ID (GID)
 * @param {Object} row 行オブジェクト
 */
function appendRow(oauth2, spreadsheetId, sheetId, row){
  const apiUri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadsheetId)}:batchUpdate`;
  const requestObj = buildRequestObj(sheetId, row);
  const response = httpClient.begin()
    .authSetting( oauth2 )
    .body( JSON.stringify( requestObj ), "application/json" )
    .post( apiUri ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  if( httpStatus !== 200 ){
    engine.log(response.getResponseAsString());
    throw `Failed to append data. status: ${httpStatus}`;
  }
}

/**
 * GET リクエストを送信し、データが入力されている最終行の行番号を返す。
 * @param {String} oauth2 OAuth2 設定名
 * @param {String} spreadsheetId スプレッドシート ID
 * @param {String} sheetName シート名
 * @return {String} データが入力されている最終行の行番号
 */
function getLastRowNum(oauth2, spreadsheetId, sheetName){
  const apiUri = `https://sheets.googleapis.com/v4/spreadsheets/${encodeURIComponent(spreadsheetId)}/values/${encodeURIComponent(sheetName)}`;
  const response = httpClient.begin()
    .authSetting( oauth2 )
    .queryParam( "majorDimension", "ROWS" )
    .get( apiUri ); // HttpResponseWrapper
  const httpStatus = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if( httpStatus !== 200 ){
    engine.log(responseStr);
    throw `Failed to get rows in the sheet. status: ${httpStatus}`;
  }
  const jsonObj = JSON.parse(responseStr);
  return jsonObj.values.length.toString();
}

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
