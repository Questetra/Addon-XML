<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <label>Microsoft 365 OneDrive for Business: Download File as PDF</label>
    <label locale="ja">Microsoft 365 OneDrive for Business: ファイルを PDF でダウンロード</label>
    <last-modified>2023-11-27</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <summary>This item downloads the specified file in OneDrive as PDF.</summary>
    <summary locale="ja">この工程は、OneDrive 内の指定ファイルを PDF 形式でダウンロードします。</summary>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2" auth-type="OAUTH2"
                oauth2-setting-name="https://graph.microsoft.com/Files.ReadWrite.All">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="conf_FileUrl" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD"
                editable="true">
            <label>C2: File URL to download</label>
            <label locale="ja">C2: ダウンロードするファイルの URL</label>
        </config>
        <config name="conf_SaveAs" form-type="TEXTFIELD" el-enabled="true">
            <label>C3: File Name (named with the file name in OneDrive if blank)</label>
            <label locale="ja">C3: ファイル名（空白の場合、OneDrive でのファイル名を使用します）</label>
        </config>
        <config name="conf_Files" required="true" form-type="SELECT" select-data-type="FILE">
            <label>C4: Data item to add the downloaded file</label>
            <label locale="ja">C4: ダウンロードファイルを追加保存するデータ項目</label>
        </config>
    </configs>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-onedrive-file-format-download/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-onedrive-file-format-download/</help-page-url>


    <script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/{your-tenant-id}/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite.All offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)

const GRAPH_URI = 'https://graph.microsoft.com/v1.0/';

function main() {
    //// == 工程コンフィグの参照 / Config Retrieving ==
    const oauth2 = configs.getObject('conf_OAuth2');
    const fileUrl = retrieveFileUrl();
    let saveAs = configs.get('conf_SaveAs');
    const filesDef = configs.getObject('conf_Files');

    //// == 演算 / Calculating ==
    const {fileName, driveId, fileId} = getFileInfoByUrl(oauth2, fileUrl);
    const {contentType, content} = downloadPdf(oauth2, driveId, fileId);
    if (saveAs === '') {
        const nameWithoutExtension = fileName.slice(0, fileName.lastIndexOf('.')); // 拡張子を除いたファイル名
        saveAs = `${nameWithoutExtension}.pdf`;
    }

    //// == ワークフローデータへの代入 / Data Updating ==
    saveFile(filesDef, saveAs, contentType, content);
}

/**
  * config からファイル URL の値を読み出す
  * ファイル URL が設定されていない場合はエラー
  * @returns {String} fileUrl ファイル URL
  */
function retrieveFileUrl() {
    const fileUrlDef = configs.getObject('conf_FileUrl');
    let fileUrl = '';
    if (fileUrlDef === null) {
        fileUrl = configs.get('conf_FileUrl');
    } else {
        fileUrl = engine.findData(fileUrlDef);
    }
    if (fileUrl === null || fileUrl === '') {
        throw 'File URL is blank.';
    }
    return fileUrl;
}

/**
  * OneDrive のファイルのメタデータを取得し、JSONオブジェクトを返す
  * APIの仕様: https://docs.microsoft.com/ja-jp/onedrive/developer/rest-api/api/shares_get?view=odsp-graph-online
  * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
  * @param {String} sharingUrl  ファイルの共有 URL
  * @returns {Object} ファイル情報 {fileName, driveId, fileId}
  */
function getFileInfoByUrl(oauth2, sharingUrl) {
    // encoding sharing URL
    const encodedSharingUrl = encodeSharingUrl(sharingUrl);

    // preparing for API Request
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('select', 'name,id,parentReference/driveId,file')
        .get(`${GRAPH_URI}shares/${encodedSharingUrl}/driveItem`);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get drive item. status: ${status}`;
    }
    const json = JSON.parse(responseStr);
    if (json.file === undefined) { // フォルダ URL を指定した場合など
        throw 'The specified URL is not a file.';
    }
    const fileName = json.name;
    const driveId = json.parentReference.driveId;
    const fileId = json.id;
    return {fileName, driveId, fileId};
}

/**
  * 共有URLを unpadded base64url 形式にエンコードする
  * @param {String} sharingUrl  共有URL
  * @returns {String} encodedSharingUrl  エンコードされた共有URL
  */
function encodeSharingUrl(sharingUrl) {
    let encodedSharingUrl = base64.encodeToUrlSafeString(sharingUrl);
    while (encodedSharingUrl.slice(-1) === '=') {
        encodedSharingUrl = encodedSharingUrl.slice(0, -1);
    }
    return `u!${encodedSharingUrl}`;
}

/**
  * OneDrive のファイルを PDF 形式でダウンロードする
  * APIの仕様: https://learn.microsoft.com/ja-jp/onedrive/developer/rest-api/api/driveitem_get_content_format?view=odsp-graph-online
  * @param {AuthSettingWrapper} oauth2  OAuth2 設定情報
  * @param {String} driveId  ドライブ ID
  * @param {String} fileId  ファイル ID
  * @returns {Object} response
  * @returns {String} response.contentType
  * @returns {ByteArrayWrapper} response.content
  */
function downloadPdf(oauth2, driveId, fileId) {
    const response = httpClient.begin()
        .authSetting(oauth2)
        .queryParam('format', 'pdf')
        .get(`${GRAPH_URI}drives/${driveId}/items/${fileId}/content`);
    const status = response.getStatusCode();
    if (status === 200) { // ドキュメントには記載がないが、直接 200 レスポンスが返ることがある
        return {
            contentType: response.getContentType(),
            content: response.getResponse()
        };
    }
    if (status === 302) { // ドキュメントの記載通り、ダウンロード URL が返る場合
        engine.log('302 Found');
        const downloadUrl = response.getHeaderValues('Location').get(0);
        return download(downloadUrl);
    }
    // 上記いずれのレスポンスステータスでもない場合、エラー
    engine.log(response.getResponseAsString());
    throw `Failed to download pdf format. status: ${status}`;
}

/**
  * ファイルをダウンロードする
  * @param {String} downloadUrl ダウンロード URL
  * @returns {Object} response
  * @returns {String} response.contentType
  * @returns {ByteArrayWrapper} response.content
  */
function download(downloadUrl) {
    const response = httpClient.begin().get(downloadUrl);
    const status = response.getStatusCode();
    if (status !== 200) {
        engine.log(response.getResponseAsString());
        throw `Failed to download. status: ${status}`;
    }
    return {
        contentType: response.getContentType(),
        content: response.getResponse()
    };
}

/**
  * ダウンロードしたファイルを保存する
  * @param {ProcessDataDefinitionView} filesDef  保存先データ項目
  * @param {String} fileName  保存する際のファイル名
  * @param {String} contentType
  * @param {ByteArrayWrapper} content
  */
function saveFile(filesDef, fileName, contentType, content){
    let files = engine.findData(filesDef);
    if (files === null) {
        files = new java.util.ArrayList();
    }
    const qfile = new com.questetra.bpms.core.event.scripttask.NewQfile(
        fileName, contentType, content
    );
    files.add(qfile);
    engine.setData(filesDef, files);
}

    ]]></script>


    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
        8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
        aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
        IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
        i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
        cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
        htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
        QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
        zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
        kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
        l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
        WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
        Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
        ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
        ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
        FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
        TkSuQmCC
    </icon>

    <test><![CDATA[

/**
 * 設定の準備
 * @param fileUrl
 * @param isFileUrlFixed
 * @param saveAs
 * @param files
 * @return filesDef
 */
const prepareConfigs = (fileUrl, isFileUrlFixed, saveAs, files) => {
    const oauth2 = httpClient.createAuthSettingOAuth2(
        'OneDrive',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/authorize',
        'https://login.microsoftonline.com/organizations/oauth2/v2.0/token',
        'https://graph.microsoft.com/Files.ReadWrite.All offline_access',
        'client_id',
        'client_secret',
        'access_token'
    );
    configs.putObject('conf_OAuth2', oauth2);

    if (isFileUrlFixed) {
        configs.put('conf_FileUrl', fileUrl);
    } else {
        const fileUrlDef = engine.createDataDefinition('ファイル URL', 1, 'q_fileUrl', 'STRING_TEXTFIELD');
        engine.setData(fileUrlDef, fileUrl);
        configs.putObject('conf_FileUrl', fileUrlDef);
    }

    configs.put('conf_SaveAs', saveAs);

    const filesDef = engine.createDataDefinition('ファイル', 2, 'q_files', 'FILE');
    engine.setData(filesDef, files);
    configs.putObject('conf_Files', filesDef);
    return filesDef;
};

/**
 * 異常系のテスト
 * @param func
 * @param errorMsg
 */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
 * ファイル URL を文字型データ項目で指定し、値が空でエラー
 */
test('File URL is blank', () => {
    prepareConfigs(null, false, '', null);
    assertError(main, 'File URL is blank.');
});

/**
 * ドライブアイテム取得の GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param sharingUrl
 */
const assertGetDriveItemRequest = ({ url, method, headers }, sharingUrl) => {
    const encodedUrl = encodeSharingUrl(sharingUrl);
    const expectedUrl = `${GRAPH_URI}shares/${encodedUrl}/driveItem`
        + `?select=${encodeURIComponent('name,id,parentReference/driveId,file')}`;
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers['Authorization']).toEqual('Bearer access_token');
};

/**
 * ドライブアイテム取得の GET リクエストでエラー
 */
test('Fail in 1st GET request', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test1.txt';
    prepareConfigs(fileUrl, false, '', null);
    httpClient.setRequestHandler((request) => {
        assertGetDriveItemRequest(request, fileUrl);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to get drive item. status: 400');
});

/**
 * 指定した URL がファイルでない場合、エラー
 */
test('The specified URL is not a file', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/folder1';
    prepareConfigs(fileUrl, false, '', null);
    const folderObj = {
        name: 'folder1',
        parentReference: { driveId: 'driveId-1' },
        id: 'folderId-1'
    };
    httpClient.setRequestHandler((request) => {
        assertGetDriveItemRequest(request, fileUrl);
        return httpClient.createHttpResponse(200, 'application/json', JSON.stringify(folderObj));
    });
    assertError(main, 'The specified URL is not a file.');
});

/**
 * ドライブアイテム取得の GET リクエストのレスポンスを準備
 * @param fileName
 * @param driveId
 * @param fileId
 * @return {Object} responseObj
 */
const prepareDriveItemResponse = (fileName, driveId, fileId) => {
    return JSON.stringify(
        {
            "id": fileId,
            "name": fileName,
            "parentReference": {
                "driveId": driveId
            },
            "file": {} // ファイルであることの確認用
        }
    );
};

/**
 * PDF ダウンロードの GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param request.headers
 * @param driveId
 * @param fileId
 */
const assertDownloadPdfRequest = ({ url, method, headers }, driveId, fileId) => {
    const expectedUrl = `${GRAPH_URI}drives/${driveId}/items/${fileId}/content`
        + '?format=pdf';
    expect(url).toEqual(expectedUrl);
    expect(method).toEqual('GET');
    expect(headers['Authorization']).toEqual('Bearer access_token');
};

/**
 * PDF ダウンロードの GET リクエストでエラー
 */
test('Fail in 2nd GET request', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test1.txt';
    prepareConfigs(fileUrl, false, '', null);

    const fileName = 'test1.txt';
    const driveId = 'driveId-1';
    const fileId = 'fileId-1';
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetDriveItemRequest(request, fileUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', prepareDriveItemResponse(fileName, driveId, fileId));
        }
        assertDownloadPdfRequest(request, driveId, fileId);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to download pdf format. status: 400');
});

/**
 * ファイルのテスト
 * @param file
 * @param name
 * @param contentType
 */
const assertFile = (file, name, contentType) => {
    expect(file.getName()).toEqual(name);
    expect(file.getContentType()).toEqual(contentType);
};

/**
 * 成功
 * PDF ダウンロードの GET リクエストが 200 を返す場合
 * ファイル URL は文字型データ項目
 * 保存ファイル名の指定なし
 * ファイル型データ項目に事前ファイルの添付なし
 */
test('Succeed - set file URL by data item, no saveAs, no existing files', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test1.txt';
    const filesDef = prepareConfigs(fileUrl, false, '', null);

    let reqCount = 0;
    const driveId = 'driveId-1';
    const fileId = 'fileId-1';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetDriveItemRequest(request, fileUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', prepareDriveItemResponse('test1.txt', driveId, fileId));
        }
        assertDownloadPdfRequest(request, driveId, fileId);
        return httpClient.createHttpResponse(200, 'application/pdf', 'aaaaa');
    });
    expect(main()).toEqual(undefined);

    const files = engine.findData(filesDef);
    expect(files.size()).toEqual(1);
    assertFile(files.get(0), 'test1.pdf', 'application/pdf');
});

/**
 * 成功
 * PDF ダウンロードの GET リクエストが 200 を返す場合
 * ファイル URL は固定値で指定
 * 保存ファイル名の指定あり
 * ファイル型データ項目に事前ファイルの添付あり
 */
test('Succeed - set file URL as fixed value, with saveAs, with existing files', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test2.txt';
    const saveAs = '新しいファイル.pdf';
    let files = new java.util.ArrayList();
    files.add(engine.createQfile('test.html', 'text/html; charset=UTF-8', '<html lang="ja"></html>'));
    files.add(engine.createQfile('test.xml', 'text/xml; charset=UTF-16', '<xml>さようなら</xml>'));
    const filesDef = prepareConfigs(fileUrl, true, saveAs, files);

    let reqCount = 0;
    const driveId = 'driveId-2';
    const fileId = 'fileId-2';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetDriveItemRequest(request, fileUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', prepareDriveItemResponse('test2.txt', driveId, fileId));
        }
        assertDownloadPdfRequest(request, driveId, fileId);
        return httpClient.createHttpResponse(200, 'application/pdf', 'bbbbb');
    });
    expect(main()).toEqual(undefined);

    files = engine.findData(filesDef);
    expect(files.size()).toEqual(3);
    assertFile(files.get(0), 'test.html', 'text/html; charset=UTF-8');
    assertFile(files.get(1), 'test.xml', 'text/xml; charset=UTF-16');
    assertFile(files.get(2), '新しいファイル.pdf', 'application/pdf');
});


//// 以下、実際には起こらないかもしれないが、API ドキュメントの記載通りのレスポンスが返った場合のテスト

/**
 * ファイルダウンロードの GET リクエストのテスト
 * @param {Object} request
 * @param request.url
 * @param request.method
 * @param downloadUrl
 */
const assertDownloadFileRequest = ({ url, method }, downloadUrl) => {
    expect(url).toEqual(downloadUrl);
    expect(method).toEqual('GET');
};

/**
 * ファイルダウンロードの GET リクエストでエラー
 */
test('Fail in 3rd GET request', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test1.txt';
    prepareConfigs(fileUrl, false, '', null);

    const fileName = 'test1.txt';
    const driveId = 'driveId-1';
    const fileId = 'fileId-1';
    const downloadUrl = 'https://test-my.sharepoint.com/personal/downloadUrlWithTempAuth1';
    let reqCount = 0;
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetDriveItemRequest(request, fileUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', prepareDriveItemResponse(fileName, driveId, fileId));
        }
        if (reqCount === 1) {
            assertDownloadPdfRequest(request, driveId, fileId);
            const response = httpClient.createHttpResponse(302, 'application/json', '{}');
            response.addHeader('Location', downloadUrl);
            reqCount++;
            return response;
        }
        assertDownloadFileRequest(request, downloadUrl);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to download. status: 400');
});

/**
 * 成功
 * PDF ダウンロードの GET リクエストが 302 を返し、Location ヘッダのダウンロード URL からダウンロードする場合
 */
test('Succeed - download from the location header', () => {
    const fileUrl = 'https://test-my.sharepoint.com/personal/aaa/Documents/test3.txt';
    const filesDef = prepareConfigs(fileUrl, false, '', null);

    let reqCount = 0;
    const driveId = 'driveId-3';
    const fileId = 'fileId-3';
    const downloadUrl = 'https://test-my.sharepoint.com/personal/downloadUrlWithTempAuth2';
    httpClient.setRequestHandler((request) => {
        if (reqCount === 0) {
            assertGetDriveItemRequest(request, fileUrl);
            reqCount++;
            return httpClient.createHttpResponse(200, 'application/json', prepareDriveItemResponse('test3.txt', driveId, fileId));
        }
        if (reqCount === 1) {
            assertDownloadPdfRequest(request, driveId, fileId);
            const response = httpClient.createHttpResponse(302, 'application/json', '{}');
            response.addHeader('Location', downloadUrl);
            reqCount++;
            return response;
        }
        assertDownloadFileRequest(request, downloadUrl);
        return httpClient.createHttpResponse(200, 'application/pdf', 'ccccc');
    });
    expect(main()).toEqual(undefined);

    const files = engine.findData(filesDef);
    expect(files.size()).toEqual(1);
    assertFile(files.get(0), 'test3.pdf', 'application/pdf');
});

]]></test>

</service-task-definition>
