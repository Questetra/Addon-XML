<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <last-modified>2023-06-05</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Twilio SendGrid: Send Email</label>
    <label locale="ja">Twilio SendGrid: メール送信</label>
    <summary>This item sends emails to the contacts in the specified lists and/or segments on SendGrid.</summary>
    <summary locale="ja">この工程は、SendGrid のリストやセグメントに含まれる宛先にメールを一斉送信します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/sendgrid-email-send/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/sendgrid-email-send/</help-page-url>
    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
            <label>C1: API Key</label>
            <label locale="ja">C1: API キー</label>
        </config>
        <config name="conf_Categories" el-enabled="true" form-type="TEXTAREA">
            <label>C2: Categories for filtering logs (write one per line)</label>
            <label locale="ja">C2: メール送信ログ検索用カテゴリ（複数設定する場合、1 行に 1 つ）</label>
        </config>
        <config name="conf_SenderId" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C3: Sender ID</label>
            <label locale="ja">C3: 送信者 ID</label>
        </config>
        <config name="conf_ListIds" el-enabled="true" form-type="TEXTAREA">
            <label>C4-A: List IDs to send the emails to (write one per line)</label>
            <label locale="ja">C4-A: メールを送信する宛先リストの ID（複数設定する場合、1 行に 1 つ）</label>
        </config>
        <config name="conf_SegmentIds" el-enabled="true" form-type="TEXTAREA">
            <label>C4-B: Segment IDs to send the emails to (write one per line)</label>
            <label locale="ja">C4-B: メールを送信する宛先セグメントの ID（複数設定する場合、1 行に 1 つ）</label>
        </config>
        <config name="conf_UnsubscribeGroupId" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C5: Unsubscribe Group ID</label>
            <label locale="ja">C5: 配信解除グループの ID</label>
        </config>
        <config name="conf_SendAt" form-type="SELECT" select-data-type="DATETIME">
            <label>C6: Scheduled Datetime (if blank, sent immediately)</label>
            <label locale="ja">C6: 送信日時（指定しない場合、即座に送信されます）</label>
        </config>
        <config name="conf_DesignId" el-enabled="true" form-type="TEXTFIELD">
            <label>C7-A: Design ID</label>
            <label locale="ja">C7-A: デザイン ID</label>
        </config>
        <config name="conf_HasUniqueContent" form-type="TOGGLE">
            <label>C7-B: Configure the subject and content without using Design</label>
            <label locale="ja">C7-B: デザインを使用せず、件名と本文を直接指定する</label>
        </config>
        <config name="conf_Subject" depends-on="conf_HasUniqueContent" required="true" el-enabled="true" form-type="TEXTFIELD">
            <label>C7-B1: Subject</label>
            <label locale="ja">C7-B1: 件名</label>
        </config>
        <config name="conf_HtmlContent" depends-on="conf_HasUniqueContent" required="true" el-enabled="true" form-type="TEXTAREA">
            <label>C7-B2: HTML Content</label>
            <label locale="ja">C7-B2: HTML メールの本文</label>
        </config>
        <config name="conf_PlainContent" depends-on="conf_HasUniqueContent" el-enabled="true" form-type="TEXTAREA">
            <label>C7-B3: Plain Text Content (if blank, auto-generated from HTML)</label>
            <label locale="ja">C7-B3: プレーンテキストメールの本文（指定しない場合、HTML メールの本文から自動生成されます）</label>
        </config>
        <config name="conf_SingleSendId" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C8: Data item to save ID of the email sending</label>
            <label locale="ja">C8: メール送信の ID を保存するデータ項目</label>
        </config>
        <config name="conf_SingleSendUrl" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C9: Data item to save URL of the email sending status page</label>
            <label locale="ja">C9: メール送信のステータス確認ページの URL を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[
main();
function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const categories = retrieveCategories();
    const senderId = retrieveIdAsInt('conf_SenderId', 'Sender ID');
    const sendTo = retrieveSendTo();
    const unsubscribeGroupId = retrieveIdAsInt('conf_UnsubscribeGroupId', 'Unsubscribe Group ID');
    const sendAt = retrieveSendAt();
    const content = retrieveContent();
    const singleSendIdDef = configs.getObject('conf_SingleSendId');
    const singleSendUrlDef = configs.getObject('conf_SingleSendUrl');

    //// == Calculating / 演算 ==
    const singleSendId = createSingleSend(auth, categories, senderId, sendTo, unsubscribeGroupId, content);
    scheduleSingleSend(auth, singleSendId, sendAt);

    //// == Data Updating / ワークフローデータへの代入 ==
    setData(singleSendIdDef, singleSendId);
    setData(singleSendUrlDef, `https://mc.sendgrid.com/single-sends/${singleSendId}/stats`);
}

/**
  * config に設定されたカテゴリ一覧を読み出す
  * 以下の場合はエラー
  * - 件数が多すぎる
  * - カテゴリが ASCII 文字でないものを含む
  * @return {Array<String>} categories
  */
function retrieveCategories() {
    const categories = configs.get('conf_Categories').split('\n')
        .filter(category => category !== '');
    if (categories.length > 10) {
        throw 'The maximum number of Categories is 10.';
    }
    if (!categories.every(isAscii)) {
        throw 'Categories cannot include non-ascii characters.';
    }
    return categories;
}

/**
  * 文字列が ASCII 文字だけで構成されているかどうか
  * @param {String} text テストする文字列
  * @return {boolean} 文字列が ASCII 文字だけで構成されているかどうか
  */
function isAscii(text) {
    const reg = new RegExp('^[\x00-\x7F]+$');
    return reg.test(text);
}

/**
  * config に設定された ID を数値として読み出す
  * @param {String} confName 設定名
  * @param {String} label エラーメッセージ用ラベル
  * @return {Number} id
  */
function retrieveIdAsInt(confName, label) {
    const idStr = configs.get(confName);
    if (idStr === '') {
        throw `${label} is blank.`;
    }
    const reg = new RegExp('^\\d+$');
    if (!reg.test(idStr)) {
        throw `${label} must be integer.`;
    }
    return parseInt(idStr, 10);
}

/**
  * config に設定された宛先情報を読み出す
  * @return {Object} sendTo
  * @return {Array<String>} sendTo.listIds
  * @return {Array<String>} sendTo.segmentIds
  */
function retrieveSendTo() {
    const listIds = configs.get('conf_ListIds').split('\n')
        .filter(id => id !== '');
    if (listIds.length > 50) {
        throw 'The maximum number of List IDs is 50.';
    }
    const segmentIds = configs.get('conf_SegmentIds').split('\n')
        .filter(id => id !== '');
    if (segmentIds.length > 10) {
        throw 'The maximum number of Segment IDs is 10.';
    }
    if (listIds.length === 0 && segmentIds.length === 0) {
        throw 'No List IDs or Segment IDs.';
    }
    return {listIds, segmentIds};
}

/**
  * config に設定された送信日時を文字列として読み出す
  * データ項目が選択されていない場合は文字列 now を返す
  * @return {String} sendAt
  */
function retrieveSendAt() {
    const dataDef = configs.getObject('conf_SendAt');
    if (dataDef === null) {
        return 'now';
    }
    const datetime = engine.findData(dataDef); // AddableTimestamp
    if (datetime === null) {
        throw 'Scheduled Datetime is selected but its data is null.';
    }
    if (datetime.getTime() <= Date.now()) {
        throw 'Scheduled Datetime must be future.';
    }
    return dateFormatter.format('UTC', "yyyy-MM-dd'T'HH:mm:ss'Z'", datetime);
}

/**
  * config に設定されたメールの中身の情報を読み出す
  * @return {Object} content メールの中身
  * @return {String} content.designId デザイン ID
  * @return {String} content.subject メールの件名
  * @return {String} content.htmlContent HTML メールの本文
  * @return {String} content.plainContent プレーンテキストメールの本文
  */
function retrieveContent() {
    const designId = configs.get('conf_DesignId');
    const hasUniqueContent = configs.getObject('conf_HasUniqueContent');
    if (!hasUniqueContent) { // デザイン ID を指定する場合
        if (designId === '') {
            throw 'Design ID is blank.';
        }
        return {designId};
    }
    // 件名、本文を直接指定する場合
    if (designId !== '') {
        throw 'Design ID is set while "Configure the subject and content without using Design" is enabled.';
    }
    const subject = configs.get('conf_Subject');
    if (subject === '') {
        throw 'Subject is blank.';
    }
    const htmlContent = configs.get('conf_HtmlContent');
    if (htmlContent === '') {
        throw 'HTML Content is blank.'
    }
    const plainContent = configs.get('conf_PlainContent');
    const content = {subject, htmlContent, plainContent};
}

/**
  * Single Send のドラフトを作成する
  * @param {String} auth 認証設定名
  * @param {Array<String>} categories カテゴリ一覧
  * @param {Number} senderId 送信者 ID
  * @param {Object} sendTo 宛先情報
  * @param {Array<String>} sendTo.listIds 宛先リストの ID 一覧
  * @param {Array<String>} sendTo.segmentIds 宛先セグメントの ID 一覧
  * @param {Number} unsubscribeGroupId 配信解除グループ ID
  * @param {Object} content メールの中身
  * @return {String} singleSendId
  */
function createSingleSend(auth, categories, senderId, sendTo, unsubscribeGroupId, content) {
    const requestBody = buildRequestBody(categories, senderId, sendTo, unsubscribeGroupId, content);
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(requestBody), 'application/json')
        .post('https://api.sendgrid.com/v3/marketing/singlesends');
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(responseStr);
        throw `Failed to create single send. status: ${status}`;
    }
    return JSON.parse(responseStr).id;
}

/**
  * リクエストボディを作成
  * @param {Array<String>} categories カテゴリ一覧
  * @param {Number} senderId 送信者 ID
  * @param {Object} sendTo 宛先情報
  * @param {Array<String>} sendTo.listIds 宛先リストの ID 一覧
  * @param {Array<String>} sendTo.segmentIds 宛先セグメントの ID 一覧
  * @param {Number} unsubscribeGroupId 配信解除グループ ID
  * @param {Object} content メールの中身
  * @param {String} content.designId デザイン ID
  * @param {String} content.subject メールの件名
  * @param {String} content.htmlContent HTML メールの本文
  * @param {String} content.plainContent プレーンテキストメールの本文
  * @return {Object} requestBody
  */
function buildRequestBody(categories, senderId, sendTo, unsubscribeGroupId, {designId, subject, htmlContent, plainContent}) {
    const emailConfig = {
        sender_id: senderId,
        suppression_group_id: unsubscribeGroupId
    };
    if (designId !== undefined) {
        emailConfig.design_id = designId;
    } else {
        emailConfig.subject = subject;
        emailConfig.html_content = htmlContent;
        if (plainContent !== '') {
            emailConfig.generate_plain_content = false;
            emailConfig.plain_content = plainContent;
        }
    }
    const requestBody = {
        name: `Questetra-m${processInstance.getProcessModelInfoId()}-p${processInstance.getProcessInstanceId()}`,
        send_to: {
            list_ids: sendTo.listIds,
            segment_ids: sendTo.segmentIds
        },
        email_config: emailConfig
    };
    if (categories.length > 0) {
        requestBody.categories = categories;
    }
    return requestBody;
}

/**
  * Single Send の送信予約をする
  * @param {String} auth 認証設定名
  * @param {String} singleSendId 送信設定の ID
  * @param {String} sendAt 送信日時
  */
function scheduleSingleSend(auth, singleSendId, sendAt) {
    const requestBody = {
        send_at: sendAt
    };
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(requestBody), 'application/json')
        .put(`https://api.sendgrid.com/v3/marketing/singlesends/${singleSendId}/schedule`);

    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status >= 300) {
        engine.log(responseStr);
        throw `Failed to schedule single send. status: ${status}, singleSendId: ${singleSendId}`;
    }
}

/**
  * データ項目にデータを保存する
  * @param {DataDefinitionView} dataDef データ項目の DataDefinitionView
  * @param {Object} value 保存する値
  */
function setData(dataDef, value) {
    if (dataDef !== null) {
        engine.setData(dataDef, value);
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
        ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
        22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
        AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
        XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
        IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
        ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
        cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
        zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
        7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
        BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
        MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
        AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
        hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
        chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=
    </icon>
    
</service-task-definition>
