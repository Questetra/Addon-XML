<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <engine-type>3</engine-type>
    <addon-version>2</addon-version>
    <last-modified>2023-08-24</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <label>Twilio SendGrid: Send Email</label>
    <label locale="ja">Twilio SendGrid: メール送信</label>
    <summary>This item sends an email to the specified email addresses in To/Cc/Bcc, using SendGrid.</summary>
    <summary locale="ja">この工程は、SendGrid を使用して、To/Cc/Bcc に指定したメールアドレスにメールを送信します。</summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-sendgrid-email-send/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-sendgrid-email-send/</help-page-url>
    <tabs>
        <tab>
            <label>API Key and Email Settings</label>
            <label locale="ja">API キーと送信設定</label>
            <configs>
                <config name="conf_Auth" required="true" form-type="OAUTH2" auth-type="TOKEN">
                    <label>C1: Authorization Setting in which API Key is set as token</label>
                    <label locale="ja">C1: API キーをトークンとして設定した認証設定</label>
                </config>
                <config name="conf_From" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD|SELECT_SINGLE" editable="true">
                    <label>C2: From Email Address (must be verified as sender on SendGrid)</label>
                    <label locale="ja">C2: From メールアドレス（SendGrid で送信者として認証済みである必要があります）</label>
                </config>
                <config name="conf_FromName" form-type="TEXTFIELD" el-enabled="true">
                    <label>C3: From Display Name</label>
                    <label locale="ja">C3: From 表示名</label>
                </config>
                <config name="conf_SendAt" form-type="SELECT" select-data-type="DATETIME">
                    <label>C4: Scheduled Datetime (if blank, sent immediately)</label>
                    <label locale="ja">C4: 送信日時（指定しない場合、即座に送信されます）</label>
                </config>
            </configs>
        </tab>
        <tab>
            <label>Send To</label>
            <label locale="ja">送信先</label>
            <configs>
                <config name="conf_To" required="true" form-type="SELECT" select-data-type="STRING|SELECT">
                    <label>C5: To Email Addresses (write one per line)</label>
                    <label locale="ja">C5: To メールアドレス（文字型データ項目の場合、1 行に 1 つ）</label>
                </config>
                <config name="conf_Cc" form-type="SELECT" select-data-type="STRING|SELECT">
                    <label>C6: Cc Email Addresses (write one per line)</label>
                    <label locale="ja">C6: Cc メールアドレス（文字型データ項目の場合、1 行に 1 つ）</label>
                </config>
                <config name="conf_Bcc" form-type="SELECT" select-data-type="STRING|SELECT">
                    <label>C7: Bcc Email Addresses (write one per line)</label>
                    <label locale="ja">C7: Bcc メールアドレス（文字型データ項目の場合、1 行に 1 つ）</label>
                </config>
            </configs>
        </tab>
        <tab>
            <label>Email Content</label>
            <label locale="ja">メール本文</label>
            <configs>
                <config name="conf_Subject" depends-on="conf_HasUniqueContent" required="true" el-enabled="true" form-type="TEXTFIELD">
                    <label>C8: Subject</label>
                    <label locale="ja">C8: 件名</label>
                </config>
                <config name="conf_HtmlContent" depends-on="conf_HasUniqueContent" el-enabled="true" form-type="TEXTAREA">
                    <label>C9: HTML Content</label>
                    <label locale="ja">C9: HTML メールの本文</label>
                </config>
                <config name="conf_PlainContent" depends-on="conf_HasUniqueContent" el-enabled="true" form-type="TEXTAREA">
                    <label>C10: Plain Text Content</label>
                    <label locale="ja">C10: プレーンテキストメールの本文</label>
                </config>
            </configs>
        </tab>
        <tab>
            <label>Additional Settings</label>
            <label locale="ja">追加設定</label>
            <configs>
                <config name="conf_Categories" form-type="SELECT" select-data-type="STRING|SELECT">
                    <label>C11: Categories for filtering logs (write one per line)</label>
                    <label locale="ja">C11: メール送信ログ検索用カテゴリ（文字型データ項目の場合、1 行に 1 つ）</label>
                </config>
            </configs>
        </tab>
    </tabs>

    <script><![CDATA[

const MAX_CATEGORY_NUM = 10;
const MAX_CATEGORY_LENGTH = 255;
const MAX_RECIPIENT_NUM = 1000;
const MAX_SCHEDULABLE_HOURS = 72;

function main() {
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.getObject('conf_Auth');
    const from = retrieveFrom();
    const sendAt = retrieveSendAt();
    const sendTo = retrieveSendTo();
    const content = retrieveContent();
    const categories = retrieveCategories();

    //// == Calculating / 演算 ==
    sendMail(auth, from, sendAt, sendTo, content, categories);
}

/**
  * config に設定された送信者の情報を読み出す
  * @return {Object} from
  * @return {String} from.email
  * @return {String} from.name
  */
function retrieveFrom() {
    const email = retrieveId('conf_From', 'From Email Address');
    const from = { email };
    const name = configs.get('conf_FromName');
    if (name !== null && name !== '') {
        Object.assign(from, { name });
    }
    return from;
}

/**
  * config に設定されたカテゴリ一覧を読み出す
  * 以下の場合はエラー
  * - 件数が多すぎる
  * - カテゴリが ASCII 文字でないものを含む
  * - 文字数が多すぎる
  * - カテゴリ指定が重複
  * @return {Array<String>} categories
  */
function retrieveCategories() {
    const categories = retrieveIdsAsList('conf_Categories', 'Categories', MAX_CATEGORY_NUM);
    if (!categories.every(isAscii)) {
        throw 'Categories cannot include non-ascii characters.';
    }
    // API ドキュメントに文字数制限の記載はないが、実際には制限がある
    if (categories.some(category => category.length > MAX_CATEGORY_LENGTH)) {
        throw `Each category must be within ${MAX_CATEGORY_LENGTH} characters.`;
    }
    const set = new Set(categories);
    if (categories.length !== set.size) {
        throw 'The same category is set multiple times.';
    }
    return categories;
}

/**
  * 文字列が ASCII 文字だけで構成されているかどうか
  * @param {String} text テストする文字列
  * @return {boolean} 文字列が ASCII 文字だけで構成されているかどうか
  */
function isAscii(text) {
    const reg = new RegExp('^[\x00-\x7F]+$');
    return reg.test(text);
}

/**
  * config に設定された ID を読み出す
  * ID が設定されていない場合はエラー
  * @param {String} confName 設定名
  * @param {String} label エラーメッセージ用ラベル
  * @return {String} id
  */
function retrieveId(confName, label) {
    const idDef = configs.getObject(confName);
    if (idDef === null) { // 固定値で指定
        const id = configs.get(confName);
        if (id === null || id === '') {
            throw `${label} is blank.`;
        }
        return id;
    }
    // 文字型データ項目で指定
    if (idDef.matchDataType('STRING_TEXTFIELD')) {
        const id = engine.findData(idDef);
        if (id === null || id === '') {
            throw `${label} is blank.`;
        }
        return id;
    }
    // 選択型データ項目で指定
    const selects = engine.findData(idDef);
    if (selects === null || selects.size() === 0) {
        throw `${label} is not selected.`;
    }
    return selects.get(0).getValue();
}

/**
  * config に設定された宛先情報を読み出す
  * @return {Object} sendTo
  * @return {Array<String>} sendTo.to
  * @return {Array<String>} sendTo.cc
  * @return {Array<String>} sendTo.bcc
  */
function retrieveSendTo() {
    const label = 'recipients (To + Cc + Bcc)'
    const to = retrieveIdsAsList('conf_To', label, MAX_RECIPIENT_NUM);
    if (to.length === 0) {
        throw 'At least one To Email Address is required.';
    }
    const cc = retrieveIdsAsList('conf_Cc', label, MAX_RECIPIENT_NUM);
    const bcc = retrieveIdsAsList('conf_Bcc', label, MAX_RECIPIENT_NUM);
    const recipientNum = to.length + cc.length + bcc.length;
    if (recipientNum > MAX_RECIPIENT_NUM) {
        throw `The maximum number of ${label} is ${MAX_RECIPIENT_NUM}.`;
    }
    const recipients = new Set(to.concat(cc).concat(bcc)); // 重複確認用
    if (recipientNum !== recipients.size) {
        throw 'Each email address must be unique between To, Cc, and Bcc.';
    }
    return { to, cc, bcc };
}

/**
  * config に設定された ID 一覧を読み出す
  * @param {String} confName 設定名
  * @param {String} label エラーメッセージ用ラベル
  * @param {Number} maxNum 最大件数
  * @return {Array<String>} ids
  */
function retrieveIdsAsList(confName, label, maxNum) {
    const dataDef = configs.getObject(confName);
    if (dataDef === null) {
        return [];
    }
    // 文字型データ項目の場合
    if (dataDef.matchDataType('STRING')) {
        const dataObj = engine.findData(dataDef);
        if (dataObj === null) {
            return [];
        }
        const ids = dataObj.split('\n')
            .filter(id => id !== '');
        if (ids.length > maxNum) {
            throw `The maximum number of ${label} is ${maxNum}.`;
        }
        return ids;
    }
    // 選択型データ項目の場合
    const selects = engine.findData(dataDef);
    if (selects === null || selects.size() === 0) {
        return [];
    }
    const ids = [];
    selects.forEach(item => {
        ids.push(item.getValue()); // 選択肢 ID を格納
    });
    if (ids.length > maxNum) {
        throw `The maximum number of ${label} is ${maxNum}.`;
    }
    return ids;
}

/**
  * config に設定された送信日時を UNIX タイムスタンプとして読み出す
  * データ項目が選択されていない場合は文字列 null を返す
  * @return {Number} sendAt
  */
function retrieveSendAt() {
    const dataDef = configs.getObject('conf_SendAt');
    if (dataDef === null) {
        return null;
    }
    const datetime = engine.findData(dataDef); // AddableTimestamp
    if (datetime === null) {
        throw 'Scheduled Datetime is selected but its data is null.';
    }
    const sendAt = Math.floor(datetime.getTime() / 1000);
    const now = Math.floor(Date.now() / 1000);
    if (sendAt <= now) {
        throw 'Scheduled Datetime must be future.';
    }
    if (sendAt - now > MAX_SCHEDULABLE_HOURS * 60 * 60) {
        throw `Scheduled Datetime must be within ${MAX_SCHEDULABLE_HOURS} hours.`;
    }
    return sendAt;
}

/**
  * config に設定されたメールの中身の情報を読み出す
  * @return {Object} content メールの中身
  * @return {String} content.subject メールの件名
  * @return {String} content.htmlContent HTML メールの本文
  * @return {String} content.plainContent プレーンテキストメールの本文
  */
function retrieveContent() {
    const subject = configs.get('conf_Subject');
    if (subject === '') {
        throw 'Subject is blank.';
    }
    const htmlContent = configs.get('conf_HtmlContent');
    const plainContent = configs.get('conf_PlainContent');
    if (htmlContent === '' && plainContent === '') {
        throw 'HTML Content and Plain Content are blank. At least one of them is required.';
    }
    return { subject, htmlContent, plainContent };
}

/**
  * メールを送信する
  * @param {AuthSettingWrapper} auth 認証設定
  * @param {Object} from 送信元
  * @param {Number} sendAt 送信日時
  * @param {Object} sendTo 宛先情報
  * @param {Object} content メールの中身
  * @param {Array<String>} categories カテゴリ一覧
  */
function sendMail(auth, from, sendAt, sendTo, content, categories) {
    const requestBody = buildRequestBody(from, sendAt, sendTo, content, categories);
    const response = httpClient.begin()
        .authSetting(auth)
        .body(JSON.stringify(requestBody), 'application/json')
        .post('https://api.sendgrid.com/v3/mail/send');
    const status = response.getStatusCode();
    if (status !== 202) {
        engine.log(response.getResponseAsString());
        throw `Failed to send mail. status: ${status}`;
    }
    // リクエスト成功時のレスポンスは空
}

/**
  * リクエストボディを作成
  * @param {Object} from 送信元
  * @param {Number} sendAt 送信日時
  * @param {Object} sendTo 宛先情報
  * @param {Array<String>} sendTo.to To メールアドレス一覧
  * @param {Array<String>} sendTo.cc Cc メールアドレス一覧
  * @param {Array<String>} sendTo.bcc Bcc メールアドレス一覧
  * @param {Object} content メールの中身
  * @param {String} content.subject メールの件名
  * @param {String} content.htmlContent HTML メールの本文
  * @param {String} content.plainContent プレーンテキストメールの本文
  * @param {Array<String>} categories カテゴリ一覧
  * @return {Object} requestBody
  */
function buildRequestBody(from, sendAt, sendTo, { subject, htmlContent, plainContent }, categories) {
    const requestBody = {
        from,
        send_at: sendAt,
        personalizations: [buildPersonalization(sendTo)],
        subject,
        content: buildContent(plainContent, htmlContent)
    };
    if (categories.length > 0) {
        Object.assign(requestBody, { categories });
    }
    return requestBody;
}

/**
  * リクエストボディの personalization を作成
  * @param {Object} sendTo 宛先情報
  * @param {Array<String>} sendTo.to To メールアドレス一覧
  * @param {Array<String>} sendTo.cc Cc メールアドレス一覧
  * @param {Array<String>} sendTo.bcc Bcc メールアドレス一覧
  * @return {Object} personalization
  */
function buildPersonalization({ to, cc, bcc }) {
    const personalization = {
        to: to.map((email) => ({ email }))
    };
    if (cc.length > 0) {
        Object.assign(personalization, { cc: cc.map((email) => ({ email })) });
    }
    if (bcc.length > 0) {
        Object.assign(personalization, { bcc: bcc.map((email) => ({ email })) });
    }
    return personalization;
}

/**
  * リクエストボディの content を作成
  * @param {String} plainContent プレーンテキストメールの本文
  * @param {String} htmlContent HTML メールの本文
  * @return {Array<Object>} content
  */
function buildContent(plainContent, htmlContent) {
    const content = [];
    // プレーンテキストの本文がある場合、HTML 本文よりも先に設定する必要がある
    if (plainContent !== '') {
        content.push({
            type: 'text/plain',
            value: plainContent
        });
    }
    if (htmlContent !== '') {
        content.push({
            type: 'text/html',
            value: htmlContent
        });
    }
    return content;
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADBUlEQVRYR8WXS08TURTH/5cWBeXZ
        ipHFjBh3JIYSdKELYePGZCYS4jMxtiauwU+gJm40JpYPYKhxodEoj+4R4lYrjQsXimKrUhKRNxNC
        22vuTMcZ5s50psLgbCY5c++c3zn33PMg+M8PqUh/MnMOFN0gJAKgCQB7s2cKwCIoZe8JyOKo1/+6
        AwwvNCG42g9KB0AIU+r+ULoIQuLI1w2it3mx3IbyAGPfo0DxoWfFVk0qCGKQxBEnCGeAZDYOoN/d
        XA8rKI1DFm/arbQHSGYSALnm4dfel1CagCzGrBt4ABfL+w7V4lhDNae4LkiwmqecPKsU8Ci7pssH
        IQkD5kVbAdiZEzpUzqzJUy04HdrLLfm4mse9z8uc/OzBWlxMzZvktNccEwYAi/bAyle3gHMCSC1t
        ouvNHAfwpDOEq+9/G3IWmIX6I/rtMACS2dsAbrkd6rYBNAV3IAlMHwyAsQy7u427AsC8IIvNBgDL
        cCDDbsrZ9x3yAAAtFjQP2ET+DXE/zrTUcEztddVorani5OO/NvBNySNICIIECBCCKgJMr+Vxf3rF
        zjb1RmgAY9kJEHSbVz3vCuN8ay238ct6AUfHZzn565Mt6Anzt2Mkp6D3rfkWlLZSTEIWenQPzAA4
        7AfAq5yCPjsAVsAkoVMH4DLITnngxayCC+9sPMCslQTiO8Czn+u4nDLlAbObTQC+HcHTH+u4Yk5E
        BkAakhBxDMKXx8OINOzhgq1IKeY2ipz8UmoeoycOcPLhnIK7n/gUDUsQcqV3qCOEWJp3XaV5oExu
        MV1Dm0TkP4A5Eam5YGsq9hWA0iXIotreORYjXwFsi5FWjmf0guQbALO+UN/Gl2P1GIyG5EF7I8LV
        AS6G2vYFwLof6/NheRPX0wse6plTQ6Jv3clmlMf52wfon3avKQV9DEmMWpl2py03BZ13ALVPUEex
        hJdOyfbwWcARRP9tMNH/qI1mA6XRzLVlU7epitXRLL690cxqlpYxe0ARAVGH047SkjQo2Bg2BdCJ
        chZXdgQeLtV2l/wBk2V1MIOcaTsAAAAASUVORK5CYII=
    </icon>

    <test><![CDATA[

/**
  * 設定の準備
  * データ項目を指定できる設定項目は、文字型データ項目で指定
  * 送信日時の指定なし
  * @param fromEmail
  * @param fromName
  * @param to
  * @param cc
  * @param bcc
  * @param subject
  * @param htmlContent
  * @param plainContent
  * @param categories
  */
const prepareConfigs = (fromEmail, fromName, to, cc, bcc, subject, htmlContent, plainContent, categories) => {
    // 認証設定を準備
    const auth = httpClient.createAuthSettingToken('SendGrid API Key', 'sendgrid-1234567');
    configs.putObject('conf_Auth', auth);

    setDataItem('From', 1, 'STRING_TEXTFIELD', fromEmail);
    configs.put('conf_FromName', fromName);
    setDataItem('To', 2, 'STRING_TEXTAREA', to);
    setDataItem('Cc', 3, 'STRING_TEXTAREA', cc);
    setDataItem('Bcc', 4, 'STRING_TEXTAREA', bcc);
    configs.put('conf_Subject', subject);
    configs.put('conf_HtmlContent', htmlContent);
    configs.put('conf_PlainContent', plainContent);
    setDataItem('Categories', 6, 'STRING_TEXTAREA', categories);
};

/**
  * データ項目を作成し、config にセットする
  * @param name config 名の conf_ 以降
  * @param index
  * @param type
  * @param value
  * @param dataDef
  */
const setDataItem = (name, index, type, value) => {
    const dataDef = engine.createDataDefinition(name, index, `q_${name}`, type);
    engine.setData(dataDef, value);
    configs.putObject(`conf_${name}`, dataDef);
    return dataDef;
};

/**
  * 異常系のテスト
  * @param func
  * @param errorMsg
  */
const assertError = (func, errorMsg) => {
    try {
        func();
        fail();
    } catch (e) {
        expect(e.toString()).toEqual(errorMsg);
    }
};

/**
  * 指定個数のデータを改行区切りにした文字列を生成する
  * @param prefix
  * @param num
  * @return string
  */
const createListString = (prefix, num) => {
    let string = '';
    for (let i = 0; i < num; i++) {
        string += `${prefix}${i}\n`;
    }
    return string;
};

/**
  * 指定の長さの文字列を作成
  * @param length
  * @return string
  */
const createString = (length) => {
    const sourceStr = 'abcdefghijklmnopqrstuvwxyz';
    const string = sourceStr.repeat(Math.floor(length / sourceStr.length))
        + sourceStr.slice(0, length % sourceStr.length);
    return string;
};

/**
  * From メールアドレスが空（文字型データ項目）
  */
test('From Email Address is blank - set by STRING', () => {
    prepareConfigs(null, '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'From Email Address is blank.');
});

/**
  * To が空（文字型データ項目）
  */
test('To Email Address is blank - set by STRING', () => {
    prepareConfigs('from@example.com', '', null, null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'At least one To Email Address is required.');
});

/**
  * To の個数が多すぎる（文字型データ項目）
  */
test('Too many To Email Addresses - set by STRING', () => {
    const toStr = createListString('to', MAX_RECIPIENT_NUM + 1);
    prepareConfigs('from@example.com', '', toStr, null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, `The maximum number of recipients (To + Cc + Bcc) is ${MAX_RECIPIENT_NUM}.`);
});

/**
  * To, Cc, Bcc の合計個数が多すぎる（文字型データ項目）
  */
test('Too many recipients - set by STRING', () => {
    const bccStr = createListString('bcc', MAX_RECIPIENT_NUM - 1);
    prepareConfigs('from@example.com', '', 'to@example.com', 'cc@example.com', bccStr, '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, `The maximum number of recipients (To + Cc + Bcc) is ${MAX_RECIPIENT_NUM}.`);
});

/**
  * To, Cc の指定が重複（文字型データ項目）
  */
test('Same email address between To and Cc - set by STRING', () => {
    prepareConfigs('from@example.com', '', 'test@example.com\nto@example.com', 'test@example.com', null, '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'Each email address must be unique between To, Cc, and Bcc.');
});

/**
  * Cc, Bcc の指定が重複（文字型データ項目）
  */
test('Same email address between Cc and Bcc - set by STRING', () => {
    prepareConfigs('from@example.com', '', 'to@example.com', 'cc@example.com\ntest@example.com', 'test@example.com', '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'Each email address must be unique between To, Cc, and Bcc.');
});

/**
  * To, Bcc の指定が重複（文字型データ項目）
  */
test('Same email address between To and Bcc - set by STRING', () => {
    prepareConfigs('from@example.com', '', 'to@example.com\ntest@example.com', null, 'test@example.com', '件名', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'Each email address must be unique between To, Cc, and Bcc.');
});

/**
  * 件名が空
  */
test('Subject is blank', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '', '<p>HTML メールの本文</p>', '', null);
    assertError(main, 'Subject is blank.');
});

/**
  * HTML 本文とプレーンテキスト本文がともに空
  */
test('Content is Blank', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '', '', null);
    assertError(main, 'HTML Content and Plain Content are blank. At least one of them is required.');
});

/**
  * カテゴリの個数が多すぎる（文字型データ項目）
  */
test('Too many Categories - set by STRING', () => {
    const categoriesStr = createListString('category', MAX_CATEGORY_NUM + 1);
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', categoriesStr);
    assertError(main, `The maximum number of Categories is ${MAX_CATEGORY_NUM}.`);
});

/**
  * カテゴリに ASCII 文字以外を含む（文字型データ項目）
  */
test('Categories include invalid characters - set by STRING', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', 'categoryてすと');
    assertError(main, 'Categories cannot include non-ascii characters.');
});

/**
  * 長すぎるカテゴリを含む（文字型データ項目）
  */
test('Category is loo long - set by STRING', () => {
    const categoriesStr = createListString('category', MAX_CATEGORY_NUM - 1) + createString(MAX_CATEGORY_LENGTH + 1);
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', categoriesStr);
    assertError(main, `Each category must be within ${MAX_CATEGORY_LENGTH} characters.`);
});

/**
  * カテゴリの指定が重複（文字型データ項目）
  */
test('Same category is set multiple times - set by STRING', () => {
    const categoriesStr = createListString('category', MAX_CATEGORY_NUM - 1) + 'category1';
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', categoriesStr);
    assertError(main, 'The same category is set multiple times.');
});

/**
  * メールを送信する API リクエストのテスト
  * @param {Object} request
  * @param request.url
  * @param request.method
  * @param request.contentType
  * @param request.body
  * @param fromEmail
  * @param fromName
  * @param sendAt
  * @param to
  * @param cc
  * @param bcc
  * @param subject
  * @param htmlContent
  * @param plainContent
  * @param categories
  */
const assertRequest = ({ url, method, contentType, body }, fromEmail, fromName, sendAt, to, cc, bcc, subject, htmlContent, plainContent, categories) => {
    expect(url).toEqual('https://api.sendgrid.com/v3/mail/send');
    expect(method).toEqual('POST');
    expect(contentType).toEqual('application/json');
    const bodyObj = JSON.parse(body);
    expect(bodyObj.from.email).toEqual(fromEmail);
    expect(bodyObj.from.name).toEqual(fromName);
    expect(bodyObj.send_at).toEqual(sendAt);
    expect(bodyObj.personalizations.length).toEqual(1);
    expect(bodyObj.personalizations[0].to.length).toEqual(to.length);
    to.forEach((email, i) => {
        expect(bodyObj.personalizations[0].to[i].email).toEqual(email);
    });
    if (cc !== undefined) {
        expect(bodyObj.personalizations[0].cc.length).toEqual(cc.length);
        cc.forEach((email, i) => {
            expect(bodyObj.personalizations[0].cc[i].email).toEqual(email);
        });
    }
    if (bcc !== undefined) {
        expect(bodyObj.personalizations[0].bcc.length).toEqual(bcc.length);
        bcc.forEach((email, i) => {
            expect(bodyObj.personalizations[0].bcc[i].email).toEqual(email);
        });
    }
    expect(bodyObj.subject).toEqual(subject);
    let i = 0;
    if (plainContent !== undefined) {
        expect(bodyObj.content[i].type).toEqual('text/plain');
        expect(bodyObj.content[i].value).toEqual(plainContent);
        i++;
    }
    if (htmlContent !== undefined) {
        expect(bodyObj.content[i].type).toEqual('text/html');
        expect(bodyObj.content[i].value).toEqual(htmlContent);
    }
    expect(bodyObj.categories).toEqual(categories);
};

/**
  * メールを送信する API リクエストでエラー
  */
test('Fail to send mail', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from@example.com', undefined, undefined, ['to1@example.com'], undefined, undefined, '件名', '<p>HTML メールの本文</p>', undefined, undefined);
        return httpClient.createHttpResponse(400, 'application/json', '{}');
    });
    assertError(main, 'Failed to send mail. status: 400');
});

/**
  * 成功
  * HTML 本文のみ指定
  * 送信日時指定なし
  * カテゴリ指定なし
  */
test('Succeed - With HTML content, no schduled datetime, no categories', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名 1', '<p>HTML メールの本文</p>', '', null);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from@example.com', undefined, undefined, ['to1@example.com'], undefined, undefined, '件名 1', '<p>HTML メールの本文</p>', undefined, undefined);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

/**
  * 成功
  * HTML 本文、プレーンテキスト本文の両方を指定
  * 送信日時指定なし
  * カテゴリ指定あり
  */
test('Succeed - With both HTML content and plain text content, no schduled datetime, with categories', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com\nto2@example.com', null, null, '件名 2', '<p>HTML メールの本文</p>', 'プレーンテキストメールの本文', 'category1\ncategory2');
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from@example.com', undefined, undefined, ['to1@example.com', 'to2@example.com'], undefined, undefined, '件名 2', '<p>HTML メールの本文</p>', 'プレーンテキストメールの本文', ['category1', 'category2']);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

/**
  * 送信日時を設定
  * @param timestamp
  */
const setSendAt = (timestamp) => {
    const def = engine.createDataDefinition('送信日時', 10, 'q_sendAt', 'DATETIME');
    if (timestamp !== null) {
        engine.setData(def, timestamp);
    }
    configs.putObject('conf_SendAt', def);
}

/**
  * 送信日時が選択されているのに、値が空
  */
test('Scheduled Datetime is null', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    setSendAt(null);
    assertError(main, 'Scheduled Datetime is selected but its data is null.');
});

/**
  * 送信日時が過去
  */
test('Scheduled Datetime has passed', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    const timestamp = new com.questetra.bpms.util.AddableTimestamp().addMinutes(-1);
    setSendAt(timestamp);
    assertError(main, 'Scheduled Datetime must be future.');
});

/**
  * 送信日時が 72 時間以上先
  */
test('Scheduled Datetime is too late', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    const timestamp = new com.questetra.bpms.util.AddableTimestamp().addHours(MAX_SCHEDULABLE_HOURS + 1);
    setSendAt(timestamp);
    assertError(main, `Scheduled Datetime must be within ${MAX_SCHEDULABLE_HOURS} hours.`);
});

/**
  * 成功
  * プレーンテキスト本文のみ指定
  * From 表示名あり
  * 送信日時指定あり
  */
test('Succeed - With plain text content, with from display name, with schduled datetime', () => {
    const to = createListString('to', 10);
    const cc = createListString('cc', 20);
    const bcc = createListString('bcc', MAX_RECIPIENT_NUM - 30);
    const toList = to.split('\n').filter((email) => email !== '');
    const ccList = cc.split('\n').filter((email) => email !== '');
    const bccList = bcc.split('\n').filter((email) => email !== '');
    prepareConfigs('from@example.com', 'From 表示名', to, cc, bcc, '件名 3', '', 'プレーンテキストメールの本文', null);
    const timestamp = new com.questetra.bpms.util.AddableTimestamp().addMinutes(30);
    setSendAt(timestamp);
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from@example.com', 'From 表示名', Math.floor(timestamp.getTime() / 1000), toList, ccList, bccList, '件名 3', undefined, 'プレーンテキストメールの本文', undefined);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

/**
  * 成功
  * From メールアドレスを固定値で指定
  */
test('Succeed - From Email Address is set as fixed value', () => {
    prepareConfigs('dummy', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    configs.put('conf_From', 'from2@example.com'); // 固定値で上書き
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from2@example.com', undefined, undefined, ['to1@example.com'], undefined, undefined, '件名', '<p>HTML メールの本文</p>', undefined, undefined);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

/**
  * 選択型データ設定用のオブジェクトを作成
  * @param prefix
  * @param num
  * @return selects
  */
const prepareSelects = (prefix, num) => {
    const selects = new java.util.ArrayList();
    for (let i = 0; i < num; i++) {
        const item = engine.createItem(`${prefix}${i + 1}`, `${prefix}${i + 1} を選択`);
        selects.add(item);
    }
    return selects;
};

/**
  * From メールアドレスが未選択（選択型データ項目）
  */
test('From Email Address is not selected - set by SELECT', () => {
    prepareConfigs('dummy', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    setDataItem('From', 21, 'SELECT_SINGLE', new java.util.ArrayList());
    assertError(main, 'From Email Address is not selected.');
});

/**
  * To, Cc, Bcc の合計個数が多すぎる（選択型データ項目）
  */
test('Too many recipients - set by SELECT', () => {
    prepareConfigs('from@example.com', '', null, null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    setDataItem('To', 21, 'SELECT_CHECKBOX', prepareSelects('to_', 1));
    setDataItem('Cc', 22, 'SELECT_CHECKBOX', prepareSelects('cc_', MAX_RECIPIENT_NUM));
    assertError(main, `The maximum number of recipients (To + Cc + Bcc) is ${MAX_RECIPIENT_NUM}.`);
});

/**
  * カテゴリの個数が多すぎる（選択型データ項目）
  */
test('Too many Categories - set by SELECT', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    setDataItem('Categories', 21, 'SELECT_CHECKBOX', prepareSelects('category_', MAX_CATEGORY_NUM + 1));
    assertError(main, `The maximum number of Categories is ${MAX_CATEGORY_NUM}.`);
});

/**
  * カテゴリに ASCII 文字以外を含む（選択型データ項目）
  */
test('Categories include invalid characters - set by SELECT', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    const categories = prepareSelects('category_', 3);
    const invalidCategory = 'catえgory';
    categories.set(1, engine.createItem(invalidCategory, `${invalidCategory} を選択`));
    setDataItem('Categories', 21, 'SELECT_CHECKBOX', categories);
    assertError(main, 'Categories cannot include non-ascii characters.');
});

/**
  * 長すぎるカテゴリを含む（選択型データ項目）
  */
test('Category is loo long - set by SELECT', () => {
    prepareConfigs('from@example.com', '', 'to1@example.com', null, null, '件名', '<p>HTML メールの本文</p>', '', null);
    const categories = prepareSelects('category_', 3);
    const longCategory = createString(MAX_CATEGORY_LENGTH + 1);
    categories.set(1, engine.createItem(longCategory, `${longCategory} を選択`));
    setDataItem('Categories', 21, 'SELECT_CHECKBOX', categories);
    assertError(main, `Each category must be within ${MAX_CATEGORY_LENGTH} characters.`);
});

/**
  * 成功
  * データ項目で指定できるものは、すべて選択型データ項目で指定
  * カテゴリ指定なし
  */
test('Succeed - Configured by SELECT, no categories', () => {
    prepareConfigs('dummy', '', null, null, null, '件名', '<p>HTML メールの本文</p>', '', 'dummy');
    setDataItem('From', 21, 'SELECT_SINGLE', prepareSelects('from', 1));
    setDataItem('To', 22, 'SELECT_CHECKBOX', prepareSelects('to', 2));
    setDataItem('Cc', 23, 'SELECT_CHECKBOX', prepareSelects('cc', 3));
    setDataItem('Bcc', 24, 'SELECT_CHECKBOX', prepareSelects('bcc', 1));
    setDataItem('Categories', 26, 'SELECT_CHECKBOX', new java.util.ArrayList());
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from1', undefined, undefined, ['to1', 'to2'], ['cc1', 'cc2', 'cc3'], ['bcc1'], '件名', '<p>HTML メールの本文</p>', undefined, undefined);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

/**
  * 成功
  * データ項目で指定できるものは、すべて選択型データ項目で指定
  * カテゴリ指定あり
  */
test('Succeed - Configured by SELECT, with categories', () => {
    prepareConfigs('dummy', '', null, null, null, '件名', '<p>HTML メールの本文</p>', '', 'dummy');
    setDataItem('From', 21, 'SELECT_SINGLE', prepareSelects('from', 1));
    setDataItem('To', 22, 'SELECT_CHECKBOX', prepareSelects('to', 1));
    setDataItem('Cc', 23, 'SELECT_CHECKBOX', prepareSelects('cc', 2));
    setDataItem('Bcc', 24, 'SELECT_CHECKBOX', new java.util.ArrayList());
    setDataItem('Categories', 26, 'SELECT_CHECKBOX', prepareSelects('category', 2));
    httpClient.setRequestHandler((request) => {
        assertRequest(request, 'from1', undefined, undefined, ['to1'], ['cc1', 'cc2'], undefined, '件名', '<p>HTML メールの本文</p>', undefined, ['category1', 'category2']);
        return httpClient.createHttpResponse(202, 'application/json', '');
    });
    main();
});

    ]]></test>

</service-task-definition>
