<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2021-09-28</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Box: Create Folder</label>
    <label locale="ja">Box: フォルダ作成</label>
    <summary>Create a new folder in the specified folder on Box, and save the folder ID and URL. When there is the
        folder having the same name, save that folder ID and URL.
    </summary>
    <summary locale="ja">Box の指定フォルダ内に新しいフォルダを作成し、フォルダ ID / URL を保存しま
        す。すでに同名のフォルダがある場合は、そのフォルダ ID / URL を保存します。
    </summary>
    <help-page-url>https://support.questetra.com/bpmn-icons/box-folder-create/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/box-folder-create/</help-page-url>
    <configs>
        <config name="conf_OAuth2" required="true" form-type="OAUTH2"
                oauth2-setting-name="https://app.box.com/api/oauth2/root_readwrite">
            <label>C1: OAuth2 Setting</label>
            <label locale="ja">C1: OAuth2 設定</label>
        </config>
        <config name="ParentFolderId" el-enabled="true">
            <label>C2: Parent Folder ID (Root Folder if blank)</label>
            <label locale="ja">C2: 作成するフォルダの親フォルダの ID (空白の場合ルートフォルダに作成されます)</label>
        </config>
        <config name="FolderName" required="true" el-enabled="true">
            <label>C3: Folder Name to create</label>
            <label locale="ja">C3: 作成するフォルダの名称</label>
        </config>
        <config name="FolderIdItem" form-type="SELECT" select-data-type="STRING">
            <label>C4: Data Item that will save Folder ID</label>
            <label locale="ja">C4: フォルダ ID を保存するデータ項目</label>
        </config>
        <config name="WebViewUrlItem" form-type="SELECT" select-data-type="STRING">
            <label>C5: Data Item that will save Folder URL</label>
            <label locale="ja">C5: フォルダ URL を保存するデータ項目</label>
        </config>
    </configs>

    <script><![CDATA[
main();
function main(){
  const newFolderName = configs.get("FolderName");
  checkNewFolderName(newFolderName);

  const parentFolderId = configs.get("ParentFolderId");
  
  // get OAuth2 Setting
  const oauth2 = configs.get("conf_OAuth2");

  const newFolderId = createFolder(oauth2, parentFolderId, newFolderName);

  const IdData = configs.get("FolderIdItem");
  const UrlData = configs.get("WebViewUrlItem");
  if (IdData !== null && IdData !== "") {
      engine.setDataByNumber(IdData, newFolderId);
  }
  if (UrlData !== null && UrlData !== "") {
      engine.setDataByNumber(UrlData, `https://app.box.com/folder/${newFolderId}`);
  }
}

/**
  * 新しいフォルダのフォルダ名をチェックする。（サポートされていない文字が使われていないか）
  */
function checkNewFolderName(newFolderName){

  //空ではないか
  if(newFolderName === "" ||newFolderName === null) {
    throw "Folder Name is blank";
  }

  //255文字を超えていないか
  if(newFolderName.length > 255){
    throw"Folder Name shoule be less than 256 characters";
  }

  //「/」や「\」が含まれていないか
  const reg = new RegExp('[/\\\\]');
  if(newFolderName.search(reg) !== -1) {
    throw "Invalid Folder Name";
  }

  //先頭と末尾に半角スペースが使われていないか
  if(newFolderName.slice(0,1) === " " || newFolderName.slice(-1) === " ") {
    throw "Invalid Folder Name";
  }

  //「.」や「..」ではないか
  if(newFolderName === "." || newFolderName === ".."){
    throw "Invalid Folder Name";
  }
}

//create folder on box
function createFolder(oauth2, parentFolderId, name) {
  let jsonReq = {};
  //mime type of google drive folder
  if (parentFolderId !== "" && parentFolderId !== null){
    jsonReq["parent"] = {"id": parentFolderId };
  }else{
    jsonReq["parent"]= {"id": 0 };
  }
  jsonReq["name"] = name;
  
  const url = 'https://api.box.com/2.0/folders';
  const response = httpClient.begin()
    .authSetting(oauth2)
    .body(JSON.stringify(jsonReq), "application/json; charset=UTF-8")
    .post(url);
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();

  engine.log(`status: ${status}`);
  engine.log(responseTxt);

  let jsonRes;
  try {
    jsonRes = JSON.parse(responseTxt);
  } catch(e) {
    engine.log("failed to parse as json");
    throw `Failed to create. status: ${status}`;
  }

  // フォルダ作成成功
  if (status === 201) {
    return jsonRes.id;
  }
  try {
    // 同名のフォルダがすでにある
    if(status === 409 && jsonRes.context_info.conflicts[0].type === "folder"){
      return jsonRes.context_info.conflicts[0].id;
    }
  } catch (e) {
    // 何もしない（上記2つのケース以外はすべてエラーにする）
  }
  throw `Failed to create. status: ${status}`;
}

]]></script>

    <test><![CDATA[
test('Folder Name is blank', () => {
    configs.put('FolderName', '');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Folder Name is blank');
    }
});

test('Folder Name Length > 255', () => {
    let name = '';
    while (name.length <= 255) {
        name += 'a';
    }
    configs.put('FolderName', name);
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Folder Name shoule be less than 256 characters');
    }
});

test('Folder Name uses /', () => {
    configs.put('FolderName', 'sample/test');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('Folder Name uses \\', () => {
    configs.put('FolderName', 'sample\\test');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('Folder Name starts with space', () => {
    configs.put('FolderName', ' test');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('Folder Name ends with space', () => {
    configs.put('FolderName', 'test ');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('Folder Name is .', () => {
    configs.put('FolderName', '.');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('Folder Name is ..', () => {
    configs.put('FolderName', '..');
    try {
        execute();
        fail('not come here');
    } catch (e) {
        expect(e.message).endsWith('Invalid Folder Name');
    }
});

test('success', () => {
    configs.put('FolderName', '.test.');
    configs.put('ParentFolderId', '');
    configs.put('conf_OAuth2', 'Box');
    const folderIdDef = engine.createDataDefinition('フォルダ ID', 3, 'q_folderId', 'STRING_TEXTFIELD');
    configs.putObject('FolderIdItem', folderIdDef);
    engine.setData(folderIdDef, '事前文字列');
    const urlDef = engine.createDataDefinition('フォルダ URL', 5, 'q_folderUrl', 'STRING_TEXTFIELD');
    configs.putObject('WebViewUrlItem', urlDef);
    engine.setData(urlDef, '事前文字列');

    httpClient.setResponseFunc((url) =>
        httpClient.createHttpResponse(201, 'application/json', JSON.stringify({
            id: '123'
        }))
    );

    execute();

    expect(engine.findData(folderIdDef)).toEqual('123');
    expect(engine.findData(urlDef)).toEqual('https://app.box.com/folder/123');
});
]]></test>

    <icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEBElEQVRYR82Xb2jbRRjHP/fL2jXJ
        0qSd65x11aK0YgJWZUwEWZ0DfSNaHYKKmgykbP7pH/SVghvCkIlb6kREwfyGOougbgxB2Yt1oGwg
        aietdOJoV21ty2ob26xdm+TkLsufJr+2Sdtt3pv8uDx3z+ee+z53zwmucRMF+ff/9ijEtwB1IDwI
        9QtIOkGOA50I0UHIezTfeRcH8Pd64GITyGaE8OQ1sVQwIgiONsxqBTZvWxjA3+UHDuTtONuNBjEC
        mLcfmY9gfgB/dxBBU14rXsxIyiCmr8XKzBog0GWCeG6xeQv6X2JiegPZY3IBVnLlOVtCG6a3ObN7
        LoDacyFCBa2sUGMpGjI1kQbQao/0Lllw+YJoYTqrk9mRAdC9G8Eb+c6zLDvJHkzvbjVHGiDQpXLX
        nZw4tOMGyp02Hjn457J8WQ5WUTB9ZWkAdcIJ+XWm8XCwFkexwLWrZ+UB9OmZ0EIiAhbKH2lLAKzZ
        eaUAEhmRAAh0dYBQZ3yqKQDnaoPDp8PUVZXo/pM9EV75Ylh/77q/jO2bSlmz2mBgLErjoUHad95I
        Z/80re0Jmw+e3UD1dcU8uP+8RRTlSUK++ssA3X3ATdkA61y2nIE/9k7Rd2GWx+4uxWZkAP8bo9Ru
        YAho+XyIUruNNxsqiMzE8bxgEUV1gZneO5MAMtuTioACUM7e+W4Uj8Pg5W1rdV9cwvSsxPx+nNPn
        LvLStnI2VdsZi8TwOGyMTsY0nNth493j/9DSPmSto5BXLAigsmDLW7388MeUnuDVh9ay74n1+vvI
        zxM0vJfOkNGDtdiLDH7pn+beW+3a5kRPhK37rMJ/mScDIGcLBvfXsM61isrWs4xMxPSIpza7+ayx
        Un8rbTz94UBqZX8fqNFp+82vkzTc5dL9n54K88xHaZu5YZBnCPnq5hXhqdequecWO2rPH3j7PBvc
        qzjWVEXN9cV6HhVmJbwvf5rgcGMlT2526y1wldiYiUl9wKhtUHp4/8TYIiK0SMP6WgdfvbiRMqeN
        yKU4NkNQUiToH51lcDyq4aIxtMjcdoOpGYkSkrJpOz6qt6OxvowLkzEqms7mAsjMNLQ4iNSIrbc5
        2bu9QqdSNC7pHrjEjo8H+GssyifPV3JfjQNHscFQOMqeoyPsfXw9vw/P8HBbv3b4bWsVG8uL8L5+
        zgIg8yBSf2cdxdayXaleGSbk0+Xd/+gyUtexiPRlXkgrtd4s9YeRzptzr2NldU0LkiTmlS3JUnVA
        0t3VK0qRhwj5VJk/p12lsjxdAeUPoDWhCpW4KtFTlVJhwpRhpOFf2sMkpQn9NGtGyOb8QZRj/TQL
        Lu9plr1c/TiV9QipHqUeEHckTOQZYBwpOkF0LLTiwragsHgvyfo/g3CBMFgjn40AAAAASUVORK5C
        YII=
    </icon>
</service-task-definition>
