<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2019-01-28</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<label>Slack: Upload File</label>
<label locale="ja">Slack: ファイルアップロード</label>
<summary>Upload a file to Slack with Bots.</summary>
<summary locale="ja">Bots 機能を使って Slack にファイルをアップロードします。</summary>
<configs>
  <config name="Token" required="true">
    <label>C1: Slack Bot Token</label>
    <label locale="ja">C1: Slack Bot のトークン</label>
  </config>
  <config name="ChannelId" required="true">
    <label>C2: Slack Channel ID</label>
    <label locale="ja">C2: アップロードするチャンネルの ID</label>
  </config>
  <config name="File" form-type="SELECT" select-data-type="FILE" required="true">
    <label>C3: Uploading File</label>
    <label locale="ja">C3: アップロードするファイル</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/slack-chat-post-bots/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/slack-chat-post-bots/</help-page-url>
<script><![CDATA[
main();
function main() {
  const token = configs.get("Token");
  const channel = configs.get("ChannelId");
  const file = engine.findDataByNumber(configs.get("File"));
//  const comment = configs.get("Comment");
  if (file == null){
    throw "No File";
  }
  const numOfLines = file.length;
  if (numOfLines > httpClient.getRequestingLimit()){
    throw "Number of Files is over the limit.";
  }
  for (let i = 0; i < numOfLines; i++){
    upload(token,file[i],channel);
  }
}
function upload (token,file,channel){ 
  let response = httpClient.begin()
    .bearer(token)
    .multipart('file',file)
    .multipart('channels',channel)
    .post("https://slack.com/api/files.upload");
    
  const status = response.getStatusCode();
  const responseTxt = response.getResponseAsString();
  const responseJson = JSON.parse(responseTxt);
  engine.log(file.getName());
  if (responseJson.ok == false ) {
    const error = "Failed to upload \n" + responseTxt;
    throw error;
  }
  engine.log("status:" + status);
  engine.log(responseTxt + "\n");
}
]]></script>
<icon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAE7UlEQVRYR8VXbUybVRR+bgsFSvka
nXyEjzFhDCihm4sfZBtT41zaROcfjVnM2D8Tf6xT44gmysxmqP6wS9T4R8XERP/4tUhNnNu6LIrZ
jIIUBiIryGR8U0opbWnfa+5l75u3fd9+oGbeP2/ynnPuec65zznnXoL/eZHN+H9pyHmYCGgjgJmC
FhIQM7OnoH0ExEuBPhDqsjdZv05335QAbJ5LhdmB4HEqCDZCSGE6G1NKvUSjcQT12WcdNQ96k9kk
BdAx2NNOBbydruN4RwwI1ZJjbzZavkoEIiGAk26ngwDH04k4lQ4FHHaT5YSaniqADrezG8DRVBtv
Tk67u0zWY/E2CgCpIm/KK4G5sBx3ZRlgyMiCTqOFlmgQoQJW1oMY8c/h3K0hVWwUOGs3WWxyYQwA
duag5CM16ycrWlCj34KCzGykYu5EYAnve35SBSFo8IScE9JejO1Z/oAnnnCPltTj3qJK6LWZm8r4
oG8Gn0z+orBhxAwZ9DVidUgAOgZ6OkHIa3KLpyvMMBWUQpMg5iil8EdCPCvxi8k+nfwVgyszSuCU
nupqtnYygQTg5IDTSwgKRO0243YcLNmR0DnTu7m2jHdv/IiX6x9CXkaWwtHkmhfv3ehVzYK92Vok
AWAdTiPgS7nmidp9nGjyNeCbRo42E7W5xfz3SiSEN0Yu4rGyRmRrMxGIhPFAcbUEep1GYR9xYTUa
VoAQucAzoMb8Uw0HOcPlyzU/ht6FP/FC3X74IkGMry7h86kBScVa2oBWGQAm6F2cUK0KsSI4gI4B
pwsEbXJnZ5oOxaQ/SgW4fdP47GZ/DKi7c4sxtroAtYwxxb+CPrwz9oMKD3C5q9lyYAOAu2ccINVy
rdONh6AlGxRhKeye+JmfOVt1BiNYdRh1eoSFKD+Go1V7sDNvq8IRsz09fEHJA9A+u8m66zYAJ43X
eLXhEeRoMvhv5oRFzzjBvoO+adhq9/EGxAwZ2ykoHi8zYXE9gNKsPOn4mPzM8AVVHnSZLBshdriV
AF6sa0OxTq9ALjaZ5+v2Y6suF/5oGL0LE7g494ek+9z2VlTkSAWFL6bcuLY0qdhLBkB5BO3Ve1Bv
SJzS1i3VWKdCzMZ7i7dhr7EG+Rmx3fK72d9xaW4sBgAF7bebrOaEJLyvqAqHy5tijBgHrix48Nvy
Lf6/Ob8UuwsrUJadh2+mh8CazzNV9yjaFiNu//JUbAaojISJBtArOx+GQauTDL+dGcZCKICynHx8
PzvKy9Goy+VyT2ARV+Y9OFK5i3NDXCEhgs7r51VIuDGYeAbUGhH7H38MIlODQgSvXz+PI5W7Ycov
kTYXQBWdc9Q/jw8nrikAxDQiJo1vxewfYz0jVHxDYrKZ0Aofx7myDMV7WQwH8NboZWX0FMv2Zgu/
3iUdRkzhqYoWmAvKFZsk+8EyxebAB+NXeQmrIFAOo41xvDYuH0ii4bM196Naz2dH0sW65Vx4lZfl
VZWyY8aUYjlkyNmmGMdMmOpCssNgVKR8TYjAtx7EVNAH19wYZkP+pCATXkhEq1RXslRZSCqX3QNE
vTt4KcXHXSZLezzAO3Ith0rkSTMgCvlTLIpuNWKmcxSMcFSL9n/0MBEd8KeZP2CjILZ0gTDHBNQR
NOgd/+ppFh/l7cfpAUJhpoQ/Tlt4aYH2E0q8lKCPauBKFnHaHEgnxf+Fzt/OVCU/AEX4TwAAAABJ
RU5ErkJggg==</icon>
</service-task-definition>
