<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-06-27</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Charge by Invoice</label>
    <label locale="ja">Stripe: 請求書で課金</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-invoice-charge/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-invoice-charge/
    </help-page-url>

    <summary>This item charges the customer's pre-collected payment method based on a finalized invoice on Stripe.
    </summary>
    <summary locale="ja">この工程は、Stripe 上の確定済み請求書にもとづき、顧客の登録済み支払方法に課金します。</summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_InvoiceId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Finalized Invoice ID</label>
            <label locale="ja">C2: 確定済み請求書の ID</label>
        </config>
    </configs>

    <script><![CDATA[// GraalJS Script (engine type: 2)

main();

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const invoiceId = retrieveInvoiceId();

    //// == Calculating / 演算 ==
    checkInvoice(auth, invoiceId);
    chargeByInvoice(auth, invoiceId);
}

/**
  * config から請求書の ID を読み出す。空文字列の場合はエラー
  * @return {String} invoiceId 請求書の ID
  */
function retrieveInvoiceId() {
    const invoiceId = engine.findData(configs.getObject('conf_InvoiceId'));
    if (invoiceId === null) {
        throw 'Invoice ID is blank.';
    }
    return invoiceId;
}

/**
  * 請求書のステータスをチェックし、顧客 ID を返す
  * - ステータスが open, uncollectible 以外の場合はエラー
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書の ID
  */
function checkInvoice(auth, invoiceId) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .get(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) { // 削除済みの場合もエラーレスポンス
        engine.log(responseStr);
        throw `Failed to retrieve invoice. status: ${status}`;
    }
    const invoiceObj = JSON.parse(responseStr);
    switch (invoiceObj.status) {
        case 'draft':
            throw 'The invoice is still draft. It needs to be finalized first.';
        case 'paid':
            throw 'The invoice is already paid.';
        case 'void':
            throw 'The invoice is void.';
        default: // open or uncollectible
            // do nothing
    }
}

/**
  * 請求書で課金する
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書の ID
  */
function chargeByInvoice(auth, invoiceId) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}/pay`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .post(apiUri);
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to charge. status: ${status}`;
    }
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADaUlEQVRYR8WXSUwTYRTH/x9bS8tS
        KCWIbLFElkgiICQdw2I0xujB6MGo0cRojOBJEy0HLyQmJlQDnoSLXDQYLibGNUoili0sAoKGICAE
        LLKWRVpKW+YzHWiBtpQpYGau897//ea9973vDYHAD+EbP7O4TSKRLp0llBwBRToIEgCErfrPgGII
        BB2U0M9Gg+jl1+JDRj7aWwLka1qiWGotAkEBADEfUQAmUFT4EL+SWnX2mCcfjwA5JU0FhNBHAKQ8
        AzubGSgld+qKVBWb+W8KkKdpekJBC7cZeIMbASn/olbddKflFiBH01hFgAu7EdyuQYEXdWrmorOm
        C8BufrlrMNdMbABYrXn5bn65sxalpHB9TzgAuG6HtX8HDceX2+ADv0T76XAA5JY0loHgFl+VHdlR
        PNYWMbdtGhyAbchIJeZpL875juLb5oTBGCC3DSsOIOdhwyVCyTNvVRXBAYgKEaFb99dbV1BCL9fd
        PfycA8jVND4FcNWTSt5+OaQiX7zrnnCY3T+dhMz4UJR++oWanilvISq1aubaCkBJYzsI0p0VVPvC
        IAnwhb8fwY3ceOhmTahq1sHf1weWZRaRISLEhYtR3zeDYLEfDGYrWBZoH55DgjwQSoUUA5MGDE0v
        usJRdGiLmAx7BvTrLhbO+N6pRBxLicCihcX0ghmx4YEwmZfRN2FAWkwILFYWUwtmyCT+6ByZh0oZ
        BpalsCxTvP8+gaMpEfAhgMnCQvNhAM2Ds84QM1o1E24HoM5vH5xJhkop48Tr+vS4nhOHnj8LGJtf
        wvFUBapbR5EaHYTkqCDOJitBhtahWWQlhGJYb0K8PBDD04uIlolR3TaKyvoRlyxo1QzZFCAjLhTn
        s6M5wYb+Ga7WvWMLGJ1bAahq0eFAdDBS9qwBdI7M4WBsKAanjFAqJOj6PQ+90QLtTz1qe22HbOOz
        HsClBKXnUrmgS1YWr7+NIz9JjoigAK6ee2ViFwBGubIazC9a8aZrHCfTIrnyGM3LKKsZxMcfkx5K
        sEkT8m1r9QmlIyvuUu1Wx6kJtzyGnmCuMDFgEsPxtmscrzrH+XKvHcPtDiK+kdzZbRhEgo/i1WEk
        3GVkAxD8OuYupZUlVJiFxN4ogq5kdghBl9L/kQmv13JHJoT8MbFDCPprtn6CCfZzupNxy8f3Hyxn
        oTBfuPFrAAAAAElFTkSuQmCC
    </icon>

</service-task-definition>
