<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
    <last-modified>2022-07-01</last-modified>
    <license>(C) Questetra, Inc. (MIT License)</license>
    <engine-type>2</engine-type>
    <label>Stripe: Charge by Invoice</label>
    <label locale="ja">Stripe: 請求書で課金</label>

    <help-page-url>https://support.questetra.com/bpmn-icons/service-task-stripe-invoice-charge/</help-page-url>
    <help-page-url locale="ja">https://support.questetra.com/ja/bpmn-icons/service-task-stripe-invoice-charge/
    </help-page-url>

    <summary>This item charges the customer based on a finalized invoice on Stripe. If the default payment method
        fails, this item tries to charge other payment methods (card) attached to the customer.
        An error occurs if no charge succeeded.
    </summary>
    <summary locale="ja">この工程は、Stripe 上の確定済み請求書にもとづき、顧客に課金します。デフォルトの支払方法への課金が失敗した場合は、
        顧客に紐づけられている予備の支払方法（カード）に対して課金します。すべての課金に失敗した場合、エラーになります。
    </summary>

    <configs>
        <config name="conf_Auth" required="true" form-type="OAUTH2">
            <label>C1: Authorization Setting in which API Secret Key is set</label>
            <label locale="ja">C1: API シークレットキーを設定した認証設定</label>
        </config>
        <config name="conf_InvoiceId" required="true" form-type="SELECT" select-data-type="STRING_TEXTFIELD">
            <label>C2: Finalized Invoice ID</label>
            <label locale="ja">C2: 確定済み請求書の ID</label>
        </config>
        <config name="conf_SendReceipt" form-type="TOGGLE">
            <label>C3: Email the receipt to the customer</label>
            <label locale="ja">C3: 顧客に領収書をメール送付する</label>
        </config>
    </configs>

    <script><![CDATA[// GraalJS Script (engine type: 2)

main();

function main(){
    //// == Config Retrieving / 工程コンフィグの参照 ==
    const auth = configs.get('conf_Auth');
    const invoiceId = retrieveInvoiceId();
    const sendReceipt = configs.getObject('conf_SendReceipt');

    //// == Calculating / 演算 ==
    const httpCounter = makeHttpCounter(); // HTTP リクエスト数のカウンタ
    const {customerId, paymentIntentId} = checkInvoice(auth, invoiceId, httpCounter);
    const {customerEmail, defaultPaymentMethodId} = getCustomer(auth, customerId, httpCounter);
    updatePaymentIntent(auth, paymentIntentId, sendReceipt, customerEmail, httpCounter);
    chargeByInvoice(auth, invoiceId, defaultPaymentMethodId, customerId, httpCounter);
}

/**
  * config から請求書の ID を読み出す。空文字列の場合はエラー
  * @return {String} invoiceId 請求書の ID
  */
function retrieveInvoiceId() {
    const invoiceId = engine.findData(configs.getObject('conf_InvoiceId'));
    if (invoiceId === null) {
        throw 'Invoice ID is blank.';
    }
    return invoiceId;
}

/**
  * HTTP リクエスト数のカウンタを作成する
  * @return {Closure} httpCounter HTTP リクエスト数のカウンタ
  */
function makeHttpCounter() {
    let httpCount = 0;
    return {
        increment: function() {
            httpCount++;
        },
        value: function() {
            return httpCount;
        }
    }
};

/**
  * 請求書のステータスをチェックし、顧客 ID と支払オブジェクトの ID を返す
  * - ステータスが open, uncollectible 以外の場合はエラー
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書の ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Object} returnObj
  * @return {String} returnObj.customerId 顧客 ID
  * @return {String} returnObj.paymentIntentId 支払オブジェクトの ID
  */
function checkInvoice(auth, invoiceId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .get(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) { // 削除済みの場合もエラーレスポンス
        engine.log(responseStr);
        throw `Failed to retrieve invoice. status: ${status}`;
    }
    const invoiceObj = JSON.parse(responseStr);
    switch (invoiceObj.status) {
        case 'draft':
            throw 'The invoice is still draft. It needs to be finalized first.';
        case 'paid':
            throw 'The invoice is already paid.';
        case 'void':
            throw 'The invoice is void.';
        default: // open or uncollectible
            // do nothing
    }
    const customerId = invoiceObj.customer;
    const paymentIntentId = invoiceObj.payment_intent;
    return {customerId, paymentIntentId};
}

/**
  * 顧客オブジェクトを取得し、メールアドレスとデフォルトの支払方法の ID を返す
  * - 顧客が削除済みの場合、エラー
  * - 顧客のメールアドレスが設定されていない場合、エラー
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Object} returnObj
  * @return {String} returnObj.customerEmail 顧客のメールアドレス。未設定の場合は null
  * @return {String} returnObj.defaultPaymentMethodId 顧客のデフォルトの支払方法の ID。未設定の場合は null
  */
function getCustomer(auth, customerId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/customers/${customerId}`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .get(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to retrieve customer. status: ${status}`;
    }
    const customerObj = JSON.parse(responseStr);
    if (customerObj.deleted) {
        throw 'The customer is deleted.';
    }
    // 顧客のメールアドレス以外に「請求先メールアドレス」もダッシュボードからは設定できるが、API では取得不可
    const customerEmail = customerObj.email;
    let defaultPaymentMethodId = customerObj.invoice_settings.default_payment_method;
    if (defaultPaymentMethodId === null) {
        // Source として登録されている場合もある
        defaultPaymentMethodId = customerObj.default_source;
    }
    return {customerEmail, defaultPaymentMethodId};
}

/**
  * 支払オブジェクトを更新し、領収書送付先メールアドレスを設定する
  * @param {String} oauth 認証設定
  * @param {String} paymentIntentId 支払オブジェクトの ID
  * @param {boolean} sendReceipt 領収書をメール送付するかどうか
  * @param {String} customerEmail 顧客のメールアドレス
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  */
function updatePaymentIntent(auth, paymentIntentId, sendReceipt, customerEmail, httpCounter) {
    let receiptEmail = '';
    if (sendReceipt) {
        if (customerEmail === null) {
            throw "The customer's email is not set. Unable to send the receipt.";
        }
        receiptEmail = customerEmail;
    }
    const apiUri = `https://api.stripe.com/v1/payment_intents/${paymentIntentId}`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('receipt_email', receiptEmail)
        .post(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to update payment intent. status: ${status}`;
    }
}

/**
  * 請求書で課金する。課金を試みる支払方法の順序は
  * 1. 顧客のデフォルトの支払方法
  * 2. 顧客の予備の支払方法（カード）
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書の ID
  * @param {String} defaultPaymentMethodId 顧客のデフォルトの支払方法の ID
  * @param {String} customerId 顧客 ID (デフォルトの支払方法に失敗した場合に使用)
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  */
function chargeByInvoice(auth, invoiceId, defaultPaymentMethodId, customerId, httpCounter) {
    let succeeded = false;
    if (defaultPaymentMethodId !== null) {
        succeeded = tryCharge(auth, invoiceId, defaultPaymentMethodId, httpCounter);
    }
    if (succeeded) {
        return;
    }
    const customerPaymentMethodIds = getCustomerPaymentMethodIds(auth, customerId, httpCounter);
    const otherPaymentMethodIds = customerPaymentMethodIds.filter(id => id !== defaultPaymentMethodId);
    const httpLimit = httpClient.getRequestingLimit();
    for (let i = 0; i < otherPaymentMethodIds.length; i++) {
        if (httpCounter.value() >= httpLimit) {
            throw `Number of HTTP requests exceeds the limit.`;
        }
        succeeded = tryCharge(auth, invoiceId, otherPaymentMethodIds[i], httpCounter);
        if (succeeded) {
            return;
        }
    }
    throw 'No payment method succeeded.';
}

/**
  * 指定した支払方法への課金を試みる
  * @param {String} oauth 認証設定
  * @param {String} invoiceId 請求書の ID
  * @param {String} paymentMethodId 支払方法の ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {boolean} succeeded 課金が成功したかどうか
  */
function tryCharge(auth, invoiceId, paymentMethodId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/invoices/${encodeURIComponent(invoiceId)}/pay`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .formParam('payment_method', paymentMethodId)
        .post(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        let errorLog = `Failed to charge by the payment method: ${paymentMethodId}, status: ${status}`;
        const error = JSON.parse(responseStr).error;
        if (error !== undefined && error.message !== undefined) {
            errorLog += `, message: ${error.message}`;
        }
        engine.log(errorLog);
        return false;
    }
    return true;
}

/**
  * 顧客の支払方法（カード）の ID 一覧を取得する
  * @param {String} oauth 認証設定
  * @param {String} customerId 顧客 ID
  * @param {Closure} httpCounter HTTP リクエスト数のカウンタ
  * @return {Array<String>} paymentMethodIds 支払方法（カード）の ID 一覧
  */
function getCustomerPaymentMethodIds(auth, customerId, httpCounter) {
    const apiUri = `https://api.stripe.com/v1/customers/${customerId}/payment_methods`;
    const response = httpClient.begin()
        .authSetting(auth) // with "Authorization: Bearer XX"
        .queryParam('type', 'card') // required
        .queryParam('limit', '100') // maximum limit
        .get(apiUri);
    httpCounter.increment();
    const status = response.getStatusCode();
    const responseStr = response.getResponseAsString();
    if (status !== 200) {
        engine.log(responseStr);
        throw `Failed to get the customer's payment methods. status: ${status}`;
    }
    const responseObj = JSON.parse(responseStr);
    const paymentMethods = responseObj.data;
    if (paymentMethods.length === 0) {
        throw 'The customer has no card-type payment methods.';
    }
    return paymentMethods.map(paymentMethod => paymentMethod.id);
}

    ]]></script>

    <icon>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADaUlEQVRYR8WXSUwTYRTH/x9bS8tS
        KCWIbLFElkgiICQdw2I0xujB6MGo0cRojOBJEy0HLyQmJlQDnoSLXDQYLibGNUoili0sAoKGICAE
        LLKWRVpKW+YzHWiBtpQpYGau897//ea9973vDYHAD+EbP7O4TSKRLp0llBwBRToIEgCErfrPgGII
        BB2U0M9Gg+jl1+JDRj7aWwLka1qiWGotAkEBADEfUQAmUFT4EL+SWnX2mCcfjwA5JU0FhNBHAKQ8
        AzubGSgld+qKVBWb+W8KkKdpekJBC7cZeIMbASn/olbddKflFiBH01hFgAu7EdyuQYEXdWrmorOm
        C8BufrlrMNdMbABYrXn5bn65sxalpHB9TzgAuG6HtX8HDceX2+ADv0T76XAA5JY0loHgFl+VHdlR
        PNYWMbdtGhyAbchIJeZpL875juLb5oTBGCC3DSsOIOdhwyVCyTNvVRXBAYgKEaFb99dbV1BCL9fd
        PfycA8jVND4FcNWTSt5+OaQiX7zrnnCY3T+dhMz4UJR++oWanilvISq1aubaCkBJYzsI0p0VVPvC
        IAnwhb8fwY3ceOhmTahq1sHf1weWZRaRISLEhYtR3zeDYLEfDGYrWBZoH55DgjwQSoUUA5MGDE0v
        usJRdGiLmAx7BvTrLhbO+N6pRBxLicCihcX0ghmx4YEwmZfRN2FAWkwILFYWUwtmyCT+6ByZh0oZ
        BpalsCxTvP8+gaMpEfAhgMnCQvNhAM2Ds84QM1o1E24HoM5vH5xJhkop48Tr+vS4nhOHnj8LGJtf
        wvFUBapbR5EaHYTkqCDOJitBhtahWWQlhGJYb0K8PBDD04uIlolR3TaKyvoRlyxo1QzZFCAjLhTn
        s6M5wYb+Ga7WvWMLGJ1bAahq0eFAdDBS9qwBdI7M4WBsKAanjFAqJOj6PQ+90QLtTz1qe22HbOOz
        HsClBKXnUrmgS1YWr7+NIz9JjoigAK6ee2ViFwBGubIazC9a8aZrHCfTIrnyGM3LKKsZxMcfkx5K
        sEkT8m1r9QmlIyvuUu1Wx6kJtzyGnmCuMDFgEsPxtmscrzrH+XKvHcPtDiK+kdzZbRhEgo/i1WEk
        3GVkAxD8OuYupZUlVJiFxN4ogq5kdghBl9L/kQmv13JHJoT8MbFDCPprtn6CCfZzupNxy8f3Hyxn
        oTBfuPFrAAAAAElFTkSuQmCC
    </icon>

</service-task-definition>
