<?xml version="1.0" encoding="UTF-8"?>
<service-task-definition>
<last-modified>2021-07-08</last-modified>
<license>(C) Questetra, In. (MIT License)</license>
<engine-type>2</engine-type>
<label>Google Sheets: Download Row Data</label>
<label locale="ja">Google スプレッドシート: 行取得</label>
<summary>Download Data in specified a row from Google Sheet.</summary>
<summary locale="ja">Google スプレッドシートから指定した行のデータを取得します。</summary>
<help-page-url>https://support.questetra.com/addons/google-sheets-rowdata-get/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/google-sheets-rowdata-get/</help-page-url>

<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2" oauth2-setting-name="https://www.googleapis.com/auth/spreadsheets.readonly">
    <label>C1: OAuth2 Setting</label>
    <label locale="ja">C1: OAuth2 設定</label>
  </config>
  <config name="conf_SheetId" required="true" form-type="TEXTFIELD">
    <label>C2: Source Spreadsheet ID</label>
    <label locale="ja">C2: スプレッドシート ID</label>
  </config>
  <config name="conf_SheetTitle" required="true" form-type="TEXTFIELD">
    <label>C3: Source Sheet Title</label>
    <label locale="ja">C3: シートタイトル</label>
  </config>
  <config name="conf_RowNo" required="true" form-type="SELECT"  select-data-type="STRING_TEXTFIELD">
    <label>C4: Row to Get (e.g. "1", "11")</label>
    <label locale="ja">C4: 取得する行 (例 "1", "11")</label>
  </config>
  <config name="conf_Range" required="true" form-type="TEXTFIELD">
    <label>C5: Column Range to Get (e.g. "A:J")(Up to 10 column)</label>
    <label locale="ja">C5: 取得する列範囲 (例 "A:J") (最大 10 列)</label>
  </config>
  <config name="conf_Column1" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_1: Data item that stores the values in the 1st column </label>
    <label locale="ja">C6_1: 列範囲のうち 1 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column2" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_2: Data item that stores the values in the 2nd column </label>
    <label locale="ja">C6_1: 列範囲のうち ２ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column3" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_3: Data item that stores the values in the 3rd column </label>
    <label locale="ja">C6_3: 列範囲のうち ３ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column4" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_4: Data item that stores the values in the 4th column </label>
    <label locale="ja">C6_4: 列範囲のうち ４ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column5" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_5: Data item that stores the values in the 5th column </label>
    <label locale="ja">C6_5: 列範囲のうち ５ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column6" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_6: Data item that stores the values in the 6th column </label>
    <label locale="ja">C6_6: 列範囲のうち ６ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column7" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_7: Data item that stores the values in the 7th column </label>
    <label locale="ja">C6_7: 列範囲のうち ７ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column8" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_8: Data item that stores the values in the 8th column </label>
    <label locale="ja">C6_8: 列範囲のうち ８ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column9" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_9: Data item that stores the values in the 9th column </label>
    <label locale="ja">C6_9: 列範囲のうち ９ 列目の値を保存するデータ項目</label>
  </config>
  <config name="conf_Column10" required="false" form-type="SELECT" select-data-type="STRING|DECIMAL|SELECT|DATE|DATETIME">
    <label>C6_10: Data item that stores the values in the 10th column </label>
    <label locale="ja">C6_10: 列範囲のうち １０ 列目の値を保存するデータ項目</label>
  </config>
</configs>

<script><![CDATA[

// OAuth2 config
// Authorization Endpoint URL: https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force
// Token Endpoint URL: https://accounts.google.com/o/oauth2/token
// Scope: https://www.googleapis.com/auth/spreadsheets.readonly
// Consumer Key: (Get by Google Developers Console)
// Consumer Secret: (Get by Google Developers Console)

const COLUMN_NUM = 10;

main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth = configs.get( "conf_OAuth2" );
  const sheetId = configs.get( "conf_SheetId" );
  const sheetTitle = configs.get( "conf_SheetTitle" );
  const rowNo = retrieveRowNo();
  const range = configs.get( "conf_Range" );

  checkRowNo( rowNo );
  const columnDefList = [];
  retrieveValueConfigs( columnDefList );
  
  
  //// == 演算 / Calculating ==
  let dataStringList = getRowData( oauth, sheetId, sheetTitle, rowNo, range );

  //// == ワークフローデータへの代入 / Data Updating ==
  if ( dataStringList.length >= 11 ) {
    dataStringList.length = COLUMN_NUM;
  }
  for (let i = 0; i < dataStringList.length; i ++){   
   setDataByLists( columnDefList[i], dataStringList[i] );
  }
}


/**
  * config から行番号 を読み出す
  * @return {Stromg} rowNo  行番号
  */
function retrieveRowNo() {
  const rowNoDef = configs.getObject( "conf_RowNo" );
  let rowNo = configs.get( "conf_RowNo" );
  if ( rowNoDef !== null ) {
    rowNo = engine.findData( rowNoDef );
  }
  return rowNo;
}


/**
  * 行番号が空、150001以上、不正な文字列であればエラーとする
  * @param {String} rowNo  行番号
  */
function checkRowNo( rowNo ) {
  if ( rowNo === "" || rowNo === null ) {
    throw "Row number is empty.";
  }
  if (rowNo > 150000) {
      throw `Row number is over 150,000.`;
  }
  if ( !isValidId(rowNo) ) {
    throw "Invalid Row number.";
  }
}


/**
  * ID が有効か（自然数か）を判定する
  * @param {String} idString  ID の文字列
  * @return {Boolean}  有効な ID かどうか
  */
function isValidId( idString ) {
  const idReg = new RegExp( '^[1-9][0-9]*$' );
  return idReg.test( idString );
}


/**
  * config の列の値を格納するデータ項目の情報を読み出し、配列に格納する
  * 以下の場合はエラーとする
  * 1. 値を保存するデータ項目が重複して設定されている
  * 2. 列の値を格納するデータ項目が一つも設定されていない
  * @param {Array<ProcessDataDefinitionView>} valueDefList  列の値を格納するデータ項目の ProcessDataDefinitionView を格納する配列
  */
function retrieveValueConfigs( columnDefList ) {
  const dataItemNumList = []; // データ項目の重複確認用
  let noDataItem = 0;  // 設定されていないデータ項目の確認用
  for (let i = 0; i < COLUMN_NUM; i++) {
    const columnConfigName = `conf_Column${i+1}`;
    const columnValueDef = configs.getObject( columnConfigName );
    const dataItemNum = configs.get( columnConfigName ); // データ項目の重複確認用

      if ( columnValueDef === null ) { // 値を保存するデータ項目が設定されていない
        noDataItem ++ ;
      }
    
      if ( dataItemNumList.indexOf( dataItemNum ) !== -1 ) { // 既に指定されているデータ項目
        throw "The same data item is set multiple times.";
    }
    columnDefList.push( columnValueDef );

  if (dataItemNum === null || dataItemNum === ""){
    dataItemNumList.push( "null" ); // データ項目の重複確認用
  }else{
    dataItemNumList.push( dataItemNum ); // データ項目の重複確認用
  }
  }
  if ( noDataItem === COLUMN_NUM ) { // 列の値を格納するデータ項目が一つも設定されていない
    throw "No Data Item is set.";
  }
}


/**
 * Google スプレッドシートの行データを取得
 * @param {String} oauth OAuth2 認証設定
 * @param {String} sheetId スプレッドシートの ID
 * @param {String} sheetTitle シート名
 * @param {String} rowNo 取得する行
 * @param {String} range 取得する列範囲
 * @return {Array<String>} jsonObj.values[0] 取得した行データ を格納した配列
 */
function getRowData( oauth, sheetId, sheetTitle, rowNo, range ) {

  rangeArr = range.split(':');

  // Method: spreadsheets.values.get
  const uri = `https://sheets.googleapis.com/v4/spreadsheets/${sheetId}/values/${sheetTitle}!${rangeArr[0]}${rowNo}:${rangeArr[1]}${rowNo}`;
  const response = httpClient.begin()
    .authSetting( oauth )
    .queryParam( "valueRenderOption", "UNFORMATTED_VALUE" )
    .queryParam( "dateTimeRenderOption", "FORMATTED_STRING" )
    .queryParam( "majorDimension", "ROWS" )
    .get( uri );
  const status = response.getStatusCode();
  const responseStr = response.getResponseAsString();
  if (status !== 200) {
    const accessLog = `---GET request--- ${status}\n${responseStr}`;
    engine.log( accessLog );
    throw `Failed to get. status:${status}`;
  }
  const jsonObj = JSON.parse( responseStr );

 if (jsonObj.values === undefined ) {
    throw `No Data in range.`;
  }

  const dataStringList = jsonObj.values[0]; 
  
  // error for over 1000 characters
  checkData(dataStringList);

  return dataStringList;
}


/**
 * 配列の要素を確認し、1000字以上のデータがあればエラー
 * @param {Array<String>} dataList データが格納された配列
 */
function checkData(dataStringList) {
  dataStringList.forEach(str => {
    if (str.length > 1000) {
      throw `The retrieved row has cells that exceed 1000 characters.`;
    }
  });
}


/**
  * データ項目に出力する
  * @param {Array<ProcessDataDefinitionView>} valueDefList  保存先データ項目の ProcessDataDefinitionView が格納された配列
  * @param {Array<String>} dataStringList  出力するデータが格納された配列
  */
function setDataByLists( valueDef, dataString ) {

    if ( valueDef !==  null ) {
      if ( valueDef.matchDataType("STRING") ) { // 保存先データ項目が文字型の場合
        // 保存先データ項目が改行に対応しておらず、保存する文字列に改行が含まれる場合のエラーは QBPMS のバリデーションに任せる
        engine.setData( valueDef, dataString );
      } else if ( valueDef.matchDataType("DECIMAL") ) { // 保存先データ項目が数値型の場合
        convertTypeAndSetData( valueDef, dataString, "DECIMAL", "Numeric" );
      } else if ( valueDef.matchDataType("SELECT") ) { // 保存先データ項目が選択型の場合
        convertTypeAndSetData( valueDef, dataString, "SELECT", "Select" );
      } else if ( valueDef.matchDataType("DATE") ) { // 保存先データ項目が日付型の場合
        convertTypeAndSetData( valueDef, dataString, "DATE", "Date" );
      } else if ( valueDef.matchDataType("DATETIME") ) { // 保存先データ項目が日時型の場合
        convertTypeAndSetData( valueDef, dataString, "DATETIME", "Datetime" );
      }
    }
}


/**
  * データ項目の型にしたがってデータを変換して出力する
  * 対応しないフィールド型の場合はエラーとする
  * 変換できない値の場合はエラーとする
  * @param {ProcessDataDefinitionView} dataDef  保存先データ項目の ProcessDataDefinitionView
  * @param {String} dataString  出力するデータ（変換前の文字列データ）
  * @param {String} dataType  保存先データ項目のデータ型
  * @param {String} dataTypeLabel  保存先データ項目のデータ型の表示名（エラー出力用）
  */
function convertTypeAndSetData( dataDef, dataString, dataType, dataTypeLabel ) {

  let convertedData;
  if ( dataString === "" || dataString === null ) { // 空値の場合は null を設定
    convertedData = null;
  } else {
    try { //  try-catch でエラーを捕捉
      switch (dataType) {
        case 'DECIMAL':
          convertedData = new java.math.BigDecimal( dataString );
          break;
        case 'SELECT': // 一致する選択肢 ID がない場合のエラーは QBPMS のバリデーションに任せる　　　　　
          convertedData = new java.util.ArrayList();
          convertedData2 = java.lang.String.valueOf( dataString );
          convertedData.add( convertedData2 );
          break;
        case 'DATE':
          if(!isNaN(dataString)){ //内部データがシリアル値（数値）の場合
            convertedData = dateFromSn( dataString );
            convertedData = java.sql.Date.valueOf( convertedData );
          } else{
            convertedData = java.sql.Date.valueOf( dataString );
          }
          break;
        case 'DATETIME':
          if(!isNaN(dataString)){ //内部データがシリアル値（数値）の場合
            convertedData = dateFromSn( dataString );
            convertedData = new java.sql.Timestamp( convertedData.getTime() );
          } else{
            const dateFormatter = new java.text.SimpleDateFormat( "yyyy/MM/dd HH:mm:ss" );
            convertedData = new java.sql.Timestamp( dateFormatter.parse( dataString ).getTime() );
          }
          break;
      }
    } catch (e) { // 変換できない値の場合はエラー
      throw `Returned value "${dataString}" cannot be saved to ${dataTypeLabel} type data item.`;
    }
  }
  engine.setData( dataDef, convertedData );
}


function convertSn2Ut(serialNumber){ // シリアル値→UNIX時間(ミリ秒)
  const COEFFICIENT = 24 * 60 * 60 * 1000; //日数とミリ秒を変換する係数
  const DATES_OFFSET = 70 * 365 + 17 + 1 + 1; //「1900/1/0」～「1970/1/1」 (日数)
  const MILLIS_DIFFERENCE = 9 * 60 * 60 * 1000; //UTCとJSTの時差 (ミリ秒)
  return (serialNumber - DATES_OFFSET) * COEFFICIENT - MILLIS_DIFFERENCE;
}


function dateFromSn(serialNumber){ // シリアル値→Date
  return new Date(convertSn2Ut(serialNumber));
} 

]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADbElEQVRYR8WXS0hUURjH/2dGJFDz
lqNimmORhAU5hRVFojgTQSTarl3azN5x1aboQdAqGoVc2AyOFoGCpQuN7E6MRIVW4BBZUqJkbYTw
+H7M48Sdx3Ve986d0crFuDjfd8/v+5/vcQ7Bf/4jyezPWfX1IKQKDDoAHIj/P8AwBoCCYAwETnqF
71f63YQAXEc1B19aE8DMAOGUfZhRgFig8rTQRieV85EF4Gw1DQC5r3zj6K0YBUMjNTn6pCAkATir
3gJCmpRFnNDKQo18czyruACcVW8HIZcTfjYpA2anRkdjtEsMQHjkvefuoqawQvTxMV8w54S8Y2DM
/4uhmRGUZhfj9gcbBn+8lcZirIWaHOZwgwiAwJmrOkIGzro2lOeUJozzxcwITuYf8ts1v2lB39Sw
HMTF8JwQAQLZrp4KT7hkAbj0LMxvLOHquwfonuQlIBiFyrsvVB2bADbDTQA3wr1SARD8F9zLuD7a
jq6JQSklblEjL+yHTQCrQWgk2akC7FCnY2d6hug+uzqHSy+vSapAjY5dIkCwwz2LtlaqwNz6Ihbd
yxHuK551nHpqSpgLfgWkal4pQLxdlj1rKOqqTVgRAQCbwQmgKlUFUgIAhqmRrw4pMA1CtHIAK541
LGxEyhxtr1apkbsjMC4SK4AxauKPhhRg8aIIPwLX7294NPEch3fvR/d3HpUFOuzJ0IhuHuYF//M9
us/eUQYgjE8jT5ICGJoZhU5TivbxPpwvPo2izLxNAJ8X9omBFAGs+oRHICjw6tdHHNMcRNvnXtRq
z2BvZr4I4PZ58PBLfxIAzEWNDp3iJBQAeiYdOJJzAJ1fB2AoOoHCzFwRwOvzon/6dRIAkUkYd/RG
58Do7DgqcsvQ+qkHdSWV0GYVRChwz/VEOUBwMIWqQLhqyTaibU9CxvxDSXErFspwyb0q3VgAqAiB
RkkZMsxTE++v120ZRik0ojjDSBjH3rTp8IH0V1oxwzzUnpKYcRxoyZEXkqELrTieVyYru9Si0DW1
j+tjl4NnH1qQvZKltLO8kyi9JEBwOm7/pZSxTmpyNETz/atreUzksgqEFv0XFRB79E1J8dEICQfW
kNLDRIQIPM3MYDArBhE2JhCeZpYtPc2iIw0ogmoQogMYB5DygA1zAYSCMeGR6pSLWHEOKJZ5i4Z/
AEwJzTC2ALrNAAAAAElFTkSuQmCC
</icon>

</service-task-definition>
