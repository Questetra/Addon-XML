<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<label>OneDrive: Upload large File</label>
<label locale="ja">OneDrive: 大容量ファイルアップロード</label>
<last-modified>2020-03-23</last-modified>
<license>(C) Questetra, Inc. (MIT License)</license>
<engine-type>1</engine-type>
<summary>Upload large file to the specified folder on OneDrive.</summary>
<summary locale="ja">OneDrive の指定フォルダにファイルをアップロードします。</summary>
<configs>
  <config name="conf_OAuth2" required="true" form-type="OAUTH2">
    <label>C1: OAuth2 Setting Name</label>
    <label locale="ja">C1: OAuth2 設定名</label>
  </config>
  <config name="uploadedFile" required="true" form-type="SELECT" select-data-type="FILE">
    <label>C2: File type data item whose attached files will be uploaded</label>
    <label locale="ja">C2: アップロードするファイルが保存されているファイル型データ項目</label>
  </config>
  <config name="uploadedFolderId" form-type="SELECT" select-data-type="STRING_TEXTFIELD" editable="true">
    <label>C3: Folder ID that files will be uploaded (Root folder if blank)</label>
    <label locale="ja">C3: ファイルをアップロードするフォルダの ID (指定がない場合は、ルートフォルダ)</label>
  </config>
  <config name="fileId" form-type="SELECT" select-data-type="STRING">
    <label>C4: String type data item that will save uploaded file ids</label>
    <label locale="ja">C4: ファイル ID を保存する文字型データ項目</label>
  </config>
  <config name="fileUrl" form-type="SELECT" select-data-type="STRING">
    <label>C5: String type data item that will save uploaded file urls</label>
    <label locale="ja">C5: ファイル URL を保存する文字型データ項目</label>
  </config>
</configs>
<help-page-url>https://support.questetra.com/addons/services/onedrive-upload/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/onedrive-upload/</help-page-url>


<script><![CDATA[
// OAuth2 config sample at [OAuth 2.0 Setting]
// - Authorization Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
// - Token Endpoint URL: https://login.microsoftonline.com/common/oauth2/v2.0/token
// - Scope: https://graph.microsoft.com/Files.ReadWrite offline_access
// - Consumer Key: (Get by Microsoft Azure Active Directory)
// - Consumer Secret: (Get by Microsoft Azure Active Directory)
main();
function main(){
  //// == 工程コンフィグの参照 / Config Retrieving ==
  const oauth2 = configs.get("conf_OAuth2");
  const idDataDef = configs.getObject("fileId");
  const urlDataDef = configs.getObject("fileUrl");

  //// == ワークフローデータの参照 / Data Retrieving ==
  const token = httpClient.getOAuth2Token( oauth2 );
  const folderId = folderIdDecision();
  const files = engine.findData(configs.getObject("uploadedFile")  );
  if (files === null) {
    setData(idDataDef,[""]);
    setData(urlDataDef,[""]);
    return;
  } 

  //// == 演算 / Calculating ==

  const packetMaxSize = 3276800; //size of each packet,must be a multiple of 327680
  fileCheck(files,packetMaxSize);

  const upUrl = createSession(token,files.get(0),folderId);

  //let uploadedFileData = ["",""]; //0:ID,1:URL
  let json = {};
  let uploadReturn = [0,["",""]]; //[range,[ID,URL]]
  const fileSize = files.get(0).getLength();

  fileRepository.readFile(files.get(0), packetMaxSize, function(packet){
    uploadReturn = upload(token,upUrl,uploadReturn[0],packet,fileSize,packetMaxSize);
  });

  //// == ワークフローデータへの代入 / Data Updating ==
  setData(idDataDef,uploadReturn[1][0]);
  setData(urlDataDef,uploadReturn[1][1]);
}

/**
  * フォルダのIDをconfigから読み出して出力する。空の場合は"root"とする。
  * @return {String}  フォルダの ID
  */
function folderIdDecision(){
  let folderId = "";
  const folderIdDef = configs.getObject("uploadedFolderId");
  if(folderIdDef === null){
    folderId = configs.get( "uploadedFolderId");
  }else{
    folderId = engine.findData(folderIdDef);
  }
  if(folderId == "" || folderId == null){
    //when folder id isn't set, set "root"
    folderId = "root";
  }
  return folderId;
}

/**
  * アップロードしようとするファイルの数・サイズが適切かどうかチェックする
  * @param {Array<File>}  アップロードしようとするファイル
  */
function fileCheck(files,packetMaxSize){
  const fileNum = files.size(); //number of files
  if(fileNum > 1){
    throw "This task can upload one file at once.";
  }
  const limitSize = packetMaxSize * (httpClient.getRequestingLimit() - 1);
  if(files.get(0).getLength() > limitSize){
    throw "File size is too large";
  }
  
}

function createSession(token,file,folderId){
  const url = "https://graph.microsoft.com/v1.0/me/drive/items/" + folderId + ":/" + file.getName() + ":/createUploadSession";
  const body = {
    "item": {
      "@microsoft.graph.conflictBehavior": "replace",
      "name" : file.getName()
    }
  };
  let response = httpClient.begin()
    .bearer(token)
    .body(JSON.stringify(body), "application/json; charset=UTF-8")
    .post(url);

  const status = response.getStatusCode();
  const jsonStr = response.getResponseAsString();
  if(status >= 300){
    throw "failed to create upload session: " + "\n status:" + status + "\n" + jsonStr;
  }
  return JSON.parse(jsonStr).uploadUrl;
}

function upload(token,upUrl,range,packet,fileSize,packetMaxSize){
  let packetSize = 0;
  if(fileSize - range < packetMaxSize){
    let temp = fileSize;
    while(temp > packetMaxSize){
      temp -= packetMaxSize;
    }
    packetSize = temp;
  }else{
    packetSize = packetMaxSize;
  }
  const rangetxt = "bytes " + range + "-" + (range + packetSize - 1) + "/" + fileSize;
  let sending = httpClient.begin()
    .header("Content-Range", rangetxt )
    .body(packet,"application/octet-stream")
    .put(upUrl);
    
  const status = sending.getStatusCode();
  const responseStr = sending.getResponseAsString();
  if(status >= 300){
    throw "failed to upload: " + "\n status:" + status + "\n" + response.getResponseAsString();
  }else if(status === 202){
    range += packetSize;
    engine.log(responseStr);
    return [range,["",""]];
  }else{
    const json = JSON.parse(responseStr);
    //uploadedFileData[0] = json.id;
    //uploadedFileData[1] = json.webUrl;
    engine.log(responseStr);
    engine.log(173);
    return [range,[json.id,json.webUrl]];
  }
}

/**
  * アップロードしたデータのIDとURLをデータ項目に出力する。
  * @param {ProcessDataDefinitionView} dataDef  データ項目の ProcessDataDefinitionView
  * @param {Array<String>} uploadedFileData  アップロードしたファイルの情報が格納されている二次元配列
  */
function setData(dataDef,uploadedFileData){
  engine.log(184);
  if(dataDef !== "" && dataDef !==  null){
    engine.setData(dataDef,uploadedFileData);
  }
}
  ]]>
</script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAADXUlEQVRYR8WXW0hUURSG/33GbC5e
8pJJF6nM6YKUmsFAIAZSONOM4FtqL/mQVg9GhXR5iCIiEAqF9KEMsvKpi06OZoRPGaRmVoSGU4om
aqaMzeXYOLPjTJ7R41w8k8bZLwNn1r/Wt9dee+29CSQeRHR8vVEpd7vzGTAHKKXpADYDiJnTTwEY
IIR0u+FuYxnmCYx6uxjfSwKotE2JbuoqB0EJALkYpwBYUNQwRHbDZtKNBtMEBVBqG0ooSAUAlcjA
i81sBPSs3ZRXE0gfEECuM94mlJb+Y2CBjBJSzTbpT/jz5RdAoTU+BGjBSgSf90EeOUz6wsU+fQBW
cuaLg/nLhABgbs2rV3bmQm8EtHRhTXgBPNUOV/8yCk4st42BbBu/O7wAitzGmyAoE+tlWXYUtxzN
htOcj78AeqNS4aI/Q9jneH5Ng0x1DCLkMlhZFz59m0ZZ9UfPr4jBOmQkjmtWHgC5rqGIUFIXTHih
QI3UzVHoH7HhsCYROzZF+JgPjNqxq/iViPgAJfQo25T3wAOg1BnvUkqP+VNGKsLQXpmF5PXCXmR1
zKJvyAqL3Yn4qHCoN0ZCHs6gvm0YxRXdS0IQQmrtTfpiD4BC2/gOANfffUbjVQ1yMtYKvnNZGJlg
kZESDeVqGSy2WbzoHPdkpdtswcnKniUBAHQ7TIYMHmBywcEiEPfey0FSgsL7zWJzosc8jazdcQI7
l5tiwvIbUaowTE47UfXMjMqnX4OBTDlMhlgegC62TNmgwp0z6UhLjsaqMMbzN5f25o4x5O5bhwhF
WNBZ2mdcyDn3Gu/NloB2DpOBBAToqs7GzqRIr/j7BIu+4V9I2xqN2KhwMSlGbcsgTlV9EAXgswSW
Bp135pQCrV3jOJSZICowb2RjXWjtHEfh9U5/OsES+BThj8daqOQyb+q/DFuRkbImJADOmKuNg+Xt
ePOZm6NgzBehv21YfzETek0iGIZgxun2OMjeEx8yACfIv/wWLR1jAq1gGwZqROePqLE/NRZjUzOo
ezmE++V7ER8tbv35aFzm0o63+YALGlEorfhS0XZsSVSKysTgmANX6nr92QpbMWch7WHEncFSH8dc
FiS9kPALJemVjIeQ9FL6PzIR8rWch5D0YcJDSPo0E3QQqR6nolreMoz+ACVfiTBvFfnjAAAAAElF
TkSuQmCC
</icon>

</service-task-definition>
