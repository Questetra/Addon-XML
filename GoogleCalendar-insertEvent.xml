<?xml version="1.0" encoding="UTF-8"?><service-task-definition>
<last-modified>2018-12-05</last-modified>
<engine-type>1</engine-type>
<label>Google Calendar: Insert Event</label>
<label locale="ja">Google Calendar: 予定追加</label>
<summary>Insert an event to Google Calendar.</summary>
<summary locale="ja">Google Calendarに予定を追加します。</summary>
<help-page-url>https://support.questetra.com/addons/services/googlecalendar-insertevent/</help-page-url>
<help-page-url locale="ja">https://support.questetra.com/ja/addons/services/googlecalendar-insertevent/</help-page-url>

<configs>
  <config name="conf_User" required="true" form-type="QUSER">
    <label>C1:User Who Connects with Google Calendar</label>
    <label locale="ja">C1:Google Calendar に接続するユーザ</label>
  </config>
  <config name="conf_DataIdB" form-type="TEXTFIELD">
    <label>C2:Calendar ID(When this is empty,inserted to the primary calendar)</label>
    <label locale="ja">C2:Calendar ID(空白の場合プライマリのカレンダーに追加されます)</label>
  </config>
  <config name="conf_DataIdC" required="true" el-enabled="true" form-type="TEXTFIELD">
    <label>I1:Event Title</label>
    <label locale="ja">I1:予定タイトル</label>
  </config>
  <config name="conf_DataIdD" required="true" form-type="SELECT" select-data-type="DATETIME">
    <label>I2:Select DATETIME DATA for Event Start</label>
    <label locale="ja">I2:予定開始時刻が格納されている日時型データを選択してください</label>
  </config>
  <config name="conf_DataIdE" required="false" form-type="SELECT"  select-data-type="DATETIME">
    <label>I3:Select DATETIME DATA for Event End (Not-selected +1:00)</label>
    <label locale="ja">I3:予定終了時刻が格納されている日時型データを選択してください（未設定の場合、+1:00）</label>
  </config>
  <config name="conf_DataIdF" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>I4:Location</label>
    <label locale="ja">I4:場所情報</label>
  </config>
  <config name="conf_DataIdG" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>I5:Description</label>
    <label locale="ja">I5:説明情報</label>
  </config>
  <!--
  <config name="conf_EventSource" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C6:EventSource Title (e.g. "BPMS" "#{processInstanceTitle}")</label>
    <label locale="ja">C6情報元のタイトル（例 "BPMS" "#{processInstanceTitle}"）</label>
  </config>
  <config name="conf_EventSourceUrl" required="false" el-enabled="true" form-type="TEXTFIELD">
    <label>C7:EventSource URL (e.g. "${var[applicationRoot]}")</label>
    <label locale="ja">C7:情報元のURL（例 "${var[applicationRoot]}"）</label>
  </config>
  -->
</configs>


<script><![CDATA[
// Insert Event to Google Calendar via Calendar API v3 (ver. 20161025)
// (c) 2016, Questetra, Inc. (the MIT License)

//// == 工程コンフィグの参照 / Config Retrieving ==
var userId = configs.get( "conf_User" );
var quser = quserDao.findById(parseInt(userId));
if (quser == null) {
  throw "User not found:" + userId;
}
var dataIdB = configs.get( "conf_DataIdB" );
var dataIdC = configs.get( "conf_DataIdC" );
if (dataIdC == "" ||dataIdC == null) {
    throw "Event Title is blank";
  }
var dataIdD = configs.get( "conf_DataIdD" );
var dataIdE = configs.get( "conf_DataIdE" );
var dataIdF = configs.get( "conf_DataIdF" );
var dataIdG = configs.get( "conf_DataIdG" );
//var eventSource = configs.get( "conf_EventSource" ) + "";
//var eventSourceUrl = configs.get( "conf_EventSourceUrl" ) + "";

//// == ワークフローデータの参照 / Data Retrieving ==
var calendarId = "";
if(dataIdB instanceof java.util.ArrayList ){
  calendarId = dataIdB.get(0).getValue() + "";
}else if( dataIdB instanceof java.lang.String ){
  calendarId = dataIdB+ "";
}
if (calendarId == "" ||calendarId == null) {
    calendarId = "primary";
  }
var eventSummary =dataIdC + "";
var eventStart = engine.findDataByNumber( dataIdD ).toString() + "";
if (eventStart == "" ||eventStart == null) {
    throw "Event Start Date is blank";
  }
eventStart = eventStart.replace(" ", "T") + ":00";
if( dataIdE !== "" && engine.findDataByNumber( dataIdE ) !== null ){
  var eventEnd = engine.findDataByNumber( dataIdE ).toString() + "";
  eventEnd = eventEnd.replace(" ", "T") + ":00";
}else{
  var eventEnd = engine.findDataByNumber( dataIdD ).addHours(1).toString() + "";
  eventEnd = eventEnd.replace(" ", "T") + ":00";
}
//日時の検証
var sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
var startDate = sdf.parse(eventStart);
var endDate = sdf.parse(eventEnd);
if (endDate.before(startDate)){
  throw "Event End Date comes before Event Start Date";
}
var eventLocation = "";
if( dataIdF !== "" && dataIdF !== null ){
  eventLocation = dataIdF + "";
}
var eventDescription = "";
if( dataIdG !== "" && dataIdG !== null ){
  eventDescription =dataIdG + "";
}

var timeZone = engine.getTimeZoneOffsetInMinutes()/60;
if (timeZone > 0){
  timeZone = "+" + timeZone
}
var eventTimeZone = "GMT" + timeZone + ":00";
//// == 演算 / Calculating ==
var accessLog = "";
var token;
try{
    token = httpClient.getGoogleOAuth2Token(quser, "Calendar");
  }catch(e){
    throw "This User has not connected with Google Calendar."
  }
var uri = "https://www.googleapis.com/calendar/v3/calendars/";
uri += calendarId;
uri += "/events";

var myObj = {};
myObj.summary = eventSummary;
myObj.location = eventLocation;
myObj.description = eventDescription;
myObj.start = {};
myObj.start.dateTime = eventStart;
myObj.start.timeZone = eventTimeZone;
myObj.end = {};
myObj.end.dateTime = eventEnd;
myObj.end.timeZone = eventTimeZone;
myObj.source = {};
/* if( eventSource !== "" ){
  myObj.source.title = eventSource;
}
if( eventSourceUrl !== "" ){
  myObj.source.url = eventSourceUrl;
}
*/
//debug
//accessLog += JSON.stringify( myObj ) + "\n"; 

var response = httpClient.begin()
  .bearer( token )
  .body( JSON.stringify( myObj ), "application/json" )
  .post( uri );
var status = response.getStatusCode();
accessLog += "---POST request--- " + status + "\n";
accessLog += response.getResponseAsString() + "\n";

//// == ログの出力 / Log Output ==
if (status >= 300) {
    throw accessLog;
}
engine.log(accessLog);
]]></script>


<icon>
iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAACbElEQVRYR+2XTW7aQBTH3/MSL2pOkPQEpSeos2SMVHKCJDcgJ2hygiYnSHqCEAmP2dWcIBwhPQGuBOw8r/pbnmowNnIlJ+qCWZmZ8Xs/v2+YGlYURRMi+m6MOU+SZFp3LYqipYiI1vpz3flwOBx7nvckIlda68e6O9wEoJRKmfmLiNxqrW8aAAT7cRzXylFK3TDzNxFZaK3DRoDRaBTmeV4IwxKRX57nPVoAIpqKyAdXQJIkiyiK/gJUZTDzbyIaWwBjzCUzn1RlFORWkANwS0ShA1A8uy/jq12AGhkLIoIVCwvY56qMQwADZv4KF1gY9+XNZtP3fX+FPffZ+QgX4JmIloBpC7AkoiuYMMuyh36/j99BxYfXxphX7Hmed4qArZxnq9VqEAQB5EyZGUH4qRVAGQevzAzfw49QsLdEpMgOZh43nB+UATfWuqApM7re3wE4lCpdK7YpfgQ4WqC1BcIwDHq93oWtBcaYH/P5vKgB1aWUuiSik+12e5+madZwp+gzrQBK5T+ZeeAIy5j5fDabpXYP93zff0LVLGvDmXvugvxTFti2LCL3WuuJ83unw9nOZxUxczcAEIhOt16vl9akbhOyCgGG0szME5i3U4CK+dCkXkTkWWu9V4KteTsHUEohBh4QCyKCXh9qrdGkdtabAlQ62nUcx3fvBmAVlZZAGkkcx/13B4BCa+Y8zz9W60HnLlBK3THzhYicwedlXXjBjFA3jHYOYEfr0tSpiJxCedO03DkAFAMC+U1EyATMdtO6ACzdg8DEvUldlrgubFWKux5GjgBHCzRagIgwPOzV9rcIwjJLgv/if8EfAsmFPyUl4jkAAAAASUVORK5CYII=
</icon>

</service-task-definition>
